
MERC2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800f7f8  0800f7f8  0001f7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fea0  0800fea0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fea0  0800fea0  0001fea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fea8  0800fea8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800feac  0800feac  0001feac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800feb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00004e6c  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005064  20005064  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c21d  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003da8  00000000  00000000  0003c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c0  00000000  00000000  00040230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001359  00000000  00000000  00041af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025a29  00000000  00000000  00042e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e240  00000000  00000000  00068872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db3ad  00000000  00000000  00086ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008020  00000000  00000000  00161e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00169e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7dc 	.word	0x0800f7dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800f7dc 	.word	0x0800f7dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_rpm>:
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
//	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
double get_rpm(int motor){
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
//	const float timeout = (float)(1/osKernelGetSysTimerFreq())*160000;
////	reset_tick();
	switch (motor){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d029      	beq.n	8001052 <get_rpm+0x62>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b03      	cmp	r3, #3
 8001002:	dc36      	bgt.n	8001072 <get_rpm+0x82>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d003      	beq.n	8001012 <get_rpm+0x22>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d010      	beq.n	8001032 <get_rpm+0x42>
 8001010:	e02f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8001012:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <get_rpm+0x1d8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <get_rpm+0x30>
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	e000      	b.n	8001022 <get_rpm+0x32>
 8001020:	2200      	movs	r2, #0
 8001022:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <get_rpm+0x1dc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8001028:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <get_rpm+0x1d8>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <get_rpm+0x1e0>)
 800102e:	701a      	strb	r2, [r3, #0]
			break;
 8001030:	e01f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8001032:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <get_rpm+0x1e4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <get_rpm+0x50>
 800103a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103e:	e000      	b.n	8001042 <get_rpm+0x52>
 8001040:	2200      	movs	r2, #0
 8001042:	4b65      	ldr	r3, [pc, #404]	; (80011d8 <get_rpm+0x1e8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8001048:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <get_rpm+0x1e4>)
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <get_rpm+0x1e0>)
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e00f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8001052:	4b62      	ldr	r3, [pc, #392]	; (80011dc <get_rpm+0x1ec>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <get_rpm+0x70>
 800105a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105e:	e000      	b.n	8001062 <get_rpm+0x72>
 8001060:	2200      	movs	r2, #0
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <get_rpm+0x1f0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8001068:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <get_rpm+0x1ec>)
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <get_rpm+0x1e0>)
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <get_rpm+0x1e0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f8f4 	bl	8001264 <ResetLoop>
//	uint32_t a=osKernelGetTickCount();
	uint32_t a=xTaskGetTickCount();
 800107c:	f007 fbaa 	bl	80087d4 <xTaskGetTickCount>
 8001080:	60f8      	str	r0, [r7, #12]
//	TickType_t a = pdTICKS_TO_MS( xTaskGetTickCount());
//	uint32_t a= osKernelSysTick();
//	UARTprintf("tick: %d \n",a);

	while(xTaskGetTickCount()- a <= 20){
 8001082:	e029      	b.n	80010d8 <get_rpm+0xe8>
		switch (motor){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <get_rpm+0xca>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b03      	cmp	r3, #3
 800108e:	dc1b      	bgt.n	80010c8 <get_rpm+0xd8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <get_rpm+0xae>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d007      	beq.n	80010ac <get_rpm+0xbc>
 800109c:	e014      	b.n	80010c8 <get_rpm+0xd8>
		case MOTOR_1:
			cnt = __HAL_TIM_GET_COUNTER(&htim1);
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <get_rpm+0x1dc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b4f      	ldr	r3, [pc, #316]	; (80011e4 <get_rpm+0x1f4>)
 80010a8:	801a      	strh	r2, [r3, #0]
			break;
 80010aa:	e00d      	b.n	80010c8 <get_rpm+0xd8>

		case MOTOR_2:
			cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <get_rpm+0x1e8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b4b      	ldr	r3, [pc, #300]	; (80011e4 <get_rpm+0x1f4>)
 80010b6:	801a      	strh	r2, [r3, #0]
			break;
 80010b8:	e006      	b.n	80010c8 <get_rpm+0xd8>

		case MOTOR_3:
			cnt = __HAL_TIM_GET_COUNTER(&htim4);
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <get_rpm+0x1f0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b48      	ldr	r3, [pc, #288]	; (80011e4 <get_rpm+0x1f4>)
 80010c4:	801a      	strh	r2, [r3, #0]
			break;
 80010c6:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 80010c8:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <get_rpm+0x1f4>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <get_rpm+0x1e0>)
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f892 	bl	80011fc <CountLoop>
	while(xTaskGetTickCount()- a <= 20){
 80010d8:	f007 fb7c 	bl	80087d4 <xTaskGetTickCount>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b14      	cmp	r3, #20
 80010e4:	d9ce      	bls.n	8001084 <get_rpm+0x94>
	}
//	UARTprintf("loop: %d, \t cnt: %d \r\n",loop,cnt);
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*50*60;
 80010e6:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <get_rpm+0x1f8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	a331      	add	r3, pc, #196	; (adr r3, 80011b8 <get_rpm+0x1c8>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <get_rpm+0x1e0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d008      	beq.n	800111c <get_rpm+0x12c>
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <get_rpm+0x1f4>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001112:	33ff      	adds	r3, #255	; 0xff
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa05 	bl	8000524 <__aeabi_i2d>
 800111a:	e004      	b.n	8001126 <get_rpm+0x136>
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <get_rpm+0x1f4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ef 	bl	8000504 <__aeabi_ui2d>
 8001126:	4622      	mov	r2, r4
 8001128:	462b      	mov	r3, r5
 800112a:	f7ff f8af 	bl	800028c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a322      	add	r3, pc, #136	; (adr r3, 80011c0 <get_rpm+0x1d0>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fb86 	bl	800084c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <get_rpm+0x1fc>)
 800114e:	f7ff fa53 	bl	80005f8 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <get_rpm+0x200>)
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4922      	ldr	r1, [pc, #136]	; (80011f4 <get_rpm+0x204>)
 800116a:	e9c1 2300 	strd	r2, r3, [r1]
	rpm=(rpm>1000)?0:rpm;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <get_rpm+0x204>)
 8001170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <get_rpm+0x208>)
 800117a:	f7ff fccd 	bl	8000b18 <__aeabi_dcmpgt>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <get_rpm+0x19e>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e002      	b.n	8001194 <get_rpm+0x1a4>
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <get_rpm+0x204>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	4917      	ldr	r1, [pc, #92]	; (80011f4 <get_rpm+0x204>)
 8001196:	e9c1 2300 	strd	r2, r3, [r1]
	return rpm;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <get_rpm+0x204>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80011a4:	eeb0 0a47 	vmov.f32	s0, s14
 80011a8:	eef0 0a67 	vmov.f32	s1, s15
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdb0      	pop	{r4, r5, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40efbd00 	.word	0x40efbd00
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40e6f300 	.word	0x40e6f300
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000280 	.word	0x20000280
 80011d0:	20000228 	.word	0x20000228
 80011d4:	20000001 	.word	0x20000001
 80011d8:	200002c8 	.word	0x200002c8
 80011dc:	20000002 	.word	0x20000002
 80011e0:	20000310 	.word	0x20000310
 80011e4:	20000220 	.word	0x20000220
 80011e8:	20000224 	.word	0x20000224
 80011ec:	40490000 	.word	0x40490000
 80011f0:	404e0000 	.word	0x404e0000
 80011f4:	20000218 	.word	0x20000218
 80011f8:	408f4000 	.word	0x408f4000

080011fc <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	717b      	strb	r3, [r7, #5]
	if (!flag){
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	f083 0301 	eor.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <CountLoop+0x60>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	429a      	cmp	r2, r3
 8001220:	d204      	bcs.n	800122c <CountLoop+0x30>
			loop++;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <CountLoop+0x64>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <CountLoop+0x64>)
 800122a:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <CountLoop+0x60>)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 8001232:	e00c      	b.n	800124e <CountLoop+0x52>
		if(cnt>preCnt){	//
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <CountLoop+0x60>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	88fa      	ldrh	r2, [r7, #6]
 800123a:	429a      	cmp	r2, r3
 800123c:	d904      	bls.n	8001248 <CountLoop+0x4c>
			loop++;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <CountLoop+0x64>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <CountLoop+0x64>)
 8001246:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <CountLoop+0x60>)
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	8013      	strh	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000222 	.word	0x20000222
 8001260:	20000224 	.word	0x20000224

08001264 <ResetLoop>:
void ResetLoop(bool flag){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	loop=0;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <ResetLoop+0x30>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
	preCnt=(flag)?65535:0;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <ResetLoop+0x1c>
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	e000      	b.n	8001282 <ResetLoop+0x1e>
 8001280:	2200      	movs	r2, #0
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <ResetLoop+0x34>)
 8001284:	801a      	strh	r2, [r3, #0]
//	if(!flag){
//		preCnt=0;
//	}else{
//		preCnt=65535;
//	}
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000224 	.word	0x20000224
 8001298:	20000222 	.word	0x20000222
 800129c:	00000000 	.word	0x00000000

080012a0 <pid_config>:
bool flag_x=false;
double Vd=0;
int gripper_mode=0;
uint8_t rx_data;

void pid_config(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	pid.Kp=0.3;
 80012a4:	491a      	ldr	r1, [pc, #104]	; (8001310 <pid_config+0x70>)
 80012a6:	a314      	add	r3, pc, #80	; (adr r3, 80012f8 <pid_config+0x58>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	e9c1 2300 	strd	r2, r3, [r1]
	pid.Ki=0.2;
 80012b0:	4917      	ldr	r1, [pc, #92]	; (8001310 <pid_config+0x70>)
 80012b2:	a313      	add	r3, pc, #76	; (adr r3, 8001300 <pid_config+0x60>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid.Kd=0.005;
 80012bc:	4914      	ldr	r1, [pc, #80]	; (8001310 <pid_config+0x70>)
 80012be:	a312      	add	r3, pc, #72	; (adr r3, 8001308 <pid_config+0x68>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid.target_val_1=V1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <pid_config+0x74>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	4910      	ldr	r1, [pc, #64]	; (8001310 <pid_config+0x70>)
 80012d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid.target_val_2=V2;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <pid_config+0x78>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	490d      	ldr	r1, [pc, #52]	; (8001310 <pid_config+0x70>)
 80012dc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid.target_val_3=V3;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <pid_config+0x7c>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	490a      	ldr	r1, [pc, #40]	; (8001310 <pid_config+0x70>)
 80012e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID_init(&pid);
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <pid_config+0x70>)
 80012ee:	f001 fb29 	bl	8002944 <PID_init>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	33333333 	.word	0x33333333
 80012fc:	3fd33333 	.word	0x3fd33333
 8001300:	9999999a 	.word	0x9999999a
 8001304:	3fc99999 	.word	0x3fc99999
 8001308:	47ae147b 	.word	0x47ae147b
 800130c:	3f747ae1 	.word	0x3f747ae1
 8001310:	20000440 	.word	0x20000440
 8001314:	200004c0 	.word	0x200004c0
 8001318:	200004c8 	.word	0x200004c8
 800131c:	200004d0 	.word	0x200004d0

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f002 f9a4 	bl	8003670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f87a 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 fb1a 	bl	8001964 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001330:	f000 f90c 	bl	800154c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001334:	f000 f962 	bl	80015fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001338:	f000 f9b4 	bl	80016a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800133c:	f000 fa06 	bl	800174c <MX_TIM5_Init>
  MX_TIM9_Init();
 8001340:	f000 fa84 	bl	800184c <MX_TIM9_Init>
  MX_I2C1_Init();
 8001344:	f000 f8d4 	bl	80014f0 <MX_I2C1_Init>
  MX_UART5_Init();
 8001348:	f000 fae2 	bl	8001910 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1);
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <main+0xc4>)
 800134e:	f001 fae3 	bl	8002918 <PCA9685_Init>

  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 100);
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <main+0xc8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2264      	movs	r2, #100	; 0x64
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, 100); //motor 2
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <main+0xc8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2264      	movs	r2, #100	; 0x64
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, 100); //motor 3
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <main+0xcc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2264      	movs	r2, #100	; 0x64
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
//  	HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_SET);
//  	HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, GPIO_PIN_SET);
//  	HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, GPIO_PIN_SET);


    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800136a:	2108      	movs	r1, #8
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <main+0xc8>)
 800136e:	f004 fba1 	bl	8005ab4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001372:	210c      	movs	r1, #12
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <main+0xc8>)
 8001376:	f004 fb9d 	bl	8005ab4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800137a:	2100      	movs	r1, #0
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <main+0xcc>)
 800137e:	f004 fb99 	bl	8005ab4 <HAL_TIM_PWM_Start>

    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001382:	2104      	movs	r1, #4
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <main+0xd0>)
 8001386:	f004 fd03 	bl	8005d90 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800138a:	2104      	movs	r1, #4
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <main+0xd4>)
 800138e:	f004 fcff 	bl	8005d90 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001392:	2104      	movs	r1, #4
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <main+0xd8>)
 8001396:	f004 fcfb 	bl	8005d90 <HAL_TIM_Encoder_Start>

//    UARTStdioConfig(USART2,true);

    __HAL_UART_ENABLE_IT(&huart5, UART_IT_RXNE);
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <main+0xdc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <main+0xdc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	60da      	str	r2, [r3, #12]
//    PCA9685_SetServoAngle(3, 0);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013aa:	f005 fed5 	bl	8007158 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myButtons */
  myButtonsHandle = osMessageQueueNew (200, sizeof(char), &myButtons_attributes);
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <main+0xe0>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	20c8      	movs	r0, #200	; 0xc8
 80013b4:	f005 ffc7 	bl	8007346 <osMessageQueueNew>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <main+0xe4>)
 80013bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CONTROL */
  CONTROLHandle = osThreadNew(StartControl, NULL, &CONTROL_attributes);
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <main+0xe8>)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4812      	ldr	r0, [pc, #72]	; (800140c <main+0xec>)
 80013c4:	f005 ff12 	bl	80071ec <osThreadNew>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <main+0xf0>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* creation of PID */
  PIDHandle = osThreadNew(StartPID, NULL, &PID_attributes);
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <main+0xf4>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <main+0xf8>)
 80013d4:	f005 ff0a 	bl	80071ec <osThreadNew>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <main+0xfc>)
 80013dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013de:	f005 fedf 	bl	80071a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <main+0xc2>
 80013e4:	2000022c 	.word	0x2000022c
 80013e8:	20000358 	.word	0x20000358
 80013ec:	200003a0 	.word	0x200003a0
 80013f0:	20000280 	.word	0x20000280
 80013f4:	200002c8 	.word	0x200002c8
 80013f8:	20000310 	.word	0x20000310
 80013fc:	200003e8 	.word	0x200003e8
 8001400:	0800f870 	.word	0x0800f870
 8001404:	20000438 	.word	0x20000438
 8001408:	0800f828 	.word	0x0800f828
 800140c:	08001c9d 	.word	0x08001c9d
 8001410:	20000430 	.word	0x20000430
 8001414:	0800f84c 	.word	0x0800f84c
 8001418:	08001d59 	.word	0x08001d59
 800141c:	20000434 	.word	0x20000434

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2230      	movs	r2, #48	; 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f009 fd07 	bl	800ae42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <SystemClock_Config+0xc8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <SystemClock_Config+0xc8>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <SystemClock_Config+0xc8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <SystemClock_Config+0xcc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a20      	ldr	r2, [pc, #128]	; (80014ec <SystemClock_Config+0xcc>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <SystemClock_Config+0xcc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2310      	movs	r3, #16
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001490:	2308      	movs	r3, #8
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001494:	2340      	movs	r3, #64	; 0x40
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800149c:	2304      	movs	r3, #4
 800149e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fd61 	bl	8004f6c <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b0:	f000 fc6e 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 ffc3 	bl	800545c <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014dc:	f000 fc58 	bl	8001d90 <Error_Handler>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	; 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40007000 	.word	0x40007000

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_I2C1_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <MX_I2C1_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_I2C1_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MX_I2C1_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_I2C1_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_I2C1_Init+0x50>)
 800152e:	f002 fb79 	bl	8003c24 <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001538:	f000 fc2a 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000022c 	.word	0x2000022c
 8001544:	40005400 	.word	0x40005400
 8001548:	00061a80 	.word	0x00061a80

0800154c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	; 0x30
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f009 fc71 	bl	800ae42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <MX_TIM1_Init+0xa8>)
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <MX_TIM1_Init+0xac>)
 800156c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_TIM1_Init+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_TIM1_Init+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_TIM1_Init+0xa8>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_TIM1_Init+0xa8>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_TIM1_Init+0xa8>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_TIM1_Init+0xa8>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001594:	2303      	movs	r3, #3
 8001596:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ac:	2301      	movs	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_TIM1_Init+0xa8>)
 80015c0:	f004 fb40 	bl	8005c44 <HAL_TIM_Encoder_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015ca:	f000 fbe1 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_TIM1_Init+0xa8>)
 80015dc:	f005 fa24 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015e6:	f000 fbd3 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	; 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000280 	.word	0x20000280
 80015f8:	40010000 	.word	0x40010000

080015fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f009 fc19 	bl	800ae42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <MX_TIM3_Init+0xa0>)
 800161a:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <MX_TIM3_Init+0xa4>)
 800161c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_TIM3_Init+0xa0>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_TIM3_Init+0xa0>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_TIM3_Init+0xa0>)
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_TIM3_Init+0xa0>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM3_Init+0xa0>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800163e:	2303      	movs	r3, #3
 8001640:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001656:	2301      	movs	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM3_Init+0xa0>)
 800166a:	f004 faeb 	bl	8005c44 <HAL_TIM_Encoder_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001674:	f000 fb8c 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM3_Init+0xa0>)
 8001686:	f005 f9cf 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001690:	f000 fb7e 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3730      	adds	r7, #48	; 0x30
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002c8 	.word	0x200002c8
 80016a0:	40000400 	.word	0x40000400

080016a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2224      	movs	r2, #36	; 0x24
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fbc5 	bl	800ae42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_TIM4_Init+0xa0>)
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <MX_TIM4_Init+0xa4>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_TIM4_Init+0xa0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM4_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM4_Init+0xa0>)
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM4_Init+0xa0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM4_Init+0xa0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e6:	2303      	movs	r3, #3
 80016e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM4_Init+0xa0>)
 8001712:	f004 fa97 	bl	8005c44 <HAL_TIM_Encoder_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800171c:	f000 fb38 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM4_Init+0xa0>)
 800172e:	f005 f97b 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001738:	f000 fb2a 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3730      	adds	r7, #48	; 0x30
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000310 	.word	0x20000310
 8001748:	40000800 	.word	0x40000800

0800174c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <MX_TIM5_Init+0xf8>)
 800177e:	4a32      	ldr	r2, [pc, #200]	; (8001848 <MX_TIM5_Init+0xfc>)
 8001780:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <MX_TIM5_Init+0xf8>)
 8001784:	2207      	movs	r2, #7
 8001786:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <MX_TIM5_Init+0xf8>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <MX_TIM5_Init+0xf8>)
 8001790:	2263      	movs	r2, #99	; 0x63
 8001792:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <MX_TIM5_Init+0xf8>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <MX_TIM5_Init+0xf8>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017a0:	4828      	ldr	r0, [pc, #160]	; (8001844 <MX_TIM5_Init+0xf8>)
 80017a2:	f004 f86d 	bl	8005880 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80017ac:	f000 faf0 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4821      	ldr	r0, [pc, #132]	; (8001844 <MX_TIM5_Init+0xf8>)
 80017be:	f004 fd27 	bl	8006210 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80017c8:	f000 fae2 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <MX_TIM5_Init+0xf8>)
 80017ce:	f004 f917 	bl	8005a00 <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80017d8:	f000 fada 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4619      	mov	r1, r3
 80017ea:	4816      	ldr	r0, [pc, #88]	; (8001844 <MX_TIM5_Init+0xf8>)
 80017ec:	f005 f91c 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80017f6:	f000 facb 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2208      	movs	r2, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM5_Init+0xf8>)
 8001812:	f004 fc3b 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800181c:	f000 fab8 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	220c      	movs	r2, #12
 8001824:	4619      	mov	r1, r3
 8001826:	4807      	ldr	r0, [pc, #28]	; (8001844 <MX_TIM5_Init+0xf8>)
 8001828:	f004 fc30 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001832:	f000 faad 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001836:	4803      	ldr	r0, [pc, #12]	; (8001844 <MX_TIM5_Init+0xf8>)
 8001838:	f001 fc90 	bl	800315c <HAL_TIM_MspPostInit>

}
 800183c:	bf00      	nop
 800183e:	3738      	adds	r7, #56	; 0x38
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000358 	.word	0x20000358
 8001848:	40000c00 	.word	0x40000c00

0800184c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <MX_TIM9_Init+0xbc>)
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <MX_TIM9_Init+0xc0>)
 8001876:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8-1;
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <MX_TIM9_Init+0xbc>)
 800187a:	2207      	movs	r2, #7
 800187c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_TIM9_Init+0xbc>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_TIM9_Init+0xbc>)
 8001886:	2263      	movs	r2, #99	; 0x63
 8001888:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_TIM9_Init+0xbc>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_TIM9_Init+0xbc>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_TIM9_Init+0xbc>)
 8001898:	f003 fff2 	bl	8005880 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80018a2:	f000 fa75 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	4619      	mov	r1, r3
 80018b2:	4815      	ldr	r0, [pc, #84]	; (8001908 <MX_TIM9_Init+0xbc>)
 80018b4:	f004 fcac 	bl	8006210 <HAL_TIM_ConfigClockSource>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80018be:	f000 fa67 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_TIM9_Init+0xbc>)
 80018c4:	f004 f89c 	bl	8005a00 <HAL_TIM_PWM_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 80018ce:	f000 fa5f 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM9_Init+0xbc>)
 80018ea:	f004 fbcf 	bl	800608c <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 80018f4:	f000 fa4c 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM9_Init+0xbc>)
 80018fa:	f001 fc2f 	bl	800315c <HAL_TIM_MspPostInit>

}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	; 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200003a0 	.word	0x200003a0
 800190c:	40014000 	.word	0x40014000

08001910 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_UART5_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_UART5_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_UART5_Init+0x4c>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_UART5_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_UART5_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_UART5_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_UART5_Init+0x4c>)
 8001936:	2204      	movs	r2, #4
 8001938:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_UART5_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_UART5_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_UART5_Init+0x4c>)
 8001948:	f005 f8fe 	bl	8006b48 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001952:	f000 fa1d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200003e8 	.word	0x200003e8
 8001960:	40005000 	.word	0x40005000

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <MX_GPIO_Init+0xf0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <MX_GPIO_Init+0xf0>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <MX_GPIO_Init+0xf0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <MX_GPIO_Init+0xf0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_GPIO_Init+0xf0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_GPIO_Init+0xf0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <MX_GPIO_Init+0xf0>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_GPIO_Init+0xf0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <MX_GPIO_Init+0xf4>)
 8001a2a:	f002 f8e1 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin;
 8001a2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_GPIO_Init+0xf4>)
 8001a48:	f001 ff36 	bl	80038b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3730      	adds	r7, #48	; 0x30
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	00000000 	.word	0x00000000

08001a60 <Control>:

/* USER CODE BEGIN 4 */
void Control(msgQueueObj_t msg, double Vd, int gripper_mode){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	81b8      	strh	r0, [r7, #12]
 8001a68:	ed87 0b00 	vstr	d0, [r7]
 8001a6c:	60b9      	str	r1, [r7, #8]
	switch(msg.buffer[0]){
 8001a6e:	7b3b      	ldrb	r3, [r7, #12]
 8001a70:	3b42      	subs	r3, #66	; 0x42
 8001a72:	2b18      	cmp	r3, #24
 8001a74:	f200 80d8 	bhi.w	8001c28 <Control+0x1c8>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <Control+0x20>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001af7 	.word	0x08001af7
 8001a84:	08001c29 	.word	0x08001c29
 8001a88:	08001c05 	.word	0x08001c05
 8001a8c:	08001c29 	.word	0x08001c29
 8001a90:	08001c29 	.word	0x08001c29
 8001a94:	08001c29 	.word	0x08001c29
 8001a98:	08001b2d 	.word	0x08001b2d
 8001a9c:	08001c29 	.word	0x08001c29
 8001aa0:	08001bd1 	.word	0x08001bd1
 8001aa4:	08001bd9 	.word	0x08001bd9
 8001aa8:	08001b1b 	.word	0x08001b1b
 8001aac:	08001c29 	.word	0x08001c29
 8001ab0:	08001c29 	.word	0x08001c29
 8001ab4:	08001c29 	.word	0x08001c29
 8001ab8:	08001be1 	.word	0x08001be1
 8001abc:	08001b3f 	.word	0x08001b3f
 8001ac0:	08001b09 	.word	0x08001b09
 8001ac4:	08001bbf 	.word	0x08001bbf
 8001ac8:	08001c29 	.word	0x08001c29
 8001acc:	08001c29 	.word	0x08001c29
 8001ad0:	08001b63 	.word	0x08001b63
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001b75 	.word	0x08001b75
 8001adc:	08001c29 	.word	0x08001c29
 8001ae0:	08001b51 	.word	0x08001b51
	case 'W':
		Robot_Move(Vd, 0, 0);
 8001ae4:	ed9f 2b56 	vldr	d2, [pc, #344]	; 8001c40 <Control+0x1e0>
 8001ae8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8001c40 <Control+0x1e0>
 8001aec:	ed97 0b00 	vldr	d0, [r7]
 8001af0:	f000 f956 	bl	8001da0 <Robot_Move>
		break;
 8001af4:	e09d      	b.n	8001c32 <Control+0x1d2>
	case 'B':
		Robot_Move(Vd, 180, 0);
 8001af6:	ed9f 2b52 	vldr	d2, [pc, #328]	; 8001c40 <Control+0x1e0>
 8001afa:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001c48 <Control+0x1e8>
 8001afe:	ed97 0b00 	vldr	d0, [r7]
 8001b02:	f000 f94d 	bl	8001da0 <Robot_Move>
		break;
 8001b06:	e094      	b.n	8001c32 <Control+0x1d2>
	case 'R':
		Robot_Move(Vd, 270, 0);
 8001b08:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 8001c40 <Control+0x1e0>
 8001b0c:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8001c50 <Control+0x1f0>
 8001b10:	ed97 0b00 	vldr	d0, [r7]
 8001b14:	f000 f944 	bl	8001da0 <Robot_Move>
		break;
 8001b18:	e08b      	b.n	8001c32 <Control+0x1d2>
	case 'L':
		Robot_Move(Vd, 90, 0);
 8001b1a:	ed9f 2b49 	vldr	d2, [pc, #292]	; 8001c40 <Control+0x1e0>
 8001b1e:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8001c58 <Control+0x1f8>
 8001b22:	ed97 0b00 	vldr	d0, [r7]
 8001b26:	f000 f93b 	bl	8001da0 <Robot_Move>
		break;
 8001b2a:	e082      	b.n	8001c32 <Control+0x1d2>
	case 'H':
		Robot_Move(Vd, 315, 0);
 8001b2c:	ed9f 2b44 	vldr	d2, [pc, #272]	; 8001c40 <Control+0x1e0>
 8001b30:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001c60 <Control+0x200>
 8001b34:	ed97 0b00 	vldr	d0, [r7]
 8001b38:	f000 f932 	bl	8001da0 <Robot_Move>
		break;
 8001b3c:	e079      	b.n	8001c32 <Control+0x1d2>
	case 'Q':
		Robot_Move(Vd, 45, 0);
 8001b3e:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001c40 <Control+0x1e0>
 8001b42:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8001c68 <Control+0x208>
 8001b46:	ed97 0b00 	vldr	d0, [r7]
 8001b4a:	f000 f929 	bl	8001da0 <Robot_Move>
		break;
 8001b4e:	e070      	b.n	8001c32 <Control+0x1d2>
	case 'Z':
		Robot_Move(Vd, 135, 0);
 8001b50:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 8001c40 <Control+0x1e0>
 8001b54:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001c70 <Control+0x210>
 8001b58:	ed97 0b00 	vldr	d0, [r7]
 8001b5c:	f000 f920 	bl	8001da0 <Robot_Move>
		break;
 8001b60:	e067      	b.n	8001c32 <Control+0x1d2>
	case 'V':
		Robot_Move(Vd, 225, 0);
 8001b62:	ed9f 2b37 	vldr	d2, [pc, #220]	; 8001c40 <Control+0x1e0>
 8001b66:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001c78 <Control+0x218>
 8001b6a:	ed97 0b00 	vldr	d0, [r7]
 8001b6e:	f000 f917 	bl	8001da0 <Robot_Move>
		break;
 8001b72:	e05e      	b.n	8001c32 <Control+0x1d2>
	case 'X':
		flag_x=!flag_x;
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <Control+0x228>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <Control+0x228>)
 8001b90:	701a      	strb	r2, [r3, #0]
		if(flag_x){
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <Control+0x228>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <Control+0x14c>
			Robot_Move(0, 0, 0.5);
 8001b9a:	ed9f 2b39 	vldr	d2, [pc, #228]	; 8001c80 <Control+0x220>
 8001b9e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c40 <Control+0x1e0>
 8001ba2:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8001c40 <Control+0x1e0>
 8001ba6:	f000 f8fb 	bl	8001da0 <Robot_Move>
		}else Robot_Move(0, 0, 0);
		break;
 8001baa:	e042      	b.n	8001c32 <Control+0x1d2>
		}else Robot_Move(0, 0, 0);
 8001bac:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001c40 <Control+0x1e0>
 8001bb0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001c40 <Control+0x1e0>
 8001bb4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001c40 <Control+0x1e0>
 8001bb8:	f000 f8f2 	bl	8001da0 <Robot_Move>
		break;
 8001bbc:	e039      	b.n	8001c32 <Control+0x1d2>
	case 'S':
		Robot_Move(0, 0, 0);
 8001bbe:	ed9f 2b20 	vldr	d2, [pc, #128]	; 8001c40 <Control+0x1e0>
 8001bc2:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001c40 <Control+0x1e0>
 8001bc6:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001c40 <Control+0x1e0>
 8001bca:	f000 f8e9 	bl	8001da0 <Robot_Move>
		break;
 8001bce:	e030      	b.n	8001c32 <Control+0x1d2>
	case 'J':
		flag_Vd=true;
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <Control+0x22c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
		break;
 8001bd6:	e02c      	b.n	8001c32 <Control+0x1d2>
	case 'K':
		flag_gripper=true;
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <Control+0x230>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
		break;
 8001bde:	e028      	b.n	8001c32 <Control+0x1d2>
	case 'P'://tay 0
		if(gripper_mode==0)PCA9685_SetServoAngle(0, 200);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <Control+0x192>
 8001be6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001c94 <Control+0x234>
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 fe38 	bl	8002860 <PCA9685_SetServoAngle>
		else if(gripper_mode==1)PCA9685_SetServoAngle(0, 71);
		break;
 8001bf0:	e01c      	b.n	8001c2c <Control+0x1cc>
		else if(gripper_mode==1)PCA9685_SetServoAngle(0, 71);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d119      	bne.n	8001c2c <Control+0x1cc>
 8001bf8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001c98 <Control+0x238>
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fe2f 	bl	8002860 <PCA9685_SetServoAngle>
		break;
 8001c02:	e013      	b.n	8001c2c <Control+0x1cc>
	case 'D'://tay 1
		if(gripper_mode==0)PCA9685_SetServoAngle(1, 200);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <Control+0x1b6>
 8001c0a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001c94 <Control+0x234>
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 fe26 	bl	8002860 <PCA9685_SetServoAngle>
		else if(gripper_mode==1)PCA9685_SetServoAngle(1, 71);
		break;
 8001c14:	e00c      	b.n	8001c30 <Control+0x1d0>
		else if(gripper_mode==1)PCA9685_SetServoAngle(1, 71);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d109      	bne.n	8001c30 <Control+0x1d0>
 8001c1c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001c98 <Control+0x238>
 8001c20:	2001      	movs	r0, #1
 8001c22:	f000 fe1d 	bl	8002860 <PCA9685_SetServoAngle>
		break;
 8001c26:	e003      	b.n	8001c30 <Control+0x1d0>
	default:
		break;
 8001c28:	bf00      	nop
 8001c2a:	e002      	b.n	8001c32 <Control+0x1d2>
		break;
 8001c2c:	bf00      	nop
 8001c2e:	e000      	b.n	8001c32 <Control+0x1d2>
		break;
 8001c30:	bf00      	nop
	}
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
	...
 8001c4c:	40668000 	.word	0x40668000
 8001c50:	00000000 	.word	0x00000000
 8001c54:	4070e000 	.word	0x4070e000
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40568000 	.word	0x40568000
 8001c60:	00000000 	.word	0x00000000
 8001c64:	4073b000 	.word	0x4073b000
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40468000 	.word	0x40468000
 8001c70:	00000000 	.word	0x00000000
 8001c74:	4060e000 	.word	0x4060e000
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	406c2000 	.word	0x406c2000
 8001c80:	00000000 	.word	0x00000000
 8001c84:	3fe00000 	.word	0x3fe00000
 8001c88:	200004aa 	.word	0x200004aa
 8001c8c:	200004a8 	.word	0x200004a8
 8001c90:	200004a9 	.word	0x200004a9
 8001c94:	43480000 	.word	0x43480000
 8001c98:	428e0000 	.word	0x428e0000

08001c9c <StartControl>:
  * @retval None
  */

/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	msgQueueObj_t msg;
	osStatus_t status;
	int Vd_msg, gripper_msg=0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  for(;;)
  {
//	  vTaskSuspend(CONTROLHandle);
//	  Robot_Move(1, 225, 0);
//	  UARTprintf("task1\r\n");
	  status = osMessageQueueGet(myButtonsHandle, &msg, NULL, 0);   // wait for message
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <StartControl+0xa0>)
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f107 0108 	add.w	r1, r7, #8
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f005 fbba 	bl	800742c <osMessageQueueGet>
 8001cb8:	6138      	str	r0, [r7, #16]
	  if (status == osOK) {
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d139      	bne.n	8001d34 <StartControl+0x98>
//		UARTprintf("msg is: %c \r\n", msg.buffer[0]); // process data
		if(isdigit((int)msg.buffer[0])){
 8001cc0:	7a3b      	ldrb	r3, [r7, #8]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <StartControl+0xa4>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <StartControl+0x7e>
		  if(flag_Vd){
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <StartControl+0xa8>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d012      	beq.n	8001d00 <StartControl+0x64>
			Vd_msg=(int)(msg.buffer[0]-'0');
 8001cda:	7a3b      	ldrb	r3, [r7, #8]
 8001cdc:	3b30      	subs	r3, #48	; 0x30
 8001cde:	60fb      	str	r3, [r7, #12]
			flag_Vd=false;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <StartControl+0xa8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
			Vd=(double)Vd_msg/(double)3;
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7fe fc1c 	bl	8000524 <__aeabi_i2d>
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <StartControl+0xac>)
 8001cf2:	f7fe fdab 	bl	800084c <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4914      	ldr	r1, [pc, #80]	; (8001d4c <StartControl+0xb0>)
 8001cfc:	e9c1 2300 	strd	r2, r3, [r1]

//			if(Vd>0&&Vd<1){
//				UARTprintf("true Vd \r\n");
//			}else UARTprintf("false Vd \r\n");
		  }
		  if(flag_gripper){
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <StartControl+0xb4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <StartControl+0x7e>
			gripper_msg=(int)(msg.buffer[0]-'0');
 8001d08:	7a3b      	ldrb	r3, [r7, #8]
 8001d0a:	3b30      	subs	r3, #48	; 0x30
 8001d0c:	617b      	str	r3, [r7, #20]
			flag_gripper=false;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <StartControl+0xb4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
			gripper_mode=gripper_msg;
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <StartControl+0xb8>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	6013      	str	r3, [r2, #0]
//			}else UARTprintf("false Vtheta \r\n");
		  }

		}

		Control(msg, Vd, gripper_mode);
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <StartControl+0xb0>)
 8001d1c:	ed93 7b00 	vldr	d7, [r3]
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <StartControl+0xb8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	eeb0 0a47 	vmov.f32	s0, s14
 8001d2a:	eef0 0a67 	vmov.f32	s1, s15
 8001d2e:	68b8      	ldr	r0, [r7, #8]
 8001d30:	f7ff fe96 	bl	8001a60 <Control>

	  }
    osDelay(50);
 8001d34:	2032      	movs	r0, #50	; 0x32
 8001d36:	f005 faeb 	bl	8007310 <osDelay>
	  status = osMessageQueueGet(myButtonsHandle, &msg, NULL, 0);   // wait for message
 8001d3a:	e7b5      	b.n	8001ca8 <StartControl+0xc>
 8001d3c:	20000438 	.word	0x20000438
 8001d40:	0800f8a0 	.word	0x0800f8a0
 8001d44:	200004a8 	.word	0x200004a8
 8001d48:	40080000 	.word	0x40080000
 8001d4c:	200004b0 	.word	0x200004b0
 8001d50:	200004a9 	.word	0x200004a9
 8001d54:	200004b8 	.word	0x200004b8

08001d58 <StartPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID */
void StartPID(void *argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {
	  PID();
 8001d60:	f000 fff6 	bl	8002d50 <PID>
//	  UARTprintf("task2\r\n");

    osDelay(10);
 8001d64:	200a      	movs	r0, #10
 8001d66:	f005 fad3 	bl	8007310 <osDelay>
	  PID();
 8001d6a:	e7f9      	b.n	8001d60 <StartPID+0x8>

08001d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7e:	f001 fc99 	bl	80036b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40014400 	.word	0x40014400

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
 8001d9a:	0000      	movs	r0, r0
 8001d9c:	0000      	movs	r0, r0
	...

08001da0 <Robot_Move>:
flag_rot_2=true,
flag_rot_3=true;

double prev_duty_1=100, prev_duty_2=100, prev_duty_3=100;
double duty=100;
void Robot_Move(double Vd, double Theta, double Vtheta){
 8001da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da4:	b092      	sub	sp, #72	; 0x48
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	ed87 0b06 	vstr	d0, [r7, #24]
 8001dac:	ed87 1b04 	vstr	d1, [r7, #16]
 8001db0:	ed87 2b02 	vstr	d2, [r7, #8]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V2=Vd*(-0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180))+Vtheta;
 8001db4:	a396      	add	r3, pc, #600	; (adr r3, 8002010 <Robot_Move+0x270>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dbe:	f7fe fc1b 	bl	80005f8 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b94      	ldr	r3, [pc, #592]	; (8002020 <Robot_Move+0x280>)
 8001dd0:	f7fe fd3c 	bl	800084c <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	ec43 2b17 	vmov	d7, r2, r3
 8001ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8001de0:	eef0 0a67 	vmov.f32	s1, s15
 8001de4:	f00c fc68 	bl	800e6b8 <cos>
 8001de8:	ec51 0b10 	vmov	r0, r1, d0
 8001dec:	a386      	add	r3, pc, #536	; (adr r3, 8002008 <Robot_Move+0x268>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fc01 	bl	80005f8 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9c7 2300 	strd	r2, r3, [r7]
 8001dfe:	a384      	add	r3, pc, #528	; (adr r3, 8002010 <Robot_Move+0x270>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e08:	f7fe fbf6 	bl	80005f8 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b81      	ldr	r3, [pc, #516]	; (8002020 <Robot_Move+0x280>)
 8001e1a:	f7fe fd17 	bl	800084c <__aeabi_ddiv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	ec43 2b17 	vmov	d7, r2, r3
 8001e26:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2a:	eef0 0a67 	vmov.f32	s1, s15
 8001e2e:	f00c fc97 	bl	800e760 <sin>
 8001e32:	ec51 0b10 	vmov	r0, r1, d0
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <Robot_Move+0x284>)
 8001e3c:	f7fe fbdc 	bl	80005f8 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e48:	f7fe fa1e 	bl	8000288 <__aeabi_dsub>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e58:	f7fe fbce 	bl	80005f8 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	496d      	ldr	r1, [pc, #436]	; (8002028 <Robot_Move+0x288>)
 8001e72:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*(0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180))+Vtheta;
 8001e76:	a366      	add	r3, pc, #408	; (adr r3, 8002010 <Robot_Move+0x270>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e80:	f7fe fbba 	bl	80005f8 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b63      	ldr	r3, [pc, #396]	; (8002020 <Robot_Move+0x280>)
 8001e92:	f7fe fcdb 	bl	800084c <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	ec43 2b17 	vmov	d7, r2, r3
 8001e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea2:	eef0 0a67 	vmov.f32	s1, s15
 8001ea6:	f00c fc07 	bl	800e6b8 <cos>
 8001eaa:	ec51 0b10 	vmov	r0, r1, d0
 8001eae:	a35a      	add	r3, pc, #360	; (adr r3, 8002018 <Robot_Move+0x278>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	e9c7 2300 	strd	r2, r3, [r7]
 8001ec0:	a353      	add	r3, pc, #332	; (adr r3, 8002010 <Robot_Move+0x270>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eca:	f7fe fb95 	bl	80005f8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	4b51      	ldr	r3, [pc, #324]	; (8002020 <Robot_Move+0x280>)
 8001edc:	f7fe fcb6 	bl	800084c <__aeabi_ddiv>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	ec43 2b17 	vmov	d7, r2, r3
 8001ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8001eec:	eef0 0a67 	vmov.f32	s1, s15
 8001ef0:	f00c fc36 	bl	800e760 <sin>
 8001ef4:	ec51 0b10 	vmov	r0, r1, d0
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b49      	ldr	r3, [pc, #292]	; (8002024 <Robot_Move+0x284>)
 8001efe:	f7fe fb7b 	bl	80005f8 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0a:	f7fe f9bd 	bl	8000288 <__aeabi_dsub>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1a:	f7fe fb6d 	bl	80005f8 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f2a:	f7fe f9af 	bl	800028c <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	493e      	ldr	r1, [pc, #248]	; (800202c <Robot_Move+0x28c>)
 8001f34:	e9c1 2300 	strd	r2, r3, [r1]
	V1=Vd*sin(Theta*PI/180)+Vtheta;
 8001f38:	a335      	add	r3, pc, #212	; (adr r3, 8002010 <Robot_Move+0x270>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <Robot_Move+0x280>)
 8001f54:	f7fe fc7a 	bl	800084c <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	ec43 2b17 	vmov	d7, r2, r3
 8001f60:	eeb0 0a47 	vmov.f32	s0, s14
 8001f64:	eef0 0a67 	vmov.f32	s1, s15
 8001f68:	f00c fbfa 	bl	800e760 <sin>
 8001f6c:	ec51 0b10 	vmov	r0, r1, d0
 8001f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f74:	f7fe fb40 	bl	80005f8 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f84:	f7fe f982 	bl	800028c <__adddf3>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4928      	ldr	r1, [pc, #160]	; (8002030 <Robot_Move+0x290>)
 8001f8e:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <Robot_Move+0x290>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <Robot_Move+0x288>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <Robot_Move+0x28c>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	6339      	str	r1, [r7, #48]	; 0x30
 8001fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax=V1_abs;
 8001fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 8001fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fd2:	f7fe fda1 	bl	8000b18 <__aeabi_dcmpgt>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <Robot_Move+0x242>
 8001fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fe0:	e001      	b.n	8001fe6 <Robot_Move+0x246>
 8001fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fe6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 8001fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ff2:	f7fe fd91 	bl	8000b18 <__aeabi_dcmpgt>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <Robot_Move+0x294>
 8001ffc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002000:	e01a      	b.n	8002038 <Robot_Move+0x298>
 8002002:	bf00      	nop
 8002004:	f3af 8000 	nop.w
 8002008:	3d70a3d7 	.word	0x3d70a3d7
 800200c:	bfebd70a 	.word	0xbfebd70a
 8002010:	54524550 	.word	0x54524550
 8002014:	400921fb 	.word	0x400921fb
 8002018:	3d70a3d7 	.word	0x3d70a3d7
 800201c:	3febd70a 	.word	0x3febd70a
 8002020:	40668000 	.word	0x40668000
 8002024:	3fe00000 	.word	0x3fe00000
 8002028:	200004c8 	.word	0x200004c8
 800202c:	200004d0 	.word	0x200004d0
 8002030:	200004c0 	.word	0x200004c0
 8002034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002038:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>1){
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b75      	ldr	r3, [pc, #468]	; (8002218 <Robot_Move+0x478>)
 8002042:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002046:	f7fe fd67 	bl	8000b18 <__aeabi_dcmpgt>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02e      	beq.n	80020ae <Robot_Move+0x30e>
	Temp=(double)1/Vmax;
 8002050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	496f      	ldr	r1, [pc, #444]	; (8002218 <Robot_Move+0x478>)
 800205a:	f7fe fbf7 	bl	800084c <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 8002066:	4b6d      	ldr	r3, [pc, #436]	; (800221c <Robot_Move+0x47c>)
 8002068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002070:	f7fe fac2 	bl	80005f8 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4968      	ldr	r1, [pc, #416]	; (800221c <Robot_Move+0x47c>)
 800207a:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <Robot_Move+0x480>)
 8002080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002084:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002088:	f7fe fab6 	bl	80005f8 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4963      	ldr	r1, [pc, #396]	; (8002220 <Robot_Move+0x480>)
 8002092:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <Robot_Move+0x484>)
 8002098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800209c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	495e      	ldr	r1, [pc, #376]	; (8002224 <Robot_Move+0x484>)
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	if(V1<0){
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <Robot_Move+0x47c>)
 80020b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	f7fe fd0e 	bl	8000adc <__aeabi_dcmplt>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <Robot_Move+0x342>
	 Rotation(MOTOR_1, !CLOCK_WISE);
 80020c6:	2100      	movs	r1, #0
 80020c8:	2001      	movs	r0, #1
 80020ca:	f000 f98b 	bl	80023e4 <Rotation>
	 V1=fabs(V1);
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <Robot_Move+0x47c>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	4692      	mov	sl, r2
 80020d6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80020da:	4b50      	ldr	r3, [pc, #320]	; (800221c <Robot_Move+0x47c>)
 80020dc:	e9c3 ab00 	strd	sl, fp, [r3]
 80020e0:	e00f      	b.n	8002102 <Robot_Move+0x362>
	} else if(V1>0){
 80020e2:	4b4e      	ldr	r3, [pc, #312]	; (800221c <Robot_Move+0x47c>)
 80020e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f7fe fd12 	bl	8000b18 <__aeabi_dcmpgt>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <Robot_Move+0x362>
	 Rotation(MOTOR_1, CLOCK_WISE);
 80020fa:	2101      	movs	r1, #1
 80020fc:	2001      	movs	r0, #1
 80020fe:	f000 f971 	bl	80023e4 <Rotation>
	}
	if(V2<0){
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <Robot_Move+0x480>)
 8002104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	f7fe fce4 	bl	8000adc <__aeabi_dcmplt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <Robot_Move+0x396>
	 Rotation(MOTOR_2, !CLOCK_WISE);
 800211a:	2100      	movs	r1, #0
 800211c:	2002      	movs	r0, #2
 800211e:	f000 f961 	bl	80023e4 <Rotation>
	 V2=fabs(V2);
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <Robot_Move+0x480>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	4690      	mov	r8, r2
 800212a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <Robot_Move+0x480>)
 8002130:	e9c3 8900 	strd	r8, r9, [r3]
 8002134:	e00f      	b.n	8002156 <Robot_Move+0x3b6>
	} else if(V2>0){
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <Robot_Move+0x480>)
 8002138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	f7fe fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <Robot_Move+0x3b6>
	 Rotation(MOTOR_2, CLOCK_WISE);
 800214e:	2101      	movs	r1, #1
 8002150:	2002      	movs	r0, #2
 8002152:	f000 f947 	bl	80023e4 <Rotation>
	}
	if(V3<0){
 8002156:	4b33      	ldr	r3, [pc, #204]	; (8002224 <Robot_Move+0x484>)
 8002158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	f7fe fcba 	bl	8000adc <__aeabi_dcmplt>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <Robot_Move+0x3ea>
	 Rotation(MOTOR_3, !CLOCK_WISE);
 800216e:	2100      	movs	r1, #0
 8002170:	2003      	movs	r0, #3
 8002172:	f000 f937 	bl	80023e4 <Rotation>
	 V3=fabs(V3);
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <Robot_Move+0x484>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	4614      	mov	r4, r2
 800217e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <Robot_Move+0x484>)
 8002184:	e9c3 4500 	strd	r4, r5, [r3]
 8002188:	e00f      	b.n	80021aa <Robot_Move+0x40a>
	} else if(V3>0){
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <Robot_Move+0x484>)
 800218c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f7fe fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <Robot_Move+0x40a>
	 Rotation(MOTOR_3, CLOCK_WISE);
 80021a2:	2101      	movs	r1, #1
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f91d 	bl	80023e4 <Rotation>
	}

	V1=v2rpm(V1);
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <Robot_Move+0x47c>)
 80021ac:	ed93 7b00 	vldr	d7, [r3]
 80021b0:	eeb0 0a47 	vmov.f32	s0, s14
 80021b4:	eef0 0a67 	vmov.f32	s1, s15
 80021b8:	f000 f972 	bl	80024a0 <v2rpm>
 80021bc:	eeb0 7a40 	vmov.f32	s14, s0
 80021c0:	eef0 7a60 	vmov.f32	s15, s1
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <Robot_Move+0x47c>)
 80021c6:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <Robot_Move+0x480>)
 80021cc:	ed93 7b00 	vldr	d7, [r3]
 80021d0:	eeb0 0a47 	vmov.f32	s0, s14
 80021d4:	eef0 0a67 	vmov.f32	s1, s15
 80021d8:	f000 f962 	bl	80024a0 <v2rpm>
 80021dc:	eeb0 7a40 	vmov.f32	s14, s0
 80021e0:	eef0 7a60 	vmov.f32	s15, s1
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <Robot_Move+0x480>)
 80021e6:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <Robot_Move+0x484>)
 80021ec:	ed93 7b00 	vldr	d7, [r3]
 80021f0:	eeb0 0a47 	vmov.f32	s0, s14
 80021f4:	eef0 0a67 	vmov.f32	s1, s15
 80021f8:	f000 f952 	bl	80024a0 <v2rpm>
 80021fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002200:	eef0 7a60 	vmov.f32	s15, s1
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <Robot_Move+0x484>)
 8002206:	ed83 7b00 	vstr	d7, [r3]
	pid_config();
 800220a:	f7ff f849 	bl	80012a0 <pid_config>
//	prev_duty_1=duty_V1;
//	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, duty_V2);
//	prev_duty_2=duty_V2;
//	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty_V3);
//	prev_duty_3=duty_V3;
}
 800220e:	bf00      	nop
 8002210:	3748      	adds	r7, #72	; 0x48
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	200004c0 	.word	0x200004c0
 8002220:	200004c8 	.word	0x200004c8
 8002224:	200004d0 	.word	0x200004d0

08002228 <set_duty_cycle>:
double rpm_to_duty(double rpm){
	double duty=(98.15-0.6*rpm);
	return duty;
}
void set_duty_cycle(int motor, double out){
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	ed87 0b00 	vstr	d0, [r7]
	if(motor==MOTOR_1){
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d132      	bne.n	80022a0 <set_duty_cycle+0x78>
		prev_duty_1=prev_duty_1-out;
 800223a:	4b51      	ldr	r3, [pc, #324]	; (8002380 <set_duty_cycle+0x158>)
 800223c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002244:	f7fe f820 	bl	8000288 <__aeabi_dsub>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	494c      	ldr	r1, [pc, #304]	; (8002380 <set_duty_cycle+0x158>)
 800224e:	e9c1 2300 	strd	r2, r3, [r1]
		prev_duty_1=(prev_duty_1>100)?100:((prev_duty_1<0)?0:prev_duty_1);
 8002252:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <set_duty_cycle+0x158>)
 8002254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	4b49      	ldr	r3, [pc, #292]	; (8002384 <set_duty_cycle+0x15c>)
 800225e:	f7fe fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <set_duty_cycle+0x48>
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <set_duty_cycle+0x15c>)
 800226e:	e013      	b.n	8002298 <set_duty_cycle+0x70>
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <set_duty_cycle+0x158>)
 8002272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	f7fe fc2d 	bl	8000adc <__aeabi_dcmplt>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <set_duty_cycle+0x6a>
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e002      	b.n	8002298 <set_duty_cycle+0x70>
 8002292:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <set_duty_cycle+0x158>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <set_duty_cycle+0x158>)
 800229a:	e9c1 2300 	strd	r2, r3, [r1]
//	}
//	else if(motor==MOTOR_3){
//		__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty);
//		prev_duty_3=duty;
//	}
}
 800229e:	e06a      	b.n	8002376 <set_duty_cycle+0x14e>
	else if(motor==MOTOR_2){
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d132      	bne.n	800230c <set_duty_cycle+0xe4>
		prev_duty_2=prev_duty_2-out;
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <set_duty_cycle+0x160>)
 80022a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022b0:	f7fd ffea 	bl	8000288 <__aeabi_dsub>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4933      	ldr	r1, [pc, #204]	; (8002388 <set_duty_cycle+0x160>)
 80022ba:	e9c1 2300 	strd	r2, r3, [r1]
		prev_duty_2=(prev_duty_2>100)?100:((prev_duty_2<0)?0:prev_duty_2);
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <set_duty_cycle+0x160>)
 80022c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <set_duty_cycle+0x15c>)
 80022ca:	f7fe fc25 	bl	8000b18 <__aeabi_dcmpgt>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <set_duty_cycle+0xb4>
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <set_duty_cycle+0x15c>)
 80022da:	e013      	b.n	8002304 <set_duty_cycle+0xdc>
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <set_duty_cycle+0x160>)
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	f7fe fbf7 	bl	8000adc <__aeabi_dcmplt>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <set_duty_cycle+0xd6>
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e002      	b.n	8002304 <set_duty_cycle+0xdc>
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <set_duty_cycle+0x160>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	4920      	ldr	r1, [pc, #128]	; (8002388 <set_duty_cycle+0x160>)
 8002306:	e9c1 2300 	strd	r2, r3, [r1]
}
 800230a:	e034      	b.n	8002376 <set_duty_cycle+0x14e>
	else if(motor==MOTOR_3){
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d131      	bne.n	8002376 <set_duty_cycle+0x14e>
		prev_duty_3=prev_duty_3-out;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <set_duty_cycle+0x164>)
 8002314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800231c:	f7fd ffb4 	bl	8000288 <__aeabi_dsub>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4919      	ldr	r1, [pc, #100]	; (800238c <set_duty_cycle+0x164>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
		prev_duty_3=(prev_duty_3>100)?100:((prev_duty_3<0)?0:prev_duty_3);
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <set_duty_cycle+0x164>)
 800232c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <set_duty_cycle+0x15c>)
 8002336:	f7fe fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <set_duty_cycle+0x120>
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <set_duty_cycle+0x15c>)
 8002346:	e013      	b.n	8002370 <set_duty_cycle+0x148>
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <set_duty_cycle+0x164>)
 800234a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	f7fe fbc1 	bl	8000adc <__aeabi_dcmplt>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <set_duty_cycle+0x142>
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e002      	b.n	8002370 <set_duty_cycle+0x148>
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <set_duty_cycle+0x164>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <set_duty_cycle+0x164>)
 8002372:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008
 8002384:	40590000 	.word	0x40590000
 8002388:	20000010 	.word	0x20000010
 800238c:	20000018 	.word	0x20000018

08002390 <Run_Now>:
void Run_Now(double duty_1, double duty_2, double duty_3){
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	ed87 0b04 	vstr	d0, [r7, #16]
 800239a:	ed87 1b02 	vstr	d1, [r7, #8]
 800239e:	ed87 2b00 	vstr	d2, [r7]
	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, duty_1);
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <Run_Now+0x4c>)
 80023a4:	681c      	ldr	r4, [r3, #0]
 80023a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, duty_2);
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <Run_Now+0x4c>)
 80023b4:	681c      	ldr	r4, [r3, #0]
 80023b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ba:	f7fe fbf5 	bl	8000ba8 <__aeabi_d2uiz>
 80023be:	4603      	mov	r3, r0
 80023c0:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty_3);
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <Run_Now+0x50>)
 80023c4:	681c      	ldr	r4, [r3, #0]
 80023c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023ca:	f7fe fbed 	bl	8000ba8 <__aeabi_d2uiz>
 80023ce:	4603      	mov	r3, r0
 80023d0:	6363      	str	r3, [r4, #52]	; 0x34
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000358 	.word	0x20000358
 80023e0:	200003a0 	.word	0x200003a0

080023e4 <Rotation>:
void Rotation(int motor, int rotation){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d109      	bne.n	800240e <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002400:	4822      	ldr	r0, [pc, #136]	; (800248c <Rotation+0xa8>)
 8002402:	f001 fbf5 	bl	8003bf0 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <Rotation+0xac>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e008      	b.n	8002420 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002414:	481d      	ldr	r0, [pc, #116]	; (800248c <Rotation+0xa8>)
 8002416:	f001 fbeb 	bl	8003bf0 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <Rotation+0xac>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d115      	bne.n	8002452 <Rotation+0x6e>
		if(rotation==CLOCK_WISE){
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d109      	bne.n	8002440 <Rotation+0x5c>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002432:	4816      	ldr	r0, [pc, #88]	; (800248c <Rotation+0xa8>)
 8002434:	f001 fbdc 	bl	8003bf0 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <Rotation+0xb0>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e008      	b.n	8002452 <Rotation+0x6e>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002446:	4811      	ldr	r0, [pc, #68]	; (800248c <Rotation+0xa8>)
 8002448:	f001 fbd2 	bl	8003bf0 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <Rotation+0xb0>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d115      	bne.n	8002484 <Rotation+0xa0>
		if(rotation==CLOCK_WISE){
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d109      	bne.n	8002472 <Rotation+0x8e>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 800245e:	2201      	movs	r2, #1
 8002460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <Rotation+0xa8>)
 8002466:	f001 fbc3 	bl	8003bf0 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <Rotation+0xb4>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 8002470:	e008      	b.n	8002484 <Rotation+0xa0>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <Rotation+0xa8>)
 800247a:	f001 fbb9 	bl	8003bf0 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <Rotation+0xb4>)
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	20000000 	.word	0x20000000
 8002494:	20000001 	.word	0x20000001
 8002498:	20000002 	.word	0x20000002
 800249c:	00000000 	.word	0x00000000

080024a0 <v2rpm>:

double v2rpm (double vantoc){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 80024aa:	a30e      	add	r3, pc, #56	; (adr r3, 80024e4 <v2rpm+0x44>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b4:	f7fe f9ca 	bl	800084c <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <v2rpm+0x40>)
 80024c6:	f7fe f897 	bl	80005f8 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80024d2:	eeb0 0a47 	vmov.f32	s0, s14
 80024d6:	eef0 0a67 	vmov.f32	s1, s15
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	404e0000 	.word	0x404e0000
 80024e4:	5b30428a 	.word	0x5b30428a
 80024e8:	3fd8209f 	.word	0x3fd8209f

080024ec <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af04      	add	r7, sp, #16
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	460b      	mov	r3, r1
 80024f8:	71bb      	strb	r3, [r7, #6]
 80024fa:	4613      	mov	r3, r2
 80024fc:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80024fe:	797b      	ldrb	r3, [r7, #5]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <PCA9685_SetBit+0x1c>
 8002504:	2301      	movs	r3, #1
 8002506:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <PCA9685_SetBit+0xb0>)
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	b29a      	uxth	r2, r3
 8002510:	230a      	movs	r3, #10
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	2301      	movs	r3, #1
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f107 030f 	add.w	r3, r7, #15
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	f001 febb 	bl	800429c <HAL_I2C_Mem_Read>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e031      	b.n	8002594 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	2201      	movs	r2, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	b25b      	sxtb	r3, r3
 800253a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253e:	b25b      	sxtb	r3, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	b25a      	sxtb	r2, r3
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	b25b      	sxtb	r3, r3
 8002548:	4013      	ands	r3, r2
 800254a:	b25b      	sxtb	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8002550:	797b      	ldrb	r3, [r7, #5]
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	79bb      	ldrb	r3, [r7, #6]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	b25a      	sxtb	r2, r3
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b25b      	sxtb	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b25b      	sxtb	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <PCA9685_SetBit+0xb0>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	b29a      	uxth	r2, r3
 8002572:	230a      	movs	r3, #10
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	2301      	movs	r3, #1
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	f107 030f 	add.w	r3, r7, #15
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2301      	movs	r3, #1
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	f001 fd90 	bl	80040a8 <HAL_I2C_Mem_Write>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200004d8 	.word	0x200004d8

080025a0 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80025a6:	2306      	movs	r3, #6
 80025a8:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <PCA9685_SoftwareReset+0x30>)
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	1dfa      	adds	r2, r7, #7
 80025b0:	230a      	movs	r3, #10
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	2100      	movs	r1, #0
 80025b8:	f001 fc78 	bl	8003eac <HAL_I2C_Master_Transmit>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200004d8 	.word	0x200004d8

080025d4 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	461a      	mov	r2, r3
 80025e2:	2104      	movs	r1, #4
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff ff81 	bl	80024ec <PCA9685_SetBit>
 80025ea:	4603      	mov	r3, r0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	461a      	mov	r2, r3
 8002602:	2107      	movs	r1, #7
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff ff71 	bl	80024ec <PCA9685_SetBit>
 800260a:	4603      	mov	r3, r0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	461a      	mov	r2, r3
 8002622:	2105      	movs	r1, #5
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff ff61 	bl	80024ec <PCA9685_SetBit>
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	0000      	movs	r0, r0
	...

08002638 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af04      	add	r7, sp, #16
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002648:	4293      	cmp	r3, r2
 800264a:	d902      	bls.n	8002652 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 800264c:	2303      	movs	r3, #3
 800264e:	72fb      	strb	r3, [r7, #11]
 8002650:	e046      	b.n	80026e0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	2b18      	cmp	r3, #24
 8002656:	d802      	bhi.n	800265e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8002658:	23ff      	movs	r3, #255	; 0xff
 800265a:	72fb      	strb	r3, [r7, #11]
 800265c:	e040      	b.n	80026e0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002668:	ee17 0a90 	vmov	r0, s15
 800266c:	f7fd ff6c 	bl	8000548 <__aeabi_f2d>
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <PCA9685_SetPwmFrequency+0xe8>)
 8002676:	f7fd ffbf 	bl	80005f8 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	a126      	add	r1, pc, #152	; (adr r1, 8002718 <PCA9685_SetPwmFrequency+0xe0>)
 8002680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002684:	f7fe f8e2 	bl	800084c <__aeabi_ddiv>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <PCA9685_SetPwmFrequency+0xec>)
 8002696:	f7fd fdf7 	bl	8000288 <__aeabi_dsub>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7fe faa1 	bl	8000be8 <__aeabi_d2f>
 80026a6:	4603      	mov	r3, r0
 80026a8:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7fd ff4c 	bl	8000548 <__aeabi_f2d>
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <PCA9685_SetPwmFrequency+0xf0>)
 80026b6:	f7fd fde9 	bl	800028c <__adddf3>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	ec43 2b17 	vmov	d7, r2, r3
 80026c2:	eeb0 0a47 	vmov.f32	s0, s14
 80026c6:	eef0 0a67 	vmov.f32	s1, s15
 80026ca:	f00c f8a1 	bl	800e810 <floor>
 80026ce:	ec53 2b10 	vmov	r2, r3, d0
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa67 	bl	8000ba8 <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff ff77 	bl	80025d4 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <PCA9685_SetPwmFrequency+0xf4>)
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	230a      	movs	r3, #10
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	2301      	movs	r3, #1
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	f107 030b 	add.w	r3, r7, #11
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2301      	movs	r3, #1
 80026fa:	22fe      	movs	r2, #254	; 0xfe
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	f001 fcd3 	bl	80040a8 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff ff66 	bl	80025d4 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff ff73 	bl	80025f4 <PCA9685_RestartMode>
	return PCA9685_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	00000000 	.word	0x00000000
 800271c:	4177d784 	.word	0x4177d784
 8002720:	40b00000 	.word	0x40b00000
 8002724:	3ff00000 	.word	0x3ff00000
 8002728:	3fe00000 	.word	0x3fe00000
 800272c:	200004d8 	.word	0x200004d8

08002730 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af04      	add	r7, sp, #16
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	460b      	mov	r3, r1
 800273c:	80bb      	strh	r3, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3306      	adds	r3, #6
 800274a:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 800274c:	88bb      	ldrh	r3, [r7, #4]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8002752:	88bb      	ldrh	r3, [r7, #4]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	b29b      	uxth	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b29b      	uxth	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <PCA9685_SetPwm+0x70>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	b29a      	uxth	r2, r3
 8002774:	230a      	movs	r3, #10
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	2304      	movs	r3, #4
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2301      	movs	r3, #1
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	f001 fc8f 	bl	80040a8 <HAL_I2C_Mem_Write>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200004d8 	.word	0x200004d8

080027a4 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	460b      	mov	r3, r1
 80027b0:	80bb      	strh	r3, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80027b6:	88bb      	ldrh	r3, [r7, #4]
 80027b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027bc:	d302      	bcc.n	80027c4 <PCA9685_SetPin+0x20>
 80027be:	f640 73ff 	movw	r3, #4095	; 0xfff
 80027c2:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d025      	beq.n	8002816 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ffa9 	bl	8002730 <PCA9685_SetPwm>
 80027de:	4603      	mov	r3, r0
 80027e0:	e03a      	b.n	8002858 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 80027e2:	88bb      	ldrh	r3, [r7, #4]
 80027e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff9b 	bl	8002730 <PCA9685_SetPwm>
 80027fa:	4603      	mov	r3, r0
 80027fc:	e02c      	b.n	8002858 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 80027fe:	88bb      	ldrh	r3, [r7, #4]
 8002800:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002804:	330f      	adds	r3, #15
 8002806:	b29a      	uxth	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff8f 	bl	8002730 <PCA9685_SetPwm>
 8002812:	4603      	mov	r3, r0
 8002814:	e020      	b.n	8002858 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8002816:	88bb      	ldrh	r3, [r7, #4]
 8002818:	f640 72ff 	movw	r2, #4095	; 0xfff
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff81 	bl	8002730 <PCA9685_SetPwm>
 800282e:	4603      	mov	r3, r0
 8002830:	e012      	b.n	8002858 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8002832:	88bb      	ldrh	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff75 	bl	8002730 <PCA9685_SetPwm>
 8002846:	4603      	mov	r3, r0
 8002848:	e006      	b.n	8002858 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 800284a:	88ba      	ldrh	r2, [r7, #4]
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff6d 	bl	8002730 <PCA9685_SetPwm>
 8002856:	4603      	mov	r3, r0
    }
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	ed87 0a00 	vstr	s0, [r7]
 800286c:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 800286e:	edd7 7a00 	vldr	s15, [r7]
 8002872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	d502      	bpl.n	8002882 <PCA9685_SetServoAngle+0x22>
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8002882:	edd7 7a00 	vldr	s15, [r7]
 8002886:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002908 <PCA9685_SetServoAngle+0xa8>
 800288a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	dd01      	ble.n	8002898 <PCA9685_SetServoAngle+0x38>
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <PCA9685_SetServoAngle+0xac>)
 8002896:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	f7fd fe55 	bl	8000548 <__aeabi_f2d>
 800289e:	a318      	add	r3, pc, #96	; (adr r3, 8002900 <PCA9685_SetServoAngle+0xa0>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fea8 	bl	80005f8 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <PCA9685_SetServoAngle+0xb0>)
 80028b6:	f7fd ffc9 	bl	800084c <__aeabi_ddiv>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <PCA9685_SetServoAngle+0xb4>)
 80028c8:	f7fd fce0 	bl	800028c <__adddf3>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe f988 	bl	8000be8 <__aeabi_d2f>
 80028d8:	4603      	mov	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 80028dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e4:	ee17 3a90 	vmov	r3, s15
 80028e8:	b299      	uxth	r1, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2200      	movs	r2, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff58 	bl	80027a4 <PCA9685_SetPin>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	00000000 	.word	0x00000000
 8002904:	40786000 	.word	0x40786000
 8002908:	43340000 	.word	0x43340000
 800290c:	43340000 	.word	0x43340000
 8002910:	40668000 	.word	0x40668000
 8002914:	405b8000 	.word	0x405b8000

08002918 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <PCA9685_Init+0x28>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8002926:	f7ff fe3b 	bl	80025a0 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 800292a:	2030      	movs	r0, #48	; 0x30
 800292c:	f7ff fe84 	bl	8002638 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8002930:	2001      	movs	r0, #1
 8002932:	f7ff fe6f 	bl	8002614 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200004d8 	.word	0x200004d8

08002944 <PID_init>:
,err_next
,actual_val
,pre_actual_val_1=0
,pre_actual_val_2=0
,pre_actual_val_3=0;
void PID_init(PID_Param_t *par){
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	4913      	ldr	r1, [pc, #76]	; (80029a0 <PID_init+0x5c>)
 8002954:	e9c1 2300 	strd	r2, r3, [r1]
	Ki=par->Ki;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800295e:	4911      	ldr	r1, [pc, #68]	; (80029a4 <PID_init+0x60>)
 8002960:	e9c1 2300 	strd	r2, r3, [r1]
	Kd=par->Kd;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800296a:	490f      	ldr	r1, [pc, #60]	; (80029a8 <PID_init+0x64>)
 800296c:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_1=par->target_val_1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002976:	490d      	ldr	r1, [pc, #52]	; (80029ac <PID_init+0x68>)
 8002978:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_2=par->target_val_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002982:	490b      	ldr	r1, [pc, #44]	; (80029b0 <PID_init+0x6c>)
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_3=par->target_val_3;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800298e:	4909      	ldr	r1, [pc, #36]	; (80029b4 <PID_init+0x70>)
 8002990:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	200004e0 	.word	0x200004e0
 80029a4:	200004e8 	.word	0x200004e8
 80029a8:	200004f0 	.word	0x200004f0
 80029ac:	200004f8 	.word	0x200004f8
 80029b0:	20000500 	.word	0x20000500
 80029b4:	20000508 	.word	0x20000508

080029b8 <update_motor_values>:

double update_motor_values(double target_val, double actual_val, double prev_actual_val,double err_last, double err_next) {
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	ed87 0b08 	vstr	d0, [r7, #32]
 80029c4:	ed87 1b06 	vstr	d1, [r7, #24]
 80029c8:	ed87 2b04 	vstr	d2, [r7, #16]
 80029cc:	ed87 3b02 	vstr	d3, [r7, #8]
 80029d0:	ed87 4b00 	vstr	d4, [r7]

	if(target_val==0){
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029e0:	f7fe f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <update_motor_values+0x42>
		actual_val=-20;
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <update_motor_values+0x17c>)
 80029f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		return actual_val;
 80029f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f8:	e091      	b.n	8002b1e <update_motor_values+0x166>
	}
	err=target_val-actual_val;
 80029fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a02:	f7fd fc41 	bl	8000288 <__aeabi_dsub>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	494b      	ldr	r1, [pc, #300]	; (8002b38 <update_motor_values+0x180>)
 8002a0c:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8002a10:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <update_motor_values+0x184>)
 8002a12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a16:	4b48      	ldr	r3, [pc, #288]	; (8002b38 <update_motor_values+0x180>)
 8002a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a20:	f7fd fc32 	bl	8000288 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4620      	mov	r0, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f7fd fde4 	bl	80005f8 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a3c:	f7fd fc26 	bl	800028c <__adddf3>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
				  + pid.Ki*err
 8002a48:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <update_motor_values+0x184>)
 8002a4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <update_motor_values+0x180>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdd0 	bl	80005f8 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	4629      	mov	r1, r5
 8002a60:	f7fd fc14 	bl	800028c <__adddf3>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4692      	mov	sl, r2
 8002a6a:	469b      	mov	fp, r3
				  + pid.Kd*(err - 2 * err_next + err_last);
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <update_motor_values+0x184>)
 8002a6e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <update_motor_values+0x180>)
 8002a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	f7fd fc04 	bl	800028c <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4640      	mov	r0, r8
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	f7fd fbfc 	bl	8000288 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9c:	f7fd fbf6 	bl	800028c <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fda6 	bl	80005f8 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8002ab0:	4650      	mov	r0, sl
 8002ab2:	4659      	mov	r1, fp
 8002ab4:	f7fd fbea 	bl	800028c <__adddf3>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	err_last = err_next;
 8002ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err_next = err;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <update_motor_values+0x180>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	e9c7 2300 	strd	r2, r3, [r7]
	actual_val=(actual_val>10)?10:actual_val;
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <update_motor_values+0x188>)
 8002ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002adc:	f7fe f81c 	bl	8000b18 <__aeabi_dcmpgt>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <update_motor_values+0x136>
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <update_motor_values+0x188>)
 8002aec:	e001      	b.n	8002af2 <update_motor_values+0x13a>
 8002aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	actual_val=(actual_val<-10)?-10:actual_val;
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <update_motor_values+0x18c>)
 8002afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b00:	f7fd ffec 	bl	8000adc <__aeabi_dcmplt>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <update_motor_values+0x15a>
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <update_motor_values+0x18c>)
 8002b10:	e001      	b.n	8002b16 <update_motor_values+0x15e>
 8002b12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b16:	e9c7 2306 	strd	r2, r3, [r7, #24]


	return actual_val;
 8002b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002b1e:	ec43 2b17 	vmov	d7, r2, r3
 8002b22:	eeb0 0a47 	vmov.f32	s0, s14
 8002b26:	eef0 0a67 	vmov.f32	s1, s15
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	c0340000 	.word	0xc0340000
 8002b38:	20000510 	.word	0x20000510
 8002b3c:	20000440 	.word	0x20000440
 8002b40:	40240000 	.word	0x40240000
 8002b44:	c0240000 	.word	0xc0240000

08002b48 <save_Err>:
void save_Err(int motor){
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	switch(motor){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d02f      	beq.n	8002bb6 <save_Err+0x6e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	dc3f      	bgt.n	8002bdc <save_Err+0x94>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d003      	beq.n	8002b6a <save_Err+0x22>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d013      	beq.n	8002b90 <save_Err+0x48>
		pre_actual_val_3=actual_val;
		err_last_3=err_last;
		err_next_3=err_next;
		break;
	}
}
 8002b68:	e038      	b.n	8002bdc <save_Err+0x94>
		pre_actual_val_1=actual_val;
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <save_Err+0xa0>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	491e      	ldr	r1, [pc, #120]	; (8002bec <save_Err+0xa4>)
 8002b72:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_1=err_last;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <save_Err+0xa8>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	491d      	ldr	r1, [pc, #116]	; (8002bf4 <save_Err+0xac>)
 8002b7e:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_1=err_next;
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <save_Err+0xb0>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	491c      	ldr	r1, [pc, #112]	; (8002bfc <save_Err+0xb4>)
 8002b8a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002b8e:	e025      	b.n	8002bdc <save_Err+0x94>
		pre_actual_val_2=actual_val;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <save_Err+0xa0>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	491a      	ldr	r1, [pc, #104]	; (8002c00 <save_Err+0xb8>)
 8002b98:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_2=err_last;
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <save_Err+0xa8>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	4918      	ldr	r1, [pc, #96]	; (8002c04 <save_Err+0xbc>)
 8002ba4:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_2=err_next;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <save_Err+0xb0>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	4916      	ldr	r1, [pc, #88]	; (8002c08 <save_Err+0xc0>)
 8002bb0:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002bb4:	e012      	b.n	8002bdc <save_Err+0x94>
		pre_actual_val_3=actual_val;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <save_Err+0xa0>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	4913      	ldr	r1, [pc, #76]	; (8002c0c <save_Err+0xc4>)
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_3=err_last;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <save_Err+0xa8>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	4911      	ldr	r1, [pc, #68]	; (8002c10 <save_Err+0xc8>)
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_3=err_next;
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <save_Err+0xb0>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	490f      	ldr	r1, [pc, #60]	; (8002c14 <save_Err+0xcc>)
 8002bd6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002bda:	bf00      	nop
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	20000558 	.word	0x20000558
 8002bec:	20000560 	.word	0x20000560
 8002bf0:	20000530 	.word	0x20000530
 8002bf4:	20000518 	.word	0x20000518
 8002bf8:	20000550 	.word	0x20000550
 8002bfc:	20000538 	.word	0x20000538
 8002c00:	20000568 	.word	0x20000568
 8002c04:	20000520 	.word	0x20000520
 8002c08:	20000540 	.word	0x20000540
 8002c0c:	20000570 	.word	0x20000570
 8002c10:	20000528 	.word	0x20000528
 8002c14:	20000548 	.word	0x20000548

08002c18 <PID_Calculation>:
double PID_Calculation(int motor, double actual_val){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	ed87 0b00 	vstr	d0, [r7]

	switch(motor) {
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d04d      	beq.n	8002cc6 <PID_Calculation+0xae>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	dc6c      	bgt.n	8002d0a <PID_Calculation+0xf2>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <PID_Calculation+0x26>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d022      	beq.n	8002c82 <PID_Calculation+0x6a>
 8002c3c:	e065      	b.n	8002d0a <PID_Calculation+0xf2>
	    case MOTOR_1:
			actual_val=update_motor_values(target_val_1, actual_val, pre_actual_val_1, err_last_1, err_next_1);
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <PID_Calculation+0x108>)
 8002c40:	ed93 7b00 	vldr	d7, [r3]
 8002c44:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <PID_Calculation+0x10c>)
 8002c46:	ed93 6b00 	vldr	d6, [r3]
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <PID_Calculation+0x110>)
 8002c4c:	ed93 5b00 	vldr	d5, [r3]
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <PID_Calculation+0x114>)
 8002c52:	ed93 4b00 	vldr	d4, [r3]
 8002c56:	eeb0 3a45 	vmov.f32	s6, s10
 8002c5a:	eef0 3a65 	vmov.f32	s7, s11
 8002c5e:	eeb0 2a46 	vmov.f32	s4, s12
 8002c62:	eef0 2a66 	vmov.f32	s5, s13
 8002c66:	ed97 1b00 	vldr	d1, [r7]
 8002c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c6e:	eef0 0a67 	vmov.f32	s1, s15
 8002c72:	f7ff fea1 	bl	80029b8 <update_motor_values>
 8002c76:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7ff ff64 	bl	8002b48 <save_Err>

	        break;
 8002c80:	e043      	b.n	8002d0a <PID_Calculation+0xf2>
	    case MOTOR_2:
			actual_val=update_motor_values(target_val_2, actual_val, pre_actual_val_2, err_last_2, err_next_2);
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <PID_Calculation+0x118>)
 8002c84:	ed93 7b00 	vldr	d7, [r3]
 8002c88:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <PID_Calculation+0x11c>)
 8002c8a:	ed93 6b00 	vldr	d6, [r3]
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <PID_Calculation+0x120>)
 8002c90:	ed93 5b00 	vldr	d5, [r3]
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <PID_Calculation+0x124>)
 8002c96:	ed93 4b00 	vldr	d4, [r3]
 8002c9a:	eeb0 3a45 	vmov.f32	s6, s10
 8002c9e:	eef0 3a65 	vmov.f32	s7, s11
 8002ca2:	eeb0 2a46 	vmov.f32	s4, s12
 8002ca6:	eef0 2a66 	vmov.f32	s5, s13
 8002caa:	ed97 1b00 	vldr	d1, [r7]
 8002cae:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb2:	eef0 0a67 	vmov.f32	s1, s15
 8002cb6:	f7ff fe7f 	bl	80029b8 <update_motor_values>
 8002cba:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_2);
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f7ff ff42 	bl	8002b48 <save_Err>

	        break;
 8002cc4:	e021      	b.n	8002d0a <PID_Calculation+0xf2>
	    case MOTOR_3:
			actual_val=update_motor_values(target_val_3, actual_val, pre_actual_val_3, err_last_3, err_next_3);
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <PID_Calculation+0x128>)
 8002cc8:	ed93 7b00 	vldr	d7, [r3]
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <PID_Calculation+0x12c>)
 8002cce:	ed93 6b00 	vldr	d6, [r3]
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <PID_Calculation+0x130>)
 8002cd4:	ed93 5b00 	vldr	d5, [r3]
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <PID_Calculation+0x134>)
 8002cda:	ed93 4b00 	vldr	d4, [r3]
 8002cde:	eeb0 3a45 	vmov.f32	s6, s10
 8002ce2:	eef0 3a65 	vmov.f32	s7, s11
 8002ce6:	eeb0 2a46 	vmov.f32	s4, s12
 8002cea:	eef0 2a66 	vmov.f32	s5, s13
 8002cee:	ed97 1b00 	vldr	d1, [r7]
 8002cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf6:	eef0 0a67 	vmov.f32	s1, s15
 8002cfa:	f7ff fe5d 	bl	80029b8 <update_motor_values>
 8002cfe:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_3);
 8002d02:	2003      	movs	r0, #3
 8002d04:	f7ff ff20 	bl	8002b48 <save_Err>

	        break;
 8002d08:	bf00      	nop
	}
	return actual_val;
 8002d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d12:	eeb0 0a47 	vmov.f32	s0, s14
 8002d16:	eef0 0a67 	vmov.f32	s1, s15
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200004f8 	.word	0x200004f8
 8002d24:	20000560 	.word	0x20000560
 8002d28:	20000518 	.word	0x20000518
 8002d2c:	20000538 	.word	0x20000538
 8002d30:	20000500 	.word	0x20000500
 8002d34:	20000568 	.word	0x20000568
 8002d38:	20000520 	.word	0x20000520
 8002d3c:	20000540 	.word	0x20000540
 8002d40:	20000508 	.word	0x20000508
 8002d44:	20000570 	.word	0x20000570
 8002d48:	20000528 	.word	0x20000528
 8002d4c:	20000548 	.word	0x20000548

08002d50 <PID>:

void PID(void){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0

	rpm_1=get_rpm(MOTOR_1);
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7fe f94b 	bl	8000ff0 <get_rpm>
 8002d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d5e:	eef0 7a60 	vmov.f32	s15, s1
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <PID+0x114>)
 8002d64:	ed83 7b00 	vstr	d7, [r3]

	rpm_2=get_rpm(MOTOR_2);
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f7fe f941 	bl	8000ff0 <get_rpm>
 8002d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002d72:	eef0 7a60 	vmov.f32	s15, s1
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <PID+0x118>)
 8002d78:	ed83 7b00 	vstr	d7, [r3]
	rpm_3=get_rpm(MOTOR_3);
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	f7fe f937 	bl	8000ff0 <get_rpm>
 8002d82:	eeb0 7a40 	vmov.f32	s14, s0
 8002d86:	eef0 7a60 	vmov.f32	s15, s1
 8002d8a:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <PID+0x11c>)
 8002d8c:	ed83 7b00 	vstr	d7, [r3]

	out_1=PID_Calculation(MOTOR_1, rpm_1);
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <PID+0x114>)
 8002d92:	ed93 7b00 	vldr	d7, [r3]
 8002d96:	eeb0 0a47 	vmov.f32	s0, s14
 8002d9a:	eef0 0a67 	vmov.f32	s1, s15
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7ff ff3a 	bl	8002c18 <PID_Calculation>
 8002da4:	eeb0 7a40 	vmov.f32	s14, s0
 8002da8:	eef0 7a60 	vmov.f32	s15, s1
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <PID+0x120>)
 8002dae:	ed83 7b00 	vstr	d7, [r3]
	out_2=PID_Calculation(MOTOR_2, rpm_2);
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <PID+0x118>)
 8002db4:	ed93 7b00 	vldr	d7, [r3]
 8002db8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dbc:	eef0 0a67 	vmov.f32	s1, s15
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7ff ff29 	bl	8002c18 <PID_Calculation>
 8002dc6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dca:	eef0 7a60 	vmov.f32	s15, s1
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <PID+0x124>)
 8002dd0:	ed83 7b00 	vstr	d7, [r3]
	out_3=PID_Calculation(MOTOR_3, rpm_3);
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <PID+0x11c>)
 8002dd6:	ed93 7b00 	vldr	d7, [r3]
 8002dda:	eeb0 0a47 	vmov.f32	s0, s14
 8002dde:	eef0 0a67 	vmov.f32	s1, s15
 8002de2:	2003      	movs	r0, #3
 8002de4:	f7ff ff18 	bl	8002c18 <PID_Calculation>
 8002de8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dec:	eef0 7a60 	vmov.f32	s15, s1
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <PID+0x128>)
 8002df2:	ed83 7b00 	vstr	d7, [r3]

	set_duty_cycle(MOTOR_1, out_1);
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <PID+0x120>)
 8002df8:	ed93 7b00 	vldr	d7, [r3]
 8002dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002e00:	eef0 0a67 	vmov.f32	s1, s15
 8002e04:	2001      	movs	r0, #1
 8002e06:	f7ff fa0f 	bl	8002228 <set_duty_cycle>
	set_duty_cycle(MOTOR_2, out_2);
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <PID+0x124>)
 8002e0c:	ed93 7b00 	vldr	d7, [r3]
 8002e10:	eeb0 0a47 	vmov.f32	s0, s14
 8002e14:	eef0 0a67 	vmov.f32	s1, s15
 8002e18:	2002      	movs	r0, #2
 8002e1a:	f7ff fa05 	bl	8002228 <set_duty_cycle>
	set_duty_cycle(MOTOR_3, out_3);
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <PID+0x128>)
 8002e20:	ed93 7b00 	vldr	d7, [r3]
 8002e24:	eeb0 0a47 	vmov.f32	s0, s14
 8002e28:	eef0 0a67 	vmov.f32	s1, s15
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	f7ff f9fb 	bl	8002228 <set_duty_cycle>

	Run_Now(prev_duty_1, prev_duty_2, prev_duty_3);
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <PID+0x12c>)
 8002e34:	ed93 7b00 	vldr	d7, [r3]
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <PID+0x130>)
 8002e3a:	ed93 6b00 	vldr	d6, [r3]
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <PID+0x134>)
 8002e40:	ed93 5b00 	vldr	d5, [r3]
 8002e44:	eeb0 2a45 	vmov.f32	s4, s10
 8002e48:	eef0 2a65 	vmov.f32	s5, s11
 8002e4c:	eeb0 1a46 	vmov.f32	s2, s12
 8002e50:	eef0 1a66 	vmov.f32	s3, s13
 8002e54:	eeb0 0a47 	vmov.f32	s0, s14
 8002e58:	eef0 0a67 	vmov.f32	s1, s15
 8002e5c:	f7ff fa98 	bl	8002390 <Run_Now>
//	UARTprintf("SET_POINT >>>>> V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n \t out_1: %f \t out_2: %f \t out_3: %f \r\n \t rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r\n\n", V1,V2,V3,out_1,out_2,out_3, rpm_1, rpm_2, rpm_3);
//	UARTprintf("V1: %d \t V2: %d \t V3: %d \r\n",(uint32_t)V1,(uint32_t)V2,(uint32_t)V3);
//	UARTprintf("out_1: %d \t out_2: %d \t out_3: %d \r \n",(uint32_t)out_1,(uint32_t)out_2,(uint32_t)out_3);
//	UARTprintf("rpm_1: %d \t rpm_2: %d \t rpm_3: %d \r \n \r\n", (uint32_t)rpm_1, (uint32_t)rpm_2, (uint32_t)rpm_3);
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000490 	.word	0x20000490
 8002e68:	20000498 	.word	0x20000498
 8002e6c:	200004a0 	.word	0x200004a0
 8002e70:	20000478 	.word	0x20000478
 8002e74:	20000480 	.word	0x20000480
 8002e78:	20000488 	.word	0x20000488
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	20000010 	.word	0x20000010
 8002e84:	20000018 	.word	0x20000018

08002e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_MspInit+0x54>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_MspInit+0x54>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_MspInit+0x54>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_MspInit+0x54>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_MspInit+0x54>)
 8002eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_MspInit+0x54>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	210f      	movs	r1, #15
 8002eca:	f06f 0001 	mvn.w	r0, #1
 8002ece:	f000 fcc9 	bl	8003864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_I2C_MspInit+0x84>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12b      	bne.n	8002f5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	23c0      	movs	r3, #192	; 0xc0
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f22:	2312      	movs	r3, #18
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <HAL_I2C_MspInit+0x8c>)
 8002f3a:	f000 fcbd 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a50      	ldr	r2, [pc, #320]	; (80030d0 <HAL_TIM_Encoder_MspInit+0x160>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d135      	bne.n	8002ffe <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4a4e      	ldr	r2, [pc, #312]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa2:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	4b48      	ldr	r3, [pc, #288]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a47      	ldr	r2, [pc, #284]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8002fb8:	f043 0310 	orr.w	r3, r3, #16
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002fca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	483c      	ldr	r0, [pc, #240]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x168>)
 8002fe8:	f000 fc66 	bl	80038b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8002fec:	2200      	movs	r2, #0
 8002fee:	210f      	movs	r1, #15
 8002ff0:	2019      	movs	r0, #25
 8002ff2:	f000 fc37 	bl	8003864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ff6:	2019      	movs	r0, #25
 8002ff8:	f000 fc50 	bl	800389c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ffc:	e063      	b.n	80030c6 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a36      	ldr	r2, [pc, #216]	; (80030dc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d12c      	bne.n	8003062 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	4a30      	ldr	r2, [pc, #192]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	6413      	str	r3, [r2, #64]	; 0x40
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6313      	str	r3, [r2, #48]	; 0x30
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003040:	23c0      	movs	r3, #192	; 0xc0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304c:	2300      	movs	r3, #0
 800304e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003050:	2302      	movs	r3, #2
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003058:	4619      	mov	r1, r3
 800305a:	4821      	ldr	r0, [pc, #132]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x170>)
 800305c:	f000 fc2c 	bl	80038b8 <HAL_GPIO_Init>
}
 8003060:	e031      	b.n	80030c6 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM4)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x174>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d12c      	bne.n	80030c6 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6413      	str	r3, [r2, #64]	; 0x40
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003092:	f043 0308 	orr.w	r3, r3, #8
 8003096:	6313      	str	r3, [r2, #48]	; 0x30
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80030a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030b6:	2302      	movs	r3, #2
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	4619      	mov	r1, r3
 80030c0:	4809      	ldr	r0, [pc, #36]	; (80030e8 <HAL_TIM_Encoder_MspInit+0x178>)
 80030c2:	f000 fbf9 	bl	80038b8 <HAL_GPIO_Init>
}
 80030c6:	bf00      	nop
 80030c8:	3738      	adds	r7, #56	; 0x38
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40020c00 	.word	0x40020c00

080030ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a15      	ldr	r2, [pc, #84]	; (8003150 <HAL_TIM_Base_MspInit+0x64>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_TIM_Base_MspInit+0x68>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_TIM_Base_MspInit+0x68>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_TIM_Base_MspInit+0x68>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800311a:	e012      	b.n	8003142 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <HAL_TIM_Base_MspInit+0x6c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10d      	bne.n	8003142 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_TIM_Base_MspInit+0x68>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_TIM_Base_MspInit+0x68>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6453      	str	r3, [r2, #68]	; 0x44
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_TIM_Base_MspInit+0x68>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40023800 	.word	0x40023800
 8003158:	40014000 	.word	0x40014000

0800315c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a24      	ldr	r2, [pc, #144]	; (800320c <HAL_TIM_MspPostInit+0xb0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d11e      	bne.n	80031bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_TIM_MspPostInit+0xb4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a22      	ldr	r2, [pc, #136]	; (8003210 <HAL_TIM_MspPostInit+0xb4>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_TIM_MspPostInit+0xb4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800319a:	230c      	movs	r3, #12
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031aa:	2302      	movs	r3, #2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	4817      	ldr	r0, [pc, #92]	; (8003214 <HAL_TIM_MspPostInit+0xb8>)
 80031b6:	f000 fb7f 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80031ba:	e022      	b.n	8003202 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM9)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_TIM_MspPostInit+0xbc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d11d      	bne.n	8003202 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_TIM_MspPostInit+0xb4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_TIM_MspPostInit+0xb4>)
 80031d0:	f043 0310 	orr.w	r3, r3, #16
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_TIM_MspPostInit+0xb4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031e2:	2320      	movs	r3, #32
 80031e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80031f2:	2303      	movs	r3, #3
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4619      	mov	r1, r3
 80031fc:	4807      	ldr	r0, [pc, #28]	; (800321c <HAL_TIM_MspPostInit+0xc0>)
 80031fe:	f000 fb5b 	bl	80038b8 <HAL_GPIO_Init>
}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	; 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40000c00 	.word	0x40000c00
 8003210:	40023800 	.word	0x40023800
 8003214:	40020000 	.word	0x40020000
 8003218:	40014000 	.word	0x40014000
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <HAL_UART_MspInit+0xc0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d14a      	bne.n	80032d8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 800324c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_UART_MspInit+0xc4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800329a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032a8:	2308      	movs	r3, #8
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4619      	mov	r1, r3
 80032b2:	480d      	ldr	r0, [pc, #52]	; (80032e8 <HAL_UART_MspInit+0xc8>)
 80032b4:	f000 fb00 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032b8:	2304      	movs	r3, #4
 80032ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032c8:	2308      	movs	r3, #8
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <HAL_UART_MspInit+0xcc>)
 80032d4:	f000 faf0 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80032d8:	bf00      	nop
 80032da:	3728      	adds	r7, #40	; 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40005000 	.word	0x40005000
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00

080032f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_InitTick+0xd0>)
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	4a2d      	ldr	r2, [pc, #180]	; (80033c0 <HAL_InitTick+0xd0>)
 800330a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330e:	6453      	str	r3, [r2, #68]	; 0x44
 8003310:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_InitTick+0xd0>)
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800331c:	f107 020c 	add.w	r2, r7, #12
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f002 fa78 	bl	800581c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800332c:	f002 fa62 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8003330:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <HAL_InitTick+0xd4>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0c9b      	lsrs	r3, r3, #18
 800333c:	3b01      	subs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_InitTick+0xd8>)
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_InitTick+0xdc>)
 8003344:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_InitTick+0xd8>)
 8003348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800334c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_InitTick+0xd8>)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003354:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_InitTick+0xd8>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_InitTick+0xd8>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_InitTick+0xd8>)
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8003366:	4818      	ldr	r0, [pc, #96]	; (80033c8 <HAL_InitTick+0xd8>)
 8003368:	f002 fa8a 	bl	8005880 <HAL_TIM_Base_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11b      	bne.n	80033b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800337a:	4813      	ldr	r0, [pc, #76]	; (80033c8 <HAL_InitTick+0xd8>)
 800337c:	f002 fad0 	bl	8005920 <HAL_TIM_Base_Start_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800338a:	2b00      	cmp	r3, #0
 800338c:	d111      	bne.n	80033b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800338e:	2019      	movs	r0, #25
 8003390:	f000 fa84 	bl	800389c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d808      	bhi.n	80033ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800339a:	2200      	movs	r2, #0
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	2019      	movs	r0, #25
 80033a0:	f000 fa60 	bl	8003864 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033a4:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_InitTick+0xe0>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e002      	b.n	80033b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80033b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3730      	adds	r7, #48	; 0x30
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	20000578 	.word	0x20000578
 80033cc:	40014400 	.word	0x40014400
 80033d0:	20000024 	.word	0x20000024

080033d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033d8:	e7fe      	b.n	80033d8 <NMI_Handler+0x4>

080033da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033de:	e7fe      	b.n	80033de <HardFault_Handler+0x4>

080033e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <MemManage_Handler+0x4>

080033e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ea:	e7fe      	b.n	80033ea <BusFault_Handler+0x4>

080033ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f0:	e7fe      	b.n	80033f0 <UsageFault_Handler+0x4>

080033f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003404:	4803      	ldr	r0, [pc, #12]	; (8003414 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003406:	f002 fd51 	bl	8005eac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800340a:	4803      	ldr	r0, [pc, #12]	; (8003418 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800340c:	f002 fd4e 	bl	8005eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000280 	.word	0x20000280
 8003418:	20000578 	.word	0x20000578

0800341c <ITM_SendChar>:
//ITM Register Address
#define ITM_STIMULUS_PORT0		*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN			*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <ITM_SendChar+0x48>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <ITM_SendChar+0x48>)
 800342c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003430:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <ITM_SendChar+0x4c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <ITM_SendChar+0x4c>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800343e:	bf00      	nop
 8003440:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f8      	beq.n	8003440 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800344e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	6013      	str	r3, [r2, #0]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000edfc 	.word	0xe000edfc
 8003468:	e0000e00 	.word	0xe0000e00

0800346c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return 1;
 8003470:	2301      	movs	r3, #1
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_kill>:

int _kill(int pid, int sig)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003486:	f007 fd2f 	bl	800aee8 <__errno>
 800348a:	4603      	mov	r3, r0
 800348c:	2216      	movs	r2, #22
 800348e:	601a      	str	r2, [r3, #0]
  return -1;
 8003490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_exit>:

void _exit (int status)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffe7 	bl	800347c <_kill>
  while (1) {}    /* Make sure we hang here */
 80034ae:	e7fe      	b.n	80034ae <_exit+0x12>

080034b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e00a      	b.n	80034d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034c2:	f3af 8000 	nop.w
 80034c6:	4601      	mov	r1, r0
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60ba      	str	r2, [r7, #8]
 80034ce:	b2ca      	uxtb	r2, r1
 80034d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3301      	adds	r3, #1
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	dbf0      	blt.n	80034c2 <_read+0x12>
  }

  return len;
 80034e0:	687b      	ldr	r3, [r7, #4]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e009      	b.n	8003510 <_write+0x26>
  {
//    __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	60ba      	str	r2, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff89 	bl	800341c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	dbf1      	blt.n	80034fc <_write+0x12>
  }
  return len;
 8003518:	687b      	ldr	r3, [r7, #4]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_close>:

int _close(int file)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800354a:	605a      	str	r2, [r3, #4]
  return 0;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <_isatty>:

int _isatty(int file)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <_sbrk+0x5c>)
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <_sbrk+0x60>)
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <_sbrk+0x64>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <_sbrk+0x64>)
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <_sbrk+0x68>)
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <_sbrk+0x64>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d207      	bcs.n	80035cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035bc:	f007 fc94 	bl	800aee8 <__errno>
 80035c0:	4603      	mov	r3, r0
 80035c2:	220c      	movs	r2, #12
 80035c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	e009      	b.n	80035e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <_sbrk+0x64>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <_sbrk+0x64>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <_sbrk+0x64>)
 80035dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20020000 	.word	0x20020000
 80035ec:	00000400 	.word	0x00000400
 80035f0:	200005c0 	.word	0x200005c0
 80035f4:	20005068 	.word	0x20005068

080035f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <SystemInit+0x20>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <SystemInit+0x20>)
 8003604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800361c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003654 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003620:	f7ff ffea 	bl	80035f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003624:	480c      	ldr	r0, [pc, #48]	; (8003658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003626:	490d      	ldr	r1, [pc, #52]	; (800365c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800362a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800362c:	e002      	b.n	8003634 <LoopCopyDataInit>

0800362e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003632:	3304      	adds	r3, #4

08003634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003638:	d3f9      	bcc.n	800362e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363a:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800363c:	4c0a      	ldr	r4, [pc, #40]	; (8003668 <LoopFillZerobss+0x22>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003640:	e001      	b.n	8003646 <LoopFillZerobss>

08003642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003644:	3204      	adds	r2, #4

08003646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003648:	d3fb      	bcc.n	8003642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800364a:	f007 fc53 	bl	800aef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364e:	f7fd fe67 	bl	8001320 <main>
  bx  lr    
 8003652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800365c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003660:	0800feb0 	.word	0x0800feb0
  ldr r2, =_sbss
 8003664:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003668:	20005064 	.word	0x20005064

0800366c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800366c:	e7fe      	b.n	800366c <ADC_IRQHandler>
	...

08003670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_Init+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <HAL_Init+0x40>)
 800367a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_Init+0x40>)
 8003686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_Init+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_Init+0x40>)
 8003692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003698:	2003      	movs	r0, #3
 800369a:	f000 f8d8 	bl	800384e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369e:	200f      	movs	r0, #15
 80036a0:	f7ff fe26 	bl	80032f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a4:	f7ff fbf0 	bl	8002e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_IncTick+0x20>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_IncTick+0x24>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_IncTick+0x24>)
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000028 	.word	0x20000028
 80036d8:	200005c4 	.word	0x200005c4

080036dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return uwTick;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_GetTick+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200005c4 	.word	0x200005c4

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0b      	blt.n	8003782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <__NVIC_EnableIRQ+0x38>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ff4c 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003876:	f7ff ff61 	bl	800373c <__NVIC_GetPriorityGrouping>
 800387a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	6978      	ldr	r0, [r7, #20]
 8003882:	f7ff ffb1 	bl	80037e8 <NVIC_EncodePriority>
 8003886:	4602      	mov	r2, r0
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff80 	bl	8003794 <__NVIC_SetPriority>
}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff54 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e16b      	b.n	8003bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	f040 815a 	bne.w	8003ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d005      	beq.n	800390a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	2b02      	cmp	r3, #2
 8003908:	d130      	bne.n	800396c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0201 	and.w	r2, r3, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d017      	beq.n	80039a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d123      	bne.n	80039fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80b4 	beq.w	8003ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b60      	ldr	r3, [pc, #384]	; (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a5f      	ldr	r2, [pc, #380]	; (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a5a:	4a5b      	ldr	r2, [pc, #364]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	220f      	movs	r2, #15
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_GPIO_Init+0x314>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x226>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a51      	ldr	r2, [pc, #324]	; (8003bd0 <HAL_GPIO_Init+0x318>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x222>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a50      	ldr	r2, [pc, #320]	; (8003bd4 <HAL_GPIO_Init+0x31c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x21e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_GPIO_Init+0x320>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x21a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4e      	ldr	r2, [pc, #312]	; (8003bdc <HAL_GPIO_Init+0x324>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x216>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4d      	ldr	r2, [pc, #308]	; (8003be0 <HAL_GPIO_Init+0x328>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x212>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4c      	ldr	r2, [pc, #304]	; (8003be4 <HAL_GPIO_Init+0x32c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x20e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <HAL_GPIO_Init+0x330>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x20a>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e00e      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	e00c      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	e00a      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003aca:	2305      	movs	r3, #5
 8003acc:	e008      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ace:	2304      	movs	r3, #4
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e004      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e002      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f002 0203 	and.w	r2, r2, #3
 8003ae6:	0092      	lsls	r2, r2, #2
 8003ae8:	4093      	lsls	r3, r2
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af0:	4935      	ldr	r1, [pc, #212]	; (8003bc8 <HAL_GPIO_Init+0x310>)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	3302      	adds	r3, #2
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b22:	4a32      	ldr	r2, [pc, #200]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b28:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b4c:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b76:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba0:	4a12      	ldr	r2, [pc, #72]	; (8003bec <HAL_GPIO_Init+0x334>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	f67f ae90 	bls.w	80038d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3724      	adds	r7, #36	; 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40021c00 	.word	0x40021c00
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c0c:	e003      	b.n	8003c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e12b      	b.n	8003e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff f948 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c88:	f001 fda0 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8003c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a81      	ldr	r2, [pc, #516]	; (8003e98 <HAL_I2C_Init+0x274>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d807      	bhi.n	8003ca8 <HAL_I2C_Init+0x84>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a80      	ldr	r2, [pc, #512]	; (8003e9c <HAL_I2C_Init+0x278>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf94      	ite	ls
 8003ca0:	2301      	movls	r3, #1
 8003ca2:	2300      	movhi	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e006      	b.n	8003cb6 <HAL_I2C_Init+0x92>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a7d      	ldr	r2, [pc, #500]	; (8003ea0 <HAL_I2C_Init+0x27c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf94      	ite	ls
 8003cb0:	2301      	movls	r3, #1
 8003cb2:	2300      	movhi	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0e7      	b.n	8003e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a78      	ldr	r2, [pc, #480]	; (8003ea4 <HAL_I2C_Init+0x280>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0c9b      	lsrs	r3, r3, #18
 8003cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a6a      	ldr	r2, [pc, #424]	; (8003e98 <HAL_I2C_Init+0x274>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d802      	bhi.n	8003cf8 <HAL_I2C_Init+0xd4>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	e009      	b.n	8003d0c <HAL_I2C_Init+0xe8>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	4a69      	ldr	r2, [pc, #420]	; (8003ea8 <HAL_I2C_Init+0x284>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	099b      	lsrs	r3, r3, #6
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	495c      	ldr	r1, [pc, #368]	; (8003e98 <HAL_I2C_Init+0x274>)
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	d819      	bhi.n	8003d60 <HAL_I2C_Init+0x13c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1e59      	subs	r1, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d40:	400b      	ands	r3, r1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_I2C_Init+0x138>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e59      	subs	r1, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5a:	e051      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	e04f      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d111      	bne.n	8003d8c <HAL_I2C_Init+0x168>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e012      	b.n	8003db2 <HAL_I2C_Init+0x18e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1e58      	subs	r0, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	0099      	lsls	r1, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Init+0x196>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e022      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10e      	bne.n	8003de0 <HAL_I2C_Init+0x1bc>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1e58      	subs	r0, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	440b      	add	r3, r1
 8003dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	e00f      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1e58      	subs	r0, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	0099      	lsls	r1, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	6809      	ldr	r1, [r1, #0]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6911      	ldr	r1, [r2, #16]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68d2      	ldr	r2, [r2, #12]
 8003e3a:	4311      	orrs	r1, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	000186a0 	.word	0x000186a0
 8003e9c:	001e847f 	.word	0x001e847f
 8003ea0:	003d08ff 	.word	0x003d08ff
 8003ea4:	431bde83 	.word	0x431bde83
 8003ea8:	10624dd3 	.word	0x10624dd3

08003eac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	460b      	mov	r3, r1
 8003eba:	817b      	strh	r3, [r7, #10]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff fc0c 	bl	80036dc <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	f040 80e0 	bne.w	8004094 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2319      	movs	r3, #25
 8003eda:	2201      	movs	r2, #1
 8003edc:	4970      	ldr	r1, [pc, #448]	; (80040a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fe0e 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	e0d3      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_I2C_Master_Transmit+0x50>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e0cc      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d007      	beq.n	8003f22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	893a      	ldrh	r2, [r7, #8]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a50      	ldr	r2, [pc, #320]	; (80040a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f64:	8979      	ldrh	r1, [r7, #10]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fbc8 	bl	8004700 <I2C_MasterRequestWrite>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e08d      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f90:	e066      	b.n	8004060 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fecc 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06b      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11b      	bne.n	8004034 <HAL_I2C_Master_Transmit+0x188>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d017      	beq.n	8004034 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	6a39      	ldr	r1, [r7, #32]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fec3 	bl	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b04      	cmp	r3, #4
 800404a:	d107      	bne.n	800405c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e01a      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d194      	bne.n	8003f92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e000      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
  }
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	00100002 	.word	0x00100002
 80040a4:	ffff0000 	.word	0xffff0000

080040a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	460b      	mov	r3, r1
 80040bc:	813b      	strh	r3, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7ff fb0b 	bl	80036dc <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	f040 80d9 	bne.w	8004288 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2319      	movs	r3, #25
 80040dc:	2201      	movs	r2, #1
 80040de:	496d      	ldr	r1, [pc, #436]	; (8004294 <HAL_I2C_Mem_Write+0x1ec>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fd0d 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0cc      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_I2C_Mem_Write+0x56>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0c5      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d007      	beq.n	8004124 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	; 0x21
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a4d      	ldr	r2, [pc, #308]	; (8004298 <HAL_I2C_Mem_Write+0x1f0>)
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004166:	88f8      	ldrh	r0, [r7, #6]
 8004168:	893a      	ldrh	r2, [r7, #8]
 800416a:	8979      	ldrh	r1, [r7, #10]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	4603      	mov	r3, r0
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fb44 	bl	8004804 <I2C_RequestMemoryWrite>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d052      	beq.n	8004228 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e081      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fdd2 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06b      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d11b      	bne.n	8004228 <HAL_I2C_Mem_Write+0x180>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d017      	beq.n	8004228 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1aa      	bne.n	8004186 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fdc5 	bl	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e016      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	00100002 	.word	0x00100002
 8004298:	ffff0000 	.word	0xffff0000

0800429c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	; 0x30
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	817b      	strh	r3, [r7, #10]
 80042ae:	460b      	mov	r3, r1
 80042b0:	813b      	strh	r3, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b6:	f7ff fa11 	bl	80036dc <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	f040 8214 	bne.w	80046f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2319      	movs	r3, #25
 80042d0:	2201      	movs	r2, #1
 80042d2:	497b      	ldr	r1, [pc, #492]	; (80044c0 <HAL_I2C_Mem_Read+0x224>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fc13 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
 80042e2:	e207      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x56>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e200      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d007      	beq.n	8004318 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2222      	movs	r2, #34	; 0x22
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2240      	movs	r2, #64	; 0x40
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_I2C_Mem_Read+0x228>)
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800435a:	88f8      	ldrh	r0, [r7, #6]
 800435c:	893a      	ldrh	r2, [r7, #8]
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	4603      	mov	r3, r0
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fae0 	bl	8004930 <I2C_RequestMemoryRead>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1bc      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d113      	bne.n	80043aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e190      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d11b      	bne.n	80043ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e170      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d11b      	bne.n	800442a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	e150      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004440:	e144      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	2b03      	cmp	r3, #3
 8004448:	f200 80f1 	bhi.w	800462e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	2b01      	cmp	r3, #1
 8004452:	d123      	bne.n	800449c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fcfb 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e145      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449a:	e117      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d14e      	bne.n	8004542 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	2200      	movs	r2, #0
 80044ac:	4906      	ldr	r1, [pc, #24]	; (80044c8 <HAL_I2C_Mem_Read+0x22c>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fb26 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e11a      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
 80044be:	bf00      	nop
 80044c0:	00100002 	.word	0x00100002
 80044c4:	ffff0000 	.word	0xffff0000
 80044c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004540:	e0c4      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	2200      	movs	r2, #0
 800454a:	496c      	ldr	r1, [pc, #432]	; (80046fc <HAL_I2C_Mem_Read+0x460>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fad7 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0cb      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	2200      	movs	r2, #0
 80045a6:	4955      	ldr	r1, [pc, #340]	; (80046fc <HAL_I2C_Mem_Read+0x460>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 faa9 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e09d      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800462c:	e04e      	b.n	80046cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fc0e 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e058      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d124      	bne.n	80046cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f aeb6 	bne.w	8004442 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010004 	.word	0x00010004

08004700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d006      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d003      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d108      	bne.n	800473c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00b      	b.n	8004754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b12      	cmp	r3, #18
 8004742:	d107      	bne.n	8004754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f9cd 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477a:	d103      	bne.n	8004784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e035      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004790:	d108      	bne.n	80047a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a0:	611a      	str	r2, [r3, #16]
 80047a2:	e01b      	b.n	80047dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	11db      	asrs	r3, r3, #7
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0306 	and.w	r3, r3, #6
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f063 030f 	orn	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	490e      	ldr	r1, [pc, #56]	; (80047fc <I2C_MasterRequestWrite+0xfc>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fa16 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e010      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <I2C_MasterRequestWrite+0x100>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fa06 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010008 	.word	0x00010008
 8004800:	00010002 	.word	0x00010002

08004804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4603      	mov	r3, r0
 8004814:	817b      	strh	r3, [r7, #10]
 8004816:	460b      	mov	r3, r1
 8004818:	813b      	strh	r3, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f960 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004854:	d103      	bne.n	800485e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e05f      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	492d      	ldr	r1, [pc, #180]	; (800492c <I2C_RequestMemoryWrite+0x128>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f9bb 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e04c      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa46 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e02b      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e021      	b.n	8004920 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa20 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e005      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	00010002 	.word	0x00010002

08004930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2200      	movs	r2, #0
 8004972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f8c2 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d103      	bne.n	800499a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0aa      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	4952      	ldr	r1, [pc, #328]	; (8004afc <I2C_RequestMemoryRead+0x1cc>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f91d 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e097      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	6a39      	ldr	r1, [r7, #32]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f9a8 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e076      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	e021      	b.n	8004a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a18:	893b      	ldrh	r3, [r7, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6a39      	ldr	r1, [r7, #32]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f982 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00d      	beq.n	8004a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d107      	bne.n	8004a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e050      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a52:	893b      	ldrh	r3, [r7, #8]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	6a39      	ldr	r1, [r7, #32]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f967 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e035      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f82b 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d103      	bne.n	8004ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e013      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	4906      	ldr	r1, [pc, #24]	; (8004afc <I2C_RequestMemoryRead+0x1cc>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f886 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	00010002 	.word	0x00010002

08004b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b10:	e048      	b.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d044      	beq.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fe fddf 	bl	80036dc <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d139      	bne.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d10d      	bne.n	8004b56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	e00c      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d116      	bne.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e023      	b.n	8004bec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10d      	bne.n	8004bca <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	e00c      	b.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	43da      	mvns	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d093      	beq.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c02:	e071      	b.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d123      	bne.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0204 	orr.w	r2, r3, #4
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e067      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d041      	beq.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fe fd3a 	bl	80036dc <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d136      	bne.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d10c      	bne.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	2300      	moveq	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	e00b      	b.n	8004cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	43da      	mvns	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e021      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10c      	bne.n	8004d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	43da      	mvns	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e00b      	b.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	43da      	mvns	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f47f af6d 	bne.w	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d40:	e034      	b.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f8e3 	bl	8004f0e <I2C_IsAcknowledgeFailed>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e034      	b.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d028      	beq.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fe fcbf 	bl	80036dc <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11d      	bne.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d016      	beq.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d1c3      	bne.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd0:	e034      	b.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f89b 	bl	8004f0e <I2C_IsAcknowledgeFailed>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e034      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d028      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dea:	f7fe fc77 	bl	80036dc <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d302      	bcc.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11d      	bne.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d016      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e007      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d1c3      	bne.n	8004dd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e60:	e049      	b.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d119      	bne.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e030      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fe fc1a 	bl	80036dc <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11d      	bne.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d016      	beq.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e007      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d1ae      	bne.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d11b      	bne.n	8004f5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0204 	orr.w	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e267      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d075      	beq.n	8005076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f8a:	4b88      	ldr	r3, [pc, #544]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00c      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f96:	4b85      	ldr	r3, [pc, #532]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d112      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa2:	4b82      	ldr	r3, [pc, #520]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fae:	d10b      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	4b7e      	ldr	r3, [pc, #504]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05b      	beq.n	8005074 <HAL_RCC_OscConfig+0x108>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d157      	bne.n	8005074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e242      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x74>
 8004fd2:	4b76      	ldr	r3, [pc, #472]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a75      	ldr	r2, [pc, #468]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e01d      	b.n	800501c <HAL_RCC_OscConfig+0xb0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCC_OscConfig+0x98>
 8004fea:	4b70      	ldr	r3, [pc, #448]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6f      	ldr	r2, [pc, #444]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b6d      	ldr	r3, [pc, #436]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a6c      	ldr	r2, [pc, #432]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e00b      	b.n	800501c <HAL_RCC_OscConfig+0xb0>
 8005004:	4b69      	ldr	r3, [pc, #420]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a68      	ldr	r2, [pc, #416]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 800500a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4b66      	ldr	r3, [pc, #408]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a65      	ldr	r2, [pc, #404]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fe fb5a 	bl	80036dc <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800502c:	f7fe fb56 	bl	80036dc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	; 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e207      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b5b      	ldr	r3, [pc, #364]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0xc0>
 800504a:	e014      	b.n	8005076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fe fb46 	bl	80036dc <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005054:	f7fe fb42 	bl	80036dc <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	; 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1f3      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005066:	4b51      	ldr	r3, [pc, #324]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0xe8>
 8005072:	e000      	b.n	8005076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d063      	beq.n	800514a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005082:	4b4a      	ldr	r3, [pc, #296]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005096:	2b08      	cmp	r3, #8
 8005098:	d11c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509a:	4b44      	ldr	r3, [pc, #272]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d116      	bne.n	80050d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_RCC_OscConfig+0x152>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e1c7      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4937      	ldr	r1, [pc, #220]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d2:	e03a      	b.n	800514a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050dc:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_RCC_OscConfig+0x244>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fe fafb 	bl	80036dc <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ea:	f7fe faf7 	bl	80036dc <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e1a8      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4925      	ldr	r1, [pc, #148]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
 800511c:	e015      	b.n	800514a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_RCC_OscConfig+0x244>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fe fada 	bl	80036dc <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512c:	f7fe fad6 	bl	80036dc <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e187      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d036      	beq.n	80051c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <HAL_RCC_OscConfig+0x248>)
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005164:	f7fe faba 	bl	80036dc <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516c:	f7fe fab6 	bl	80036dc <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e167      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_OscConfig+0x240>)
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x200>
 800518a:	e01b      	b.n	80051c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_RCC_OscConfig+0x248>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005192:	f7fe faa3 	bl	80036dc <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005198:	e00e      	b.n	80051b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519a:	f7fe fa9f 	bl	80036dc <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d907      	bls.n	80051b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e150      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
 80051ac:	40023800 	.word	0x40023800
 80051b0:	42470000 	.word	0x42470000
 80051b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	4b88      	ldr	r3, [pc, #544]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80051ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ea      	bne.n	800519a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8097 	beq.w	8005300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d6:	4b81      	ldr	r3, [pc, #516]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	4b7d      	ldr	r3, [pc, #500]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	4a7c      	ldr	r2, [pc, #496]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6413      	str	r3, [r2, #64]	; 0x40
 80051f2:	4b7a      	ldr	r3, [pc, #488]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b77      	ldr	r3, [pc, #476]	; (80053e0 <HAL_RCC_OscConfig+0x474>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d118      	bne.n	8005240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800520e:	4b74      	ldr	r3, [pc, #464]	; (80053e0 <HAL_RCC_OscConfig+0x474>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a73      	ldr	r2, [pc, #460]	; (80053e0 <HAL_RCC_OscConfig+0x474>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521a:	f7fe fa5f 	bl	80036dc <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005222:	f7fe fa5b 	bl	80036dc <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e10c      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	4b6a      	ldr	r3, [pc, #424]	; (80053e0 <HAL_RCC_OscConfig+0x474>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x2ea>
 8005248:	4b64      	ldr	r3, [pc, #400]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	4a63      	ldr	r2, [pc, #396]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6713      	str	r3, [r2, #112]	; 0x70
 8005254:	e01c      	b.n	8005290 <HAL_RCC_OscConfig+0x324>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x30c>
 800525e:	4b5f      	ldr	r3, [pc, #380]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a5e      	ldr	r2, [pc, #376]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
 800526a:	4b5c      	ldr	r3, [pc, #368]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	4a5b      	ldr	r2, [pc, #364]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	6713      	str	r3, [r2, #112]	; 0x70
 8005276:	e00b      	b.n	8005290 <HAL_RCC_OscConfig+0x324>
 8005278:	4b58      	ldr	r3, [pc, #352]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	4a57      	ldr	r2, [pc, #348]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	6713      	str	r3, [r2, #112]	; 0x70
 8005284:	4b55      	ldr	r3, [pc, #340]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	4a54      	ldr	r2, [pc, #336]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800528a:	f023 0304 	bic.w	r3, r3, #4
 800528e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005298:	f7fe fa20 	bl	80036dc <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fe fa1c 	bl	80036dc <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e0cb      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b6:	4b49      	ldr	r3, [pc, #292]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ee      	beq.n	80052a0 <HAL_RCC_OscConfig+0x334>
 80052c2:	e014      	b.n	80052ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c4:	f7fe fa0a 	bl	80036dc <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052cc:	f7fe fa06 	bl	80036dc <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0b5      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e2:	4b3e      	ldr	r3, [pc, #248]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1ee      	bne.n	80052cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d105      	bne.n	8005300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f4:	4b39      	ldr	r3, [pc, #228]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	4a38      	ldr	r2, [pc, #224]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80052fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80a1 	beq.w	800544c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800530a:	4b34      	ldr	r3, [pc, #208]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b08      	cmp	r3, #8
 8005314:	d05c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d141      	bne.n	80053a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531e:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <HAL_RCC_OscConfig+0x478>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005324:	f7fe f9da 	bl	80036dc <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532c:	f7fe f9d6 	bl	80036dc <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e087      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	4b27      	ldr	r3, [pc, #156]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	3b01      	subs	r3, #1
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	061b      	lsls	r3, r3, #24
 800536e:	491b      	ldr	r1, [pc, #108]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005370:	4313      	orrs	r3, r2
 8005372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005374:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <HAL_RCC_OscConfig+0x478>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537a:	f7fe f9af 	bl	80036dc <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005382:	f7fe f9ab 	bl	80036dc <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e05c      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x416>
 80053a0:	e054      	b.n	800544c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a2:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <HAL_RCC_OscConfig+0x478>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fe f998 	bl	80036dc <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fe f994 	bl	80036dc <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e045      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_OscConfig+0x470>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x444>
 80053ce:	e03d      	b.n	800544c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e038      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40007000 	.word	0x40007000
 80053e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCC_OscConfig+0x4ec>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d028      	beq.n	8005448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d121      	bne.n	8005448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	429a      	cmp	r2, r3
 8005410:	d11a      	bne.n	8005448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005418:	4013      	ands	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800541e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005420:	4293      	cmp	r3, r2
 8005422:	d111      	bne.n	8005448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	3b01      	subs	r3, #1
 8005432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800

0800545c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0cc      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005470:	4b68      	ldr	r3, [pc, #416]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d90c      	bls.n	8005498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b63      	ldr	r3, [pc, #396]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0b8      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d020      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b0:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4a58      	ldr	r2, [pc, #352]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c8:	4b53      	ldr	r3, [pc, #332]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a52      	ldr	r2, [pc, #328]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d4:	4b50      	ldr	r3, [pc, #320]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	494d      	ldr	r1, [pc, #308]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d044      	beq.n	800557c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d107      	bne.n	800550a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d119      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e07f      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d003      	beq.n	800551a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005516:	2b03      	cmp	r3, #3
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551a:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e06f      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552a:	4b3b      	ldr	r3, [pc, #236]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e067      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4934      	ldr	r1, [pc, #208]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	4313      	orrs	r3, r2
 800554a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800554c:	f7fe f8c6 	bl	80036dc <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	e00a      	b.n	800556a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005554:	f7fe f8c2 	bl	80036dc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e04f      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 020c 	and.w	r2, r3, #12
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	429a      	cmp	r2, r3
 800557a:	d1eb      	bne.n	8005554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d20c      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e032      	b.n	800560a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b0:	4b19      	ldr	r3, [pc, #100]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4916      	ldr	r1, [pc, #88]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	490e      	ldr	r1, [pc, #56]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055e2:	f000 f821 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	490a      	ldr	r1, [pc, #40]	; (800561c <HAL_RCC_ClockConfig+0x1c0>)
 80055f4:	5ccb      	ldrb	r3, [r1, r3]
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	4a09      	ldr	r2, [pc, #36]	; (8005620 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCC_ClockConfig+0x1c8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd fe74 	bl	80032f0 <HAL_InitTick>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40023c00 	.word	0x40023c00
 8005618:	40023800 	.word	0x40023800
 800561c:	0800f888 	.word	0x0800f888
 8005620:	20000020 	.word	0x20000020
 8005624:	20000024 	.word	0x20000024

08005628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800562c:	b090      	sub	sp, #64	; 0x40
 800562e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
 8005634:	2300      	movs	r3, #0
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	2300      	movs	r3, #0
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005640:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 030c 	and.w	r3, r3, #12
 8005648:	2b08      	cmp	r3, #8
 800564a:	d00d      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x40>
 800564c:	2b08      	cmp	r3, #8
 800564e:	f200 80a1 	bhi.w	8005794 <HAL_RCC_GetSysClockFreq+0x16c>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x34>
 8005656:	2b04      	cmp	r3, #4
 8005658:	d003      	beq.n	8005662 <HAL_RCC_GetSysClockFreq+0x3a>
 800565a:	e09b      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800565c:	4b53      	ldr	r3, [pc, #332]	; (80057ac <HAL_RCC_GetSysClockFreq+0x184>)
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005660:	e09b      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005662:	4b53      	ldr	r3, [pc, #332]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005666:	e098      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005668:	4b4f      	ldr	r3, [pc, #316]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005672:	4b4d      	ldr	r3, [pc, #308]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d028      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567e:	4b4a      	ldr	r3, [pc, #296]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	099b      	lsrs	r3, r3, #6
 8005684:	2200      	movs	r2, #0
 8005686:	623b      	str	r3, [r7, #32]
 8005688:	627a      	str	r2, [r7, #36]	; 0x24
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005690:	2100      	movs	r1, #0
 8005692:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005694:	fb03 f201 	mul.w	r2, r3, r1
 8005698:	2300      	movs	r3, #0
 800569a:	fb00 f303 	mul.w	r3, r0, r3
 800569e:	4413      	add	r3, r2
 80056a0:	4a43      	ldr	r2, [pc, #268]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80056a2:	fba0 1202 	umull	r1, r2, r0, r2
 80056a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056a8:	460a      	mov	r2, r1
 80056aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80056ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ae:	4413      	add	r3, r2
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	2200      	movs	r2, #0
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	61fa      	str	r2, [r7, #28]
 80056ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056c2:	f7fb fae1 	bl	8000c88 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4613      	mov	r3, r2
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ce:	e053      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d0:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	2200      	movs	r2, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	617a      	str	r2, [r7, #20]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056e2:	f04f 0b00 	mov.w	fp, #0
 80056e6:	4652      	mov	r2, sl
 80056e8:	465b      	mov	r3, fp
 80056ea:	f04f 0000 	mov.w	r0, #0
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	0159      	lsls	r1, r3, #5
 80056f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f8:	0150      	lsls	r0, r2, #5
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	ebb2 080a 	subs.w	r8, r2, sl
 8005702:	eb63 090b 	sbc.w	r9, r3, fp
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800571a:	ebb2 0408 	subs.w	r4, r2, r8
 800571e:	eb63 0509 	sbc.w	r5, r3, r9
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	00eb      	lsls	r3, r5, #3
 800572c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005730:	00e2      	lsls	r2, r4, #3
 8005732:	4614      	mov	r4, r2
 8005734:	461d      	mov	r5, r3
 8005736:	eb14 030a 	adds.w	r3, r4, sl
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	eb45 030b 	adc.w	r3, r5, fp
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800574e:	4629      	mov	r1, r5
 8005750:	028b      	lsls	r3, r1, #10
 8005752:	4621      	mov	r1, r4
 8005754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005758:	4621      	mov	r1, r4
 800575a:	028a      	lsls	r2, r1, #10
 800575c:	4610      	mov	r0, r2
 800575e:	4619      	mov	r1, r3
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	2200      	movs	r2, #0
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	60fa      	str	r2, [r7, #12]
 8005768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800576c:	f7fb fa8c 	bl	8000c88 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4613      	mov	r3, r2
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	3301      	adds	r3, #1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005792:	e002      	b.n	800579a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetSysClockFreq+0x184>)
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800579c:	4618      	mov	r0, r3
 800579e:	3740      	adds	r7, #64	; 0x40
 80057a0:	46bd      	mov	sp, r7
 80057a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	017d7840 	.word	0x017d7840

080057b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000020 	.word	0x20000020

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d0:	f7ff fff0 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a9b      	lsrs	r3, r3, #10
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4903      	ldr	r1, [pc, #12]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40023800 	.word	0x40023800
 80057f0:	0800f898 	.word	0x0800f898

080057f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057f8:	f7ff ffdc 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0b5b      	lsrs	r3, r3, #13
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	; (8005818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40023800 	.word	0x40023800
 8005818:	0800f898 	.word	0x0800f898

0800581c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	220f      	movs	r2, #15
 800582a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_RCC_GetClockConfig+0x5c>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0203 	and.w	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <HAL_RCC_GetClockConfig+0x5c>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCC_GetClockConfig+0x5c>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_GetClockConfig+0x5c>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_RCC_GetClockConfig+0x60>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0207 	and.w	r2, r3, #7
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	40023c00 	.word	0x40023c00

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e041      	b.n	8005916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fd fc20 	bl	80030ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fd96 	bl	80063f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04e      	b.n	80059d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d01d      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIM_Base_Start_IT+0xdc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d010      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	e007      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40001800 	.word	0x40001800

08005a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e041      	b.n	8005a96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f839 	bl	8005a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fcd6 	bl	80063f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x24>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e022      	b.n	8005b1e <HAL_TIM_PWM_Start+0x6a>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x3e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e015      	b.n	8005b1e <HAL_TIM_PWM_Start+0x6a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x58>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e008      	b.n	8005b1e <HAL_TIM_PWM_Start+0x6a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07c      	b.n	8005c20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x82>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b34:	e013      	b.n	8005b5e <HAL_TIM_PWM_Start+0xaa>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x92>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b44:	e00b      	b.n	8005b5e <HAL_TIM_PWM_Start+0xaa>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIM_PWM_Start+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b54:	e003      	b.n	8005b5e <HAL_TIM_PWM_Start+0xaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 ff38 	bl	80069dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2d      	ldr	r2, [pc, #180]	; (8005c28 <HAL_TIM_PWM_Start+0x174>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_PWM_Start+0xcc>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <HAL_TIM_PWM_Start+0x178>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d101      	bne.n	8005b84 <HAL_TIM_PWM_Start+0xd0>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_TIM_PWM_Start+0xd2>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a22      	ldr	r2, [pc, #136]	; (8005c28 <HAL_TIM_PWM_Start+0x174>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d01d      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <HAL_TIM_PWM_Start+0x17c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d018      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <HAL_TIM_PWM_Start+0x180>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <HAL_TIM_PWM_Start+0x184>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <HAL_TIM_PWM_Start+0x178>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d009      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a18      	ldr	r2, [pc, #96]	; (8005c3c <HAL_TIM_PWM_Start+0x188>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_TIM_PWM_Start+0x136>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <HAL_TIM_PWM_Start+0x18c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d111      	bne.n	8005c0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d010      	beq.n	8005c1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	e007      	b.n	8005c1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40001800 	.word	0x40001800

08005c44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e097      	b.n	8005d88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fd f97f 	bl	8002f70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 fba9 	bl	80063f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ce4:	f023 030c 	bic.w	r3, r3, #12
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	4313      	orrs	r3, r2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	011a      	lsls	r2, r3, #4
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	031b      	lsls	r3, r3, #12
 8005d14:	4313      	orrs	r3, r2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4313      	orrs	r3, r2
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005db0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005db8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d110      	bne.n	8005de2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d102      	bne.n	8005dcc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d001      	beq.n	8005dd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e069      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de0:	e031      	b.n	8005e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d110      	bne.n	8005e0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dee:	7b3b      	ldrb	r3, [r7, #12]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d001      	beq.n	8005df8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e055      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e08:	e01d      	b.n	8005e46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d108      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d105      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e1c:	7b3b      	ldrb	r3, [r7, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e03e      	b.n	8005ea4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_TIM_Encoder_Start+0xc4>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d008      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0xd4>
 8005e52:	e00f      	b.n	8005e74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fdbd 	bl	80069dc <TIM_CCxChannelCmd>
      break;
 8005e62:	e016      	b.n	8005e92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2104      	movs	r1, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fdb5 	bl	80069dc <TIM_CCxChannelCmd>
      break;
 8005e72:	e00e      	b.n	8005e92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fdad 	bl	80069dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	2104      	movs	r1, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fda6 	bl	80069dc <TIM_CCxChannelCmd>
      break;
 8005e90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0202 	mvn.w	r2, #2
 8005ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa5b 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa4d 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa5e 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0204 	mvn.w	r2, #4
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa35 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa27 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa38 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d020      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01b      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0208 	mvn.w	r2, #8
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa0f 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa01 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa12 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0210 	mvn.w	r2, #16
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2208      	movs	r2, #8
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9e9 	bl	80063b2 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9db 	bl	800639e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9ec 	bl	80063c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0201 	mvn.w	r2, #1
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fb feaa 	bl	8001d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fd7c 	bl	8006b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9bd 	bl	80063da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0220 	mvn.w	r2, #32
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fd4e 	bl	8006b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e0ae      	b.n	8006208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	f200 809f 	bhi.w	80061f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	080061f9 	.word	0x080061f9
 80060c8:	080061f9 	.word	0x080061f9
 80060cc:	080061f9 	.word	0x080061f9
 80060d0:	08006135 	.word	0x08006135
 80060d4:	080061f9 	.word	0x080061f9
 80060d8:	080061f9 	.word	0x080061f9
 80060dc:	080061f9 	.word	0x080061f9
 80060e0:	08006177 	.word	0x08006177
 80060e4:	080061f9 	.word	0x080061f9
 80060e8:	080061f9 	.word	0x080061f9
 80060ec:	080061f9 	.word	0x080061f9
 80060f0:	080061b7 	.word	0x080061b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fa24 	bl	8006548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	619a      	str	r2, [r3, #24]
      break;
 8006132:	e064      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fa74 	bl	8006628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]
      break;
 8006174:	e043      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fac9 	bl	8006714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0208 	orr.w	r2, r2, #8
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	61da      	str	r2, [r3, #28]
      break;
 80061b4:	e023      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fb1d 	bl	80067fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	021a      	lsls	r2, r3, #8
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	61da      	str	r2, [r3, #28]
      break;
 80061f6:	e002      	b.n	80061fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
      break;
 80061fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIM_ConfigClockSource+0x1c>
 8006228:	2302      	movs	r3, #2
 800622a:	e0b4      	b.n	8006396 <HAL_TIM_ConfigClockSource+0x186>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800624a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006264:	d03e      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626a:	f200 8087 	bhi.w	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	f000 8086 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x172>
 8006276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627a:	d87f      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b70      	cmp	r3, #112	; 0x70
 800627e:	d01a      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006280:	2b70      	cmp	r3, #112	; 0x70
 8006282:	d87b      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b60      	cmp	r3, #96	; 0x60
 8006286:	d050      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x11a>
 8006288:	2b60      	cmp	r3, #96	; 0x60
 800628a:	d877      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b50      	cmp	r3, #80	; 0x50
 800628e:	d03c      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xfa>
 8006290:	2b50      	cmp	r3, #80	; 0x50
 8006292:	d873      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d058      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x13a>
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d86f      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d064      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	2b30      	cmp	r3, #48	; 0x30
 80062a2:	d86b      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d060      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d867      	bhi.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d05c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d05a      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x15a>
 80062b4:	e062      	b.n	800637c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c6:	f000 fb69 	bl	800699c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	609a      	str	r2, [r3, #8]
      break;
 80062e2:	e04f      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062f4:	f000 fb52 	bl	800699c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006306:	609a      	str	r2, [r3, #8]
      break;
 8006308:	e03c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	461a      	mov	r2, r3
 8006318:	f000 fac6 	bl	80068a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2150      	movs	r1, #80	; 0x50
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fb1f 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 8006328:	e02c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fae5 	bl	8006906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2160      	movs	r1, #96	; 0x60
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fb0f 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 8006348:	e01c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006356:	461a      	mov	r2, r3
 8006358:	f000 faa6 	bl	80068a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2140      	movs	r1, #64	; 0x40
 8006362:	4618      	mov	r0, r3
 8006364:	f000 faff 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 8006368:	e00c      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f000 faf6 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 800637a:	e003      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	e000      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a46      	ldr	r2, [pc, #280]	; (800651c <TIM_Base_SetConfig+0x12c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640e:	d00f      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a43      	ldr	r2, [pc, #268]	; (8006520 <TIM_Base_SetConfig+0x130>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a42      	ldr	r2, [pc, #264]	; (8006524 <TIM_Base_SetConfig+0x134>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a41      	ldr	r2, [pc, #260]	; (8006528 <TIM_Base_SetConfig+0x138>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_Base_SetConfig+0x40>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a40      	ldr	r2, [pc, #256]	; (800652c <TIM_Base_SetConfig+0x13c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d108      	bne.n	8006442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a35      	ldr	r2, [pc, #212]	; (800651c <TIM_Base_SetConfig+0x12c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02b      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d027      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a32      	ldr	r2, [pc, #200]	; (8006520 <TIM_Base_SetConfig+0x130>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d023      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a31      	ldr	r2, [pc, #196]	; (8006524 <TIM_Base_SetConfig+0x134>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d01f      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a30      	ldr	r2, [pc, #192]	; (8006528 <TIM_Base_SetConfig+0x138>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01b      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2f      	ldr	r2, [pc, #188]	; (800652c <TIM_Base_SetConfig+0x13c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d017      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2e      	ldr	r2, [pc, #184]	; (8006530 <TIM_Base_SetConfig+0x140>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2d      	ldr	r2, [pc, #180]	; (8006534 <TIM_Base_SetConfig+0x144>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00f      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a2c      	ldr	r2, [pc, #176]	; (8006538 <TIM_Base_SetConfig+0x148>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00b      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a2b      	ldr	r2, [pc, #172]	; (800653c <TIM_Base_SetConfig+0x14c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d007      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <TIM_Base_SetConfig+0x150>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a29      	ldr	r2, [pc, #164]	; (8006544 <TIM_Base_SetConfig+0x154>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d108      	bne.n	80064b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a10      	ldr	r2, [pc, #64]	; (800651c <TIM_Base_SetConfig+0x12c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_Base_SetConfig+0xf8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a12      	ldr	r2, [pc, #72]	; (800652c <TIM_Base_SetConfig+0x13c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d103      	bne.n	80064f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d105      	bne.n	800650e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	611a      	str	r2, [r3, #16]
  }
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40010000 	.word	0x40010000
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40000c00 	.word	0x40000c00
 800652c:	40010400 	.word	0x40010400
 8006530:	40014000 	.word	0x40014000
 8006534:	40014400 	.word	0x40014400
 8006538:	40014800 	.word	0x40014800
 800653c:	40001800 	.word	0x40001800
 8006540:	40001c00 	.word	0x40001c00
 8006544:	40002000 	.word	0x40002000

08006548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f023 0201 	bic.w	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 0302 	bic.w	r3, r3, #2
 8006590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a20      	ldr	r2, [pc, #128]	; (8006620 <TIM_OC1_SetConfig+0xd8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC1_SetConfig+0x64>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <TIM_OC1_SetConfig+0xdc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10c      	bne.n	80065c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0308 	bic.w	r3, r3, #8
 80065b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f023 0304 	bic.w	r3, r3, #4
 80065c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a15      	ldr	r2, [pc, #84]	; (8006620 <TIM_OC1_SetConfig+0xd8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_OC1_SetConfig+0x8e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <TIM_OC1_SetConfig+0xdc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d111      	bne.n	80065fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	621a      	str	r2, [r3, #32]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f023 0210 	bic.w	r2, r3, #16
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0320 	bic.w	r3, r3, #32
 8006672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a22      	ldr	r2, [pc, #136]	; (800670c <TIM_OC2_SetConfig+0xe4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC2_SetConfig+0x68>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <TIM_OC2_SetConfig+0xe8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10d      	bne.n	80066ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <TIM_OC2_SetConfig+0xe4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC2_SetConfig+0x94>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a16      	ldr	r2, [pc, #88]	; (8006710 <TIM_OC2_SetConfig+0xe8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d113      	bne.n	80066e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800675c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a21      	ldr	r2, [pc, #132]	; (80067f4 <TIM_OC3_SetConfig+0xe0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC3_SetConfig+0x66>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <TIM_OC3_SetConfig+0xe4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d10d      	bne.n	8006796 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <TIM_OC3_SetConfig+0xe0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC3_SetConfig+0x92>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <TIM_OC3_SetConfig+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d113      	bne.n	80067ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	031b      	lsls	r3, r3, #12
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a12      	ldr	r2, [pc, #72]	; (80068a0 <TIM_OC4_SetConfig+0xa4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC4_SetConfig+0x68>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a11      	ldr	r2, [pc, #68]	; (80068a4 <TIM_OC4_SetConfig+0xa8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d109      	bne.n	8006878 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	019b      	lsls	r3, r3, #6
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40010400 	.word	0x40010400

080068a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0201 	bic.w	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 030a 	bic.w	r3, r3, #10
 80068e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f023 0210 	bic.w	r2, r3, #16
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	031b      	lsls	r3, r3, #12
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006942:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	f043 0307 	orr.w	r3, r3, #7
 8006988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	021a      	lsls	r2, r3, #8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	431a      	orrs	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2201      	movs	r2, #1
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a1a      	ldr	r2, [r3, #32]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	401a      	ands	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	fa01 f303 	lsl.w	r3, r1, r3
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e05a      	b.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d022      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8c:	d01d      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d018      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d013      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1a      	ldr	r2, [pc, #104]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d009      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40010400 	.word	0x40010400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40001800 	.word	0x40001800

08006b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e042      	b.n	8006be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fc fb56 	bl	8003220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2224      	movs	r2, #36	; 0x24
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f82b 	bl	8006be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bec:	b0c0      	sub	sp, #256	; 0x100
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	68d9      	ldr	r1, [r3, #12]
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	ea40 0301 	orr.w	r3, r0, r1
 8006c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c40:	f021 010c 	bic.w	r1, r1, #12
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	6999      	ldr	r1, [r3, #24]
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	ea40 0301 	orr.w	r3, r0, r1
 8006c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <UART_SetConfig+0x2cc>)
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d005      	beq.n	8006c88 <UART_SetConfig+0xa0>
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b8d      	ldr	r3, [pc, #564]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d104      	bne.n	8006c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7fe fdb4 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8006c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c90:	e003      	b.n	8006c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c92:	f7fe fd9b 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8006c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca4:	f040 810c 	bne.w	8006ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	1891      	adds	r1, r2, r2
 8006cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cca:	4621      	mov	r1, r4
 8006ccc:	eb12 0801 	adds.w	r8, r2, r1
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	eb43 0901 	adc.w	r9, r3, r1
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cea:	4690      	mov	r8, r2
 8006cec:	4699      	mov	r9, r3
 8006cee:	4623      	mov	r3, r4
 8006cf0:	eb18 0303 	adds.w	r3, r8, r3
 8006cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	eb49 0303 	adc.w	r3, r9, r3
 8006cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d16:	460b      	mov	r3, r1
 8006d18:	18db      	adds	r3, r3, r3
 8006d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	eb42 0303 	adc.w	r3, r2, r3
 8006d22:	657b      	str	r3, [r7, #84]	; 0x54
 8006d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d2c:	f7f9 ffac 	bl	8000c88 <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006d36:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	011c      	lsls	r4, r3, #4
 8006d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	1891      	adds	r1, r2, r2
 8006d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d58:	415b      	adcs	r3, r3
 8006d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d60:	4641      	mov	r1, r8
 8006d62:	eb12 0a01 	adds.w	sl, r2, r1
 8006d66:	4649      	mov	r1, r9
 8006d68:	eb43 0b01 	adc.w	fp, r3, r1
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d80:	4692      	mov	sl, r2
 8006d82:	469b      	mov	fp, r3
 8006d84:	4643      	mov	r3, r8
 8006d86:	eb1a 0303 	adds.w	r3, sl, r3
 8006d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	eb4b 0303 	adc.w	r3, fp, r3
 8006d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dac:	460b      	mov	r3, r1
 8006dae:	18db      	adds	r3, r3, r3
 8006db0:	643b      	str	r3, [r7, #64]	; 0x40
 8006db2:	4613      	mov	r3, r2
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dc2:	f7f9 ff61 	bl	8000c88 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4b3b      	ldr	r3, [pc, #236]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006dce:	fba3 2301 	umull	r2, r3, r3, r1
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	2264      	movs	r2, #100	; 0x64
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	1acb      	subs	r3, r1, r3
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006de2:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006de4:	fba3 2302 	umull	r2, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df0:	441c      	add	r4, r3
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e14:	4641      	mov	r1, r8
 8006e16:	1851      	adds	r1, r2, r1
 8006e18:	6339      	str	r1, [r7, #48]	; 0x30
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	00cb      	lsls	r3, r1, #3
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e36:	4651      	mov	r1, sl
 8006e38:	00ca      	lsls	r2, r1, #3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4642      	mov	r2, r8
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e48:	464b      	mov	r3, r9
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	eb42 0303 	adc.w	r3, r2, r3
 8006e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e68:	460b      	mov	r3, r1
 8006e6a:	18db      	adds	r3, r3, r3
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6e:	4613      	mov	r3, r2
 8006e70:	eb42 0303 	adc.w	r3, r2, r3
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e7e:	f7f9 ff03 	bl	8000c88 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 0207 	and.w	r2, r3, #7
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4422      	add	r2, r4
 8006eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb0:	e106      	b.n	80070c0 <UART_SetConfig+0x4d8>
 8006eb2:	bf00      	nop
 8006eb4:	40011000 	.word	0x40011000
 8006eb8:	40011400 	.word	0x40011400
 8006ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	1891      	adds	r1, r2, r2
 8006ed8:	6239      	str	r1, [r7, #32]
 8006eda:	415b      	adcs	r3, r3
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	1854      	adds	r4, r2, r1
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	eb43 0501 	adc.w	r5, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	00eb      	lsls	r3, r5, #3
 8006ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efa:	00e2      	lsls	r2, r4, #3
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	18e3      	adds	r3, r4, r3
 8006f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f08:	464b      	mov	r3, r9
 8006f0a:	eb45 0303 	adc.w	r3, r5, r3
 8006f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f2e:	4629      	mov	r1, r5
 8006f30:	008b      	lsls	r3, r1, #2
 8006f32:	4621      	mov	r1, r4
 8006f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f38:	4621      	mov	r1, r4
 8006f3a:	008a      	lsls	r2, r1, #2
 8006f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f40:	f7f9 fea2 	bl	8000c88 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4b60      	ldr	r3, [pc, #384]	; (80070cc <UART_SetConfig+0x4e4>)
 8006f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	011c      	lsls	r4, r3, #4
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	61b9      	str	r1, [r7, #24]
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f74:	4641      	mov	r1, r8
 8006f76:	1851      	adds	r1, r2, r1
 8006f78:	6139      	str	r1, [r7, #16]
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	414b      	adcs	r3, r1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	00cb      	lsls	r3, r1, #3
 8006f90:	4651      	mov	r1, sl
 8006f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f96:	4651      	mov	r1, sl
 8006f98:	00ca      	lsls	r2, r1, #3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fa8:	464b      	mov	r3, r9
 8006faa:	460a      	mov	r2, r1
 8006fac:	eb42 0303 	adc.w	r3, r2, r3
 8006fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fcc:	4649      	mov	r1, r9
 8006fce:	008b      	lsls	r3, r1, #2
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	008a      	lsls	r2, r1, #2
 8006fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fde:	f7f9 fe53 	bl	8000c88 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4b38      	ldr	r3, [pc, #224]	; (80070cc <UART_SetConfig+0x4e4>)
 8006fea:	fba3 2301 	umull	r2, r3, r3, r1
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	2264      	movs	r2, #100	; 0x64
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	1acb      	subs	r3, r1, r3
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	3332      	adds	r3, #50	; 0x32
 8006ffc:	4a33      	ldr	r2, [pc, #204]	; (80070cc <UART_SetConfig+0x4e4>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007008:	441c      	add	r4, r3
 800700a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700e:	2200      	movs	r2, #0
 8007010:	673b      	str	r3, [r7, #112]	; 0x70
 8007012:	677a      	str	r2, [r7, #116]	; 0x74
 8007014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	1891      	adds	r1, r2, r2
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	415b      	adcs	r3, r3
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007028:	4641      	mov	r1, r8
 800702a:	1851      	adds	r1, r2, r1
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	4649      	mov	r1, r9
 8007030:	414b      	adcs	r3, r1
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007040:	4659      	mov	r1, fp
 8007042:	00cb      	lsls	r3, r1, #3
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704a:	4651      	mov	r1, sl
 800704c:	00ca      	lsls	r2, r1, #3
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	4603      	mov	r3, r0
 8007054:	4642      	mov	r2, r8
 8007056:	189b      	adds	r3, r3, r2
 8007058:	66bb      	str	r3, [r7, #104]	; 0x68
 800705a:	464b      	mov	r3, r9
 800705c:	460a      	mov	r2, r1
 800705e:	eb42 0303 	adc.w	r3, r2, r3
 8007062:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	663b      	str	r3, [r7, #96]	; 0x60
 800706e:	667a      	str	r2, [r7, #100]	; 0x64
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800707c:	4649      	mov	r1, r9
 800707e:	008b      	lsls	r3, r1, #2
 8007080:	4641      	mov	r1, r8
 8007082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007086:	4641      	mov	r1, r8
 8007088:	008a      	lsls	r2, r1, #2
 800708a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800708e:	f7f9 fdfb 	bl	8000c88 <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <UART_SetConfig+0x4e4>)
 8007098:	fba3 1302 	umull	r1, r3, r3, r2
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	2164      	movs	r1, #100	; 0x64
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	3332      	adds	r3, #50	; 0x32
 80070aa:	4a08      	ldr	r2, [pc, #32]	; (80070cc <UART_SetConfig+0x4e4>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	f003 020f 	and.w	r2, r3, #15
 80070b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4422      	add	r2, r4
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070c6:	46bd      	mov	sp, r7
 80070c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070cc:	51eb851f 	.word	0x51eb851f

080070d0 <__NVIC_SetPriority>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db0a      	blt.n	80070fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	490c      	ldr	r1, [pc, #48]	; (800711c <__NVIC_SetPriority+0x4c>)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	440b      	add	r3, r1
 80070f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070f8:	e00a      	b.n	8007110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4908      	ldr	r1, [pc, #32]	; (8007120 <__NVIC_SetPriority+0x50>)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3b04      	subs	r3, #4
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	440b      	add	r3, r1
 800710e:	761a      	strb	r2, [r3, #24]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	e000e100 	.word	0xe000e100
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <SysTick_Handler+0x1c>)
 800712a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800712c:	f001 fe88 	bl	8008e40 <xTaskGetSchedulerState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007136:	f002 fc6f 	bl	8009a18 <xPortSysTickHandler>
  }
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	e000e010 	.word	0xe000e010

08007144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007148:	2100      	movs	r1, #0
 800714a:	f06f 0004 	mvn.w	r0, #4
 800714e:	f7ff ffbf 	bl	80070d0 <__NVIC_SetPriority>
#endif
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	603b      	str	r3, [r7, #0]
  return(result);
 8007164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800716a:	f06f 0305 	mvn.w	r3, #5
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	e00c      	b.n	800718c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <osKernelInitialize+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <osKernelInitialize+0x44>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007180:	2300      	movs	r3, #0
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e002      	b.n	800718c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800718c:	687b      	ldr	r3, [r7, #4]
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	200005c8 	.word	0x200005c8

080071a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	603b      	str	r3, [r7, #0]
  return(result);
 80071ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e010      	b.n	80071dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <osKernelStart+0x48>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d109      	bne.n	80071d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071c2:	f7ff ffbf 	bl	8007144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <osKernelStart+0x48>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071cc:	f001 f9f0 	bl	80085b0 <vTaskStartScheduler>
      stat = osOK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e002      	b.n	80071dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071dc:	687b      	ldr	r3, [r7, #4]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200005c8 	.word	0x200005c8

080071ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	; 0x38
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fc:	f3ef 8305 	mrs	r3, IPSR
 8007200:	617b      	str	r3, [r7, #20]
  return(result);
 8007202:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007204:	2b00      	cmp	r3, #0
 8007206:	d17e      	bne.n	8007306 <osThreadNew+0x11a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d07b      	beq.n	8007306 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800720e:	2380      	movs	r3, #128	; 0x80
 8007210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007212:	2318      	movs	r3, #24
 8007214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d045      	beq.n	80072b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <osThreadNew+0x48>
        name = attr->name;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <osThreadNew+0x6e>
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b38      	cmp	r3, #56	; 0x38
 800724c:	d805      	bhi.n	800725a <osThreadNew+0x6e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <osThreadNew+0x72>
        return (NULL);
 800725a:	2300      	movs	r3, #0
 800725c:	e054      	b.n	8007308 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <osThreadNew+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b5b      	cmp	r3, #91	; 0x5b
 800727c:	d90a      	bls.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <osThreadNew+0xa8>
        mem = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e010      	b.n	80072b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10c      	bne.n	80072b6 <osThreadNew+0xca>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <osThreadNew+0xca>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <osThreadNew+0xca>
          mem = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e001      	b.n	80072b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d110      	bne.n	80072de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 ff96 	bl	8008204 <xTaskCreateStatic>
 80072d8:	4603      	mov	r3, r0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	e013      	b.n	8007306 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d110      	bne.n	8007306 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 ffe1 	bl	80082be <xTaskCreate>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d001      	beq.n	8007306 <osThreadNew+0x11a>
            hTask = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007306:	693b      	ldr	r3, [r7, #16]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	; 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007318:	f3ef 8305 	mrs	r3, IPSR
 800731c:	60bb      	str	r3, [r7, #8]
  return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <osDelay+0x1c>
    stat = osErrorISR;
 8007324:	f06f 0305 	mvn.w	r3, #5
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e007      	b.n	800733c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 f906 	bl	8008548 <vTaskDelay>
    }
  }

  return (stat);
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007346:	b580      	push	{r7, lr}
 8007348:	b08a      	sub	sp, #40	; 0x28
 800734a:	af02      	add	r7, sp, #8
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007356:	f3ef 8305 	mrs	r3, IPSR
 800735a:	613b      	str	r3, [r7, #16]
  return(result);
 800735c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800735e:	2b00      	cmp	r3, #0
 8007360:	d15f      	bne.n	8007422 <osMessageQueueNew+0xdc>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d05c      	beq.n	8007422 <osMessageQueueNew+0xdc>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d059      	beq.n	8007422 <osMessageQueueNew+0xdc>
    mem = -1;
 800736e:	f04f 33ff 	mov.w	r3, #4294967295
 8007372:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d029      	beq.n	80073ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <osMessageQueueNew+0x62>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b4f      	cmp	r3, #79	; 0x4f
 8007388:	d90e      	bls.n	80073a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695a      	ldr	r2, [r3, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <osMessageQueueNew+0x62>
        mem = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e014      	b.n	80073d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d110      	bne.n	80073d2 <osMessageQueueNew+0x8c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10c      	bne.n	80073d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <osMessageQueueNew+0x8c>
          mem = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	e001      	b.n	80073d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d10b      	bne.n	80073f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2100      	movs	r1, #0
 80073e2:	9100      	str	r1, [sp, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f9ce 	bl	8007788 <xQueueGenericCreateStatic>
 80073ec:	61f8      	str	r0, [r7, #28]
 80073ee:	e008      	b.n	8007402 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80073f6:	2200      	movs	r2, #0
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fa3c 	bl	8007878 <xQueueGenericCreate>
 8007400:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00c      	beq.n	8007422 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <osMessageQueueNew+0xd0>
        name = attr->name;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e001      	b.n	800741a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	69f8      	ldr	r0, [r7, #28]
 800741e:	f000 fe93 	bl	8008148 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007422:	69fb      	ldr	r3, [r7, #28]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007442:	f3ef 8305 	mrs	r3, IPSR
 8007446:	617b      	str	r3, [r7, #20]
  return(result);
 8007448:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800744a:	2b00      	cmp	r3, #0
 800744c:	d028      	beq.n	80074a0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <osMessageQueueGet+0x34>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <osMessageQueueGet+0x34>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007460:	f06f 0303 	mvn.w	r3, #3
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e037      	b.n	80074d8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800746c:	f107 0310 	add.w	r3, r7, #16
 8007470:	461a      	mov	r2, r3
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	69b8      	ldr	r0, [r7, #24]
 8007476:	f000 fcd7 	bl	8007e28 <xQueueReceiveFromISR>
 800747a:	4603      	mov	r3, r0
 800747c:	2b01      	cmp	r3, #1
 800747e:	d003      	beq.n	8007488 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007480:	f06f 0302 	mvn.w	r3, #2
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	e027      	b.n	80074d8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d024      	beq.n	80074d8 <osMessageQueueGet+0xac>
 800748e:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <osMessageQueueGet+0xb8>)
 8007490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	e01b      	b.n	80074d8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <osMessageQueueGet+0x80>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80074ac:	f06f 0303 	mvn.w	r3, #3
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e011      	b.n	80074d8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	69b8      	ldr	r0, [r7, #24]
 80074ba:	f000 fbd5 	bl	8007c68 <xQueueReceive>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d009      	beq.n	80074d8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80074ca:	f06f 0301 	mvn.w	r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e002      	b.n	80074d8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80074d2:	f06f 0302 	mvn.w	r3, #2
 80074d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80074d8:	69fb      	ldr	r3, [r7, #28]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4a07      	ldr	r2, [pc, #28]	; (8007514 <vApplicationGetIdleTaskMemory+0x2c>)
 80074f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	4a06      	ldr	r2, [pc, #24]	; (8007518 <vApplicationGetIdleTaskMemory+0x30>)
 80074fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2280      	movs	r2, #128	; 0x80
 8007504:	601a      	str	r2, [r3, #0]
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	200005cc 	.word	0x200005cc
 8007518:	20000628 	.word	0x20000628

0800751c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4a07      	ldr	r2, [pc, #28]	; (8007548 <vApplicationGetTimerTaskMemory+0x2c>)
 800752c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4a06      	ldr	r2, [pc, #24]	; (800754c <vApplicationGetTimerTaskMemory+0x30>)
 8007532:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800753a:	601a      	str	r2, [r3, #0]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20000828 	.word	0x20000828
 800754c:	20000884 	.word	0x20000884

08007550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0208 	add.w	r2, r3, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f103 0208 	add.w	r2, r3, #8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f103 0208 	add.w	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d103      	bne.n	8007612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e00c      	b.n	800762c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3308      	adds	r3, #8
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e002      	b.n	8007620 <vListInsert+0x2e>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	d2f6      	bcs.n	800761a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6892      	ldr	r2, [r2, #8]
 800767a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6852      	ldr	r2, [r2, #4]
 8007684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d103      	bne.n	8007698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076e2:	f002 f907 	bl	80098f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	68f9      	ldr	r1, [r7, #12]
 80076f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	3b01      	subs	r3, #1
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	441a      	add	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	22ff      	movs	r2, #255	; 0xff
 800772e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d114      	bne.n	8007762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01a      	beq.n	8007776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3310      	adds	r3, #16
 8007744:	4618      	mov	r0, r3
 8007746:	f001 f9bd 	bl	8008ac4 <xTaskRemoveFromEventList>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <xQueueGenericReset+0xcc>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	e009      	b.n	8007776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3310      	adds	r3, #16
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fef2 	bl	8007550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3324      	adds	r3, #36	; 0x24
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff feed 	bl	8007550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007776:	f002 f8ed 	bl	8009954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800777a:	2301      	movs	r3, #1
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08e      	sub	sp, #56	; 0x38
 800778c:	af02      	add	r7, sp, #8
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <xQueueGenericCreateStatic+0x52>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <xQueueGenericCreateStatic+0x56>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <xQueueGenericCreateStatic+0x58>
 80077de:	2300      	movs	r3, #0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	623b      	str	r3, [r7, #32]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <xQueueGenericCreateStatic+0x7e>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <xQueueGenericCreateStatic+0x82>
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <xQueueGenericCreateStatic+0x84>
 800780a:	2300      	movs	r3, #0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	61fb      	str	r3, [r7, #28]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007826:	2350      	movs	r3, #80	; 0x50
 8007828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b50      	cmp	r3, #80	; 0x50
 800782e:	d00a      	beq.n	8007846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61bb      	str	r3, [r7, #24]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007846:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00d      	beq.n	800786e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800785a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4613      	mov	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 f83f 	bl	80078ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007870:	4618      	mov	r0, r3
 8007872:	3730      	adds	r7, #48	; 0x30
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	613b      	str	r3, [r7, #16]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	fb02 f303 	mul.w	r3, r2, r3
 80078aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	3350      	adds	r3, #80	; 0x50
 80078b0:	4618      	mov	r0, r3
 80078b2:	f002 f941 	bl	8009b38 <pvPortMalloc>
 80078b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d011      	beq.n	80078e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	3350      	adds	r3, #80	; 0x50
 80078c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078d0:	79fa      	ldrb	r2, [r7, #7]
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4613      	mov	r3, r2
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f805 	bl	80078ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078e2:	69bb      	ldr	r3, [r7, #24]
	}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d103      	bne.n	8007908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e002      	b.n	800790e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800791a:	2101      	movs	r1, #1
 800791c:	69b8      	ldr	r0, [r7, #24]
 800791e:	f7ff fecb 	bl	80076b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08e      	sub	sp, #56	; 0x38
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007942:	2300      	movs	r3, #0
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10a      	bne.n	8007966 <xQueueGenericSend+0x32>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <xQueueGenericSend+0x40>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <xQueueGenericSend+0x44>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <xQueueGenericSend+0x46>
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <xQueueGenericSend+0x60>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d103      	bne.n	80079a2 <xQueueGenericSend+0x6e>
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <xQueueGenericSend+0x72>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e000      	b.n	80079a8 <xQueueGenericSend+0x74>
 80079a6:	2300      	movs	r3, #0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	623b      	str	r3, [r7, #32]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c2:	f001 fa3d 	bl	8008e40 <xTaskGetSchedulerState>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <xQueueGenericSend+0x9e>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <xQueueGenericSend+0xa2>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <xQueueGenericSend+0xa4>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	61fb      	str	r3, [r7, #28]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f2:	f001 ff7f 	bl	80098f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d302      	bcc.n	8007a08 <xQueueGenericSend+0xd4>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d129      	bne.n	8007a5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a0e:	f000 fa8b 	bl	8007f28 <prvCopyDataToQueue>
 8007a12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d010      	beq.n	8007a3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	3324      	adds	r3, #36	; 0x24
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f84f 	bl	8008ac4 <xTaskRemoveFromEventList>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d013      	beq.n	8007a54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a2c:	4b3f      	ldr	r3, [pc, #252]	; (8007b2c <xQueueGenericSend+0x1f8>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	e00a      	b.n	8007a54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a44:	4b39      	ldr	r3, [pc, #228]	; (8007b2c <xQueueGenericSend+0x1f8>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a54:	f001 ff7e 	bl	8009954 <vPortExitCritical>
				return pdPASS;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e063      	b.n	8007b24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a62:	f001 ff77 	bl	8009954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e05c      	b.n	8007b24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a70:	f107 0314 	add.w	r3, r7, #20
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 f889 	bl	8008b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a7e:	f001 ff69 	bl	8009954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a82:	f000 fdfb 	bl	800867c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a86:	f001 ff35 	bl	80098f4 <vPortEnterCritical>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a90:	b25b      	sxtb	r3, r3
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d103      	bne.n	8007aa0 <xQueueGenericSend+0x16c>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d103      	bne.n	8007ab6 <xQueueGenericSend+0x182>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab6:	f001 ff4d 	bl	8009954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aba:	1d3a      	adds	r2, r7, #4
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 f878 	bl	8008bb8 <xTaskCheckForTimeOut>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d124      	bne.n	8007b18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ad0:	f000 fb22 	bl	8008118 <prvIsQueueFull>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d018      	beq.n	8007b0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	3310      	adds	r3, #16
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 ff9e 	bl	8008a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aea:	f000 faad 	bl	8008048 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007aee:	f000 fdd3 	bl	8008698 <xTaskResumeAll>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f47f af7c 	bne.w	80079f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007afa:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <xQueueGenericSend+0x1f8>)
 8007afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	e772      	b.n	80079f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b0e:	f000 fa9b 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b12:	f000 fdc1 	bl	8008698 <xTaskResumeAll>
 8007b16:	e76c      	b.n	80079f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b1a:	f000 fa95 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b1e:	f000 fdbb 	bl	8008698 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3738      	adds	r7, #56	; 0x38
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b090      	sub	sp, #64	; 0x40
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <xQueueGenericSendFromISR+0x3c>
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <xQueueGenericSendFromISR+0x40>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <xQueueGenericSendFromISR+0x42>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d103      	bne.n	8007b9a <xQueueGenericSendFromISR+0x6a>
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <xQueueGenericSendFromISR+0x6e>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <xQueueGenericSendFromISR+0x70>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	623b      	str	r3, [r7, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bba:	f001 ff7d 	bl	8009ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	61fa      	str	r2, [r7, #28]
 8007bd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d302      	bcc.n	8007bec <xQueueGenericSendFromISR+0xbc>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d12f      	bne.n	8007c4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c02:	f000 f991 	bl	8007f28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d112      	bne.n	8007c36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d016      	beq.n	8007c46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 ff51 	bl	8008ac4 <xTaskRemoveFromEventList>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00e      	beq.n	8007c46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e007      	b.n	8007c46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	b25a      	sxtb	r2, r3
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c46:	2301      	movs	r3, #1
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c4a:	e001      	b.n	8007c50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3740      	adds	r7, #64	; 0x40
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08c      	sub	sp, #48	; 0x30
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c74:	2300      	movs	r3, #0
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <xQueueReceive+0x30>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	623b      	str	r3, [r7, #32]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <xQueueReceive+0x3e>
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <xQueueReceive+0x42>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueReceive+0x44>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xQueueReceive+0x5e>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	61fb      	str	r3, [r7, #28]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc6:	f001 f8bb 	bl	8008e40 <xTaskGetSchedulerState>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <xQueueReceive+0x6e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <xQueueReceive+0x72>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueReceive+0x74>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueReceive+0x8e>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	61bb      	str	r3, [r7, #24]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf6:	f001 fdfd 	bl	80098f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01f      	beq.n	8007d46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0a:	f000 f977 	bl	8007ffc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	1e5a      	subs	r2, r3, #1
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00f      	beq.n	8007d3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	3310      	adds	r3, #16
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fece 	bl	8008ac4 <xTaskRemoveFromEventList>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d2e:	4b3d      	ldr	r3, [pc, #244]	; (8007e24 <xQueueReceive+0x1bc>)
 8007d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d3e:	f001 fe09 	bl	8009954 <vPortExitCritical>
				return pdPASS;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e069      	b.n	8007e1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d4c:	f001 fe02 	bl	8009954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e062      	b.n	8007e1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d5a:	f107 0310 	add.w	r3, r7, #16
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 ff14 	bl	8008b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d68:	f001 fdf4 	bl	8009954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d6c:	f000 fc86 	bl	800867c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d70:	f001 fdc0 	bl	80098f4 <vPortEnterCritical>
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d103      	bne.n	8007d8a <xQueueReceive+0x122>
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d103      	bne.n	8007da0 <xQueueReceive+0x138>
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007da0:	f001 fdd8 	bl	8009954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007da4:	1d3a      	adds	r2, r7, #4
 8007da6:	f107 0310 	add.w	r3, r7, #16
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 ff03 	bl	8008bb8 <xTaskCheckForTimeOut>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d123      	bne.n	8007e00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dba:	f000 f997 	bl	80080ec <prvIsQueueEmpty>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d017      	beq.n	8007df4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	3324      	adds	r3, #36	; 0x24
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fe29 	bl	8008a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd4:	f000 f938 	bl	8008048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dd8:	f000 fc5e 	bl	8008698 <xTaskResumeAll>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d189      	bne.n	8007cf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007de2:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <xQueueReceive+0x1bc>)
 8007de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	e780      	b.n	8007cf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df6:	f000 f927 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dfa:	f000 fc4d 	bl	8008698 <xTaskResumeAll>
 8007dfe:	e77a      	b.n	8007cf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e02:	f000 f921 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e06:	f000 fc47 	bl	8008698 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0c:	f000 f96e 	bl	80080ec <prvIsQueueEmpty>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f43f af6f 	beq.w	8007cf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3730      	adds	r7, #48	; 0x30
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	e000ed04 	.word	0xe000ed04

08007e28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08e      	sub	sp, #56	; 0x38
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	623b      	str	r3, [r7, #32]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d103      	bne.n	8007e62 <xQueueReceiveFromISR+0x3a>
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <xQueueReceiveFromISR+0x3e>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <xQueueReceiveFromISR+0x40>
 8007e66:	2300      	movs	r3, #0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	61fb      	str	r3, [r7, #28]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e82:	f001 fe19 	bl	8009ab8 <vPortValidateInterruptPriority>
	__asm volatile
 8007e86:	f3ef 8211 	mrs	r2, BASEPRI
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	61ba      	str	r2, [r7, #24]
 8007e9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02f      	beq.n	8007f0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ebc:	f000 f89e 	bl	8007ffc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	1e5a      	subs	r2, r3, #1
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d112      	bne.n	8007ef8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d016      	beq.n	8007f08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	3310      	adds	r3, #16
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fdf0 	bl	8008ac4 <xTaskRemoveFromEventList>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00e      	beq.n	8007f08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e007      	b.n	8007f08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efc:	3301      	adds	r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	b25a      	sxtb	r2, r3
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0c:	e001      	b.n	8007f12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f383 8811 	msr	BASEPRI, r3
}
 8007f1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3738      	adds	r7, #56	; 0x38
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d14d      	bne.n	8007fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 ff92 	bl	8008e7c <xTaskPriorityDisinherit>
 8007f58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	e043      	b.n	8007fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d119      	bne.n	8007f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6858      	ldr	r0, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	461a      	mov	r2, r3
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	f002 ffe5 	bl	800af42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d32b      	bcc.n	8007fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
 8007f9a:	e026      	b.n	8007fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68d8      	ldr	r0, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	f002 ffcb 	bl	800af42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	441a      	add	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d207      	bcs.n	8007fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d105      	bne.n	8007fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ff2:	697b      	ldr	r3, [r7, #20]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	441a      	add	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	429a      	cmp	r2, r3
 8008026:	d303      	bcc.n	8008030 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68d9      	ldr	r1, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	461a      	mov	r2, r3
 800803a:	6838      	ldr	r0, [r7, #0]
 800803c:	f002 ff81 	bl	800af42 <memcpy>
	}
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008050:	f001 fc50 	bl	80098f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800805a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800805c:	e011      	b.n	8008082 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3324      	adds	r3, #36	; 0x24
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fd2a 	bl	8008ac4 <xTaskRemoveFromEventList>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008076:	f000 fe01 	bl	8008c7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3b01      	subs	r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dce9      	bgt.n	800805e <prvUnlockQueue+0x16>
 800808a:	e000      	b.n	800808e <prvUnlockQueue+0x46>
					break;
 800808c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	22ff      	movs	r2, #255	; 0xff
 8008092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008096:	f001 fc5d 	bl	8009954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800809a:	f001 fc2b 	bl	80098f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a6:	e011      	b.n	80080cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d012      	beq.n	80080d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3310      	adds	r3, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fd05 	bl	8008ac4 <xTaskRemoveFromEventList>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080c0:	f000 fddc 	bl	8008c7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dce9      	bgt.n	80080a8 <prvUnlockQueue+0x60>
 80080d4:	e000      	b.n	80080d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	22ff      	movs	r2, #255	; 0xff
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080e0:	f001 fc38 	bl	8009954 <vPortExitCritical>
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080f4:	f001 fbfe 	bl	80098f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e001      	b.n	800810a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800810a:	f001 fc23 	bl	8009954 <vPortExitCritical>

	return xReturn;
 800810e:	68fb      	ldr	r3, [r7, #12]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008120:	f001 fbe8 	bl	80098f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812c:	429a      	cmp	r2, r3
 800812e:	d102      	bne.n	8008136 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e001      	b.n	800813a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800813a:	f001 fc0b 	bl	8009954 <vPortExitCritical>

	return xReturn;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	e014      	b.n	8008182 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008158:	4a0f      	ldr	r2, [pc, #60]	; (8008198 <vQueueAddToRegistry+0x50>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10b      	bne.n	800817c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008164:	490c      	ldr	r1, [pc, #48]	; (8008198 <vQueueAddToRegistry+0x50>)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800816e:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <vQueueAddToRegistry+0x50>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4413      	add	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800817a:	e006      	b.n	800818a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b07      	cmp	r3, #7
 8008186:	d9e7      	bls.n	8008158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000c84 	.word	0x20000c84

0800819c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081ac:	f001 fba2 	bl	80098f4 <vPortEnterCritical>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d103      	bne.n	80081c6 <vQueueWaitForMessageRestricted+0x2a>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d103      	bne.n	80081dc <vQueueWaitForMessageRestricted+0x40>
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081dc:	f001 fbba 	bl	8009954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	3324      	adds	r3, #36	; 0x24
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fc3b 	bl	8008a6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081f6:	6978      	ldr	r0, [r7, #20]
 80081f8:	f7ff ff26 	bl	8008048 <prvUnlockQueue>
	}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08e      	sub	sp, #56	; 0x38
 8008208:	af04      	add	r7, sp, #16
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10a      	bne.n	800822e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	623b      	str	r3, [r7, #32]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xTaskCreateStatic+0x46>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	61fb      	str	r3, [r7, #28]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800824a:	235c      	movs	r3, #92	; 0x5c
 800824c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b5c      	cmp	r3, #92	; 0x5c
 8008252:	d00a      	beq.n	800826a <xTaskCreateStatic+0x66>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	61bb      	str	r3, [r7, #24]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800826a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	2b00      	cmp	r3, #0
 8008270:	d01e      	beq.n	80082b0 <xTaskCreateStatic+0xac>
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01b      	beq.n	80082b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008280:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	2202      	movs	r2, #2
 8008286:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800828a:	2300      	movs	r3, #0
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	f107 0314 	add.w	r3, r7, #20
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f850 	bl	8008348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082aa:	f000 f8dd 	bl	8008468 <prvAddNewTaskToReadyList>
 80082ae:	e001      	b.n	80082b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082b4:	697b      	ldr	r3, [r7, #20]
	}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3728      	adds	r7, #40	; 0x28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b08c      	sub	sp, #48	; 0x30
 80082c2:	af04      	add	r7, sp, #16
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fc30 	bl	8009b38 <pvPortMalloc>
 80082d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082e0:	205c      	movs	r0, #92	; 0x5c
 80082e2:	f001 fc29 	bl	8009b38 <pvPortMalloc>
 80082e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
 80082f4:	e005      	b.n	8008302 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f001 fcea 	bl	8009cd0 <vPortFree>
 80082fc:	e001      	b.n	8008302 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d017      	beq.n	8008338 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	2300      	movs	r3, #0
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	9302      	str	r3, [sp, #8]
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f80e 	bl	8008348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800832c:	69f8      	ldr	r0, [r7, #28]
 800832e:	f000 f89b 	bl	8008468 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008332:	2301      	movs	r3, #1
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	e002      	b.n	800833e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008338:	f04f 33ff 	mov.w	r3, #4294967295
 800833c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800833e:	69bb      	ldr	r3, [r7, #24]
	}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	461a      	mov	r2, r3
 8008360:	21a5      	movs	r1, #165	; 0xa5
 8008362:	f002 fd6e 	bl	800ae42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008370:	3b01      	subs	r3, #1
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	617b      	str	r3, [r7, #20]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01f      	beq.n	80083e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	e012      	b.n	80083d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	7819      	ldrb	r1, [r3, #0]
 80083b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	3334      	adds	r3, #52	; 0x34
 80083bc:	460a      	mov	r2, r1
 80083be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d006      	beq.n	80083da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	2b0f      	cmp	r3, #15
 80083d6:	d9e9      	bls.n	80083ac <prvInitialiseNewTask+0x64>
 80083d8:	e000      	b.n	80083dc <prvInitialiseNewTask+0x94>
			{
				break;
 80083da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083e4:	e003      	b.n	80083ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	2b37      	cmp	r3, #55	; 0x37
 80083f2:	d901      	bls.n	80083f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083f4:	2337      	movs	r3, #55	; 0x37
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008402:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	2200      	movs	r2, #0
 8008408:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	3304      	adds	r3, #4
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff f8be 	bl	8007590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	3318      	adds	r3, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff f8b9 	bl	8007590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	2200      	movs	r2, #0
 8008438:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	69b8      	ldr	r0, [r7, #24]
 8008448:	f001 f928 	bl	800969c <pxPortInitialiseStack>
 800844c:	4602      	mov	r2, r0
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800845e:	bf00      	nop
 8008460:	3720      	adds	r7, #32
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008470:	f001 fa40 	bl	80098f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008474:	4b2d      	ldr	r3, [pc, #180]	; (800852c <prvAddNewTaskToReadyList+0xc4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	4a2c      	ldr	r2, [pc, #176]	; (800852c <prvAddNewTaskToReadyList+0xc4>)
 800847c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800847e:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d109      	bne.n	800849a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008486:	4a2a      	ldr	r2, [pc, #168]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800848c:	4b27      	ldr	r3, [pc, #156]	; (800852c <prvAddNewTaskToReadyList+0xc4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d110      	bne.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008494:	f000 fc16 	bl	8008cc4 <prvInitialiseTaskLists>
 8008498:	e00d      	b.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800849a:	4b26      	ldr	r3, [pc, #152]	; (8008534 <prvAddNewTaskToReadyList+0xcc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084a2:	4b23      	ldr	r3, [pc, #140]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d802      	bhi.n	80084b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084b0:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084b6:	4b20      	ldr	r3, [pc, #128]	; (8008538 <prvAddNewTaskToReadyList+0xd0>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <prvAddNewTaskToReadyList+0xd0>)
 80084be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084c0:	4b1d      	ldr	r3, [pc, #116]	; (8008538 <prvAddNewTaskToReadyList+0xd0>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <prvAddNewTaskToReadyList+0xd4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d903      	bls.n	80084dc <prvAddNewTaskToReadyList+0x74>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	4a18      	ldr	r2, [pc, #96]	; (800853c <prvAddNewTaskToReadyList+0xd4>)
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4a15      	ldr	r2, [pc, #84]	; (8008540 <prvAddNewTaskToReadyList+0xd8>)
 80084ea:	441a      	add	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	4610      	mov	r0, r2
 80084f4:	f7ff f859 	bl	80075aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084f8:	f001 fa2c 	bl	8009954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <prvAddNewTaskToReadyList+0xcc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00e      	beq.n	8008522 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <prvAddNewTaskToReadyList+0xc8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	429a      	cmp	r2, r3
 8008510:	d207      	bcs.n	8008522 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008512:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <prvAddNewTaskToReadyList+0xdc>)
 8008514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20001198 	.word	0x20001198
 8008530:	20000cc4 	.word	0x20000cc4
 8008534:	200011a4 	.word	0x200011a4
 8008538:	200011b4 	.word	0x200011b4
 800853c:	200011a0 	.word	0x200011a0
 8008540:	20000cc8 	.word	0x20000cc8
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d017      	beq.n	800858a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <vTaskDelay+0x60>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <vTaskDelay+0x30>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60bb      	str	r3, [r7, #8]
}
 8008574:	bf00      	nop
 8008576:	e7fe      	b.n	8008576 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008578:	f000 f880 	bl	800867c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800857c:	2100      	movs	r1, #0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fcea 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008584:	f000 f888 	bl	8008698 <xTaskResumeAll>
 8008588:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d107      	bne.n	80085a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <vTaskDelay+0x64>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200011c0 	.word	0x200011c0
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08a      	sub	sp, #40	; 0x28
 80085b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085be:	463a      	mov	r2, r7
 80085c0:	1d39      	adds	r1, r7, #4
 80085c2:	f107 0308 	add.w	r3, r7, #8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe ff8e 	bl	80074e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	9202      	str	r2, [sp, #8]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	460a      	mov	r2, r1
 80085de:	4921      	ldr	r1, [pc, #132]	; (8008664 <vTaskStartScheduler+0xb4>)
 80085e0:	4821      	ldr	r0, [pc, #132]	; (8008668 <vTaskStartScheduler+0xb8>)
 80085e2:	f7ff fe0f 	bl	8008204 <xTaskCreateStatic>
 80085e6:	4603      	mov	r3, r0
 80085e8:	4a20      	ldr	r2, [pc, #128]	; (800866c <vTaskStartScheduler+0xbc>)
 80085ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085ec:	4b1f      	ldr	r3, [pc, #124]	; (800866c <vTaskStartScheduler+0xbc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085f4:	2301      	movs	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e001      	b.n	80085fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d102      	bne.n	800860a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008604:	f000 fcfc 	bl	8009000 <xTimerCreateTimerTask>
 8008608:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d116      	bne.n	800863e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008624:	4b12      	ldr	r3, [pc, #72]	; (8008670 <vTaskStartScheduler+0xc0>)
 8008626:	f04f 32ff 	mov.w	r2, #4294967295
 800862a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800862c:	4b11      	ldr	r3, [pc, #68]	; (8008674 <vTaskStartScheduler+0xc4>)
 800862e:	2201      	movs	r2, #1
 8008630:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <vTaskStartScheduler+0xc8>)
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008638:	f001 f8ba 	bl	80097b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800863c:	e00e      	b.n	800865c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d10a      	bne.n	800865c <vTaskStartScheduler+0xac>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60fb      	str	r3, [r7, #12]
}
 8008658:	bf00      	nop
 800865a:	e7fe      	b.n	800865a <vTaskStartScheduler+0xaa>
}
 800865c:	bf00      	nop
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	0800f810 	.word	0x0800f810
 8008668:	08008c95 	.word	0x08008c95
 800866c:	200011bc 	.word	0x200011bc
 8008670:	200011b8 	.word	0x200011b8
 8008674:	200011a4 	.word	0x200011a4
 8008678:	2000119c 	.word	0x2000119c

0800867c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <vTaskSuspendAll+0x18>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	4a03      	ldr	r2, [pc, #12]	; (8008694 <vTaskSuspendAll+0x18>)
 8008688:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800868a:	bf00      	nop
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	200011c0 	.word	0x200011c0

08008698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086a6:	4b42      	ldr	r3, [pc, #264]	; (80087b0 <xTaskResumeAll+0x118>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	603b      	str	r3, [r7, #0]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086c4:	f001 f916 	bl	80098f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086c8:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <xTaskResumeAll+0x118>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	4a38      	ldr	r2, [pc, #224]	; (80087b0 <xTaskResumeAll+0x118>)
 80086d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086d2:	4b37      	ldr	r3, [pc, #220]	; (80087b0 <xTaskResumeAll+0x118>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d162      	bne.n	80087a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086da:	4b36      	ldr	r3, [pc, #216]	; (80087b4 <xTaskResumeAll+0x11c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d05e      	beq.n	80087a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086e2:	e02f      	b.n	8008744 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e4:	4b34      	ldr	r3, [pc, #208]	; (80087b8 <xTaskResumeAll+0x120>)
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe ffb7 	bl	8007664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe ffb2 	bl	8007664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <xTaskResumeAll+0x124>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d903      	bls.n	8008714 <xTaskResumeAll+0x7c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	4a2a      	ldr	r2, [pc, #168]	; (80087bc <xTaskResumeAll+0x124>)
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4a27      	ldr	r2, [pc, #156]	; (80087c0 <xTaskResumeAll+0x128>)
 8008722:	441a      	add	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f7fe ff3d 	bl	80075aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <xTaskResumeAll+0x12c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	429a      	cmp	r2, r3
 800873c:	d302      	bcc.n	8008744 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800873e:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <xTaskResumeAll+0x130>)
 8008740:	2201      	movs	r2, #1
 8008742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008744:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <xTaskResumeAll+0x120>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1cb      	bne.n	80086e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008752:	f000 fb55 	bl	8008e00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <xTaskResumeAll+0x134>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d010      	beq.n	8008784 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008762:	f000 f847 	bl	80087f4 <xTaskIncrementTick>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800876c:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <xTaskResumeAll+0x130>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3b01      	subs	r3, #1
 8008776:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1f1      	bne.n	8008762 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <xTaskResumeAll+0x134>)
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <xTaskResumeAll+0x130>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <xTaskResumeAll+0x138>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087a0:	f001 f8d8 	bl	8009954 <vPortExitCritical>

	return xAlreadyYielded;
 80087a4:	68bb      	ldr	r3, [r7, #8]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200011c0 	.word	0x200011c0
 80087b4:	20001198 	.word	0x20001198
 80087b8:	20001158 	.word	0x20001158
 80087bc:	200011a0 	.word	0x200011a0
 80087c0:	20000cc8 	.word	0x20000cc8
 80087c4:	20000cc4 	.word	0x20000cc4
 80087c8:	200011ac 	.word	0x200011ac
 80087cc:	200011a8 	.word	0x200011a8
 80087d0:	e000ed04 	.word	0xe000ed04

080087d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <xTaskGetTickCount+0x1c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087e0:	687b      	ldr	r3, [r7, #4]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	2000119c 	.word	0x2000119c

080087f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087fe:	4b4f      	ldr	r3, [pc, #316]	; (800893c <xTaskIncrementTick+0x148>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f040 808f 	bne.w	8008926 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008808:	4b4d      	ldr	r3, [pc, #308]	; (8008940 <xTaskIncrementTick+0x14c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008810:	4a4b      	ldr	r2, [pc, #300]	; (8008940 <xTaskIncrementTick+0x14c>)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d120      	bne.n	800885e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800881c:	4b49      	ldr	r3, [pc, #292]	; (8008944 <xTaskIncrementTick+0x150>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <xTaskIncrementTick+0x48>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	603b      	str	r3, [r7, #0]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <xTaskIncrementTick+0x46>
 800883c:	4b41      	ldr	r3, [pc, #260]	; (8008944 <xTaskIncrementTick+0x150>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	4b41      	ldr	r3, [pc, #260]	; (8008948 <xTaskIncrementTick+0x154>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a3f      	ldr	r2, [pc, #252]	; (8008944 <xTaskIncrementTick+0x150>)
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	4a3f      	ldr	r2, [pc, #252]	; (8008948 <xTaskIncrementTick+0x154>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	4b3e      	ldr	r3, [pc, #248]	; (800894c <xTaskIncrementTick+0x158>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3301      	adds	r3, #1
 8008856:	4a3d      	ldr	r2, [pc, #244]	; (800894c <xTaskIncrementTick+0x158>)
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	f000 fad1 	bl	8008e00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800885e:	4b3c      	ldr	r3, [pc, #240]	; (8008950 <xTaskIncrementTick+0x15c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d349      	bcc.n	80088fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008868:	4b36      	ldr	r3, [pc, #216]	; (8008944 <xTaskIncrementTick+0x150>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d104      	bne.n	800887c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008872:	4b37      	ldr	r3, [pc, #220]	; (8008950 <xTaskIncrementTick+0x15c>)
 8008874:	f04f 32ff 	mov.w	r2, #4294967295
 8008878:	601a      	str	r2, [r3, #0]
					break;
 800887a:	e03f      	b.n	80088fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887c:	4b31      	ldr	r3, [pc, #196]	; (8008944 <xTaskIncrementTick+0x150>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d203      	bcs.n	800889c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008894:	4a2e      	ldr	r2, [pc, #184]	; (8008950 <xTaskIncrementTick+0x15c>)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800889a:	e02f      	b.n	80088fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	3304      	adds	r3, #4
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe fedf 	bl	8007664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d004      	beq.n	80088b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	3318      	adds	r3, #24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fed6 	bl	8007664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088bc:	4b25      	ldr	r3, [pc, #148]	; (8008954 <xTaskIncrementTick+0x160>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d903      	bls.n	80088cc <xTaskIncrementTick+0xd8>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	4a22      	ldr	r2, [pc, #136]	; (8008954 <xTaskIncrementTick+0x160>)
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <xTaskIncrementTick+0x164>)
 80088da:	441a      	add	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	3304      	adds	r3, #4
 80088e0:	4619      	mov	r1, r3
 80088e2:	4610      	mov	r0, r2
 80088e4:	f7fe fe61 	bl	80075aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4b1b      	ldr	r3, [pc, #108]	; (800895c <xTaskIncrementTick+0x168>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d3b8      	bcc.n	8008868 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088f6:	2301      	movs	r3, #1
 80088f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fa:	e7b5      	b.n	8008868 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088fc:	4b17      	ldr	r3, [pc, #92]	; (800895c <xTaskIncrementTick+0x168>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008902:	4915      	ldr	r1, [pc, #84]	; (8008958 <xTaskIncrementTick+0x164>)
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d901      	bls.n	8008918 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008914:	2301      	movs	r3, #1
 8008916:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008918:	4b11      	ldr	r3, [pc, #68]	; (8008960 <xTaskIncrementTick+0x16c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008920:	2301      	movs	r3, #1
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	e004      	b.n	8008930 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <xTaskIncrementTick+0x170>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3301      	adds	r3, #1
 800892c:	4a0d      	ldr	r2, [pc, #52]	; (8008964 <xTaskIncrementTick+0x170>)
 800892e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008930:	697b      	ldr	r3, [r7, #20]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200011c0 	.word	0x200011c0
 8008940:	2000119c 	.word	0x2000119c
 8008944:	20001150 	.word	0x20001150
 8008948:	20001154 	.word	0x20001154
 800894c:	200011b0 	.word	0x200011b0
 8008950:	200011b8 	.word	0x200011b8
 8008954:	200011a0 	.word	0x200011a0
 8008958:	20000cc8 	.word	0x20000cc8
 800895c:	20000cc4 	.word	0x20000cc4
 8008960:	200011ac 	.word	0x200011ac
 8008964:	200011a8 	.word	0x200011a8

08008968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800896e:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <vTaskSwitchContext+0xa8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008976:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <vTaskSwitchContext+0xac>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800897c:	e041      	b.n	8008a02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800897e:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <vTaskSwitchContext+0xac>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <vTaskSwitchContext+0xb0>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	e010      	b.n	80089ae <vTaskSwitchContext+0x46>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	607b      	str	r3, [r7, #4]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vTaskSwitchContext+0x3e>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	491b      	ldr	r1, [pc, #108]	; (8008a1c <vTaskSwitchContext+0xb4>)
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0e4      	beq.n	800898c <vTaskSwitchContext+0x24>
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4a13      	ldr	r2, [pc, #76]	; (8008a1c <vTaskSwitchContext+0xb4>)
 80089ce:	4413      	add	r3, r2
 80089d0:	60bb      	str	r3, [r7, #8]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	3308      	adds	r3, #8
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d104      	bne.n	80089f2 <vTaskSwitchContext+0x8a>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <vTaskSwitchContext+0xb8>)
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	4a06      	ldr	r2, [pc, #24]	; (8008a18 <vTaskSwitchContext+0xb0>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6013      	str	r3, [r2, #0]
}
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	200011c0 	.word	0x200011c0
 8008a14:	200011ac 	.word	0x200011ac
 8008a18:	200011a0 	.word	0x200011a0
 8008a1c:	20000cc8 	.word	0x20000cc8
 8008a20:	20000cc4 	.word	0x20000cc4

08008a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	60fb      	str	r3, [r7, #12]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <vTaskPlaceOnEventList+0x44>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3318      	adds	r3, #24
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe fdcd 	bl	80075f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a58:	2101      	movs	r1, #1
 8008a5a:	6838      	ldr	r0, [r7, #0]
 8008a5c:	f000 fa7c 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20000cc4 	.word	0x20000cc4

08008a6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	617b      	str	r3, [r7, #20]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a94:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3318      	adds	r3, #24
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7fe fd84 	bl	80075aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	68b8      	ldr	r0, [r7, #8]
 8008ab2:	f000 fa51 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
	}
 8008ab6:	bf00      	nop
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000cc4 	.word	0x20000cc4

08008ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	60fb      	str	r3, [r7, #12]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	3318      	adds	r3, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fdb5 	bl	8007664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afa:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <xTaskRemoveFromEventList+0xb0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d11d      	bne.n	8008b3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fdac 	bl	8007664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <xTaskRemoveFromEventList+0xb4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d903      	bls.n	8008b20 <xTaskRemoveFromEventList+0x5c>
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <xTaskRemoveFromEventList+0xb4>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4a13      	ldr	r2, [pc, #76]	; (8008b7c <xTaskRemoveFromEventList+0xb8>)
 8008b2e:	441a      	add	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7fe fd37 	bl	80075aa <vListInsertEnd>
 8008b3c:	e005      	b.n	8008b4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	3318      	adds	r3, #24
 8008b42:	4619      	mov	r1, r3
 8008b44:	480e      	ldr	r0, [pc, #56]	; (8008b80 <xTaskRemoveFromEventList+0xbc>)
 8008b46:	f7fe fd30 	bl	80075aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <xTaskRemoveFromEventList+0xc0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d905      	bls.n	8008b64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <xTaskRemoveFromEventList+0xc4>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	e001      	b.n	8008b68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b68:	697b      	ldr	r3, [r7, #20]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200011c0 	.word	0x200011c0
 8008b78:	200011a0 	.word	0x200011a0
 8008b7c:	20000cc8 	.word	0x20000cc8
 8008b80:	20001158 	.word	0x20001158
 8008b84:	20000cc4 	.word	0x20000cc4
 8008b88:	200011ac 	.word	0x200011ac

08008b8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <vTaskInternalSetTimeOutState+0x24>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <vTaskInternalSetTimeOutState+0x28>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	605a      	str	r2, [r3, #4]
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	200011b0 	.word	0x200011b0
 8008bb4:	2000119c 	.word	0x2000119c

08008bb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	613b      	str	r3, [r7, #16]
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	60fb      	str	r3, [r7, #12]
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008bfa:	f000 fe7b 	bl	80098f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <xTaskCheckForTimeOut+0xbc>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d102      	bne.n	8008c1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61fb      	str	r3, [r7, #28]
 8008c1c:	e023      	b.n	8008c66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <xTaskCheckForTimeOut+0xc0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d007      	beq.n	8008c3a <xTaskCheckForTimeOut+0x82>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c34:	2301      	movs	r3, #1
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	e015      	b.n	8008c66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d20b      	bcs.n	8008c5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	1ad2      	subs	r2, r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ff9b 	bl	8008b8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	e004      	b.n	8008c66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c62:	2301      	movs	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c66:	f000 fe75 	bl	8009954 <vPortExitCritical>

	return xReturn;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	2000119c 	.word	0x2000119c
 8008c78:	200011b0 	.word	0x200011b0

08008c7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c80:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <vTaskMissedYield+0x14>)
 8008c82:	2201      	movs	r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
}
 8008c86:	bf00      	nop
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	200011ac 	.word	0x200011ac

08008c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c9c:	f000 f852 	bl	8008d44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ca0:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <prvIdleTask+0x28>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d9f9      	bls.n	8008c9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <prvIdleTask+0x2c>)
 8008caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cb8:	e7f0      	b.n	8008c9c <prvIdleTask+0x8>
 8008cba:	bf00      	nop
 8008cbc:	20000cc8 	.word	0x20000cc8
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cca:	2300      	movs	r3, #0
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	e00c      	b.n	8008cea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4a12      	ldr	r2, [pc, #72]	; (8008d24 <prvInitialiseTaskLists+0x60>)
 8008cdc:	4413      	add	r3, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fc36 	bl	8007550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	607b      	str	r3, [r7, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b37      	cmp	r3, #55	; 0x37
 8008cee:	d9ef      	bls.n	8008cd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cf0:	480d      	ldr	r0, [pc, #52]	; (8008d28 <prvInitialiseTaskLists+0x64>)
 8008cf2:	f7fe fc2d 	bl	8007550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cf6:	480d      	ldr	r0, [pc, #52]	; (8008d2c <prvInitialiseTaskLists+0x68>)
 8008cf8:	f7fe fc2a 	bl	8007550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cfc:	480c      	ldr	r0, [pc, #48]	; (8008d30 <prvInitialiseTaskLists+0x6c>)
 8008cfe:	f7fe fc27 	bl	8007550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d02:	480c      	ldr	r0, [pc, #48]	; (8008d34 <prvInitialiseTaskLists+0x70>)
 8008d04:	f7fe fc24 	bl	8007550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d08:	480b      	ldr	r0, [pc, #44]	; (8008d38 <prvInitialiseTaskLists+0x74>)
 8008d0a:	f7fe fc21 	bl	8007550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <prvInitialiseTaskLists+0x78>)
 8008d10:	4a05      	ldr	r2, [pc, #20]	; (8008d28 <prvInitialiseTaskLists+0x64>)
 8008d12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <prvInitialiseTaskLists+0x7c>)
 8008d16:	4a05      	ldr	r2, [pc, #20]	; (8008d2c <prvInitialiseTaskLists+0x68>)
 8008d18:	601a      	str	r2, [r3, #0]
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000cc8 	.word	0x20000cc8
 8008d28:	20001128 	.word	0x20001128
 8008d2c:	2000113c 	.word	0x2000113c
 8008d30:	20001158 	.word	0x20001158
 8008d34:	2000116c 	.word	0x2000116c
 8008d38:	20001184 	.word	0x20001184
 8008d3c:	20001150 	.word	0x20001150
 8008d40:	20001154 	.word	0x20001154

08008d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d4a:	e019      	b.n	8008d80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d4c:	f000 fdd2 	bl	80098f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d50:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <prvCheckTasksWaitingTermination+0x50>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe fc81 	bl	8007664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d62:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4a0b      	ldr	r2, [pc, #44]	; (8008d98 <prvCheckTasksWaitingTermination+0x54>)
 8008d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <prvCheckTasksWaitingTermination+0x58>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <prvCheckTasksWaitingTermination+0x58>)
 8008d74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d76:	f000 fded 	bl	8009954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f810 	bl	8008da0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <prvCheckTasksWaitingTermination+0x58>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e1      	bne.n	8008d4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	2000116c 	.word	0x2000116c
 8008d98:	20001198 	.word	0x20001198
 8008d9c:	20001180 	.word	0x20001180

08008da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d108      	bne.n	8008dc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 ff8a 	bl	8009cd0 <vPortFree>
				vPortFree( pxTCB );
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 ff87 	bl	8009cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dc2:	e018      	b.n	8008df6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d103      	bne.n	8008dd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 ff7e 	bl	8009cd0 <vPortFree>
	}
 8008dd4:	e00f      	b.n	8008df6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d00a      	beq.n	8008df6 <prvDeleteTCB+0x56>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	60fb      	str	r3, [r7, #12]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <prvDeleteTCB+0x54>
	}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvResetNextTaskUnblockTime+0x38>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d104      	bne.n	8008e1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <prvResetNextTaskUnblockTime+0x3c>)
 8008e12:	f04f 32ff 	mov.w	r2, #4294967295
 8008e16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e18:	e008      	b.n	8008e2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <prvResetNextTaskUnblockTime+0x38>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	4a04      	ldr	r2, [pc, #16]	; (8008e3c <prvResetNextTaskUnblockTime+0x3c>)
 8008e2a:	6013      	str	r3, [r2, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	20001150 	.word	0x20001150
 8008e3c:	200011b8 	.word	0x200011b8

08008e40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <xTaskGetSchedulerState+0x34>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	607b      	str	r3, [r7, #4]
 8008e52:	e008      	b.n	8008e66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e54:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <xTaskGetSchedulerState+0x38>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	607b      	str	r3, [r7, #4]
 8008e60:	e001      	b.n	8008e66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e62:	2300      	movs	r3, #0
 8008e64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e66:	687b      	ldr	r3, [r7, #4]
	}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	200011a4 	.word	0x200011a4
 8008e78:	200011c0 	.word	0x200011c0

08008e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d056      	beq.n	8008f40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e92:	4b2e      	ldr	r3, [pc, #184]	; (8008f4c <xTaskPriorityDisinherit+0xd0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d00a      	beq.n	8008eb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60fb      	str	r3, [r7, #12]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60bb      	str	r3, [r7, #8]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d02c      	beq.n	8008f40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d128      	bne.n	8008f40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fbb6 	bl	8007664 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <xTaskPriorityDisinherit+0xd4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d903      	bls.n	8008f20 <xTaskPriorityDisinherit+0xa4>
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	4a0c      	ldr	r2, [pc, #48]	; (8008f50 <xTaskPriorityDisinherit+0xd4>)
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4a09      	ldr	r2, [pc, #36]	; (8008f54 <xTaskPriorityDisinherit+0xd8>)
 8008f2e:	441a      	add	r2, r3
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3304      	adds	r3, #4
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	f7fe fb37 	bl	80075aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f40:	697b      	ldr	r3, [r7, #20]
	}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000cc4 	.word	0x20000cc4
 8008f50:	200011a0 	.word	0x200011a0
 8008f54:	20000cc8 	.word	0x20000cc8

08008f58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f62:	4b21      	ldr	r3, [pc, #132]	; (8008fe8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f68:	4b20      	ldr	r3, [pc, #128]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fb78 	bl	8007664 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d10a      	bne.n	8008f92 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4819      	ldr	r0, [pc, #100]	; (8008ff0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f8c:	f7fe fb0d 	bl	80075aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f90:	e026      	b.n	8008fe0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4413      	add	r3, r2
 8008f98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d209      	bcs.n	8008fbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008faa:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7fe fb1b 	bl	80075f2 <vListInsert>
}
 8008fbc:	e010      	b.n	8008fe0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	; (8008ff8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fe fb11 	bl	80075f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d202      	bcs.n	8008fe0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008fda:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	6013      	str	r3, [r2, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	2000119c 	.word	0x2000119c
 8008fec:	20000cc4 	.word	0x20000cc4
 8008ff0:	20001184 	.word	0x20001184
 8008ff4:	20001154 	.word	0x20001154
 8008ff8:	20001150 	.word	0x20001150
 8008ffc:	200011b8 	.word	0x200011b8

08009000 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	; 0x28
 8009004:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800900a:	f000 fb07 	bl	800961c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800900e:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <xTimerCreateTimerTask+0x80>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d021      	beq.n	800905a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800901e:	1d3a      	adds	r2, r7, #4
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fa77 	bl	800751c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	9202      	str	r2, [sp, #8]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	2302      	movs	r3, #2
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	2300      	movs	r3, #0
 800903e:	460a      	mov	r2, r1
 8009040:	4910      	ldr	r1, [pc, #64]	; (8009084 <xTimerCreateTimerTask+0x84>)
 8009042:	4811      	ldr	r0, [pc, #68]	; (8009088 <xTimerCreateTimerTask+0x88>)
 8009044:	f7ff f8de 	bl	8008204 <xTaskCreateStatic>
 8009048:	4603      	mov	r3, r0
 800904a:	4a10      	ldr	r2, [pc, #64]	; (800908c <xTimerCreateTimerTask+0x8c>)
 800904c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <xTimerCreateTimerTask+0x8c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009056:	2301      	movs	r3, #1
 8009058:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	613b      	str	r3, [r7, #16]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009076:	697b      	ldr	r3, [r7, #20]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200011f4 	.word	0x200011f4
 8009084:	0800f818 	.word	0x0800f818
 8009088:	080091c5 	.word	0x080091c5
 800908c:	200011f8 	.word	0x200011f8

08009090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	; 0x28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800909e:	2300      	movs	r3, #0
 80090a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xTimerGenericCommand+0x2e>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	623b      	str	r3, [r7, #32]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090be:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <xTimerGenericCommand+0x98>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d02a      	beq.n	800911c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b05      	cmp	r3, #5
 80090d6:	dc18      	bgt.n	800910a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090d8:	f7ff feb2 	bl	8008e40 <xTaskGetSchedulerState>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d109      	bne.n	80090f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090e2:	4b11      	ldr	r3, [pc, #68]	; (8009128 <xTimerGenericCommand+0x98>)
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f107 0110 	add.w	r1, r7, #16
 80090ea:	2300      	movs	r3, #0
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	f7fe fc21 	bl	8007934 <xQueueGenericSend>
 80090f2:	6278      	str	r0, [r7, #36]	; 0x24
 80090f4:	e012      	b.n	800911c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090f6:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <xTimerGenericCommand+0x98>)
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	f107 0110 	add.w	r1, r7, #16
 80090fe:	2300      	movs	r3, #0
 8009100:	2200      	movs	r2, #0
 8009102:	f7fe fc17 	bl	8007934 <xQueueGenericSend>
 8009106:	6278      	str	r0, [r7, #36]	; 0x24
 8009108:	e008      	b.n	800911c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <xTimerGenericCommand+0x98>)
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f107 0110 	add.w	r1, r7, #16
 8009112:	2300      	movs	r3, #0
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	f7fe fd0b 	bl	8007b30 <xQueueGenericSendFromISR>
 800911a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800911e:	4618      	mov	r0, r3
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	200011f4 	.word	0x200011f4

0800912c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af02      	add	r7, sp, #8
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <prvProcessExpiredTimer+0x94>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	3304      	adds	r3, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe fa8d 	bl	8007664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d022      	beq.n	800919e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	18d1      	adds	r1, r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	6978      	ldr	r0, [r7, #20]
 8009166:	f000 f8d1 	bl	800930c <prvInsertTimerInActiveList>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01f      	beq.n	80091b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009170:	2300      	movs	r3, #0
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	2300      	movs	r3, #0
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	2100      	movs	r1, #0
 800917a:	6978      	ldr	r0, [r7, #20]
 800917c:	f7ff ff88 	bl	8009090 <xTimerGenericCommand>
 8009180:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d113      	bne.n	80091b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	60fb      	str	r3, [r7, #12]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a4:	f023 0301 	bic.w	r3, r3, #1
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	6978      	ldr	r0, [r7, #20]
 80091b6:	4798      	blx	r3
}
 80091b8:	bf00      	nop
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	200011ec 	.word	0x200011ec

080091c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091cc:	f107 0308 	add.w	r3, r7, #8
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f857 	bl	8009284 <prvGetNextExpireTime>
 80091d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4619      	mov	r1, r3
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f803 	bl	80091e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091e2:	f000 f8d5 	bl	8009390 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091e6:	e7f1      	b.n	80091cc <prvTimerTask+0x8>

080091e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091f2:	f7ff fa43 	bl	800867c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091f6:	f107 0308 	add.w	r3, r7, #8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f866 	bl	80092cc <prvSampleTimeNow>
 8009200:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d130      	bne.n	800926a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <prvProcessTimerOrBlockTask+0x3c>
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	429a      	cmp	r2, r3
 8009214:	d806      	bhi.n	8009224 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009216:	f7ff fa3f 	bl	8008698 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ff85 	bl	800912c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009222:	e024      	b.n	800926e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <prvProcessTimerOrBlockTask+0x90>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <prvProcessTimerOrBlockTask+0x50>
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <prvProcessTimerOrBlockTask+0x52>
 8009238:	2300      	movs	r3, #0
 800923a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800923c:	4b0f      	ldr	r3, [pc, #60]	; (800927c <prvProcessTimerOrBlockTask+0x94>)
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4619      	mov	r1, r3
 800924a:	f7fe ffa7 	bl	800819c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800924e:	f7ff fa23 	bl	8008698 <xTaskResumeAll>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <prvProcessTimerOrBlockTask+0x98>)
 800925a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
}
 8009268:	e001      	b.n	800926e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800926a:	f7ff fa15 	bl	8008698 <xTaskResumeAll>
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	200011f0 	.word	0x200011f0
 800927c:	200011f4 	.word	0x200011f4
 8009280:	e000ed04 	.word	0xe000ed04

08009284 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <prvGetNextExpireTime+0x44>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <prvGetNextExpireTime+0x16>
 8009296:	2201      	movs	r2, #1
 8009298:	e000      	b.n	800929c <prvGetNextExpireTime+0x18>
 800929a:	2200      	movs	r2, #0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d105      	bne.n	80092b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092a8:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <prvGetNextExpireTime+0x44>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	e001      	b.n	80092b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092b8:	68fb      	ldr	r3, [r7, #12]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	200011ec 	.word	0x200011ec

080092cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092d4:	f7ff fa7e 	bl	80087d4 <xTaskGetTickCount>
 80092d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092da:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <prvSampleTimeNow+0x3c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d205      	bcs.n	80092f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092e4:	f000 f936 	bl	8009554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	e002      	b.n	80092f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092f6:	4a04      	ldr	r2, [pc, #16]	; (8009308 <prvSampleTimeNow+0x3c>)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092fc:	68fb      	ldr	r3, [r7, #12]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	200011fc 	.word	0x200011fc

0800930c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d812      	bhi.n	8009358 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	429a      	cmp	r2, r3
 800933e:	d302      	bcc.n	8009346 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	e01b      	b.n	800937e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009346:	4b10      	ldr	r3, [pc, #64]	; (8009388 <prvInsertTimerInActiveList+0x7c>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3304      	adds	r3, #4
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f7fe f94e 	bl	80075f2 <vListInsert>
 8009356:	e012      	b.n	800937e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d206      	bcs.n	800936e <prvInsertTimerInActiveList+0x62>
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d302      	bcc.n	800936e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009368:	2301      	movs	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e007      	b.n	800937e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800936e:	4b07      	ldr	r3, [pc, #28]	; (800938c <prvInsertTimerInActiveList+0x80>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3304      	adds	r3, #4
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7fe f93a 	bl	80075f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800937e:	697b      	ldr	r3, [r7, #20]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200011f0 	.word	0x200011f0
 800938c:	200011ec 	.word	0x200011ec

08009390 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08e      	sub	sp, #56	; 0x38
 8009394:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009396:	e0ca      	b.n	800952e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	da18      	bge.n	80093d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800939e:	1d3b      	adds	r3, r7, #4
 80093a0:	3304      	adds	r3, #4
 80093a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	61fb      	str	r3, [r7, #28]
}
 80093bc:	bf00      	nop
 80093be:	e7fe      	b.n	80093be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093c6:	6850      	ldr	r0, [r2, #4]
 80093c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ca:	6892      	ldr	r2, [r2, #8]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f2c0 80ab 	blt.w	800952e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d004      	beq.n	80093ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	3304      	adds	r3, #4
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe f93b 	bl	8007664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ee:	463b      	mov	r3, r7
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff ff6b 	bl	80092cc <prvSampleTimeNow>
 80093f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b09      	cmp	r3, #9
 80093fc:	f200 8096 	bhi.w	800952c <prvProcessReceivedCommands+0x19c>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <prvProcessReceivedCommands+0x78>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	08009431 	.word	0x08009431
 800940c:	08009431 	.word	0x08009431
 8009410:	08009431 	.word	0x08009431
 8009414:	080094a5 	.word	0x080094a5
 8009418:	080094b9 	.word	0x080094b9
 800941c:	08009503 	.word	0x08009503
 8009420:	08009431 	.word	0x08009431
 8009424:	08009431 	.word	0x08009431
 8009428:	080094a5 	.word	0x080094a5
 800942c:	080094b9 	.word	0x080094b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	b2da      	uxtb	r2, r3
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	18d1      	adds	r1, r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009450:	f7ff ff5c 	bl	800930c <prvInsertTimerInActiveList>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d069      	beq.n	800952e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009460:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d05e      	beq.n	800952e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	441a      	add	r2, r3
 8009478:	2300      	movs	r3, #0
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2300      	movs	r3, #0
 800947e:	2100      	movs	r1, #0
 8009480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009482:	f7ff fe05 	bl	8009090 <xTimerGenericCommand>
 8009486:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d14f      	bne.n	800952e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	61bb      	str	r3, [r7, #24]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094aa:	f023 0301 	bic.w	r3, r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094b6:	e03a      	b.n	800952e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094be:	f043 0301 	orr.w	r3, r3, #1
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	617b      	str	r3, [r7, #20]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	18d1      	adds	r1, r2, r3
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094fc:	f7ff ff06 	bl	800930c <prvInsertTimerInActiveList>
					break;
 8009500:	e015      	b.n	800952e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009512:	f000 fbdd 	bl	8009cd0 <vPortFree>
 8009516:	e00a      	b.n	800952e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800952a:	e000      	b.n	800952e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800952c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800952e:	4b08      	ldr	r3, [pc, #32]	; (8009550 <prvProcessReceivedCommands+0x1c0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	1d39      	adds	r1, r7, #4
 8009534:	2200      	movs	r2, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fb96 	bl	8007c68 <xQueueReceive>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	f47f af2a 	bne.w	8009398 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	3730      	adds	r7, #48	; 0x30
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200011f4 	.word	0x200011f4

08009554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800955a:	e048      	b.n	80095ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800955c:	4b2d      	ldr	r3, [pc, #180]	; (8009614 <prvSwitchTimerLists+0xc0>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009566:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <prvSwitchTimerLists+0xc0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3304      	adds	r3, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe f875 	bl	8007664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d02e      	beq.n	80095ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	4413      	add	r3, r2
 8009598:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d90e      	bls.n	80095c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ae:	4b19      	ldr	r3, [pc, #100]	; (8009614 <prvSwitchTimerLists+0xc0>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3304      	adds	r3, #4
 80095b6:	4619      	mov	r1, r3
 80095b8:	4610      	mov	r0, r2
 80095ba:	f7fe f81a 	bl	80075f2 <vListInsert>
 80095be:	e016      	b.n	80095ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095c0:	2300      	movs	r3, #0
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	2100      	movs	r1, #0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fd60 	bl	8009090 <xTimerGenericCommand>
 80095d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	603b      	str	r3, [r7, #0]
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <prvSwitchTimerLists+0xc0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1b1      	bne.n	800955c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095f8:	4b06      	ldr	r3, [pc, #24]	; (8009614 <prvSwitchTimerLists+0xc0>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095fe:	4b06      	ldr	r3, [pc, #24]	; (8009618 <prvSwitchTimerLists+0xc4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a04      	ldr	r2, [pc, #16]	; (8009614 <prvSwitchTimerLists+0xc0>)
 8009604:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009606:	4a04      	ldr	r2, [pc, #16]	; (8009618 <prvSwitchTimerLists+0xc4>)
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	6013      	str	r3, [r2, #0]
}
 800960c:	bf00      	nop
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	200011ec 	.word	0x200011ec
 8009618:	200011f0 	.word	0x200011f0

0800961c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009622:	f000 f967 	bl	80098f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009626:	4b15      	ldr	r3, [pc, #84]	; (800967c <prvCheckForValidListAndQueue+0x60>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d120      	bne.n	8009670 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800962e:	4814      	ldr	r0, [pc, #80]	; (8009680 <prvCheckForValidListAndQueue+0x64>)
 8009630:	f7fd ff8e 	bl	8007550 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009634:	4813      	ldr	r0, [pc, #76]	; (8009684 <prvCheckForValidListAndQueue+0x68>)
 8009636:	f7fd ff8b 	bl	8007550 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800963a:	4b13      	ldr	r3, [pc, #76]	; (8009688 <prvCheckForValidListAndQueue+0x6c>)
 800963c:	4a10      	ldr	r2, [pc, #64]	; (8009680 <prvCheckForValidListAndQueue+0x64>)
 800963e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009640:	4b12      	ldr	r3, [pc, #72]	; (800968c <prvCheckForValidListAndQueue+0x70>)
 8009642:	4a10      	ldr	r2, [pc, #64]	; (8009684 <prvCheckForValidListAndQueue+0x68>)
 8009644:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009646:	2300      	movs	r3, #0
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	4b11      	ldr	r3, [pc, #68]	; (8009690 <prvCheckForValidListAndQueue+0x74>)
 800964c:	4a11      	ldr	r2, [pc, #68]	; (8009694 <prvCheckForValidListAndQueue+0x78>)
 800964e:	2110      	movs	r1, #16
 8009650:	200a      	movs	r0, #10
 8009652:	f7fe f899 	bl	8007788 <xQueueGenericCreateStatic>
 8009656:	4603      	mov	r3, r0
 8009658:	4a08      	ldr	r2, [pc, #32]	; (800967c <prvCheckForValidListAndQueue+0x60>)
 800965a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800965c:	4b07      	ldr	r3, [pc, #28]	; (800967c <prvCheckForValidListAndQueue+0x60>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009664:	4b05      	ldr	r3, [pc, #20]	; (800967c <prvCheckForValidListAndQueue+0x60>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	490b      	ldr	r1, [pc, #44]	; (8009698 <prvCheckForValidListAndQueue+0x7c>)
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fd6c 	bl	8008148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009670:	f000 f970 	bl	8009954 <vPortExitCritical>
}
 8009674:	bf00      	nop
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	200011f4 	.word	0x200011f4
 8009680:	200011c4 	.word	0x200011c4
 8009684:	200011d8 	.word	0x200011d8
 8009688:	200011ec 	.word	0x200011ec
 800968c:	200011f0 	.word	0x200011f0
 8009690:	200012a0 	.word	0x200012a0
 8009694:	20001200 	.word	0x20001200
 8009698:	0800f820 	.word	0x0800f820

0800969c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3b04      	subs	r3, #4
 80096ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f023 0201 	bic.w	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b04      	subs	r3, #4
 80096ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096cc:	4a0c      	ldr	r2, [pc, #48]	; (8009700 <pxPortInitialiseStack+0x64>)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b14      	subs	r3, #20
 80096d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3b04      	subs	r3, #4
 80096e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f06f 0202 	mvn.w	r2, #2
 80096ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3b20      	subs	r3, #32
 80096f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096f2:	68fb      	ldr	r3, [r7, #12]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	08009705 	.word	0x08009705

08009704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800970e:	4b12      	ldr	r3, [pc, #72]	; (8009758 <prvTaskExitError+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d00a      	beq.n	800972e <prvTaskExitError+0x2a>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	60fb      	str	r3, [r7, #12]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <prvTaskExitError+0x28>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60bb      	str	r3, [r7, #8]
}
 8009740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009742:	bf00      	nop
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0fc      	beq.n	8009744 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	2000002c 	.word	0x2000002c
 800975c:	00000000 	.word	0x00000000

08009760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <pxCurrentTCBConst2>)
 8009762:	6819      	ldr	r1, [r3, #0]
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	f380 8809 	msr	PSP, r0
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8811 	msr	BASEPRI, r0
 800977a:	4770      	bx	lr
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst2>:
 8009780:	20000cc4 	.word	0x20000cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009788:	4808      	ldr	r0, [pc, #32]	; (80097ac <prvPortStartFirstTask+0x24>)
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	6800      	ldr	r0, [r0, #0]
 800978e:	f380 8808 	msr	MSP, r0
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8814 	msr	CONTROL, r0
 800979a:	b662      	cpsie	i
 800979c:	b661      	cpsie	f
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	df00      	svc	0
 80097a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097aa:	bf00      	nop
 80097ac:	e000ed08 	.word	0xe000ed08

080097b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097b6:	4b46      	ldr	r3, [pc, #280]	; (80098d0 <xPortStartScheduler+0x120>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a46      	ldr	r2, [pc, #280]	; (80098d4 <xPortStartScheduler+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10a      	bne.n	80097d6 <xPortStartScheduler+0x26>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	613b      	str	r3, [r7, #16]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097d6:	4b3e      	ldr	r3, [pc, #248]	; (80098d0 <xPortStartScheduler+0x120>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a3f      	ldr	r2, [pc, #252]	; (80098d8 <xPortStartScheduler+0x128>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d10a      	bne.n	80097f6 <xPortStartScheduler+0x46>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097f6:	4b39      	ldr	r3, [pc, #228]	; (80098dc <xPortStartScheduler+0x12c>)
 80097f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	22ff      	movs	r2, #255	; 0xff
 8009806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009818:	b2da      	uxtb	r2, r3
 800981a:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <xPortStartScheduler+0x130>)
 800981c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800981e:	4b31      	ldr	r3, [pc, #196]	; (80098e4 <xPortStartScheduler+0x134>)
 8009820:	2207      	movs	r2, #7
 8009822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009824:	e009      	b.n	800983a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009826:	4b2f      	ldr	r3, [pc, #188]	; (80098e4 <xPortStartScheduler+0x134>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3b01      	subs	r3, #1
 800982c:	4a2d      	ldr	r2, [pc, #180]	; (80098e4 <xPortStartScheduler+0x134>)
 800982e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009842:	2b80      	cmp	r3, #128	; 0x80
 8009844:	d0ef      	beq.n	8009826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009846:	4b27      	ldr	r3, [pc, #156]	; (80098e4 <xPortStartScheduler+0x134>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f1c3 0307 	rsb	r3, r3, #7
 800984e:	2b04      	cmp	r3, #4
 8009850:	d00a      	beq.n	8009868 <xPortStartScheduler+0xb8>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60bb      	str	r3, [r7, #8]
}
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009868:	4b1e      	ldr	r3, [pc, #120]	; (80098e4 <xPortStartScheduler+0x134>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	4a1d      	ldr	r2, [pc, #116]	; (80098e4 <xPortStartScheduler+0x134>)
 8009870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009872:	4b1c      	ldr	r3, [pc, #112]	; (80098e4 <xPortStartScheduler+0x134>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800987a:	4a1a      	ldr	r2, [pc, #104]	; (80098e4 <xPortStartScheduler+0x134>)
 800987c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	b2da      	uxtb	r2, r3
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009886:	4b18      	ldr	r3, [pc, #96]	; (80098e8 <xPortStartScheduler+0x138>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <xPortStartScheduler+0x138>)
 800988c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <xPortStartScheduler+0x138>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <xPortStartScheduler+0x138>)
 8009898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800989c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800989e:	f000 f8dd 	bl	8009a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098a2:	4b12      	ldr	r3, [pc, #72]	; (80098ec <xPortStartScheduler+0x13c>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098a8:	f000 f8fc 	bl	8009aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <xPortStartScheduler+0x140>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <xPortStartScheduler+0x140>)
 80098b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098b8:	f7ff ff66 	bl	8009788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098bc:	f7ff f854 	bl	8008968 <vTaskSwitchContext>
	prvTaskExitError();
 80098c0:	f7ff ff20 	bl	8009704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	e000ed00 	.word	0xe000ed00
 80098d4:	410fc271 	.word	0x410fc271
 80098d8:	410fc270 	.word	0x410fc270
 80098dc:	e000e400 	.word	0xe000e400
 80098e0:	200012f0 	.word	0x200012f0
 80098e4:	200012f4 	.word	0x200012f4
 80098e8:	e000ed20 	.word	0xe000ed20
 80098ec:	2000002c 	.word	0x2000002c
 80098f0:	e000ef34 	.word	0xe000ef34

080098f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800990e:	4b0f      	ldr	r3, [pc, #60]	; (800994c <vPortEnterCritical+0x58>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3301      	adds	r3, #1
 8009914:	4a0d      	ldr	r2, [pc, #52]	; (800994c <vPortEnterCritical+0x58>)
 8009916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009918:	4b0c      	ldr	r3, [pc, #48]	; (800994c <vPortEnterCritical+0x58>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d10f      	bne.n	8009940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009920:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <vPortEnterCritical+0x5c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <vPortEnterCritical+0x4c>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	603b      	str	r3, [r7, #0]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <vPortEnterCritical+0x4a>
	}
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	2000002c 	.word	0x2000002c
 8009950:	e000ed04 	.word	0xe000ed04

08009954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800995a:	4b12      	ldr	r3, [pc, #72]	; (80099a4 <vPortExitCritical+0x50>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <vPortExitCritical+0x24>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	607b      	str	r3, [r7, #4]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <vPortExitCritical+0x50>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3b01      	subs	r3, #1
 800997e:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <vPortExitCritical+0x50>)
 8009980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009982:	4b08      	ldr	r3, [pc, #32]	; (80099a4 <vPortExitCritical+0x50>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d105      	bne.n	8009996 <vPortExitCritical+0x42>
 800998a:	2300      	movs	r3, #0
 800998c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f383 8811 	msr	BASEPRI, r3
}
 8009994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	2000002c 	.word	0x2000002c
	...

080099b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099b0:	f3ef 8009 	mrs	r0, PSP
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <pxCurrentTCBConst>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	f01e 0f10 	tst.w	lr, #16
 80099c0:	bf08      	it	eq
 80099c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	6010      	str	r0, [r2, #0]
 80099cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099d4:	f380 8811 	msr	BASEPRI, r0
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f7fe ffc2 	bl	8008968 <vTaskSwitchContext>
 80099e4:	f04f 0000 	mov.w	r0, #0
 80099e8:	f380 8811 	msr	BASEPRI, r0
 80099ec:	bc09      	pop	{r0, r3}
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	6808      	ldr	r0, [r1, #0]
 80099f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f6:	f01e 0f10 	tst.w	lr, #16
 80099fa:	bf08      	it	eq
 80099fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a00:	f380 8809 	msr	PSP, r0
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w

08009a10 <pxCurrentTCBConst>:
 8009a10:	20000cc4 	.word	0x20000cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	607b      	str	r3, [r7, #4]
}
 8009a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a32:	f7fe fedf 	bl	80087f4 <xTaskIncrementTick>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <xPortSysTickHandler+0x40>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	2300      	movs	r3, #0
 8009a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f383 8811 	msr	BASEPRI, r3
}
 8009a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a66:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <vPortSetupTimerInterrupt+0x38>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <vPortSetupTimerInterrupt+0x3c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <vPortSetupTimerInterrupt+0x40>)
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	099b      	lsrs	r3, r3, #6
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <vPortSetupTimerInterrupt+0x44>)
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a80:	2207      	movs	r2, #7
 8009a82:	601a      	str	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	e000e010 	.word	0xe000e010
 8009a94:	e000e018 	.word	0xe000e018
 8009a98:	20000020 	.word	0x20000020
 8009a9c:	10624dd3 	.word	0x10624dd3
 8009aa0:	e000e014 	.word	0xe000e014

08009aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ab4 <vPortEnableVFP+0x10>
 8009aa8:	6801      	ldr	r1, [r0, #0]
 8009aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009aae:	6001      	str	r1, [r0, #0]
 8009ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ab2:	bf00      	nop
 8009ab4:	e000ed88 	.word	0xe000ed88

08009ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009abe:	f3ef 8305 	mrs	r3, IPSR
 8009ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b0f      	cmp	r3, #15
 8009ac8:	d914      	bls.n	8009af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009aca:	4a17      	ldr	r2, [pc, #92]	; (8009b28 <vPortValidateInterruptPriority+0x70>)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ad4:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <vPortValidateInterruptPriority+0x74>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	7afa      	ldrb	r2, [r7, #11]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d20a      	bcs.n	8009af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009af4:	4b0e      	ldr	r3, [pc, #56]	; (8009b30 <vPortValidateInterruptPriority+0x78>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <vPortValidateInterruptPriority+0x7c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d90a      	bls.n	8009b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	603b      	str	r3, [r7, #0]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <vPortValidateInterruptPriority+0x60>
	}
 8009b1a:	bf00      	nop
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	e000e3f0 	.word	0xe000e3f0
 8009b2c:	200012f0 	.word	0x200012f0
 8009b30:	e000ed0c 	.word	0xe000ed0c
 8009b34:	200012f4 	.word	0x200012f4

08009b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b44:	f7fe fd9a 	bl	800867c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b48:	4b5b      	ldr	r3, [pc, #364]	; (8009cb8 <pvPortMalloc+0x180>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b50:	f000 f920 	bl	8009d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b54:	4b59      	ldr	r3, [pc, #356]	; (8009cbc <pvPortMalloc+0x184>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f040 8093 	bne.w	8009c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01d      	beq.n	8009ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b68:	2208      	movs	r2, #8
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d014      	beq.n	8009ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f023 0307 	bic.w	r3, r3, #7
 8009b80:	3308      	adds	r3, #8
 8009b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	617b      	str	r3, [r7, #20]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d06e      	beq.n	8009c88 <pvPortMalloc+0x150>
 8009baa:	4b45      	ldr	r3, [pc, #276]	; (8009cc0 <pvPortMalloc+0x188>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d869      	bhi.n	8009c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bb4:	4b43      	ldr	r3, [pc, #268]	; (8009cc4 <pvPortMalloc+0x18c>)
 8009bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bb8:	4b42      	ldr	r3, [pc, #264]	; (8009cc4 <pvPortMalloc+0x18c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bbe:	e004      	b.n	8009bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d903      	bls.n	8009bdc <pvPortMalloc+0xa4>
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f1      	bne.n	8009bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bdc:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <pvPortMalloc+0x180>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d050      	beq.n	8009c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2208      	movs	r2, #8
 8009bec:	4413      	add	r3, r2
 8009bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	2308      	movs	r3, #8
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d91f      	bls.n	8009c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <pvPortMalloc+0xf8>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	613b      	str	r3, [r7, #16]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c42:	69b8      	ldr	r0, [r7, #24]
 8009c44:	f000 f908 	bl	8009e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c48:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	4a1b      	ldr	r2, [pc, #108]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <pvPortMalloc+0x190>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d203      	bcs.n	8009c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <pvPortMalloc+0x190>)
 8009c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	4b13      	ldr	r3, [pc, #76]	; (8009cbc <pvPortMalloc+0x184>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	431a      	orrs	r2, r3
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <pvPortMalloc+0x194>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3301      	adds	r3, #1
 8009c84:	4a11      	ldr	r2, [pc, #68]	; (8009ccc <pvPortMalloc+0x194>)
 8009c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c88:	f7fe fd06 	bl	8008698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f003 0307 	and.w	r3, r3, #7
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <pvPortMalloc+0x174>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	60fb      	str	r3, [r7, #12]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <pvPortMalloc+0x172>
	return pvReturn;
 8009cac:	69fb      	ldr	r3, [r7, #28]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3728      	adds	r7, #40	; 0x28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20004f00 	.word	0x20004f00
 8009cbc:	20004f14 	.word	0x20004f14
 8009cc0:	20004f04 	.word	0x20004f04
 8009cc4:	20004ef8 	.word	0x20004ef8
 8009cc8:	20004f08 	.word	0x20004f08
 8009ccc:	20004f0c 	.word	0x20004f0c

08009cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d04d      	beq.n	8009d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ce2:	2308      	movs	r3, #8
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	4413      	add	r3, r2
 8009cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <vPortFree+0xb8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <vPortFree+0x44>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	60fb      	str	r3, [r7, #12]
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <vPortFree+0x62>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60bb      	str	r3, [r7, #8]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <vPortFree+0xb8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01e      	beq.n	8009d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11a      	bne.n	8009d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <vPortFree+0xb8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	43db      	mvns	r3, r3
 8009d52:	401a      	ands	r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d58:	f7fe fc90 	bl	800867c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <vPortFree+0xbc>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4413      	add	r3, r2
 8009d66:	4a09      	ldr	r2, [pc, #36]	; (8009d8c <vPortFree+0xbc>)
 8009d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d6a:	6938      	ldr	r0, [r7, #16]
 8009d6c:	f000 f874 	bl	8009e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <vPortFree+0xc0>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	4a06      	ldr	r2, [pc, #24]	; (8009d90 <vPortFree+0xc0>)
 8009d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d7a:	f7fe fc8d 	bl	8008698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d7e:	bf00      	nop
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20004f14 	.word	0x20004f14
 8009d8c:	20004f04 	.word	0x20004f04
 8009d90:	20004f10 	.word	0x20004f10

08009d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009da0:	4b27      	ldr	r3, [pc, #156]	; (8009e40 <prvHeapInit+0xac>)
 8009da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3307      	adds	r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0307 	bic.w	r3, r3, #7
 8009dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	4a1f      	ldr	r2, [pc, #124]	; (8009e40 <prvHeapInit+0xac>)
 8009dc4:	4413      	add	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dcc:	4a1d      	ldr	r2, [pc, #116]	; (8009e44 <prvHeapInit+0xb0>)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009dd2:	4b1c      	ldr	r3, [pc, #112]	; (8009e44 <prvHeapInit+0xb0>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009de0:	2208      	movs	r2, #8
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0307 	bic.w	r3, r3, #7
 8009dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4a15      	ldr	r2, [pc, #84]	; (8009e48 <prvHeapInit+0xb4>)
 8009df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009df6:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <prvHeapInit+0xb4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <prvHeapInit+0xb4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e14:	4b0c      	ldr	r3, [pc, #48]	; (8009e48 <prvHeapInit+0xb4>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	4a0a      	ldr	r2, [pc, #40]	; (8009e4c <prvHeapInit+0xb8>)
 8009e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4a09      	ldr	r2, [pc, #36]	; (8009e50 <prvHeapInit+0xbc>)
 8009e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e2c:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <prvHeapInit+0xc0>)
 8009e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	200012f8 	.word	0x200012f8
 8009e44:	20004ef8 	.word	0x20004ef8
 8009e48:	20004f00 	.word	0x20004f00
 8009e4c:	20004f08 	.word	0x20004f08
 8009e50:	20004f04 	.word	0x20004f04
 8009e54:	20004f14 	.word	0x20004f14

08009e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e60:	4b28      	ldr	r3, [pc, #160]	; (8009f04 <prvInsertBlockIntoFreeList+0xac>)
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	e002      	b.n	8009e6c <prvInsertBlockIntoFreeList+0x14>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d8f7      	bhi.n	8009e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4413      	add	r3, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d108      	bne.n	8009e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	441a      	add	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d118      	bne.n	8009ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b15      	ldr	r3, [pc, #84]	; (8009f08 <prvInsertBlockIntoFreeList+0xb0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d00d      	beq.n	8009ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e008      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <prvInsertBlockIntoFreeList+0xb0>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e003      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d002      	beq.n	8009ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20004ef8 	.word	0x20004ef8
 8009f08:	20004f00 	.word	0x20004f00

08009f0c <__cvt>:
 8009f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	ec55 4b10 	vmov	r4, r5, d0
 8009f14:	2d00      	cmp	r5, #0
 8009f16:	460e      	mov	r6, r1
 8009f18:	4619      	mov	r1, r3
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	bfbb      	ittet	lt
 8009f1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f22:	461d      	movlt	r5, r3
 8009f24:	2300      	movge	r3, #0
 8009f26:	232d      	movlt	r3, #45	; 0x2d
 8009f28:	700b      	strb	r3, [r1, #0]
 8009f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f30:	4691      	mov	r9, r2
 8009f32:	f023 0820 	bic.w	r8, r3, #32
 8009f36:	bfbc      	itt	lt
 8009f38:	4622      	movlt	r2, r4
 8009f3a:	4614      	movlt	r4, r2
 8009f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f40:	d005      	beq.n	8009f4e <__cvt+0x42>
 8009f42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f46:	d100      	bne.n	8009f4a <__cvt+0x3e>
 8009f48:	3601      	adds	r6, #1
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	e000      	b.n	8009f50 <__cvt+0x44>
 8009f4e:	2103      	movs	r1, #3
 8009f50:	ab03      	add	r3, sp, #12
 8009f52:	9301      	str	r3, [sp, #4]
 8009f54:	ab02      	add	r3, sp, #8
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	ec45 4b10 	vmov	d0, r4, r5
 8009f5c:	4653      	mov	r3, sl
 8009f5e:	4632      	mov	r2, r6
 8009f60:	f001 f88e 	bl	800b080 <_dtoa_r>
 8009f64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f68:	4607      	mov	r7, r0
 8009f6a:	d102      	bne.n	8009f72 <__cvt+0x66>
 8009f6c:	f019 0f01 	tst.w	r9, #1
 8009f70:	d022      	beq.n	8009fb8 <__cvt+0xac>
 8009f72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f76:	eb07 0906 	add.w	r9, r7, r6
 8009f7a:	d110      	bne.n	8009f9e <__cvt+0x92>
 8009f7c:	783b      	ldrb	r3, [r7, #0]
 8009f7e:	2b30      	cmp	r3, #48	; 0x30
 8009f80:	d10a      	bne.n	8009f98 <__cvt+0x8c>
 8009f82:	2200      	movs	r2, #0
 8009f84:	2300      	movs	r3, #0
 8009f86:	4620      	mov	r0, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f7f6 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f8e:	b918      	cbnz	r0, 8009f98 <__cvt+0x8c>
 8009f90:	f1c6 0601 	rsb	r6, r6, #1
 8009f94:	f8ca 6000 	str.w	r6, [sl]
 8009f98:	f8da 3000 	ldr.w	r3, [sl]
 8009f9c:	4499      	add	r9, r3
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009faa:	b108      	cbz	r0, 8009fb0 <__cvt+0xa4>
 8009fac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fb0:	2230      	movs	r2, #48	; 0x30
 8009fb2:	9b03      	ldr	r3, [sp, #12]
 8009fb4:	454b      	cmp	r3, r9
 8009fb6:	d307      	bcc.n	8009fc8 <__cvt+0xbc>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fbc:	1bdb      	subs	r3, r3, r7
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	b004      	add	sp, #16
 8009fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc8:	1c59      	adds	r1, r3, #1
 8009fca:	9103      	str	r1, [sp, #12]
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e7f0      	b.n	8009fb2 <__cvt+0xa6>

08009fd0 <__exponent>:
 8009fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	bfb8      	it	lt
 8009fd8:	4249      	neglt	r1, r1
 8009fda:	f803 2b02 	strb.w	r2, [r3], #2
 8009fde:	bfb4      	ite	lt
 8009fe0:	222d      	movlt	r2, #45	; 0x2d
 8009fe2:	222b      	movge	r2, #43	; 0x2b
 8009fe4:	2909      	cmp	r1, #9
 8009fe6:	7042      	strb	r2, [r0, #1]
 8009fe8:	dd2a      	ble.n	800a040 <__exponent+0x70>
 8009fea:	f10d 0207 	add.w	r2, sp, #7
 8009fee:	4617      	mov	r7, r2
 8009ff0:	260a      	movs	r6, #10
 8009ff2:	4694      	mov	ip, r2
 8009ff4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ff8:	fb06 1415 	mls	r4, r6, r5, r1
 8009ffc:	3430      	adds	r4, #48	; 0x30
 8009ffe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a002:	460c      	mov	r4, r1
 800a004:	2c63      	cmp	r4, #99	; 0x63
 800a006:	f102 32ff 	add.w	r2, r2, #4294967295
 800a00a:	4629      	mov	r1, r5
 800a00c:	dcf1      	bgt.n	8009ff2 <__exponent+0x22>
 800a00e:	3130      	adds	r1, #48	; 0x30
 800a010:	f1ac 0402 	sub.w	r4, ip, #2
 800a014:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a018:	1c41      	adds	r1, r0, #1
 800a01a:	4622      	mov	r2, r4
 800a01c:	42ba      	cmp	r2, r7
 800a01e:	d30a      	bcc.n	800a036 <__exponent+0x66>
 800a020:	f10d 0209 	add.w	r2, sp, #9
 800a024:	eba2 020c 	sub.w	r2, r2, ip
 800a028:	42bc      	cmp	r4, r7
 800a02a:	bf88      	it	hi
 800a02c:	2200      	movhi	r2, #0
 800a02e:	4413      	add	r3, r2
 800a030:	1a18      	subs	r0, r3, r0
 800a032:	b003      	add	sp, #12
 800a034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a036:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a03a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a03e:	e7ed      	b.n	800a01c <__exponent+0x4c>
 800a040:	2330      	movs	r3, #48	; 0x30
 800a042:	3130      	adds	r1, #48	; 0x30
 800a044:	7083      	strb	r3, [r0, #2]
 800a046:	70c1      	strb	r1, [r0, #3]
 800a048:	1d03      	adds	r3, r0, #4
 800a04a:	e7f1      	b.n	800a030 <__exponent+0x60>

0800a04c <_printf_float>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	ed2d 8b02 	vpush	{d8}
 800a054:	b08d      	sub	sp, #52	; 0x34
 800a056:	460c      	mov	r4, r1
 800a058:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a05c:	4616      	mov	r6, r2
 800a05e:	461f      	mov	r7, r3
 800a060:	4605      	mov	r5, r0
 800a062:	f000 fef7 	bl	800ae54 <_localeconv_r>
 800a066:	f8d0 a000 	ldr.w	sl, [r0]
 800a06a:	4650      	mov	r0, sl
 800a06c:	f7f6 f900 	bl	8000270 <strlen>
 800a070:	2300      	movs	r3, #0
 800a072:	930a      	str	r3, [sp, #40]	; 0x28
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	9305      	str	r3, [sp, #20]
 800a078:	f8d8 3000 	ldr.w	r3, [r8]
 800a07c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a080:	3307      	adds	r3, #7
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	f103 0208 	add.w	r2, r3, #8
 800a08a:	f8c8 2000 	str.w	r2, [r8]
 800a08e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a096:	9307      	str	r3, [sp, #28]
 800a098:	f8cd 8018 	str.w	r8, [sp, #24]
 800a09c:	ee08 0a10 	vmov	s16, r0
 800a0a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a0a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0a8:	4b9e      	ldr	r3, [pc, #632]	; (800a324 <_printf_float+0x2d8>)
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	f7f6 fd3d 	bl	8000b2c <__aeabi_dcmpun>
 800a0b2:	bb88      	cbnz	r0, 800a118 <_printf_float+0xcc>
 800a0b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0b8:	4b9a      	ldr	r3, [pc, #616]	; (800a324 <_printf_float+0x2d8>)
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a0be:	f7f6 fd17 	bl	8000af0 <__aeabi_dcmple>
 800a0c2:	bb48      	cbnz	r0, 800a118 <_printf_float+0xcc>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 fd06 	bl	8000adc <__aeabi_dcmplt>
 800a0d0:	b110      	cbz	r0, 800a0d8 <_printf_float+0x8c>
 800a0d2:	232d      	movs	r3, #45	; 0x2d
 800a0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d8:	4a93      	ldr	r2, [pc, #588]	; (800a328 <_printf_float+0x2dc>)
 800a0da:	4b94      	ldr	r3, [pc, #592]	; (800a32c <_printf_float+0x2e0>)
 800a0dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0e0:	bf94      	ite	ls
 800a0e2:	4690      	movls	r8, r2
 800a0e4:	4698      	movhi	r8, r3
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	f023 0304 	bic.w	r3, r3, #4
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	9700      	str	r7, [sp, #0]
 800a0f8:	4633      	mov	r3, r6
 800a0fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4628      	mov	r0, r5
 800a100:	f000 f9da 	bl	800a4b8 <_printf_common>
 800a104:	3001      	adds	r0, #1
 800a106:	f040 8090 	bne.w	800a22a <_printf_float+0x1de>
 800a10a:	f04f 30ff 	mov.w	r0, #4294967295
 800a10e:	b00d      	add	sp, #52	; 0x34
 800a110:	ecbd 8b02 	vpop	{d8}
 800a114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fd04 	bl	8000b2c <__aeabi_dcmpun>
 800a124:	b140      	cbz	r0, 800a138 <_printf_float+0xec>
 800a126:	464b      	mov	r3, r9
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bfbc      	itt	lt
 800a12c:	232d      	movlt	r3, #45	; 0x2d
 800a12e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a132:	4a7f      	ldr	r2, [pc, #508]	; (800a330 <_printf_float+0x2e4>)
 800a134:	4b7f      	ldr	r3, [pc, #508]	; (800a334 <_printf_float+0x2e8>)
 800a136:	e7d1      	b.n	800a0dc <_printf_float+0x90>
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a13e:	9206      	str	r2, [sp, #24]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	d13f      	bne.n	800a1c4 <_printf_float+0x178>
 800a144:	2306      	movs	r3, #6
 800a146:	6063      	str	r3, [r4, #4]
 800a148:	9b05      	ldr	r3, [sp, #20]
 800a14a:	6861      	ldr	r1, [r4, #4]
 800a14c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a150:	2300      	movs	r3, #0
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	ab0a      	add	r3, sp, #40	; 0x28
 800a156:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a15a:	ab09      	add	r3, sp, #36	; 0x24
 800a15c:	ec49 8b10 	vmov	d0, r8, r9
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	6022      	str	r2, [r4, #0]
 800a164:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a168:	4628      	mov	r0, r5
 800a16a:	f7ff fecf 	bl	8009f0c <__cvt>
 800a16e:	9b06      	ldr	r3, [sp, #24]
 800a170:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a172:	2b47      	cmp	r3, #71	; 0x47
 800a174:	4680      	mov	r8, r0
 800a176:	d108      	bne.n	800a18a <_printf_float+0x13e>
 800a178:	1cc8      	adds	r0, r1, #3
 800a17a:	db02      	blt.n	800a182 <_printf_float+0x136>
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	4299      	cmp	r1, r3
 800a180:	dd41      	ble.n	800a206 <_printf_float+0x1ba>
 800a182:	f1ab 0302 	sub.w	r3, fp, #2
 800a186:	fa5f fb83 	uxtb.w	fp, r3
 800a18a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a18e:	d820      	bhi.n	800a1d2 <_printf_float+0x186>
 800a190:	3901      	subs	r1, #1
 800a192:	465a      	mov	r2, fp
 800a194:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a198:	9109      	str	r1, [sp, #36]	; 0x24
 800a19a:	f7ff ff19 	bl	8009fd0 <__exponent>
 800a19e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1a0:	1813      	adds	r3, r2, r0
 800a1a2:	2a01      	cmp	r2, #1
 800a1a4:	4681      	mov	r9, r0
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	dc02      	bgt.n	800a1b0 <_printf_float+0x164>
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	07d2      	lsls	r2, r2, #31
 800a1ae:	d501      	bpl.n	800a1b4 <_printf_float+0x168>
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	6123      	str	r3, [r4, #16]
 800a1b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d09c      	beq.n	800a0f6 <_printf_float+0xaa>
 800a1bc:	232d      	movs	r3, #45	; 0x2d
 800a1be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c2:	e798      	b.n	800a0f6 <_printf_float+0xaa>
 800a1c4:	9a06      	ldr	r2, [sp, #24]
 800a1c6:	2a47      	cmp	r2, #71	; 0x47
 800a1c8:	d1be      	bne.n	800a148 <_printf_float+0xfc>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1bc      	bne.n	800a148 <_printf_float+0xfc>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e7b9      	b.n	800a146 <_printf_float+0xfa>
 800a1d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1d6:	d118      	bne.n	800a20a <_printf_float+0x1be>
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	6863      	ldr	r3, [r4, #4]
 800a1dc:	dd0b      	ble.n	800a1f6 <_printf_float+0x1aa>
 800a1de:	6121      	str	r1, [r4, #16]
 800a1e0:	b913      	cbnz	r3, 800a1e8 <_printf_float+0x19c>
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	07d0      	lsls	r0, r2, #31
 800a1e6:	d502      	bpl.n	800a1ee <_printf_float+0x1a2>
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	440b      	add	r3, r1
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1f0:	f04f 0900 	mov.w	r9, #0
 800a1f4:	e7de      	b.n	800a1b4 <_printf_float+0x168>
 800a1f6:	b913      	cbnz	r3, 800a1fe <_printf_float+0x1b2>
 800a1f8:	6822      	ldr	r2, [r4, #0]
 800a1fa:	07d2      	lsls	r2, r2, #31
 800a1fc:	d501      	bpl.n	800a202 <_printf_float+0x1b6>
 800a1fe:	3302      	adds	r3, #2
 800a200:	e7f4      	b.n	800a1ec <_printf_float+0x1a0>
 800a202:	2301      	movs	r3, #1
 800a204:	e7f2      	b.n	800a1ec <_printf_float+0x1a0>
 800a206:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20c:	4299      	cmp	r1, r3
 800a20e:	db05      	blt.n	800a21c <_printf_float+0x1d0>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	6121      	str	r1, [r4, #16]
 800a214:	07d8      	lsls	r0, r3, #31
 800a216:	d5ea      	bpl.n	800a1ee <_printf_float+0x1a2>
 800a218:	1c4b      	adds	r3, r1, #1
 800a21a:	e7e7      	b.n	800a1ec <_printf_float+0x1a0>
 800a21c:	2900      	cmp	r1, #0
 800a21e:	bfd4      	ite	le
 800a220:	f1c1 0202 	rsble	r2, r1, #2
 800a224:	2201      	movgt	r2, #1
 800a226:	4413      	add	r3, r2
 800a228:	e7e0      	b.n	800a1ec <_printf_float+0x1a0>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	055a      	lsls	r2, r3, #21
 800a22e:	d407      	bmi.n	800a240 <_printf_float+0x1f4>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	4642      	mov	r2, r8
 800a234:	4631      	mov	r1, r6
 800a236:	4628      	mov	r0, r5
 800a238:	47b8      	blx	r7
 800a23a:	3001      	adds	r0, #1
 800a23c:	d12c      	bne.n	800a298 <_printf_float+0x24c>
 800a23e:	e764      	b.n	800a10a <_printf_float+0xbe>
 800a240:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a244:	f240 80e0 	bls.w	800a408 <_printf_float+0x3bc>
 800a248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a24c:	2200      	movs	r2, #0
 800a24e:	2300      	movs	r3, #0
 800a250:	f7f6 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a254:	2800      	cmp	r0, #0
 800a256:	d034      	beq.n	800a2c2 <_printf_float+0x276>
 800a258:	4a37      	ldr	r2, [pc, #220]	; (800a338 <_printf_float+0x2ec>)
 800a25a:	2301      	movs	r3, #1
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f af51 	beq.w	800a10a <_printf_float+0xbe>
 800a268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a26c:	429a      	cmp	r2, r3
 800a26e:	db02      	blt.n	800a276 <_printf_float+0x22a>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	07d8      	lsls	r0, r3, #31
 800a274:	d510      	bpl.n	800a298 <_printf_float+0x24c>
 800a276:	ee18 3a10 	vmov	r3, s16
 800a27a:	4652      	mov	r2, sl
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f af41 	beq.w	800a10a <_printf_float+0xbe>
 800a288:	f04f 0800 	mov.w	r8, #0
 800a28c:	f104 091a 	add.w	r9, r4, #26
 800a290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a292:	3b01      	subs	r3, #1
 800a294:	4543      	cmp	r3, r8
 800a296:	dc09      	bgt.n	800a2ac <_printf_float+0x260>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	079b      	lsls	r3, r3, #30
 800a29c:	f100 8107 	bmi.w	800a4ae <_printf_float+0x462>
 800a2a0:	68e0      	ldr	r0, [r4, #12]
 800a2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a4:	4298      	cmp	r0, r3
 800a2a6:	bfb8      	it	lt
 800a2a8:	4618      	movlt	r0, r3
 800a2aa:	e730      	b.n	800a10e <_printf_float+0xc2>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	464a      	mov	r2, r9
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f af27 	beq.w	800a10a <_printf_float+0xbe>
 800a2bc:	f108 0801 	add.w	r8, r8, #1
 800a2c0:	e7e6      	b.n	800a290 <_printf_float+0x244>
 800a2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dc39      	bgt.n	800a33c <_printf_float+0x2f0>
 800a2c8:	4a1b      	ldr	r2, [pc, #108]	; (800a338 <_printf_float+0x2ec>)
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	f43f af19 	beq.w	800a10a <_printf_float+0xbe>
 800a2d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	d102      	bne.n	800a2e6 <_printf_float+0x29a>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	07d9      	lsls	r1, r3, #31
 800a2e4:	d5d8      	bpl.n	800a298 <_printf_float+0x24c>
 800a2e6:	ee18 3a10 	vmov	r3, s16
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f af09 	beq.w	800a10a <_printf_float+0xbe>
 800a2f8:	f04f 0900 	mov.w	r9, #0
 800a2fc:	f104 0a1a 	add.w	sl, r4, #26
 800a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a302:	425b      	negs	r3, r3
 800a304:	454b      	cmp	r3, r9
 800a306:	dc01      	bgt.n	800a30c <_printf_float+0x2c0>
 800a308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30a:	e792      	b.n	800a232 <_printf_float+0x1e6>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4652      	mov	r2, sl
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f aef7 	beq.w	800a10a <_printf_float+0xbe>
 800a31c:	f109 0901 	add.w	r9, r9, #1
 800a320:	e7ee      	b.n	800a300 <_printf_float+0x2b4>
 800a322:	bf00      	nop
 800a324:	7fefffff 	.word	0x7fefffff
 800a328:	0800f9a1 	.word	0x0800f9a1
 800a32c:	0800f9a5 	.word	0x0800f9a5
 800a330:	0800f9a9 	.word	0x0800f9a9
 800a334:	0800f9ad 	.word	0x0800f9ad
 800a338:	0800f9b1 	.word	0x0800f9b1
 800a33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a33e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a340:	429a      	cmp	r2, r3
 800a342:	bfa8      	it	ge
 800a344:	461a      	movge	r2, r3
 800a346:	2a00      	cmp	r2, #0
 800a348:	4691      	mov	r9, r2
 800a34a:	dc37      	bgt.n	800a3bc <_printf_float+0x370>
 800a34c:	f04f 0b00 	mov.w	fp, #0
 800a350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a354:	f104 021a 	add.w	r2, r4, #26
 800a358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a35a:	9305      	str	r3, [sp, #20]
 800a35c:	eba3 0309 	sub.w	r3, r3, r9
 800a360:	455b      	cmp	r3, fp
 800a362:	dc33      	bgt.n	800a3cc <_printf_float+0x380>
 800a364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a368:	429a      	cmp	r2, r3
 800a36a:	db3b      	blt.n	800a3e4 <_printf_float+0x398>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	07da      	lsls	r2, r3, #31
 800a370:	d438      	bmi.n	800a3e4 <_printf_float+0x398>
 800a372:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a376:	eba2 0903 	sub.w	r9, r2, r3
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	1ad2      	subs	r2, r2, r3
 800a37e:	4591      	cmp	r9, r2
 800a380:	bfa8      	it	ge
 800a382:	4691      	movge	r9, r2
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	dc35      	bgt.n	800a3f6 <_printf_float+0x3aa>
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a392:	f104 0a1a 	add.w	sl, r4, #26
 800a396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	eba3 0309 	sub.w	r3, r3, r9
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	f77f af79 	ble.w	800a298 <_printf_float+0x24c>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4652      	mov	r2, sl
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f43f aeaa 	beq.w	800a10a <_printf_float+0xbe>
 800a3b6:	f108 0801 	add.w	r8, r8, #1
 800a3ba:	e7ec      	b.n	800a396 <_printf_float+0x34a>
 800a3bc:	4613      	mov	r3, r2
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	47b8      	blx	r7
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	d1c0      	bne.n	800a34c <_printf_float+0x300>
 800a3ca:	e69e      	b.n	800a10a <_printf_float+0xbe>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	9205      	str	r2, [sp, #20]
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f43f ae97 	beq.w	800a10a <_printf_float+0xbe>
 800a3dc:	9a05      	ldr	r2, [sp, #20]
 800a3de:	f10b 0b01 	add.w	fp, fp, #1
 800a3e2:	e7b9      	b.n	800a358 <_printf_float+0x30c>
 800a3e4:	ee18 3a10 	vmov	r3, s16
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d1be      	bne.n	800a372 <_printf_float+0x326>
 800a3f4:	e689      	b.n	800a10a <_printf_float+0xbe>
 800a3f6:	9a05      	ldr	r2, [sp, #20]
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	4442      	add	r2, r8
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	d1c1      	bne.n	800a38a <_printf_float+0x33e>
 800a406:	e680      	b.n	800a10a <_printf_float+0xbe>
 800a408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a40a:	2a01      	cmp	r2, #1
 800a40c:	dc01      	bgt.n	800a412 <_printf_float+0x3c6>
 800a40e:	07db      	lsls	r3, r3, #31
 800a410:	d53a      	bpl.n	800a488 <_printf_float+0x43c>
 800a412:	2301      	movs	r3, #1
 800a414:	4642      	mov	r2, r8
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f ae74 	beq.w	800a10a <_printf_float+0xbe>
 800a422:	ee18 3a10 	vmov	r3, s16
 800a426:	4652      	mov	r2, sl
 800a428:	4631      	mov	r1, r6
 800a42a:	4628      	mov	r0, r5
 800a42c:	47b8      	blx	r7
 800a42e:	3001      	adds	r0, #1
 800a430:	f43f ae6b 	beq.w	800a10a <_printf_float+0xbe>
 800a434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a438:	2200      	movs	r2, #0
 800a43a:	2300      	movs	r3, #0
 800a43c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a440:	f7f6 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 800a444:	b9d8      	cbnz	r0, 800a47e <_printf_float+0x432>
 800a446:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a44a:	f108 0201 	add.w	r2, r8, #1
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	d10e      	bne.n	800a476 <_printf_float+0x42a>
 800a458:	e657      	b.n	800a10a <_printf_float+0xbe>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4652      	mov	r2, sl
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	f43f ae50 	beq.w	800a10a <_printf_float+0xbe>
 800a46a:	f108 0801 	add.w	r8, r8, #1
 800a46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a470:	3b01      	subs	r3, #1
 800a472:	4543      	cmp	r3, r8
 800a474:	dcf1      	bgt.n	800a45a <_printf_float+0x40e>
 800a476:	464b      	mov	r3, r9
 800a478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a47c:	e6da      	b.n	800a234 <_printf_float+0x1e8>
 800a47e:	f04f 0800 	mov.w	r8, #0
 800a482:	f104 0a1a 	add.w	sl, r4, #26
 800a486:	e7f2      	b.n	800a46e <_printf_float+0x422>
 800a488:	2301      	movs	r3, #1
 800a48a:	4642      	mov	r2, r8
 800a48c:	e7df      	b.n	800a44e <_printf_float+0x402>
 800a48e:	2301      	movs	r3, #1
 800a490:	464a      	mov	r2, r9
 800a492:	4631      	mov	r1, r6
 800a494:	4628      	mov	r0, r5
 800a496:	47b8      	blx	r7
 800a498:	3001      	adds	r0, #1
 800a49a:	f43f ae36 	beq.w	800a10a <_printf_float+0xbe>
 800a49e:	f108 0801 	add.w	r8, r8, #1
 800a4a2:	68e3      	ldr	r3, [r4, #12]
 800a4a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4a6:	1a5b      	subs	r3, r3, r1
 800a4a8:	4543      	cmp	r3, r8
 800a4aa:	dcf0      	bgt.n	800a48e <_printf_float+0x442>
 800a4ac:	e6f8      	b.n	800a2a0 <_printf_float+0x254>
 800a4ae:	f04f 0800 	mov.w	r8, #0
 800a4b2:	f104 0919 	add.w	r9, r4, #25
 800a4b6:	e7f4      	b.n	800a4a2 <_printf_float+0x456>

0800a4b8 <_printf_common>:
 800a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	4616      	mov	r6, r2
 800a4be:	4699      	mov	r9, r3
 800a4c0:	688a      	ldr	r2, [r1, #8]
 800a4c2:	690b      	ldr	r3, [r1, #16]
 800a4c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	bfb8      	it	lt
 800a4cc:	4613      	movlt	r3, r2
 800a4ce:	6033      	str	r3, [r6, #0]
 800a4d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	b10a      	cbz	r2, 800a4de <_printf_common+0x26>
 800a4da:	3301      	adds	r3, #1
 800a4dc:	6033      	str	r3, [r6, #0]
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	0699      	lsls	r1, r3, #26
 800a4e2:	bf42      	ittt	mi
 800a4e4:	6833      	ldrmi	r3, [r6, #0]
 800a4e6:	3302      	addmi	r3, #2
 800a4e8:	6033      	strmi	r3, [r6, #0]
 800a4ea:	6825      	ldr	r5, [r4, #0]
 800a4ec:	f015 0506 	ands.w	r5, r5, #6
 800a4f0:	d106      	bne.n	800a500 <_printf_common+0x48>
 800a4f2:	f104 0a19 	add.w	sl, r4, #25
 800a4f6:	68e3      	ldr	r3, [r4, #12]
 800a4f8:	6832      	ldr	r2, [r6, #0]
 800a4fa:	1a9b      	subs	r3, r3, r2
 800a4fc:	42ab      	cmp	r3, r5
 800a4fe:	dc26      	bgt.n	800a54e <_printf_common+0x96>
 800a500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a504:	1e13      	subs	r3, r2, #0
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	bf18      	it	ne
 800a50a:	2301      	movne	r3, #1
 800a50c:	0692      	lsls	r2, r2, #26
 800a50e:	d42b      	bmi.n	800a568 <_printf_common+0xb0>
 800a510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a514:	4649      	mov	r1, r9
 800a516:	4638      	mov	r0, r7
 800a518:	47c0      	blx	r8
 800a51a:	3001      	adds	r0, #1
 800a51c:	d01e      	beq.n	800a55c <_printf_common+0xa4>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6922      	ldr	r2, [r4, #16]
 800a522:	f003 0306 	and.w	r3, r3, #6
 800a526:	2b04      	cmp	r3, #4
 800a528:	bf02      	ittt	eq
 800a52a:	68e5      	ldreq	r5, [r4, #12]
 800a52c:	6833      	ldreq	r3, [r6, #0]
 800a52e:	1aed      	subeq	r5, r5, r3
 800a530:	68a3      	ldr	r3, [r4, #8]
 800a532:	bf0c      	ite	eq
 800a534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a538:	2500      	movne	r5, #0
 800a53a:	4293      	cmp	r3, r2
 800a53c:	bfc4      	itt	gt
 800a53e:	1a9b      	subgt	r3, r3, r2
 800a540:	18ed      	addgt	r5, r5, r3
 800a542:	2600      	movs	r6, #0
 800a544:	341a      	adds	r4, #26
 800a546:	42b5      	cmp	r5, r6
 800a548:	d11a      	bne.n	800a580 <_printf_common+0xc8>
 800a54a:	2000      	movs	r0, #0
 800a54c:	e008      	b.n	800a560 <_printf_common+0xa8>
 800a54e:	2301      	movs	r3, #1
 800a550:	4652      	mov	r2, sl
 800a552:	4649      	mov	r1, r9
 800a554:	4638      	mov	r0, r7
 800a556:	47c0      	blx	r8
 800a558:	3001      	adds	r0, #1
 800a55a:	d103      	bne.n	800a564 <_printf_common+0xac>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a564:	3501      	adds	r5, #1
 800a566:	e7c6      	b.n	800a4f6 <_printf_common+0x3e>
 800a568:	18e1      	adds	r1, r4, r3
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	2030      	movs	r0, #48	; 0x30
 800a56e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a572:	4422      	add	r2, r4
 800a574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a57c:	3302      	adds	r3, #2
 800a57e:	e7c7      	b.n	800a510 <_printf_common+0x58>
 800a580:	2301      	movs	r3, #1
 800a582:	4622      	mov	r2, r4
 800a584:	4649      	mov	r1, r9
 800a586:	4638      	mov	r0, r7
 800a588:	47c0      	blx	r8
 800a58a:	3001      	adds	r0, #1
 800a58c:	d0e6      	beq.n	800a55c <_printf_common+0xa4>
 800a58e:	3601      	adds	r6, #1
 800a590:	e7d9      	b.n	800a546 <_printf_common+0x8e>
	...

0800a594 <_printf_i>:
 800a594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	7e0f      	ldrb	r7, [r1, #24]
 800a59a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a59c:	2f78      	cmp	r7, #120	; 0x78
 800a59e:	4691      	mov	r9, r2
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	469a      	mov	sl, r3
 800a5a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5aa:	d807      	bhi.n	800a5bc <_printf_i+0x28>
 800a5ac:	2f62      	cmp	r7, #98	; 0x62
 800a5ae:	d80a      	bhi.n	800a5c6 <_printf_i+0x32>
 800a5b0:	2f00      	cmp	r7, #0
 800a5b2:	f000 80d4 	beq.w	800a75e <_printf_i+0x1ca>
 800a5b6:	2f58      	cmp	r7, #88	; 0x58
 800a5b8:	f000 80c0 	beq.w	800a73c <_printf_i+0x1a8>
 800a5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5c4:	e03a      	b.n	800a63c <_printf_i+0xa8>
 800a5c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5ca:	2b15      	cmp	r3, #21
 800a5cc:	d8f6      	bhi.n	800a5bc <_printf_i+0x28>
 800a5ce:	a101      	add	r1, pc, #4	; (adr r1, 800a5d4 <_printf_i+0x40>)
 800a5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5d4:	0800a62d 	.word	0x0800a62d
 800a5d8:	0800a641 	.word	0x0800a641
 800a5dc:	0800a5bd 	.word	0x0800a5bd
 800a5e0:	0800a5bd 	.word	0x0800a5bd
 800a5e4:	0800a5bd 	.word	0x0800a5bd
 800a5e8:	0800a5bd 	.word	0x0800a5bd
 800a5ec:	0800a641 	.word	0x0800a641
 800a5f0:	0800a5bd 	.word	0x0800a5bd
 800a5f4:	0800a5bd 	.word	0x0800a5bd
 800a5f8:	0800a5bd 	.word	0x0800a5bd
 800a5fc:	0800a5bd 	.word	0x0800a5bd
 800a600:	0800a745 	.word	0x0800a745
 800a604:	0800a66d 	.word	0x0800a66d
 800a608:	0800a6ff 	.word	0x0800a6ff
 800a60c:	0800a5bd 	.word	0x0800a5bd
 800a610:	0800a5bd 	.word	0x0800a5bd
 800a614:	0800a767 	.word	0x0800a767
 800a618:	0800a5bd 	.word	0x0800a5bd
 800a61c:	0800a66d 	.word	0x0800a66d
 800a620:	0800a5bd 	.word	0x0800a5bd
 800a624:	0800a5bd 	.word	0x0800a5bd
 800a628:	0800a707 	.word	0x0800a707
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	1d1a      	adds	r2, r3, #4
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	602a      	str	r2, [r5, #0]
 800a634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a63c:	2301      	movs	r3, #1
 800a63e:	e09f      	b.n	800a780 <_printf_i+0x1ec>
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	0607      	lsls	r7, r0, #24
 800a646:	f103 0104 	add.w	r1, r3, #4
 800a64a:	6029      	str	r1, [r5, #0]
 800a64c:	d501      	bpl.n	800a652 <_printf_i+0xbe>
 800a64e:	681e      	ldr	r6, [r3, #0]
 800a650:	e003      	b.n	800a65a <_printf_i+0xc6>
 800a652:	0646      	lsls	r6, r0, #25
 800a654:	d5fb      	bpl.n	800a64e <_printf_i+0xba>
 800a656:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	da03      	bge.n	800a666 <_printf_i+0xd2>
 800a65e:	232d      	movs	r3, #45	; 0x2d
 800a660:	4276      	negs	r6, r6
 800a662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a666:	485a      	ldr	r0, [pc, #360]	; (800a7d0 <_printf_i+0x23c>)
 800a668:	230a      	movs	r3, #10
 800a66a:	e012      	b.n	800a692 <_printf_i+0xfe>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	6820      	ldr	r0, [r4, #0]
 800a670:	1d19      	adds	r1, r3, #4
 800a672:	6029      	str	r1, [r5, #0]
 800a674:	0605      	lsls	r5, r0, #24
 800a676:	d501      	bpl.n	800a67c <_printf_i+0xe8>
 800a678:	681e      	ldr	r6, [r3, #0]
 800a67a:	e002      	b.n	800a682 <_printf_i+0xee>
 800a67c:	0641      	lsls	r1, r0, #25
 800a67e:	d5fb      	bpl.n	800a678 <_printf_i+0xe4>
 800a680:	881e      	ldrh	r6, [r3, #0]
 800a682:	4853      	ldr	r0, [pc, #332]	; (800a7d0 <_printf_i+0x23c>)
 800a684:	2f6f      	cmp	r7, #111	; 0x6f
 800a686:	bf0c      	ite	eq
 800a688:	2308      	moveq	r3, #8
 800a68a:	230a      	movne	r3, #10
 800a68c:	2100      	movs	r1, #0
 800a68e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a692:	6865      	ldr	r5, [r4, #4]
 800a694:	60a5      	str	r5, [r4, #8]
 800a696:	2d00      	cmp	r5, #0
 800a698:	bfa2      	ittt	ge
 800a69a:	6821      	ldrge	r1, [r4, #0]
 800a69c:	f021 0104 	bicge.w	r1, r1, #4
 800a6a0:	6021      	strge	r1, [r4, #0]
 800a6a2:	b90e      	cbnz	r6, 800a6a8 <_printf_i+0x114>
 800a6a4:	2d00      	cmp	r5, #0
 800a6a6:	d04b      	beq.n	800a740 <_printf_i+0x1ac>
 800a6a8:	4615      	mov	r5, r2
 800a6aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a6b2:	5dc7      	ldrb	r7, [r0, r7]
 800a6b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6b8:	4637      	mov	r7, r6
 800a6ba:	42bb      	cmp	r3, r7
 800a6bc:	460e      	mov	r6, r1
 800a6be:	d9f4      	bls.n	800a6aa <_printf_i+0x116>
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d10b      	bne.n	800a6dc <_printf_i+0x148>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	07de      	lsls	r6, r3, #31
 800a6c8:	d508      	bpl.n	800a6dc <_printf_i+0x148>
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	6861      	ldr	r1, [r4, #4]
 800a6ce:	4299      	cmp	r1, r3
 800a6d0:	bfde      	ittt	le
 800a6d2:	2330      	movle	r3, #48	; 0x30
 800a6d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6dc:	1b52      	subs	r2, r2, r5
 800a6de:	6122      	str	r2, [r4, #16]
 800a6e0:	f8cd a000 	str.w	sl, [sp]
 800a6e4:	464b      	mov	r3, r9
 800a6e6:	aa03      	add	r2, sp, #12
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	f7ff fee4 	bl	800a4b8 <_printf_common>
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	d14a      	bne.n	800a78a <_printf_i+0x1f6>
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f8:	b004      	add	sp, #16
 800a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	f043 0320 	orr.w	r3, r3, #32
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	4833      	ldr	r0, [pc, #204]	; (800a7d4 <_printf_i+0x240>)
 800a708:	2778      	movs	r7, #120	; 0x78
 800a70a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	6829      	ldr	r1, [r5, #0]
 800a712:	061f      	lsls	r7, r3, #24
 800a714:	f851 6b04 	ldr.w	r6, [r1], #4
 800a718:	d402      	bmi.n	800a720 <_printf_i+0x18c>
 800a71a:	065f      	lsls	r7, r3, #25
 800a71c:	bf48      	it	mi
 800a71e:	b2b6      	uxthmi	r6, r6
 800a720:	07df      	lsls	r7, r3, #31
 800a722:	bf48      	it	mi
 800a724:	f043 0320 	orrmi.w	r3, r3, #32
 800a728:	6029      	str	r1, [r5, #0]
 800a72a:	bf48      	it	mi
 800a72c:	6023      	strmi	r3, [r4, #0]
 800a72e:	b91e      	cbnz	r6, 800a738 <_printf_i+0x1a4>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	f023 0320 	bic.w	r3, r3, #32
 800a736:	6023      	str	r3, [r4, #0]
 800a738:	2310      	movs	r3, #16
 800a73a:	e7a7      	b.n	800a68c <_printf_i+0xf8>
 800a73c:	4824      	ldr	r0, [pc, #144]	; (800a7d0 <_printf_i+0x23c>)
 800a73e:	e7e4      	b.n	800a70a <_printf_i+0x176>
 800a740:	4615      	mov	r5, r2
 800a742:	e7bd      	b.n	800a6c0 <_printf_i+0x12c>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	6826      	ldr	r6, [r4, #0]
 800a748:	6961      	ldr	r1, [r4, #20]
 800a74a:	1d18      	adds	r0, r3, #4
 800a74c:	6028      	str	r0, [r5, #0]
 800a74e:	0635      	lsls	r5, r6, #24
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	d501      	bpl.n	800a758 <_printf_i+0x1c4>
 800a754:	6019      	str	r1, [r3, #0]
 800a756:	e002      	b.n	800a75e <_printf_i+0x1ca>
 800a758:	0670      	lsls	r0, r6, #25
 800a75a:	d5fb      	bpl.n	800a754 <_printf_i+0x1c0>
 800a75c:	8019      	strh	r1, [r3, #0]
 800a75e:	2300      	movs	r3, #0
 800a760:	6123      	str	r3, [r4, #16]
 800a762:	4615      	mov	r5, r2
 800a764:	e7bc      	b.n	800a6e0 <_printf_i+0x14c>
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	1d1a      	adds	r2, r3, #4
 800a76a:	602a      	str	r2, [r5, #0]
 800a76c:	681d      	ldr	r5, [r3, #0]
 800a76e:	6862      	ldr	r2, [r4, #4]
 800a770:	2100      	movs	r1, #0
 800a772:	4628      	mov	r0, r5
 800a774:	f7f5 fd2c 	bl	80001d0 <memchr>
 800a778:	b108      	cbz	r0, 800a77e <_printf_i+0x1ea>
 800a77a:	1b40      	subs	r0, r0, r5
 800a77c:	6060      	str	r0, [r4, #4]
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	2300      	movs	r3, #0
 800a784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a788:	e7aa      	b.n	800a6e0 <_printf_i+0x14c>
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	462a      	mov	r2, r5
 800a78e:	4649      	mov	r1, r9
 800a790:	4640      	mov	r0, r8
 800a792:	47d0      	blx	sl
 800a794:	3001      	adds	r0, #1
 800a796:	d0ad      	beq.n	800a6f4 <_printf_i+0x160>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	079b      	lsls	r3, r3, #30
 800a79c:	d413      	bmi.n	800a7c6 <_printf_i+0x232>
 800a79e:	68e0      	ldr	r0, [r4, #12]
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	4298      	cmp	r0, r3
 800a7a4:	bfb8      	it	lt
 800a7a6:	4618      	movlt	r0, r3
 800a7a8:	e7a6      	b.n	800a6f8 <_printf_i+0x164>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4632      	mov	r2, r6
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	47d0      	blx	sl
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d09d      	beq.n	800a6f4 <_printf_i+0x160>
 800a7b8:	3501      	adds	r5, #1
 800a7ba:	68e3      	ldr	r3, [r4, #12]
 800a7bc:	9903      	ldr	r1, [sp, #12]
 800a7be:	1a5b      	subs	r3, r3, r1
 800a7c0:	42ab      	cmp	r3, r5
 800a7c2:	dcf2      	bgt.n	800a7aa <_printf_i+0x216>
 800a7c4:	e7eb      	b.n	800a79e <_printf_i+0x20a>
 800a7c6:	2500      	movs	r5, #0
 800a7c8:	f104 0619 	add.w	r6, r4, #25
 800a7cc:	e7f5      	b.n	800a7ba <_printf_i+0x226>
 800a7ce:	bf00      	nop
 800a7d0:	0800f9b3 	.word	0x0800f9b3
 800a7d4:	0800f9c4 	.word	0x0800f9c4

0800a7d8 <_scanf_float>:
 800a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	b087      	sub	sp, #28
 800a7de:	4617      	mov	r7, r2
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	688b      	ldr	r3, [r1, #8]
 800a7e4:	1e5a      	subs	r2, r3, #1
 800a7e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7ea:	bf83      	ittte	hi
 800a7ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a7f0:	195b      	addhi	r3, r3, r5
 800a7f2:	9302      	strhi	r3, [sp, #8]
 800a7f4:	2300      	movls	r3, #0
 800a7f6:	bf86      	itte	hi
 800a7f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7fc:	608b      	strhi	r3, [r1, #8]
 800a7fe:	9302      	strls	r3, [sp, #8]
 800a800:	680b      	ldr	r3, [r1, #0]
 800a802:	468b      	mov	fp, r1
 800a804:	2500      	movs	r5, #0
 800a806:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a80a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a80e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a812:	4680      	mov	r8, r0
 800a814:	460c      	mov	r4, r1
 800a816:	465e      	mov	r6, fp
 800a818:	46aa      	mov	sl, r5
 800a81a:	46a9      	mov	r9, r5
 800a81c:	9501      	str	r5, [sp, #4]
 800a81e:	68a2      	ldr	r2, [r4, #8]
 800a820:	b152      	cbz	r2, 800a838 <_scanf_float+0x60>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b4e      	cmp	r3, #78	; 0x4e
 800a828:	d864      	bhi.n	800a8f4 <_scanf_float+0x11c>
 800a82a:	2b40      	cmp	r3, #64	; 0x40
 800a82c:	d83c      	bhi.n	800a8a8 <_scanf_float+0xd0>
 800a82e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a832:	b2c8      	uxtb	r0, r1
 800a834:	280e      	cmp	r0, #14
 800a836:	d93a      	bls.n	800a8ae <_scanf_float+0xd6>
 800a838:	f1b9 0f00 	cmp.w	r9, #0
 800a83c:	d003      	beq.n	800a846 <_scanf_float+0x6e>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a84a:	f1ba 0f01 	cmp.w	sl, #1
 800a84e:	f200 8113 	bhi.w	800aa78 <_scanf_float+0x2a0>
 800a852:	455e      	cmp	r6, fp
 800a854:	f200 8105 	bhi.w	800aa62 <_scanf_float+0x28a>
 800a858:	2501      	movs	r5, #1
 800a85a:	4628      	mov	r0, r5
 800a85c:	b007      	add	sp, #28
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a866:	2a0d      	cmp	r2, #13
 800a868:	d8e6      	bhi.n	800a838 <_scanf_float+0x60>
 800a86a:	a101      	add	r1, pc, #4	; (adr r1, 800a870 <_scanf_float+0x98>)
 800a86c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a870:	0800a9af 	.word	0x0800a9af
 800a874:	0800a839 	.word	0x0800a839
 800a878:	0800a839 	.word	0x0800a839
 800a87c:	0800a839 	.word	0x0800a839
 800a880:	0800aa0f 	.word	0x0800aa0f
 800a884:	0800a9e7 	.word	0x0800a9e7
 800a888:	0800a839 	.word	0x0800a839
 800a88c:	0800a839 	.word	0x0800a839
 800a890:	0800a9bd 	.word	0x0800a9bd
 800a894:	0800a839 	.word	0x0800a839
 800a898:	0800a839 	.word	0x0800a839
 800a89c:	0800a839 	.word	0x0800a839
 800a8a0:	0800a839 	.word	0x0800a839
 800a8a4:	0800a975 	.word	0x0800a975
 800a8a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a8ac:	e7db      	b.n	800a866 <_scanf_float+0x8e>
 800a8ae:	290e      	cmp	r1, #14
 800a8b0:	d8c2      	bhi.n	800a838 <_scanf_float+0x60>
 800a8b2:	a001      	add	r0, pc, #4	; (adr r0, 800a8b8 <_scanf_float+0xe0>)
 800a8b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8b8:	0800a967 	.word	0x0800a967
 800a8bc:	0800a839 	.word	0x0800a839
 800a8c0:	0800a967 	.word	0x0800a967
 800a8c4:	0800a9fb 	.word	0x0800a9fb
 800a8c8:	0800a839 	.word	0x0800a839
 800a8cc:	0800a915 	.word	0x0800a915
 800a8d0:	0800a951 	.word	0x0800a951
 800a8d4:	0800a951 	.word	0x0800a951
 800a8d8:	0800a951 	.word	0x0800a951
 800a8dc:	0800a951 	.word	0x0800a951
 800a8e0:	0800a951 	.word	0x0800a951
 800a8e4:	0800a951 	.word	0x0800a951
 800a8e8:	0800a951 	.word	0x0800a951
 800a8ec:	0800a951 	.word	0x0800a951
 800a8f0:	0800a951 	.word	0x0800a951
 800a8f4:	2b6e      	cmp	r3, #110	; 0x6e
 800a8f6:	d809      	bhi.n	800a90c <_scanf_float+0x134>
 800a8f8:	2b60      	cmp	r3, #96	; 0x60
 800a8fa:	d8b2      	bhi.n	800a862 <_scanf_float+0x8a>
 800a8fc:	2b54      	cmp	r3, #84	; 0x54
 800a8fe:	d077      	beq.n	800a9f0 <_scanf_float+0x218>
 800a900:	2b59      	cmp	r3, #89	; 0x59
 800a902:	d199      	bne.n	800a838 <_scanf_float+0x60>
 800a904:	2d07      	cmp	r5, #7
 800a906:	d197      	bne.n	800a838 <_scanf_float+0x60>
 800a908:	2508      	movs	r5, #8
 800a90a:	e029      	b.n	800a960 <_scanf_float+0x188>
 800a90c:	2b74      	cmp	r3, #116	; 0x74
 800a90e:	d06f      	beq.n	800a9f0 <_scanf_float+0x218>
 800a910:	2b79      	cmp	r3, #121	; 0x79
 800a912:	e7f6      	b.n	800a902 <_scanf_float+0x12a>
 800a914:	6821      	ldr	r1, [r4, #0]
 800a916:	05c8      	lsls	r0, r1, #23
 800a918:	d51a      	bpl.n	800a950 <_scanf_float+0x178>
 800a91a:	9b02      	ldr	r3, [sp, #8]
 800a91c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a920:	6021      	str	r1, [r4, #0]
 800a922:	f109 0901 	add.w	r9, r9, #1
 800a926:	b11b      	cbz	r3, 800a930 <_scanf_float+0x158>
 800a928:	3b01      	subs	r3, #1
 800a92a:	3201      	adds	r2, #1
 800a92c:	9302      	str	r3, [sp, #8]
 800a92e:	60a2      	str	r2, [r4, #8]
 800a930:	68a3      	ldr	r3, [r4, #8]
 800a932:	3b01      	subs	r3, #1
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	3301      	adds	r3, #1
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3b01      	subs	r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	607b      	str	r3, [r7, #4]
 800a944:	f340 8084 	ble.w	800aa50 <_scanf_float+0x278>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	603b      	str	r3, [r7, #0]
 800a94e:	e766      	b.n	800a81e <_scanf_float+0x46>
 800a950:	eb1a 0f05 	cmn.w	sl, r5
 800a954:	f47f af70 	bne.w	800a838 <_scanf_float+0x60>
 800a958:	6822      	ldr	r2, [r4, #0]
 800a95a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a95e:	6022      	str	r2, [r4, #0]
 800a960:	f806 3b01 	strb.w	r3, [r6], #1
 800a964:	e7e4      	b.n	800a930 <_scanf_float+0x158>
 800a966:	6822      	ldr	r2, [r4, #0]
 800a968:	0610      	lsls	r0, r2, #24
 800a96a:	f57f af65 	bpl.w	800a838 <_scanf_float+0x60>
 800a96e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a972:	e7f4      	b.n	800a95e <_scanf_float+0x186>
 800a974:	f1ba 0f00 	cmp.w	sl, #0
 800a978:	d10e      	bne.n	800a998 <_scanf_float+0x1c0>
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	d10e      	bne.n	800a99e <_scanf_float+0x1c6>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a98a:	d108      	bne.n	800a99e <_scanf_float+0x1c6>
 800a98c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	f04f 0a01 	mov.w	sl, #1
 800a996:	e7e3      	b.n	800a960 <_scanf_float+0x188>
 800a998:	f1ba 0f02 	cmp.w	sl, #2
 800a99c:	d055      	beq.n	800aa4a <_scanf_float+0x272>
 800a99e:	2d01      	cmp	r5, #1
 800a9a0:	d002      	beq.n	800a9a8 <_scanf_float+0x1d0>
 800a9a2:	2d04      	cmp	r5, #4
 800a9a4:	f47f af48 	bne.w	800a838 <_scanf_float+0x60>
 800a9a8:	3501      	adds	r5, #1
 800a9aa:	b2ed      	uxtb	r5, r5
 800a9ac:	e7d8      	b.n	800a960 <_scanf_float+0x188>
 800a9ae:	f1ba 0f01 	cmp.w	sl, #1
 800a9b2:	f47f af41 	bne.w	800a838 <_scanf_float+0x60>
 800a9b6:	f04f 0a02 	mov.w	sl, #2
 800a9ba:	e7d1      	b.n	800a960 <_scanf_float+0x188>
 800a9bc:	b97d      	cbnz	r5, 800a9de <_scanf_float+0x206>
 800a9be:	f1b9 0f00 	cmp.w	r9, #0
 800a9c2:	f47f af3c 	bne.w	800a83e <_scanf_float+0x66>
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9d0:	f47f af39 	bne.w	800a846 <_scanf_float+0x6e>
 800a9d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9d8:	6022      	str	r2, [r4, #0]
 800a9da:	2501      	movs	r5, #1
 800a9dc:	e7c0      	b.n	800a960 <_scanf_float+0x188>
 800a9de:	2d03      	cmp	r5, #3
 800a9e0:	d0e2      	beq.n	800a9a8 <_scanf_float+0x1d0>
 800a9e2:	2d05      	cmp	r5, #5
 800a9e4:	e7de      	b.n	800a9a4 <_scanf_float+0x1cc>
 800a9e6:	2d02      	cmp	r5, #2
 800a9e8:	f47f af26 	bne.w	800a838 <_scanf_float+0x60>
 800a9ec:	2503      	movs	r5, #3
 800a9ee:	e7b7      	b.n	800a960 <_scanf_float+0x188>
 800a9f0:	2d06      	cmp	r5, #6
 800a9f2:	f47f af21 	bne.w	800a838 <_scanf_float+0x60>
 800a9f6:	2507      	movs	r5, #7
 800a9f8:	e7b2      	b.n	800a960 <_scanf_float+0x188>
 800a9fa:	6822      	ldr	r2, [r4, #0]
 800a9fc:	0591      	lsls	r1, r2, #22
 800a9fe:	f57f af1b 	bpl.w	800a838 <_scanf_float+0x60>
 800aa02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aa06:	6022      	str	r2, [r4, #0]
 800aa08:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa0c:	e7a8      	b.n	800a960 <_scanf_float+0x188>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aa14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa18:	d006      	beq.n	800aa28 <_scanf_float+0x250>
 800aa1a:	0550      	lsls	r0, r2, #21
 800aa1c:	f57f af0c 	bpl.w	800a838 <_scanf_float+0x60>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	f43f af0f 	beq.w	800a846 <_scanf_float+0x6e>
 800aa28:	0591      	lsls	r1, r2, #22
 800aa2a:	bf58      	it	pl
 800aa2c:	9901      	ldrpl	r1, [sp, #4]
 800aa2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa32:	bf58      	it	pl
 800aa34:	eba9 0101 	subpl.w	r1, r9, r1
 800aa38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aa3c:	bf58      	it	pl
 800aa3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	f04f 0900 	mov.w	r9, #0
 800aa48:	e78a      	b.n	800a960 <_scanf_float+0x188>
 800aa4a:	f04f 0a03 	mov.w	sl, #3
 800aa4e:	e787      	b.n	800a960 <_scanf_float+0x188>
 800aa50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa54:	4639      	mov	r1, r7
 800aa56:	4640      	mov	r0, r8
 800aa58:	4798      	blx	r3
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	f43f aedf 	beq.w	800a81e <_scanf_float+0x46>
 800aa60:	e6ea      	b.n	800a838 <_scanf_float+0x60>
 800aa62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4798      	blx	r3
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	e6ec      	b.n	800a852 <_scanf_float+0x7a>
 800aa78:	1e6b      	subs	r3, r5, #1
 800aa7a:	2b06      	cmp	r3, #6
 800aa7c:	d825      	bhi.n	800aaca <_scanf_float+0x2f2>
 800aa7e:	2d02      	cmp	r5, #2
 800aa80:	d836      	bhi.n	800aaf0 <_scanf_float+0x318>
 800aa82:	455e      	cmp	r6, fp
 800aa84:	f67f aee8 	bls.w	800a858 <_scanf_float+0x80>
 800aa88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa90:	463a      	mov	r2, r7
 800aa92:	4640      	mov	r0, r8
 800aa94:	4798      	blx	r3
 800aa96:	6923      	ldr	r3, [r4, #16]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	e7f1      	b.n	800aa82 <_scanf_float+0x2aa>
 800aa9e:	9802      	ldr	r0, [sp, #8]
 800aaa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aaa4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aaa8:	9002      	str	r0, [sp, #8]
 800aaaa:	463a      	mov	r2, r7
 800aaac:	4640      	mov	r0, r8
 800aaae:	4798      	blx	r3
 800aab0:	6923      	ldr	r3, [r4, #16]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaba:	fa5f fa8a 	uxtb.w	sl, sl
 800aabe:	f1ba 0f02 	cmp.w	sl, #2
 800aac2:	d1ec      	bne.n	800aa9e <_scanf_float+0x2c6>
 800aac4:	3d03      	subs	r5, #3
 800aac6:	b2ed      	uxtb	r5, r5
 800aac8:	1b76      	subs	r6, r6, r5
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	05da      	lsls	r2, r3, #23
 800aace:	d52f      	bpl.n	800ab30 <_scanf_float+0x358>
 800aad0:	055b      	lsls	r3, r3, #21
 800aad2:	d510      	bpl.n	800aaf6 <_scanf_float+0x31e>
 800aad4:	455e      	cmp	r6, fp
 800aad6:	f67f aebf 	bls.w	800a858 <_scanf_float+0x80>
 800aada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aae2:	463a      	mov	r2, r7
 800aae4:	4640      	mov	r0, r8
 800aae6:	4798      	blx	r3
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	e7f1      	b.n	800aad4 <_scanf_float+0x2fc>
 800aaf0:	46aa      	mov	sl, r5
 800aaf2:	9602      	str	r6, [sp, #8]
 800aaf4:	e7df      	b.n	800aab6 <_scanf_float+0x2de>
 800aaf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	2965      	cmp	r1, #101	; 0x65
 800aafe:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab02:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	d00c      	beq.n	800ab24 <_scanf_float+0x34c>
 800ab0a:	2945      	cmp	r1, #69	; 0x45
 800ab0c:	d00a      	beq.n	800ab24 <_scanf_float+0x34c>
 800ab0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab12:	463a      	mov	r2, r7
 800ab14:	4640      	mov	r0, r8
 800ab16:	4798      	blx	r3
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	1eb5      	subs	r5, r6, #2
 800ab22:	6123      	str	r3, [r4, #16]
 800ab24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab28:	463a      	mov	r2, r7
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	4798      	blx	r3
 800ab2e:	462e      	mov	r6, r5
 800ab30:	6825      	ldr	r5, [r4, #0]
 800ab32:	f015 0510 	ands.w	r5, r5, #16
 800ab36:	d158      	bne.n	800abea <_scanf_float+0x412>
 800ab38:	7035      	strb	r5, [r6, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab44:	d11c      	bne.n	800ab80 <_scanf_float+0x3a8>
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	454b      	cmp	r3, r9
 800ab4a:	eba3 0209 	sub.w	r2, r3, r9
 800ab4e:	d124      	bne.n	800ab9a <_scanf_float+0x3c2>
 800ab50:	2200      	movs	r2, #0
 800ab52:	4659      	mov	r1, fp
 800ab54:	4640      	mov	r0, r8
 800ab56:	f002 fc3f 	bl	800d3d8 <_strtod_r>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	6821      	ldr	r1, [r4, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f011 0f02 	tst.w	r1, #2
 800ab64:	ec57 6b10 	vmov	r6, r7, d0
 800ab68:	f103 0204 	add.w	r2, r3, #4
 800ab6c:	d020      	beq.n	800abb0 <_scanf_float+0x3d8>
 800ab6e:	9903      	ldr	r1, [sp, #12]
 800ab70:	600a      	str	r2, [r1, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	e9c3 6700 	strd	r6, r7, [r3]
 800ab78:	68e3      	ldr	r3, [r4, #12]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60e3      	str	r3, [r4, #12]
 800ab7e:	e66c      	b.n	800a85a <_scanf_float+0x82>
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0e4      	beq.n	800ab50 <_scanf_float+0x378>
 800ab86:	9905      	ldr	r1, [sp, #20]
 800ab88:	230a      	movs	r3, #10
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f002 fcaa 	bl	800d4e8 <_strtol_r>
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	9e05      	ldr	r6, [sp, #20]
 800ab98:	1ac2      	subs	r2, r0, r3
 800ab9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ab9e:	429e      	cmp	r6, r3
 800aba0:	bf28      	it	cs
 800aba2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aba6:	4912      	ldr	r1, [pc, #72]	; (800abf0 <_scanf_float+0x418>)
 800aba8:	4630      	mov	r0, r6
 800abaa:	f000 f8e7 	bl	800ad7c <siprintf>
 800abae:	e7cf      	b.n	800ab50 <_scanf_float+0x378>
 800abb0:	f011 0f04 	tst.w	r1, #4
 800abb4:	9903      	ldr	r1, [sp, #12]
 800abb6:	600a      	str	r2, [r1, #0]
 800abb8:	d1db      	bne.n	800ab72 <_scanf_float+0x39a>
 800abba:	f8d3 8000 	ldr.w	r8, [r3]
 800abbe:	ee10 2a10 	vmov	r2, s0
 800abc2:	ee10 0a10 	vmov	r0, s0
 800abc6:	463b      	mov	r3, r7
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f5 ffaf 	bl	8000b2c <__aeabi_dcmpun>
 800abce:	b128      	cbz	r0, 800abdc <_scanf_float+0x404>
 800abd0:	4808      	ldr	r0, [pc, #32]	; (800abf4 <_scanf_float+0x41c>)
 800abd2:	f000 f9c5 	bl	800af60 <nanf>
 800abd6:	ed88 0a00 	vstr	s0, [r8]
 800abda:	e7cd      	b.n	800ab78 <_scanf_float+0x3a0>
 800abdc:	4630      	mov	r0, r6
 800abde:	4639      	mov	r1, r7
 800abe0:	f7f6 f802 	bl	8000be8 <__aeabi_d2f>
 800abe4:	f8c8 0000 	str.w	r0, [r8]
 800abe8:	e7c6      	b.n	800ab78 <_scanf_float+0x3a0>
 800abea:	2500      	movs	r5, #0
 800abec:	e635      	b.n	800a85a <_scanf_float+0x82>
 800abee:	bf00      	nop
 800abf0:	0800f9d5 	.word	0x0800f9d5
 800abf4:	0800fc64 	.word	0x0800fc64

0800abf8 <std>:
 800abf8:	2300      	movs	r3, #0
 800abfa:	b510      	push	{r4, lr}
 800abfc:	4604      	mov	r4, r0
 800abfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ac02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac06:	6083      	str	r3, [r0, #8]
 800ac08:	8181      	strh	r1, [r0, #12]
 800ac0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac0c:	81c2      	strh	r2, [r0, #14]
 800ac0e:	6183      	str	r3, [r0, #24]
 800ac10:	4619      	mov	r1, r3
 800ac12:	2208      	movs	r2, #8
 800ac14:	305c      	adds	r0, #92	; 0x5c
 800ac16:	f000 f914 	bl	800ae42 <memset>
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <std+0x58>)
 800ac1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <std+0x5c>)
 800ac20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac22:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <std+0x60>)
 800ac24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <std+0x64>)
 800ac28:	6323      	str	r3, [r4, #48]	; 0x30
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <std+0x68>)
 800ac2c:	6224      	str	r4, [r4, #32]
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d006      	beq.n	800ac40 <std+0x48>
 800ac32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac36:	4294      	cmp	r4, r2
 800ac38:	d002      	beq.n	800ac40 <std+0x48>
 800ac3a:	33d0      	adds	r3, #208	; 0xd0
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	d105      	bne.n	800ac4c <std+0x54>
 800ac40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac48:	f000 b978 	b.w	800af3c <__retarget_lock_init_recursive>
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800adbd 	.word	0x0800adbd
 800ac54:	0800addf 	.word	0x0800addf
 800ac58:	0800ae17 	.word	0x0800ae17
 800ac5c:	0800ae3b 	.word	0x0800ae3b
 800ac60:	20004f18 	.word	0x20004f18

0800ac64 <stdio_exit_handler>:
 800ac64:	4a02      	ldr	r2, [pc, #8]	; (800ac70 <stdio_exit_handler+0xc>)
 800ac66:	4903      	ldr	r1, [pc, #12]	; (800ac74 <stdio_exit_handler+0x10>)
 800ac68:	4803      	ldr	r0, [pc, #12]	; (800ac78 <stdio_exit_handler+0x14>)
 800ac6a:	f000 b869 	b.w	800ad40 <_fwalk_sglue>
 800ac6e:	bf00      	nop
 800ac70:	20000030 	.word	0x20000030
 800ac74:	0800d8a9 	.word	0x0800d8a9
 800ac78:	2000003c 	.word	0x2000003c

0800ac7c <cleanup_stdio>:
 800ac7c:	6841      	ldr	r1, [r0, #4]
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <cleanup_stdio+0x34>)
 800ac80:	4299      	cmp	r1, r3
 800ac82:	b510      	push	{r4, lr}
 800ac84:	4604      	mov	r4, r0
 800ac86:	d001      	beq.n	800ac8c <cleanup_stdio+0x10>
 800ac88:	f002 fe0e 	bl	800d8a8 <_fflush_r>
 800ac8c:	68a1      	ldr	r1, [r4, #8]
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <cleanup_stdio+0x38>)
 800ac90:	4299      	cmp	r1, r3
 800ac92:	d002      	beq.n	800ac9a <cleanup_stdio+0x1e>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f002 fe07 	bl	800d8a8 <_fflush_r>
 800ac9a:	68e1      	ldr	r1, [r4, #12]
 800ac9c:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <cleanup_stdio+0x3c>)
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d004      	beq.n	800acac <cleanup_stdio+0x30>
 800aca2:	4620      	mov	r0, r4
 800aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca8:	f002 bdfe 	b.w	800d8a8 <_fflush_r>
 800acac:	bd10      	pop	{r4, pc}
 800acae:	bf00      	nop
 800acb0:	20004f18 	.word	0x20004f18
 800acb4:	20004f80 	.word	0x20004f80
 800acb8:	20004fe8 	.word	0x20004fe8

0800acbc <global_stdio_init.part.0>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	4b0b      	ldr	r3, [pc, #44]	; (800acec <global_stdio_init.part.0+0x30>)
 800acc0:	4c0b      	ldr	r4, [pc, #44]	; (800acf0 <global_stdio_init.part.0+0x34>)
 800acc2:	4a0c      	ldr	r2, [pc, #48]	; (800acf4 <global_stdio_init.part.0+0x38>)
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	4620      	mov	r0, r4
 800acc8:	2200      	movs	r2, #0
 800acca:	2104      	movs	r1, #4
 800accc:	f7ff ff94 	bl	800abf8 <std>
 800acd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800acd4:	2201      	movs	r2, #1
 800acd6:	2109      	movs	r1, #9
 800acd8:	f7ff ff8e 	bl	800abf8 <std>
 800acdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ace0:	2202      	movs	r2, #2
 800ace2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace6:	2112      	movs	r1, #18
 800ace8:	f7ff bf86 	b.w	800abf8 <std>
 800acec:	20005050 	.word	0x20005050
 800acf0:	20004f18 	.word	0x20004f18
 800acf4:	0800ac65 	.word	0x0800ac65

0800acf8 <__sfp_lock_acquire>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__sfp_lock_acquire+0x8>)
 800acfa:	f000 b920 	b.w	800af3e <__retarget_lock_acquire_recursive>
 800acfe:	bf00      	nop
 800ad00:	20005059 	.word	0x20005059

0800ad04 <__sfp_lock_release>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__sfp_lock_release+0x8>)
 800ad06:	f000 b91b 	b.w	800af40 <__retarget_lock_release_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20005059 	.word	0x20005059

0800ad10 <__sinit>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	f7ff fff0 	bl	800acf8 <__sfp_lock_acquire>
 800ad18:	6a23      	ldr	r3, [r4, #32]
 800ad1a:	b11b      	cbz	r3, 800ad24 <__sinit+0x14>
 800ad1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad20:	f7ff bff0 	b.w	800ad04 <__sfp_lock_release>
 800ad24:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <__sinit+0x28>)
 800ad26:	6223      	str	r3, [r4, #32]
 800ad28:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <__sinit+0x2c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1f5      	bne.n	800ad1c <__sinit+0xc>
 800ad30:	f7ff ffc4 	bl	800acbc <global_stdio_init.part.0>
 800ad34:	e7f2      	b.n	800ad1c <__sinit+0xc>
 800ad36:	bf00      	nop
 800ad38:	0800ac7d 	.word	0x0800ac7d
 800ad3c:	20005050 	.word	0x20005050

0800ad40 <_fwalk_sglue>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	4607      	mov	r7, r0
 800ad46:	4688      	mov	r8, r1
 800ad48:	4614      	mov	r4, r2
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad50:	f1b9 0901 	subs.w	r9, r9, #1
 800ad54:	d505      	bpl.n	800ad62 <_fwalk_sglue+0x22>
 800ad56:	6824      	ldr	r4, [r4, #0]
 800ad58:	2c00      	cmp	r4, #0
 800ad5a:	d1f7      	bne.n	800ad4c <_fwalk_sglue+0xc>
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad62:	89ab      	ldrh	r3, [r5, #12]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d907      	bls.n	800ad78 <_fwalk_sglue+0x38>
 800ad68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	d003      	beq.n	800ad78 <_fwalk_sglue+0x38>
 800ad70:	4629      	mov	r1, r5
 800ad72:	4638      	mov	r0, r7
 800ad74:	47c0      	blx	r8
 800ad76:	4306      	orrs	r6, r0
 800ad78:	3568      	adds	r5, #104	; 0x68
 800ad7a:	e7e9      	b.n	800ad50 <_fwalk_sglue+0x10>

0800ad7c <siprintf>:
 800ad7c:	b40e      	push	{r1, r2, r3}
 800ad7e:	b500      	push	{lr}
 800ad80:	b09c      	sub	sp, #112	; 0x70
 800ad82:	ab1d      	add	r3, sp, #116	; 0x74
 800ad84:	9002      	str	r0, [sp, #8]
 800ad86:	9006      	str	r0, [sp, #24]
 800ad88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad8c:	4809      	ldr	r0, [pc, #36]	; (800adb4 <siprintf+0x38>)
 800ad8e:	9107      	str	r1, [sp, #28]
 800ad90:	9104      	str	r1, [sp, #16]
 800ad92:	4909      	ldr	r1, [pc, #36]	; (800adb8 <siprintf+0x3c>)
 800ad94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad98:	9105      	str	r1, [sp, #20]
 800ad9a:	6800      	ldr	r0, [r0, #0]
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	a902      	add	r1, sp, #8
 800ada0:	f002 fbfe 	bl	800d5a0 <_svfiprintf_r>
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	b01c      	add	sp, #112	; 0x70
 800adac:	f85d eb04 	ldr.w	lr, [sp], #4
 800adb0:	b003      	add	sp, #12
 800adb2:	4770      	bx	lr
 800adb4:	20000088 	.word	0x20000088
 800adb8:	ffff0208 	.word	0xffff0208

0800adbc <__sread>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	460c      	mov	r4, r1
 800adc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc4:	f000 f86c 	bl	800aea0 <_read_r>
 800adc8:	2800      	cmp	r0, #0
 800adca:	bfab      	itete	ge
 800adcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adce:	89a3      	ldrhlt	r3, [r4, #12]
 800add0:	181b      	addge	r3, r3, r0
 800add2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800add6:	bfac      	ite	ge
 800add8:	6563      	strge	r3, [r4, #84]	; 0x54
 800adda:	81a3      	strhlt	r3, [r4, #12]
 800addc:	bd10      	pop	{r4, pc}

0800adde <__swrite>:
 800adde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade2:	461f      	mov	r7, r3
 800ade4:	898b      	ldrh	r3, [r1, #12]
 800ade6:	05db      	lsls	r3, r3, #23
 800ade8:	4605      	mov	r5, r0
 800adea:	460c      	mov	r4, r1
 800adec:	4616      	mov	r6, r2
 800adee:	d505      	bpl.n	800adfc <__swrite+0x1e>
 800adf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf4:	2302      	movs	r3, #2
 800adf6:	2200      	movs	r2, #0
 800adf8:	f000 f840 	bl	800ae7c <_lseek_r>
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	4632      	mov	r2, r6
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae12:	f000 b857 	b.w	800aec4 <_write_r>

0800ae16 <__sseek>:
 800ae16:	b510      	push	{r4, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae1e:	f000 f82d 	bl	800ae7c <_lseek_r>
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	bf15      	itete	ne
 800ae28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae32:	81a3      	strheq	r3, [r4, #12]
 800ae34:	bf18      	it	ne
 800ae36:	81a3      	strhne	r3, [r4, #12]
 800ae38:	bd10      	pop	{r4, pc}

0800ae3a <__sclose>:
 800ae3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae3e:	f000 b80d 	b.w	800ae5c <_close_r>

0800ae42 <memset>:
 800ae42:	4402      	add	r2, r0
 800ae44:	4603      	mov	r3, r0
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d100      	bne.n	800ae4c <memset+0xa>
 800ae4a:	4770      	bx	lr
 800ae4c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae50:	e7f9      	b.n	800ae46 <memset+0x4>
	...

0800ae54 <_localeconv_r>:
 800ae54:	4800      	ldr	r0, [pc, #0]	; (800ae58 <_localeconv_r+0x4>)
 800ae56:	4770      	bx	lr
 800ae58:	2000017c 	.word	0x2000017c

0800ae5c <_close_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d06      	ldr	r5, [pc, #24]	; (800ae78 <_close_r+0x1c>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	f7f8 fb5b 	bl	8003522 <_close>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_close_r+0x1a>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_close_r+0x1a>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20005054 	.word	0x20005054

0800ae7c <_lseek_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	; (800ae9c <_lseek_r+0x20>)
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7f8 fb70 	bl	8003570 <_lseek>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_lseek_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_lseek_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20005054 	.word	0x20005054

0800aea0 <_read_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d07      	ldr	r5, [pc, #28]	; (800aec0 <_read_r+0x20>)
 800aea4:	4604      	mov	r4, r0
 800aea6:	4608      	mov	r0, r1
 800aea8:	4611      	mov	r1, r2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	602a      	str	r2, [r5, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	f7f8 fafe 	bl	80034b0 <_read>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_read_r+0x1e>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_read_r+0x1e>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	20005054 	.word	0x20005054

0800aec4 <_write_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_write_r+0x20>)
 800aec8:	4604      	mov	r4, r0
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f7f8 fb09 	bl	80034ea <_write>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_write_r+0x1e>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_write_r+0x1e>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20005054 	.word	0x20005054

0800aee8 <__errno>:
 800aee8:	4b01      	ldr	r3, [pc, #4]	; (800aef0 <__errno+0x8>)
 800aeea:	6818      	ldr	r0, [r3, #0]
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	20000088 	.word	0x20000088

0800aef4 <__libc_init_array>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	4d0d      	ldr	r5, [pc, #52]	; (800af2c <__libc_init_array+0x38>)
 800aef8:	4c0d      	ldr	r4, [pc, #52]	; (800af30 <__libc_init_array+0x3c>)
 800aefa:	1b64      	subs	r4, r4, r5
 800aefc:	10a4      	asrs	r4, r4, #2
 800aefe:	2600      	movs	r6, #0
 800af00:	42a6      	cmp	r6, r4
 800af02:	d109      	bne.n	800af18 <__libc_init_array+0x24>
 800af04:	4d0b      	ldr	r5, [pc, #44]	; (800af34 <__libc_init_array+0x40>)
 800af06:	4c0c      	ldr	r4, [pc, #48]	; (800af38 <__libc_init_array+0x44>)
 800af08:	f004 fc68 	bl	800f7dc <_init>
 800af0c:	1b64      	subs	r4, r4, r5
 800af0e:	10a4      	asrs	r4, r4, #2
 800af10:	2600      	movs	r6, #0
 800af12:	42a6      	cmp	r6, r4
 800af14:	d105      	bne.n	800af22 <__libc_init_array+0x2e>
 800af16:	bd70      	pop	{r4, r5, r6, pc}
 800af18:	f855 3b04 	ldr.w	r3, [r5], #4
 800af1c:	4798      	blx	r3
 800af1e:	3601      	adds	r6, #1
 800af20:	e7ee      	b.n	800af00 <__libc_init_array+0xc>
 800af22:	f855 3b04 	ldr.w	r3, [r5], #4
 800af26:	4798      	blx	r3
 800af28:	3601      	adds	r6, #1
 800af2a:	e7f2      	b.n	800af12 <__libc_init_array+0x1e>
 800af2c:	0800fea8 	.word	0x0800fea8
 800af30:	0800fea8 	.word	0x0800fea8
 800af34:	0800fea8 	.word	0x0800fea8
 800af38:	0800feac 	.word	0x0800feac

0800af3c <__retarget_lock_init_recursive>:
 800af3c:	4770      	bx	lr

0800af3e <__retarget_lock_acquire_recursive>:
 800af3e:	4770      	bx	lr

0800af40 <__retarget_lock_release_recursive>:
 800af40:	4770      	bx	lr

0800af42 <memcpy>:
 800af42:	440a      	add	r2, r1
 800af44:	4291      	cmp	r1, r2
 800af46:	f100 33ff 	add.w	r3, r0, #4294967295
 800af4a:	d100      	bne.n	800af4e <memcpy+0xc>
 800af4c:	4770      	bx	lr
 800af4e:	b510      	push	{r4, lr}
 800af50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af58:	4291      	cmp	r1, r2
 800af5a:	d1f9      	bne.n	800af50 <memcpy+0xe>
 800af5c:	bd10      	pop	{r4, pc}
	...

0800af60 <nanf>:
 800af60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af68 <nanf+0x8>
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	7fc00000 	.word	0x7fc00000

0800af6c <quorem>:
 800af6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	6903      	ldr	r3, [r0, #16]
 800af72:	690c      	ldr	r4, [r1, #16]
 800af74:	42a3      	cmp	r3, r4
 800af76:	4607      	mov	r7, r0
 800af78:	db7e      	blt.n	800b078 <quorem+0x10c>
 800af7a:	3c01      	subs	r4, #1
 800af7c:	f101 0814 	add.w	r8, r1, #20
 800af80:	f100 0514 	add.w	r5, r0, #20
 800af84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af92:	3301      	adds	r3, #1
 800af94:	429a      	cmp	r2, r3
 800af96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800afa2:	d331      	bcc.n	800b008 <quorem+0x9c>
 800afa4:	f04f 0e00 	mov.w	lr, #0
 800afa8:	4640      	mov	r0, r8
 800afaa:	46ac      	mov	ip, r5
 800afac:	46f2      	mov	sl, lr
 800afae:	f850 2b04 	ldr.w	r2, [r0], #4
 800afb2:	b293      	uxth	r3, r2
 800afb4:	fb06 e303 	mla	r3, r6, r3, lr
 800afb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afbc:	0c1a      	lsrs	r2, r3, #16
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	ebaa 0303 	sub.w	r3, sl, r3
 800afc4:	f8dc a000 	ldr.w	sl, [ip]
 800afc8:	fa13 f38a 	uxtah	r3, r3, sl
 800afcc:	fb06 220e 	mla	r2, r6, lr, r2
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	9b00      	ldr	r3, [sp, #0]
 800afd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afd8:	b292      	uxth	r2, r2
 800afda:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afe2:	f8bd 3000 	ldrh.w	r3, [sp]
 800afe6:	4581      	cmp	r9, r0
 800afe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afec:	f84c 3b04 	str.w	r3, [ip], #4
 800aff0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aff4:	d2db      	bcs.n	800afae <quorem+0x42>
 800aff6:	f855 300b 	ldr.w	r3, [r5, fp]
 800affa:	b92b      	cbnz	r3, 800b008 <quorem+0x9c>
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	3b04      	subs	r3, #4
 800b000:	429d      	cmp	r5, r3
 800b002:	461a      	mov	r2, r3
 800b004:	d32c      	bcc.n	800b060 <quorem+0xf4>
 800b006:	613c      	str	r4, [r7, #16]
 800b008:	4638      	mov	r0, r7
 800b00a:	f001 f9f1 	bl	800c3f0 <__mcmp>
 800b00e:	2800      	cmp	r0, #0
 800b010:	db22      	blt.n	800b058 <quorem+0xec>
 800b012:	3601      	adds	r6, #1
 800b014:	4629      	mov	r1, r5
 800b016:	2000      	movs	r0, #0
 800b018:	f858 2b04 	ldr.w	r2, [r8], #4
 800b01c:	f8d1 c000 	ldr.w	ip, [r1]
 800b020:	b293      	uxth	r3, r2
 800b022:	1ac3      	subs	r3, r0, r3
 800b024:	0c12      	lsrs	r2, r2, #16
 800b026:	fa13 f38c 	uxtah	r3, r3, ip
 800b02a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b02e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b032:	b29b      	uxth	r3, r3
 800b034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b038:	45c1      	cmp	r9, r8
 800b03a:	f841 3b04 	str.w	r3, [r1], #4
 800b03e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b042:	d2e9      	bcs.n	800b018 <quorem+0xac>
 800b044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b04c:	b922      	cbnz	r2, 800b058 <quorem+0xec>
 800b04e:	3b04      	subs	r3, #4
 800b050:	429d      	cmp	r5, r3
 800b052:	461a      	mov	r2, r3
 800b054:	d30a      	bcc.n	800b06c <quorem+0x100>
 800b056:	613c      	str	r4, [r7, #16]
 800b058:	4630      	mov	r0, r6
 800b05a:	b003      	add	sp, #12
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	3b04      	subs	r3, #4
 800b064:	2a00      	cmp	r2, #0
 800b066:	d1ce      	bne.n	800b006 <quorem+0x9a>
 800b068:	3c01      	subs	r4, #1
 800b06a:	e7c9      	b.n	800b000 <quorem+0x94>
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	3b04      	subs	r3, #4
 800b070:	2a00      	cmp	r2, #0
 800b072:	d1f0      	bne.n	800b056 <quorem+0xea>
 800b074:	3c01      	subs	r4, #1
 800b076:	e7eb      	b.n	800b050 <quorem+0xe4>
 800b078:	2000      	movs	r0, #0
 800b07a:	e7ee      	b.n	800b05a <quorem+0xee>
 800b07c:	0000      	movs	r0, r0
	...

0800b080 <_dtoa_r>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	ed2d 8b04 	vpush	{d8-d9}
 800b088:	69c5      	ldr	r5, [r0, #28]
 800b08a:	b093      	sub	sp, #76	; 0x4c
 800b08c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b090:	ec57 6b10 	vmov	r6, r7, d0
 800b094:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b098:	9107      	str	r1, [sp, #28]
 800b09a:	4604      	mov	r4, r0
 800b09c:	920a      	str	r2, [sp, #40]	; 0x28
 800b09e:	930d      	str	r3, [sp, #52]	; 0x34
 800b0a0:	b975      	cbnz	r5, 800b0c0 <_dtoa_r+0x40>
 800b0a2:	2010      	movs	r0, #16
 800b0a4:	f000 fe2a 	bl	800bcfc <malloc>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	61e0      	str	r0, [r4, #28]
 800b0ac:	b920      	cbnz	r0, 800b0b8 <_dtoa_r+0x38>
 800b0ae:	4bae      	ldr	r3, [pc, #696]	; (800b368 <_dtoa_r+0x2e8>)
 800b0b0:	21ef      	movs	r1, #239	; 0xef
 800b0b2:	48ae      	ldr	r0, [pc, #696]	; (800b36c <_dtoa_r+0x2ec>)
 800b0b4:	f002 fc64 	bl	800d980 <__assert_func>
 800b0b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0bc:	6005      	str	r5, [r0, #0]
 800b0be:	60c5      	str	r5, [r0, #12]
 800b0c0:	69e3      	ldr	r3, [r4, #28]
 800b0c2:	6819      	ldr	r1, [r3, #0]
 800b0c4:	b151      	cbz	r1, 800b0dc <_dtoa_r+0x5c>
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	604a      	str	r2, [r1, #4]
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4093      	lsls	r3, r2
 800b0ce:	608b      	str	r3, [r1, #8]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 ff07 	bl	800bee4 <_Bfree>
 800b0d6:	69e3      	ldr	r3, [r4, #28]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	1e3b      	subs	r3, r7, #0
 800b0de:	bfbb      	ittet	lt
 800b0e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b0e4:	9303      	strlt	r3, [sp, #12]
 800b0e6:	2300      	movge	r3, #0
 800b0e8:	2201      	movlt	r2, #1
 800b0ea:	bfac      	ite	ge
 800b0ec:	f8c8 3000 	strge.w	r3, [r8]
 800b0f0:	f8c8 2000 	strlt.w	r2, [r8]
 800b0f4:	4b9e      	ldr	r3, [pc, #632]	; (800b370 <_dtoa_r+0x2f0>)
 800b0f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b0fa:	ea33 0308 	bics.w	r3, r3, r8
 800b0fe:	d11b      	bne.n	800b138 <_dtoa_r+0xb8>
 800b100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b102:	f242 730f 	movw	r3, #9999	; 0x270f
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b10c:	4333      	orrs	r3, r6
 800b10e:	f000 8593 	beq.w	800bc38 <_dtoa_r+0xbb8>
 800b112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b114:	b963      	cbnz	r3, 800b130 <_dtoa_r+0xb0>
 800b116:	4b97      	ldr	r3, [pc, #604]	; (800b374 <_dtoa_r+0x2f4>)
 800b118:	e027      	b.n	800b16a <_dtoa_r+0xea>
 800b11a:	4b97      	ldr	r3, [pc, #604]	; (800b378 <_dtoa_r+0x2f8>)
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	3308      	adds	r3, #8
 800b120:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	9800      	ldr	r0, [sp, #0]
 800b126:	b013      	add	sp, #76	; 0x4c
 800b128:	ecbd 8b04 	vpop	{d8-d9}
 800b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b130:	4b90      	ldr	r3, [pc, #576]	; (800b374 <_dtoa_r+0x2f4>)
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	3303      	adds	r3, #3
 800b136:	e7f3      	b.n	800b120 <_dtoa_r+0xa0>
 800b138:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b13c:	2200      	movs	r2, #0
 800b13e:	ec51 0b17 	vmov	r0, r1, d7
 800b142:	eeb0 8a47 	vmov.f32	s16, s14
 800b146:	eef0 8a67 	vmov.f32	s17, s15
 800b14a:	2300      	movs	r3, #0
 800b14c:	f7f5 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b150:	4681      	mov	r9, r0
 800b152:	b160      	cbz	r0, 800b16e <_dtoa_r+0xee>
 800b154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b156:	2301      	movs	r3, #1
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 8568 	beq.w	800bc32 <_dtoa_r+0xbb2>
 800b162:	4b86      	ldr	r3, [pc, #536]	; (800b37c <_dtoa_r+0x2fc>)
 800b164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	3b01      	subs	r3, #1
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	e7da      	b.n	800b124 <_dtoa_r+0xa4>
 800b16e:	aa10      	add	r2, sp, #64	; 0x40
 800b170:	a911      	add	r1, sp, #68	; 0x44
 800b172:	4620      	mov	r0, r4
 800b174:	eeb0 0a48 	vmov.f32	s0, s16
 800b178:	eef0 0a68 	vmov.f32	s1, s17
 800b17c:	f001 fa4e 	bl	800c61c <__d2b>
 800b180:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b184:	4682      	mov	sl, r0
 800b186:	2d00      	cmp	r5, #0
 800b188:	d07f      	beq.n	800b28a <_dtoa_r+0x20a>
 800b18a:	ee18 3a90 	vmov	r3, s17
 800b18e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b192:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b196:	ec51 0b18 	vmov	r0, r1, d8
 800b19a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b19e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b1a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	4b75      	ldr	r3, [pc, #468]	; (800b380 <_dtoa_r+0x300>)
 800b1ac:	f7f5 f86c 	bl	8000288 <__aeabi_dsub>
 800b1b0:	a367      	add	r3, pc, #412	; (adr r3, 800b350 <_dtoa_r+0x2d0>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	a367      	add	r3, pc, #412	; (adr r3, 800b358 <_dtoa_r+0x2d8>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 f864 	bl	800028c <__adddf3>
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	460f      	mov	r7, r1
 800b1ca:	f7f5 f9ab 	bl	8000524 <__aeabi_i2d>
 800b1ce:	a364      	add	r3, pc, #400	; (adr r3, 800b360 <_dtoa_r+0x2e0>)
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	f7f5 fa10 	bl	80005f8 <__aeabi_dmul>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4630      	mov	r0, r6
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 f854 	bl	800028c <__adddf3>
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	460f      	mov	r7, r1
 800b1e8:	f7f5 fcb6 	bl	8000b58 <__aeabi_d2iz>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4683      	mov	fp, r0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	4639      	mov	r1, r7
 800b1f6:	f7f5 fc71 	bl	8000adc <__aeabi_dcmplt>
 800b1fa:	b148      	cbz	r0, 800b210 <_dtoa_r+0x190>
 800b1fc:	4658      	mov	r0, fp
 800b1fe:	f7f5 f991 	bl	8000524 <__aeabi_i2d>
 800b202:	4632      	mov	r2, r6
 800b204:	463b      	mov	r3, r7
 800b206:	f7f5 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b20a:	b908      	cbnz	r0, 800b210 <_dtoa_r+0x190>
 800b20c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b210:	f1bb 0f16 	cmp.w	fp, #22
 800b214:	d857      	bhi.n	800b2c6 <_dtoa_r+0x246>
 800b216:	4b5b      	ldr	r3, [pc, #364]	; (800b384 <_dtoa_r+0x304>)
 800b218:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	ec51 0b18 	vmov	r0, r1, d8
 800b224:	f7f5 fc5a 	bl	8000adc <__aeabi_dcmplt>
 800b228:	2800      	cmp	r0, #0
 800b22a:	d04e      	beq.n	800b2ca <_dtoa_r+0x24a>
 800b22c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b230:	2300      	movs	r3, #0
 800b232:	930c      	str	r3, [sp, #48]	; 0x30
 800b234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b236:	1b5b      	subs	r3, r3, r5
 800b238:	1e5a      	subs	r2, r3, #1
 800b23a:	bf45      	ittet	mi
 800b23c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b240:	9305      	strmi	r3, [sp, #20]
 800b242:	2300      	movpl	r3, #0
 800b244:	2300      	movmi	r3, #0
 800b246:	9206      	str	r2, [sp, #24]
 800b248:	bf54      	ite	pl
 800b24a:	9305      	strpl	r3, [sp, #20]
 800b24c:	9306      	strmi	r3, [sp, #24]
 800b24e:	f1bb 0f00 	cmp.w	fp, #0
 800b252:	db3c      	blt.n	800b2ce <_dtoa_r+0x24e>
 800b254:	9b06      	ldr	r3, [sp, #24]
 800b256:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b25a:	445b      	add	r3, fp
 800b25c:	9306      	str	r3, [sp, #24]
 800b25e:	2300      	movs	r3, #0
 800b260:	9308      	str	r3, [sp, #32]
 800b262:	9b07      	ldr	r3, [sp, #28]
 800b264:	2b09      	cmp	r3, #9
 800b266:	d868      	bhi.n	800b33a <_dtoa_r+0x2ba>
 800b268:	2b05      	cmp	r3, #5
 800b26a:	bfc4      	itt	gt
 800b26c:	3b04      	subgt	r3, #4
 800b26e:	9307      	strgt	r3, [sp, #28]
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	f1a3 0302 	sub.w	r3, r3, #2
 800b276:	bfcc      	ite	gt
 800b278:	2500      	movgt	r5, #0
 800b27a:	2501      	movle	r5, #1
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	f200 8085 	bhi.w	800b38c <_dtoa_r+0x30c>
 800b282:	e8df f003 	tbb	[pc, r3]
 800b286:	3b2e      	.short	0x3b2e
 800b288:	5839      	.short	0x5839
 800b28a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b28e:	441d      	add	r5, r3
 800b290:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b294:	2b20      	cmp	r3, #32
 800b296:	bfc1      	itttt	gt
 800b298:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b29c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b2a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b2a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b2a8:	bfd6      	itet	le
 800b2aa:	f1c3 0320 	rsble	r3, r3, #32
 800b2ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800b2b2:	fa06 f003 	lslle.w	r0, r6, r3
 800b2b6:	f7f5 f925 	bl	8000504 <__aeabi_ui2d>
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b2c0:	3d01      	subs	r5, #1
 800b2c2:	920e      	str	r2, [sp, #56]	; 0x38
 800b2c4:	e76f      	b.n	800b1a6 <_dtoa_r+0x126>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e7b3      	b.n	800b232 <_dtoa_r+0x1b2>
 800b2ca:	900c      	str	r0, [sp, #48]	; 0x30
 800b2cc:	e7b2      	b.n	800b234 <_dtoa_r+0x1b4>
 800b2ce:	9b05      	ldr	r3, [sp, #20]
 800b2d0:	eba3 030b 	sub.w	r3, r3, fp
 800b2d4:	9305      	str	r3, [sp, #20]
 800b2d6:	f1cb 0300 	rsb	r3, fp, #0
 800b2da:	9308      	str	r3, [sp, #32]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e0:	e7bf      	b.n	800b262 <_dtoa_r+0x1e2>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dc52      	bgt.n	800b392 <_dtoa_r+0x312>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b2f6:	e00b      	b.n	800b310 <_dtoa_r+0x290>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e7f3      	b.n	800b2e4 <_dtoa_r+0x264>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b302:	445b      	add	r3, fp
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	3301      	adds	r3, #1
 800b308:	2b01      	cmp	r3, #1
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	bfb8      	it	lt
 800b30e:	2301      	movlt	r3, #1
 800b310:	69e0      	ldr	r0, [r4, #28]
 800b312:	2100      	movs	r1, #0
 800b314:	2204      	movs	r2, #4
 800b316:	f102 0614 	add.w	r6, r2, #20
 800b31a:	429e      	cmp	r6, r3
 800b31c:	d93d      	bls.n	800b39a <_dtoa_r+0x31a>
 800b31e:	6041      	str	r1, [r0, #4]
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fd9f 	bl	800be64 <_Balloc>
 800b326:	9000      	str	r0, [sp, #0]
 800b328:	2800      	cmp	r0, #0
 800b32a:	d139      	bne.n	800b3a0 <_dtoa_r+0x320>
 800b32c:	4b16      	ldr	r3, [pc, #88]	; (800b388 <_dtoa_r+0x308>)
 800b32e:	4602      	mov	r2, r0
 800b330:	f240 11af 	movw	r1, #431	; 0x1af
 800b334:	e6bd      	b.n	800b0b2 <_dtoa_r+0x32>
 800b336:	2301      	movs	r3, #1
 800b338:	e7e1      	b.n	800b2fe <_dtoa_r+0x27e>
 800b33a:	2501      	movs	r5, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	9307      	str	r3, [sp, #28]
 800b340:	9509      	str	r5, [sp, #36]	; 0x24
 800b342:	f04f 33ff 	mov.w	r3, #4294967295
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	2200      	movs	r2, #0
 800b34c:	2312      	movs	r3, #18
 800b34e:	e7d1      	b.n	800b2f4 <_dtoa_r+0x274>
 800b350:	636f4361 	.word	0x636f4361
 800b354:	3fd287a7 	.word	0x3fd287a7
 800b358:	8b60c8b3 	.word	0x8b60c8b3
 800b35c:	3fc68a28 	.word	0x3fc68a28
 800b360:	509f79fb 	.word	0x509f79fb
 800b364:	3fd34413 	.word	0x3fd34413
 800b368:	0800f9e7 	.word	0x0800f9e7
 800b36c:	0800f9fe 	.word	0x0800f9fe
 800b370:	7ff00000 	.word	0x7ff00000
 800b374:	0800f9e3 	.word	0x0800f9e3
 800b378:	0800f9da 	.word	0x0800f9da
 800b37c:	0800f9b2 	.word	0x0800f9b2
 800b380:	3ff80000 	.word	0x3ff80000
 800b384:	0800fae8 	.word	0x0800fae8
 800b388:	0800fa56 	.word	0x0800fa56
 800b38c:	2301      	movs	r3, #1
 800b38e:	9309      	str	r3, [sp, #36]	; 0x24
 800b390:	e7d7      	b.n	800b342 <_dtoa_r+0x2c2>
 800b392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b394:	9301      	str	r3, [sp, #4]
 800b396:	9304      	str	r3, [sp, #16]
 800b398:	e7ba      	b.n	800b310 <_dtoa_r+0x290>
 800b39a:	3101      	adds	r1, #1
 800b39c:	0052      	lsls	r2, r2, #1
 800b39e:	e7ba      	b.n	800b316 <_dtoa_r+0x296>
 800b3a0:	69e3      	ldr	r3, [r4, #28]
 800b3a2:	9a00      	ldr	r2, [sp, #0]
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	2b0e      	cmp	r3, #14
 800b3aa:	f200 80a8 	bhi.w	800b4fe <_dtoa_r+0x47e>
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	f000 80a5 	beq.w	800b4fe <_dtoa_r+0x47e>
 800b3b4:	f1bb 0f00 	cmp.w	fp, #0
 800b3b8:	dd38      	ble.n	800b42c <_dtoa_r+0x3ac>
 800b3ba:	4bc0      	ldr	r3, [pc, #768]	; (800b6bc <_dtoa_r+0x63c>)
 800b3bc:	f00b 020f 	and.w	r2, fp, #15
 800b3c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b3c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b3cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b3d0:	d019      	beq.n	800b406 <_dtoa_r+0x386>
 800b3d2:	4bbb      	ldr	r3, [pc, #748]	; (800b6c0 <_dtoa_r+0x640>)
 800b3d4:	ec51 0b18 	vmov	r0, r1, d8
 800b3d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3dc:	f7f5 fa36 	bl	800084c <__aeabi_ddiv>
 800b3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e4:	f008 080f 	and.w	r8, r8, #15
 800b3e8:	2503      	movs	r5, #3
 800b3ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b6c0 <_dtoa_r+0x640>
 800b3ee:	f1b8 0f00 	cmp.w	r8, #0
 800b3f2:	d10a      	bne.n	800b40a <_dtoa_r+0x38a>
 800b3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f8:	4632      	mov	r2, r6
 800b3fa:	463b      	mov	r3, r7
 800b3fc:	f7f5 fa26 	bl	800084c <__aeabi_ddiv>
 800b400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b404:	e02b      	b.n	800b45e <_dtoa_r+0x3de>
 800b406:	2502      	movs	r5, #2
 800b408:	e7ef      	b.n	800b3ea <_dtoa_r+0x36a>
 800b40a:	f018 0f01 	tst.w	r8, #1
 800b40e:	d008      	beq.n	800b422 <_dtoa_r+0x3a2>
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b418:	f7f5 f8ee 	bl	80005f8 <__aeabi_dmul>
 800b41c:	3501      	adds	r5, #1
 800b41e:	4606      	mov	r6, r0
 800b420:	460f      	mov	r7, r1
 800b422:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b426:	f109 0908 	add.w	r9, r9, #8
 800b42a:	e7e0      	b.n	800b3ee <_dtoa_r+0x36e>
 800b42c:	f000 809f 	beq.w	800b56e <_dtoa_r+0x4ee>
 800b430:	f1cb 0600 	rsb	r6, fp, #0
 800b434:	4ba1      	ldr	r3, [pc, #644]	; (800b6bc <_dtoa_r+0x63c>)
 800b436:	4fa2      	ldr	r7, [pc, #648]	; (800b6c0 <_dtoa_r+0x640>)
 800b438:	f006 020f 	and.w	r2, r6, #15
 800b43c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	ec51 0b18 	vmov	r0, r1, d8
 800b448:	f7f5 f8d6 	bl	80005f8 <__aeabi_dmul>
 800b44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b450:	1136      	asrs	r6, r6, #4
 800b452:	2300      	movs	r3, #0
 800b454:	2502      	movs	r5, #2
 800b456:	2e00      	cmp	r6, #0
 800b458:	d17e      	bne.n	800b558 <_dtoa_r+0x4d8>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1d0      	bne.n	800b400 <_dtoa_r+0x380>
 800b45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b460:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8084 	beq.w	800b572 <_dtoa_r+0x4f2>
 800b46a:	4b96      	ldr	r3, [pc, #600]	; (800b6c4 <_dtoa_r+0x644>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f5 fb33 	bl	8000adc <__aeabi_dcmplt>
 800b476:	2800      	cmp	r0, #0
 800b478:	d07b      	beq.n	800b572 <_dtoa_r+0x4f2>
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d078      	beq.n	800b572 <_dtoa_r+0x4f2>
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	dd39      	ble.n	800b4fa <_dtoa_r+0x47a>
 800b486:	4b90      	ldr	r3, [pc, #576]	; (800b6c8 <_dtoa_r+0x648>)
 800b488:	2200      	movs	r2, #0
 800b48a:	4640      	mov	r0, r8
 800b48c:	4649      	mov	r1, r9
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b496:	9e01      	ldr	r6, [sp, #4]
 800b498:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b49c:	3501      	adds	r5, #1
 800b49e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f7f5 f83e 	bl	8000524 <__aeabi_i2d>
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	f7f5 f8a4 	bl	80005f8 <__aeabi_dmul>
 800b4b0:	4b86      	ldr	r3, [pc, #536]	; (800b6cc <_dtoa_r+0x64c>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7f4 feea 	bl	800028c <__adddf3>
 800b4b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c0:	9303      	str	r3, [sp, #12]
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d158      	bne.n	800b578 <_dtoa_r+0x4f8>
 800b4c6:	4b82      	ldr	r3, [pc, #520]	; (800b6d0 <_dtoa_r+0x650>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f4 fedb 	bl	8000288 <__aeabi_dsub>
 800b4d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	4689      	mov	r9, r1
 800b4da:	f7f5 fb1d 	bl	8000b18 <__aeabi_dcmpgt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f040 8296 	bne.w	800ba10 <_dtoa_r+0x990>
 800b4e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	f7f5 faf4 	bl	8000adc <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f040 8289 	bne.w	800ba0c <_dtoa_r+0x98c>
 800b4fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b4fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b500:	2b00      	cmp	r3, #0
 800b502:	f2c0 814e 	blt.w	800b7a2 <_dtoa_r+0x722>
 800b506:	f1bb 0f0e 	cmp.w	fp, #14
 800b50a:	f300 814a 	bgt.w	800b7a2 <_dtoa_r+0x722>
 800b50e:	4b6b      	ldr	r3, [pc, #428]	; (800b6bc <_dtoa_r+0x63c>)
 800b510:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b514:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f280 80dc 	bge.w	800b6d8 <_dtoa_r+0x658>
 800b520:	9b04      	ldr	r3, [sp, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	f300 80d8 	bgt.w	800b6d8 <_dtoa_r+0x658>
 800b528:	f040 826f 	bne.w	800ba0a <_dtoa_r+0x98a>
 800b52c:	4b68      	ldr	r3, [pc, #416]	; (800b6d0 <_dtoa_r+0x650>)
 800b52e:	2200      	movs	r2, #0
 800b530:	4640      	mov	r0, r8
 800b532:	4649      	mov	r1, r9
 800b534:	f7f5 f860 	bl	80005f8 <__aeabi_dmul>
 800b538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b53c:	f7f5 fae2 	bl	8000b04 <__aeabi_dcmpge>
 800b540:	9e04      	ldr	r6, [sp, #16]
 800b542:	4637      	mov	r7, r6
 800b544:	2800      	cmp	r0, #0
 800b546:	f040 8245 	bne.w	800b9d4 <_dtoa_r+0x954>
 800b54a:	9d00      	ldr	r5, [sp, #0]
 800b54c:	2331      	movs	r3, #49	; 0x31
 800b54e:	f805 3b01 	strb.w	r3, [r5], #1
 800b552:	f10b 0b01 	add.w	fp, fp, #1
 800b556:	e241      	b.n	800b9dc <_dtoa_r+0x95c>
 800b558:	07f2      	lsls	r2, r6, #31
 800b55a:	d505      	bpl.n	800b568 <_dtoa_r+0x4e8>
 800b55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b560:	f7f5 f84a 	bl	80005f8 <__aeabi_dmul>
 800b564:	3501      	adds	r5, #1
 800b566:	2301      	movs	r3, #1
 800b568:	1076      	asrs	r6, r6, #1
 800b56a:	3708      	adds	r7, #8
 800b56c:	e773      	b.n	800b456 <_dtoa_r+0x3d6>
 800b56e:	2502      	movs	r5, #2
 800b570:	e775      	b.n	800b45e <_dtoa_r+0x3de>
 800b572:	9e04      	ldr	r6, [sp, #16]
 800b574:	465f      	mov	r7, fp
 800b576:	e792      	b.n	800b49e <_dtoa_r+0x41e>
 800b578:	9900      	ldr	r1, [sp, #0]
 800b57a:	4b50      	ldr	r3, [pc, #320]	; (800b6bc <_dtoa_r+0x63c>)
 800b57c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b580:	4431      	add	r1, r6
 800b582:	9102      	str	r1, [sp, #8]
 800b584:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b586:	eeb0 9a47 	vmov.f32	s18, s14
 800b58a:	eef0 9a67 	vmov.f32	s19, s15
 800b58e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b592:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b596:	2900      	cmp	r1, #0
 800b598:	d044      	beq.n	800b624 <_dtoa_r+0x5a4>
 800b59a:	494e      	ldr	r1, [pc, #312]	; (800b6d4 <_dtoa_r+0x654>)
 800b59c:	2000      	movs	r0, #0
 800b59e:	f7f5 f955 	bl	800084c <__aeabi_ddiv>
 800b5a2:	ec53 2b19 	vmov	r2, r3, d9
 800b5a6:	f7f4 fe6f 	bl	8000288 <__aeabi_dsub>
 800b5aa:	9d00      	ldr	r5, [sp, #0]
 800b5ac:	ec41 0b19 	vmov	d9, r0, r1
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	f7f5 fad0 	bl	8000b58 <__aeabi_d2iz>
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	f7f4 ffb3 	bl	8000524 <__aeabi_i2d>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	f7f4 fe5f 	bl	8000288 <__aeabi_dsub>
 800b5ca:	3630      	adds	r6, #48	; 0x30
 800b5cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b5d0:	ec53 2b19 	vmov	r2, r3, d9
 800b5d4:	4680      	mov	r8, r0
 800b5d6:	4689      	mov	r9, r1
 800b5d8:	f7f5 fa80 	bl	8000adc <__aeabi_dcmplt>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d164      	bne.n	800b6aa <_dtoa_r+0x62a>
 800b5e0:	4642      	mov	r2, r8
 800b5e2:	464b      	mov	r3, r9
 800b5e4:	4937      	ldr	r1, [pc, #220]	; (800b6c4 <_dtoa_r+0x644>)
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7f4 fe4e 	bl	8000288 <__aeabi_dsub>
 800b5ec:	ec53 2b19 	vmov	r2, r3, d9
 800b5f0:	f7f5 fa74 	bl	8000adc <__aeabi_dcmplt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f040 80b6 	bne.w	800b766 <_dtoa_r+0x6e6>
 800b5fa:	9b02      	ldr	r3, [sp, #8]
 800b5fc:	429d      	cmp	r5, r3
 800b5fe:	f43f af7c 	beq.w	800b4fa <_dtoa_r+0x47a>
 800b602:	4b31      	ldr	r3, [pc, #196]	; (800b6c8 <_dtoa_r+0x648>)
 800b604:	ec51 0b19 	vmov	r0, r1, d9
 800b608:	2200      	movs	r2, #0
 800b60a:	f7f4 fff5 	bl	80005f8 <__aeabi_dmul>
 800b60e:	4b2e      	ldr	r3, [pc, #184]	; (800b6c8 <_dtoa_r+0x648>)
 800b610:	ec41 0b19 	vmov	d9, r0, r1
 800b614:	2200      	movs	r2, #0
 800b616:	4640      	mov	r0, r8
 800b618:	4649      	mov	r1, r9
 800b61a:	f7f4 ffed 	bl	80005f8 <__aeabi_dmul>
 800b61e:	4680      	mov	r8, r0
 800b620:	4689      	mov	r9, r1
 800b622:	e7c5      	b.n	800b5b0 <_dtoa_r+0x530>
 800b624:	ec51 0b17 	vmov	r0, r1, d7
 800b628:	f7f4 ffe6 	bl	80005f8 <__aeabi_dmul>
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	9d00      	ldr	r5, [sp, #0]
 800b630:	930f      	str	r3, [sp, #60]	; 0x3c
 800b632:	ec41 0b19 	vmov	d9, r0, r1
 800b636:	4649      	mov	r1, r9
 800b638:	4640      	mov	r0, r8
 800b63a:	f7f5 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800b63e:	4606      	mov	r6, r0
 800b640:	f7f4 ff70 	bl	8000524 <__aeabi_i2d>
 800b644:	3630      	adds	r6, #48	; 0x30
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f4 fe1b 	bl	8000288 <__aeabi_dsub>
 800b652:	f805 6b01 	strb.w	r6, [r5], #1
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	429d      	cmp	r5, r3
 800b65a:	4680      	mov	r8, r0
 800b65c:	4689      	mov	r9, r1
 800b65e:	f04f 0200 	mov.w	r2, #0
 800b662:	d124      	bne.n	800b6ae <_dtoa_r+0x62e>
 800b664:	4b1b      	ldr	r3, [pc, #108]	; (800b6d4 <_dtoa_r+0x654>)
 800b666:	ec51 0b19 	vmov	r0, r1, d9
 800b66a:	f7f4 fe0f 	bl	800028c <__adddf3>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f7f5 fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d173      	bne.n	800b766 <_dtoa_r+0x6e6>
 800b67e:	ec53 2b19 	vmov	r2, r3, d9
 800b682:	4914      	ldr	r1, [pc, #80]	; (800b6d4 <_dtoa_r+0x654>)
 800b684:	2000      	movs	r0, #0
 800b686:	f7f4 fdff 	bl	8000288 <__aeabi_dsub>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	4640      	mov	r0, r8
 800b690:	4649      	mov	r1, r9
 800b692:	f7f5 fa23 	bl	8000adc <__aeabi_dcmplt>
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f af2f 	beq.w	800b4fa <_dtoa_r+0x47a>
 800b69c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b69e:	1e6b      	subs	r3, r5, #1
 800b6a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6a6:	2b30      	cmp	r3, #48	; 0x30
 800b6a8:	d0f8      	beq.n	800b69c <_dtoa_r+0x61c>
 800b6aa:	46bb      	mov	fp, r7
 800b6ac:	e04a      	b.n	800b744 <_dtoa_r+0x6c4>
 800b6ae:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <_dtoa_r+0x648>)
 800b6b0:	f7f4 ffa2 	bl	80005f8 <__aeabi_dmul>
 800b6b4:	4680      	mov	r8, r0
 800b6b6:	4689      	mov	r9, r1
 800b6b8:	e7bd      	b.n	800b636 <_dtoa_r+0x5b6>
 800b6ba:	bf00      	nop
 800b6bc:	0800fae8 	.word	0x0800fae8
 800b6c0:	0800fac0 	.word	0x0800fac0
 800b6c4:	3ff00000 	.word	0x3ff00000
 800b6c8:	40240000 	.word	0x40240000
 800b6cc:	401c0000 	.word	0x401c0000
 800b6d0:	40140000 	.word	0x40140000
 800b6d4:	3fe00000 	.word	0x3fe00000
 800b6d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b6dc:	9d00      	ldr	r5, [sp, #0]
 800b6de:	4642      	mov	r2, r8
 800b6e0:	464b      	mov	r3, r9
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f5 f8b1 	bl	800084c <__aeabi_ddiv>
 800b6ea:	f7f5 fa35 	bl	8000b58 <__aeabi_d2iz>
 800b6ee:	9001      	str	r0, [sp, #4]
 800b6f0:	f7f4 ff18 	bl	8000524 <__aeabi_i2d>
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	f7f4 ff7e 	bl	80005f8 <__aeabi_dmul>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f4 fdc0 	bl	8000288 <__aeabi_dsub>
 800b708:	9e01      	ldr	r6, [sp, #4]
 800b70a:	9f04      	ldr	r7, [sp, #16]
 800b70c:	3630      	adds	r6, #48	; 0x30
 800b70e:	f805 6b01 	strb.w	r6, [r5], #1
 800b712:	9e00      	ldr	r6, [sp, #0]
 800b714:	1bae      	subs	r6, r5, r6
 800b716:	42b7      	cmp	r7, r6
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	d134      	bne.n	800b788 <_dtoa_r+0x708>
 800b71e:	f7f4 fdb5 	bl	800028c <__adddf3>
 800b722:	4642      	mov	r2, r8
 800b724:	464b      	mov	r3, r9
 800b726:	4606      	mov	r6, r0
 800b728:	460f      	mov	r7, r1
 800b72a:	f7f5 f9f5 	bl	8000b18 <__aeabi_dcmpgt>
 800b72e:	b9c8      	cbnz	r0, 800b764 <_dtoa_r+0x6e4>
 800b730:	4642      	mov	r2, r8
 800b732:	464b      	mov	r3, r9
 800b734:	4630      	mov	r0, r6
 800b736:	4639      	mov	r1, r7
 800b738:	f7f5 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b73c:	b110      	cbz	r0, 800b744 <_dtoa_r+0x6c4>
 800b73e:	9b01      	ldr	r3, [sp, #4]
 800b740:	07db      	lsls	r3, r3, #31
 800b742:	d40f      	bmi.n	800b764 <_dtoa_r+0x6e4>
 800b744:	4651      	mov	r1, sl
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fbcc 	bl	800bee4 <_Bfree>
 800b74c:	2300      	movs	r3, #0
 800b74e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b750:	702b      	strb	r3, [r5, #0]
 800b752:	f10b 0301 	add.w	r3, fp, #1
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f43f ace2 	beq.w	800b124 <_dtoa_r+0xa4>
 800b760:	601d      	str	r5, [r3, #0]
 800b762:	e4df      	b.n	800b124 <_dtoa_r+0xa4>
 800b764:	465f      	mov	r7, fp
 800b766:	462b      	mov	r3, r5
 800b768:	461d      	mov	r5, r3
 800b76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b76e:	2a39      	cmp	r2, #57	; 0x39
 800b770:	d106      	bne.n	800b780 <_dtoa_r+0x700>
 800b772:	9a00      	ldr	r2, [sp, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d1f7      	bne.n	800b768 <_dtoa_r+0x6e8>
 800b778:	9900      	ldr	r1, [sp, #0]
 800b77a:	2230      	movs	r2, #48	; 0x30
 800b77c:	3701      	adds	r7, #1
 800b77e:	700a      	strb	r2, [r1, #0]
 800b780:	781a      	ldrb	r2, [r3, #0]
 800b782:	3201      	adds	r2, #1
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e790      	b.n	800b6aa <_dtoa_r+0x62a>
 800b788:	4ba3      	ldr	r3, [pc, #652]	; (800ba18 <_dtoa_r+0x998>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	2200      	movs	r2, #0
 800b792:	2300      	movs	r3, #0
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	f7f5 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d09e      	beq.n	800b6de <_dtoa_r+0x65e>
 800b7a0:	e7d0      	b.n	800b744 <_dtoa_r+0x6c4>
 800b7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a4:	2a00      	cmp	r2, #0
 800b7a6:	f000 80ca 	beq.w	800b93e <_dtoa_r+0x8be>
 800b7aa:	9a07      	ldr	r2, [sp, #28]
 800b7ac:	2a01      	cmp	r2, #1
 800b7ae:	f300 80ad 	bgt.w	800b90c <_dtoa_r+0x88c>
 800b7b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7b4:	2a00      	cmp	r2, #0
 800b7b6:	f000 80a5 	beq.w	800b904 <_dtoa_r+0x884>
 800b7ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7be:	9e08      	ldr	r6, [sp, #32]
 800b7c0:	9d05      	ldr	r5, [sp, #20]
 800b7c2:	9a05      	ldr	r2, [sp, #20]
 800b7c4:	441a      	add	r2, r3
 800b7c6:	9205      	str	r2, [sp, #20]
 800b7c8:	9a06      	ldr	r2, [sp, #24]
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	441a      	add	r2, r3
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	9206      	str	r2, [sp, #24]
 800b7d2:	f000 fc87 	bl	800c0e4 <__i2b>
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	b165      	cbz	r5, 800b7f4 <_dtoa_r+0x774>
 800b7da:	9b06      	ldr	r3, [sp, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dd09      	ble.n	800b7f4 <_dtoa_r+0x774>
 800b7e0:	42ab      	cmp	r3, r5
 800b7e2:	9a05      	ldr	r2, [sp, #20]
 800b7e4:	bfa8      	it	ge
 800b7e6:	462b      	movge	r3, r5
 800b7e8:	1ad2      	subs	r2, r2, r3
 800b7ea:	9205      	str	r2, [sp, #20]
 800b7ec:	9a06      	ldr	r2, [sp, #24]
 800b7ee:	1aed      	subs	r5, r5, r3
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	9306      	str	r3, [sp, #24]
 800b7f4:	9b08      	ldr	r3, [sp, #32]
 800b7f6:	b1f3      	cbz	r3, 800b836 <_dtoa_r+0x7b6>
 800b7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 80a3 	beq.w	800b946 <_dtoa_r+0x8c6>
 800b800:	2e00      	cmp	r6, #0
 800b802:	dd10      	ble.n	800b826 <_dtoa_r+0x7a6>
 800b804:	4639      	mov	r1, r7
 800b806:	4632      	mov	r2, r6
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fd2b 	bl	800c264 <__pow5mult>
 800b80e:	4652      	mov	r2, sl
 800b810:	4601      	mov	r1, r0
 800b812:	4607      	mov	r7, r0
 800b814:	4620      	mov	r0, r4
 800b816:	f000 fc7b 	bl	800c110 <__multiply>
 800b81a:	4651      	mov	r1, sl
 800b81c:	4680      	mov	r8, r0
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fb60 	bl	800bee4 <_Bfree>
 800b824:	46c2      	mov	sl, r8
 800b826:	9b08      	ldr	r3, [sp, #32]
 800b828:	1b9a      	subs	r2, r3, r6
 800b82a:	d004      	beq.n	800b836 <_dtoa_r+0x7b6>
 800b82c:	4651      	mov	r1, sl
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 fd18 	bl	800c264 <__pow5mult>
 800b834:	4682      	mov	sl, r0
 800b836:	2101      	movs	r1, #1
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fc53 	bl	800c0e4 <__i2b>
 800b83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b840:	2b00      	cmp	r3, #0
 800b842:	4606      	mov	r6, r0
 800b844:	f340 8081 	ble.w	800b94a <_dtoa_r+0x8ca>
 800b848:	461a      	mov	r2, r3
 800b84a:	4601      	mov	r1, r0
 800b84c:	4620      	mov	r0, r4
 800b84e:	f000 fd09 	bl	800c264 <__pow5mult>
 800b852:	9b07      	ldr	r3, [sp, #28]
 800b854:	2b01      	cmp	r3, #1
 800b856:	4606      	mov	r6, r0
 800b858:	dd7a      	ble.n	800b950 <_dtoa_r+0x8d0>
 800b85a:	f04f 0800 	mov.w	r8, #0
 800b85e:	6933      	ldr	r3, [r6, #16]
 800b860:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b864:	6918      	ldr	r0, [r3, #16]
 800b866:	f000 fbef 	bl	800c048 <__hi0bits>
 800b86a:	f1c0 0020 	rsb	r0, r0, #32
 800b86e:	9b06      	ldr	r3, [sp, #24]
 800b870:	4418      	add	r0, r3
 800b872:	f010 001f 	ands.w	r0, r0, #31
 800b876:	f000 8094 	beq.w	800b9a2 <_dtoa_r+0x922>
 800b87a:	f1c0 0320 	rsb	r3, r0, #32
 800b87e:	2b04      	cmp	r3, #4
 800b880:	f340 8085 	ble.w	800b98e <_dtoa_r+0x90e>
 800b884:	9b05      	ldr	r3, [sp, #20]
 800b886:	f1c0 001c 	rsb	r0, r0, #28
 800b88a:	4403      	add	r3, r0
 800b88c:	9305      	str	r3, [sp, #20]
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	4403      	add	r3, r0
 800b892:	4405      	add	r5, r0
 800b894:	9306      	str	r3, [sp, #24]
 800b896:	9b05      	ldr	r3, [sp, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dd05      	ble.n	800b8a8 <_dtoa_r+0x828>
 800b89c:	4651      	mov	r1, sl
 800b89e:	461a      	mov	r2, r3
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fd39 	bl	800c318 <__lshift>
 800b8a6:	4682      	mov	sl, r0
 800b8a8:	9b06      	ldr	r3, [sp, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dd05      	ble.n	800b8ba <_dtoa_r+0x83a>
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fd30 	bl	800c318 <__lshift>
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d072      	beq.n	800b9a6 <_dtoa_r+0x926>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	f000 fd94 	bl	800c3f0 <__mcmp>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	da6c      	bge.n	800b9a6 <_dtoa_r+0x926>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4651      	mov	r1, sl
 800b8d0:	220a      	movs	r2, #10
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fb28 	bl	800bf28 <__multadd>
 800b8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8de:	4682      	mov	sl, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 81b0 	beq.w	800bc46 <_dtoa_r+0xbc6>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fb1b 	bl	800bf28 <__multadd>
 800b8f2:	9b01      	ldr	r3, [sp, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	f300 8096 	bgt.w	800ba28 <_dtoa_r+0x9a8>
 800b8fc:	9b07      	ldr	r3, [sp, #28]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	dc59      	bgt.n	800b9b6 <_dtoa_r+0x936>
 800b902:	e091      	b.n	800ba28 <_dtoa_r+0x9a8>
 800b904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b90a:	e758      	b.n	800b7be <_dtoa_r+0x73e>
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	1e5e      	subs	r6, r3, #1
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	42b3      	cmp	r3, r6
 800b914:	bfbf      	itttt	lt
 800b916:	9b08      	ldrlt	r3, [sp, #32]
 800b918:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b91a:	9608      	strlt	r6, [sp, #32]
 800b91c:	1af3      	sublt	r3, r6, r3
 800b91e:	bfb4      	ite	lt
 800b920:	18d2      	addlt	r2, r2, r3
 800b922:	1b9e      	subge	r6, r3, r6
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	bfbc      	itt	lt
 800b928:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b92a:	2600      	movlt	r6, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bfb7      	itett	lt
 800b930:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b934:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b938:	1a9d      	sublt	r5, r3, r2
 800b93a:	2300      	movlt	r3, #0
 800b93c:	e741      	b.n	800b7c2 <_dtoa_r+0x742>
 800b93e:	9e08      	ldr	r6, [sp, #32]
 800b940:	9d05      	ldr	r5, [sp, #20]
 800b942:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b944:	e748      	b.n	800b7d8 <_dtoa_r+0x758>
 800b946:	9a08      	ldr	r2, [sp, #32]
 800b948:	e770      	b.n	800b82c <_dtoa_r+0x7ac>
 800b94a:	9b07      	ldr	r3, [sp, #28]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	dc19      	bgt.n	800b984 <_dtoa_r+0x904>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	b9bb      	cbnz	r3, 800b984 <_dtoa_r+0x904>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b95a:	b99b      	cbnz	r3, 800b984 <_dtoa_r+0x904>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b962:	0d1b      	lsrs	r3, r3, #20
 800b964:	051b      	lsls	r3, r3, #20
 800b966:	b183      	cbz	r3, 800b98a <_dtoa_r+0x90a>
 800b968:	9b05      	ldr	r3, [sp, #20]
 800b96a:	3301      	adds	r3, #1
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	9b06      	ldr	r3, [sp, #24]
 800b970:	3301      	adds	r3, #1
 800b972:	9306      	str	r3, [sp, #24]
 800b974:	f04f 0801 	mov.w	r8, #1
 800b978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f47f af6f 	bne.w	800b85e <_dtoa_r+0x7de>
 800b980:	2001      	movs	r0, #1
 800b982:	e774      	b.n	800b86e <_dtoa_r+0x7ee>
 800b984:	f04f 0800 	mov.w	r8, #0
 800b988:	e7f6      	b.n	800b978 <_dtoa_r+0x8f8>
 800b98a:	4698      	mov	r8, r3
 800b98c:	e7f4      	b.n	800b978 <_dtoa_r+0x8f8>
 800b98e:	d082      	beq.n	800b896 <_dtoa_r+0x816>
 800b990:	9a05      	ldr	r2, [sp, #20]
 800b992:	331c      	adds	r3, #28
 800b994:	441a      	add	r2, r3
 800b996:	9205      	str	r2, [sp, #20]
 800b998:	9a06      	ldr	r2, [sp, #24]
 800b99a:	441a      	add	r2, r3
 800b99c:	441d      	add	r5, r3
 800b99e:	9206      	str	r2, [sp, #24]
 800b9a0:	e779      	b.n	800b896 <_dtoa_r+0x816>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	e7f4      	b.n	800b990 <_dtoa_r+0x910>
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dc37      	bgt.n	800ba1c <_dtoa_r+0x99c>
 800b9ac:	9b07      	ldr	r3, [sp, #28]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	dd34      	ble.n	800ba1c <_dtoa_r+0x99c>
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	9301      	str	r3, [sp, #4]
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	b963      	cbnz	r3, 800b9d4 <_dtoa_r+0x954>
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	2205      	movs	r2, #5
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 fab2 	bl	800bf28 <__multadd>
 800b9c4:	4601      	mov	r1, r0
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	4650      	mov	r0, sl
 800b9ca:	f000 fd11 	bl	800c3f0 <__mcmp>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	f73f adbb 	bgt.w	800b54a <_dtoa_r+0x4ca>
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d6:	9d00      	ldr	r5, [sp, #0]
 800b9d8:	ea6f 0b03 	mvn.w	fp, r3
 800b9dc:	f04f 0800 	mov.w	r8, #0
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 fa7e 	bl	800bee4 <_Bfree>
 800b9e8:	2f00      	cmp	r7, #0
 800b9ea:	f43f aeab 	beq.w	800b744 <_dtoa_r+0x6c4>
 800b9ee:	f1b8 0f00 	cmp.w	r8, #0
 800b9f2:	d005      	beq.n	800ba00 <_dtoa_r+0x980>
 800b9f4:	45b8      	cmp	r8, r7
 800b9f6:	d003      	beq.n	800ba00 <_dtoa_r+0x980>
 800b9f8:	4641      	mov	r1, r8
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 fa72 	bl	800bee4 <_Bfree>
 800ba00:	4639      	mov	r1, r7
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fa6e 	bl	800bee4 <_Bfree>
 800ba08:	e69c      	b.n	800b744 <_dtoa_r+0x6c4>
 800ba0a:	2600      	movs	r6, #0
 800ba0c:	4637      	mov	r7, r6
 800ba0e:	e7e1      	b.n	800b9d4 <_dtoa_r+0x954>
 800ba10:	46bb      	mov	fp, r7
 800ba12:	4637      	mov	r7, r6
 800ba14:	e599      	b.n	800b54a <_dtoa_r+0x4ca>
 800ba16:	bf00      	nop
 800ba18:	40240000 	.word	0x40240000
 800ba1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80c8 	beq.w	800bbb4 <_dtoa_r+0xb34>
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	2d00      	cmp	r5, #0
 800ba2a:	dd05      	ble.n	800ba38 <_dtoa_r+0x9b8>
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fc71 	bl	800c318 <__lshift>
 800ba36:	4607      	mov	r7, r0
 800ba38:	f1b8 0f00 	cmp.w	r8, #0
 800ba3c:	d05b      	beq.n	800baf6 <_dtoa_r+0xa76>
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fa0f 	bl	800be64 <_Balloc>
 800ba46:	4605      	mov	r5, r0
 800ba48:	b928      	cbnz	r0, 800ba56 <_dtoa_r+0x9d6>
 800ba4a:	4b83      	ldr	r3, [pc, #524]	; (800bc58 <_dtoa_r+0xbd8>)
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ba52:	f7ff bb2e 	b.w	800b0b2 <_dtoa_r+0x32>
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	3202      	adds	r2, #2
 800ba5a:	0092      	lsls	r2, r2, #2
 800ba5c:	f107 010c 	add.w	r1, r7, #12
 800ba60:	300c      	adds	r0, #12
 800ba62:	f7ff fa6e 	bl	800af42 <memcpy>
 800ba66:	2201      	movs	r2, #1
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 fc54 	bl	800c318 <__lshift>
 800ba70:	9b00      	ldr	r3, [sp, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	9308      	str	r3, [sp, #32]
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	46b8      	mov	r8, r7
 800ba86:	9306      	str	r3, [sp, #24]
 800ba88:	4607      	mov	r7, r0
 800ba8a:	9b04      	ldr	r3, [sp, #16]
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	4650      	mov	r0, sl
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	f7ff fa6a 	bl	800af6c <quorem>
 800ba98:	4641      	mov	r1, r8
 800ba9a:	9002      	str	r0, [sp, #8]
 800ba9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800baa0:	4650      	mov	r0, sl
 800baa2:	f000 fca5 	bl	800c3f0 <__mcmp>
 800baa6:	463a      	mov	r2, r7
 800baa8:	9005      	str	r0, [sp, #20]
 800baaa:	4631      	mov	r1, r6
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fcbb 	bl	800c428 <__mdiff>
 800bab2:	68c2      	ldr	r2, [r0, #12]
 800bab4:	4605      	mov	r5, r0
 800bab6:	bb02      	cbnz	r2, 800bafa <_dtoa_r+0xa7a>
 800bab8:	4601      	mov	r1, r0
 800baba:	4650      	mov	r0, sl
 800babc:	f000 fc98 	bl	800c3f0 <__mcmp>
 800bac0:	4602      	mov	r2, r0
 800bac2:	4629      	mov	r1, r5
 800bac4:	4620      	mov	r0, r4
 800bac6:	9209      	str	r2, [sp, #36]	; 0x24
 800bac8:	f000 fa0c 	bl	800bee4 <_Bfree>
 800bacc:	9b07      	ldr	r3, [sp, #28]
 800bace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad0:	9d04      	ldr	r5, [sp, #16]
 800bad2:	ea43 0102 	orr.w	r1, r3, r2
 800bad6:	9b06      	ldr	r3, [sp, #24]
 800bad8:	4319      	orrs	r1, r3
 800bada:	d110      	bne.n	800bafe <_dtoa_r+0xa7e>
 800badc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bae0:	d029      	beq.n	800bb36 <_dtoa_r+0xab6>
 800bae2:	9b05      	ldr	r3, [sp, #20]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd02      	ble.n	800baee <_dtoa_r+0xa6e>
 800bae8:	9b02      	ldr	r3, [sp, #8]
 800baea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	f883 9000 	strb.w	r9, [r3]
 800baf4:	e774      	b.n	800b9e0 <_dtoa_r+0x960>
 800baf6:	4638      	mov	r0, r7
 800baf8:	e7ba      	b.n	800ba70 <_dtoa_r+0x9f0>
 800bafa:	2201      	movs	r2, #1
 800bafc:	e7e1      	b.n	800bac2 <_dtoa_r+0xa42>
 800bafe:	9b05      	ldr	r3, [sp, #20]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	db04      	blt.n	800bb0e <_dtoa_r+0xa8e>
 800bb04:	9907      	ldr	r1, [sp, #28]
 800bb06:	430b      	orrs	r3, r1
 800bb08:	9906      	ldr	r1, [sp, #24]
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	d120      	bne.n	800bb50 <_dtoa_r+0xad0>
 800bb0e:	2a00      	cmp	r2, #0
 800bb10:	dded      	ble.n	800baee <_dtoa_r+0xa6e>
 800bb12:	4651      	mov	r1, sl
 800bb14:	2201      	movs	r2, #1
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 fbfe 	bl	800c318 <__lshift>
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4682      	mov	sl, r0
 800bb20:	f000 fc66 	bl	800c3f0 <__mcmp>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	dc03      	bgt.n	800bb30 <_dtoa_r+0xab0>
 800bb28:	d1e1      	bne.n	800baee <_dtoa_r+0xa6e>
 800bb2a:	f019 0f01 	tst.w	r9, #1
 800bb2e:	d0de      	beq.n	800baee <_dtoa_r+0xa6e>
 800bb30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb34:	d1d8      	bne.n	800bae8 <_dtoa_r+0xa68>
 800bb36:	9a01      	ldr	r2, [sp, #4]
 800bb38:	2339      	movs	r3, #57	; 0x39
 800bb3a:	7013      	strb	r3, [r2, #0]
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	461d      	mov	r5, r3
 800bb40:	3b01      	subs	r3, #1
 800bb42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb46:	2a39      	cmp	r2, #57	; 0x39
 800bb48:	d06c      	beq.n	800bc24 <_dtoa_r+0xba4>
 800bb4a:	3201      	adds	r2, #1
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	e747      	b.n	800b9e0 <_dtoa_r+0x960>
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	dd07      	ble.n	800bb64 <_dtoa_r+0xae4>
 800bb54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb58:	d0ed      	beq.n	800bb36 <_dtoa_r+0xab6>
 800bb5a:	9a01      	ldr	r2, [sp, #4]
 800bb5c:	f109 0301 	add.w	r3, r9, #1
 800bb60:	7013      	strb	r3, [r2, #0]
 800bb62:	e73d      	b.n	800b9e0 <_dtoa_r+0x960>
 800bb64:	9b04      	ldr	r3, [sp, #16]
 800bb66:	9a08      	ldr	r2, [sp, #32]
 800bb68:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d043      	beq.n	800bbf8 <_dtoa_r+0xb78>
 800bb70:	4651      	mov	r1, sl
 800bb72:	2300      	movs	r3, #0
 800bb74:	220a      	movs	r2, #10
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 f9d6 	bl	800bf28 <__multadd>
 800bb7c:	45b8      	cmp	r8, r7
 800bb7e:	4682      	mov	sl, r0
 800bb80:	f04f 0300 	mov.w	r3, #0
 800bb84:	f04f 020a 	mov.w	r2, #10
 800bb88:	4641      	mov	r1, r8
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	d107      	bne.n	800bb9e <_dtoa_r+0xb1e>
 800bb8e:	f000 f9cb 	bl	800bf28 <__multadd>
 800bb92:	4680      	mov	r8, r0
 800bb94:	4607      	mov	r7, r0
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	9304      	str	r3, [sp, #16]
 800bb9c:	e775      	b.n	800ba8a <_dtoa_r+0xa0a>
 800bb9e:	f000 f9c3 	bl	800bf28 <__multadd>
 800bba2:	4639      	mov	r1, r7
 800bba4:	4680      	mov	r8, r0
 800bba6:	2300      	movs	r3, #0
 800bba8:	220a      	movs	r2, #10
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f9bc 	bl	800bf28 <__multadd>
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	e7f0      	b.n	800bb96 <_dtoa_r+0xb16>
 800bbb4:	9b04      	ldr	r3, [sp, #16]
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	9d00      	ldr	r5, [sp, #0]
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4650      	mov	r0, sl
 800bbbe:	f7ff f9d5 	bl	800af6c <quorem>
 800bbc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bbc6:	9b00      	ldr	r3, [sp, #0]
 800bbc8:	f805 9b01 	strb.w	r9, [r5], #1
 800bbcc:	1aea      	subs	r2, r5, r3
 800bbce:	9b01      	ldr	r3, [sp, #4]
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	dd07      	ble.n	800bbe4 <_dtoa_r+0xb64>
 800bbd4:	4651      	mov	r1, sl
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	220a      	movs	r2, #10
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 f9a4 	bl	800bf28 <__multadd>
 800bbe0:	4682      	mov	sl, r0
 800bbe2:	e7ea      	b.n	800bbba <_dtoa_r+0xb3a>
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfc8      	it	gt
 800bbea:	461d      	movgt	r5, r3
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	bfd8      	it	le
 800bbf0:	2501      	movle	r5, #1
 800bbf2:	441d      	add	r5, r3
 800bbf4:	f04f 0800 	mov.w	r8, #0
 800bbf8:	4651      	mov	r1, sl
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f000 fb8b 	bl	800c318 <__lshift>
 800bc02:	4631      	mov	r1, r6
 800bc04:	4682      	mov	sl, r0
 800bc06:	f000 fbf3 	bl	800c3f0 <__mcmp>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	dc96      	bgt.n	800bb3c <_dtoa_r+0xabc>
 800bc0e:	d102      	bne.n	800bc16 <_dtoa_r+0xb96>
 800bc10:	f019 0f01 	tst.w	r9, #1
 800bc14:	d192      	bne.n	800bb3c <_dtoa_r+0xabc>
 800bc16:	462b      	mov	r3, r5
 800bc18:	461d      	mov	r5, r3
 800bc1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc1e:	2a30      	cmp	r2, #48	; 0x30
 800bc20:	d0fa      	beq.n	800bc18 <_dtoa_r+0xb98>
 800bc22:	e6dd      	b.n	800b9e0 <_dtoa_r+0x960>
 800bc24:	9a00      	ldr	r2, [sp, #0]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d189      	bne.n	800bb3e <_dtoa_r+0xabe>
 800bc2a:	f10b 0b01 	add.w	fp, fp, #1
 800bc2e:	2331      	movs	r3, #49	; 0x31
 800bc30:	e796      	b.n	800bb60 <_dtoa_r+0xae0>
 800bc32:	4b0a      	ldr	r3, [pc, #40]	; (800bc5c <_dtoa_r+0xbdc>)
 800bc34:	f7ff ba99 	b.w	800b16a <_dtoa_r+0xea>
 800bc38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f47f aa6d 	bne.w	800b11a <_dtoa_r+0x9a>
 800bc40:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <_dtoa_r+0xbe0>)
 800bc42:	f7ff ba92 	b.w	800b16a <_dtoa_r+0xea>
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dcb5      	bgt.n	800bbb8 <_dtoa_r+0xb38>
 800bc4c:	9b07      	ldr	r3, [sp, #28]
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	f73f aeb1 	bgt.w	800b9b6 <_dtoa_r+0x936>
 800bc54:	e7b0      	b.n	800bbb8 <_dtoa_r+0xb38>
 800bc56:	bf00      	nop
 800bc58:	0800fa56 	.word	0x0800fa56
 800bc5c:	0800f9b1 	.word	0x0800f9b1
 800bc60:	0800f9da 	.word	0x0800f9da

0800bc64 <_free_r>:
 800bc64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc66:	2900      	cmp	r1, #0
 800bc68:	d044      	beq.n	800bcf4 <_free_r+0x90>
 800bc6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc6e:	9001      	str	r0, [sp, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f1a1 0404 	sub.w	r4, r1, #4
 800bc76:	bfb8      	it	lt
 800bc78:	18e4      	addlt	r4, r4, r3
 800bc7a:	f000 f8e7 	bl	800be4c <__malloc_lock>
 800bc7e:	4a1e      	ldr	r2, [pc, #120]	; (800bcf8 <_free_r+0x94>)
 800bc80:	9801      	ldr	r0, [sp, #4]
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	b933      	cbnz	r3, 800bc94 <_free_r+0x30>
 800bc86:	6063      	str	r3, [r4, #4]
 800bc88:	6014      	str	r4, [r2, #0]
 800bc8a:	b003      	add	sp, #12
 800bc8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc90:	f000 b8e2 	b.w	800be58 <__malloc_unlock>
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	d908      	bls.n	800bcaa <_free_r+0x46>
 800bc98:	6825      	ldr	r5, [r4, #0]
 800bc9a:	1961      	adds	r1, r4, r5
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	bf01      	itttt	eq
 800bca0:	6819      	ldreq	r1, [r3, #0]
 800bca2:	685b      	ldreq	r3, [r3, #4]
 800bca4:	1949      	addeq	r1, r1, r5
 800bca6:	6021      	streq	r1, [r4, #0]
 800bca8:	e7ed      	b.n	800bc86 <_free_r+0x22>
 800bcaa:	461a      	mov	r2, r3
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	b10b      	cbz	r3, 800bcb4 <_free_r+0x50>
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	d9fa      	bls.n	800bcaa <_free_r+0x46>
 800bcb4:	6811      	ldr	r1, [r2, #0]
 800bcb6:	1855      	adds	r5, r2, r1
 800bcb8:	42a5      	cmp	r5, r4
 800bcba:	d10b      	bne.n	800bcd4 <_free_r+0x70>
 800bcbc:	6824      	ldr	r4, [r4, #0]
 800bcbe:	4421      	add	r1, r4
 800bcc0:	1854      	adds	r4, r2, r1
 800bcc2:	42a3      	cmp	r3, r4
 800bcc4:	6011      	str	r1, [r2, #0]
 800bcc6:	d1e0      	bne.n	800bc8a <_free_r+0x26>
 800bcc8:	681c      	ldr	r4, [r3, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	6053      	str	r3, [r2, #4]
 800bcce:	440c      	add	r4, r1
 800bcd0:	6014      	str	r4, [r2, #0]
 800bcd2:	e7da      	b.n	800bc8a <_free_r+0x26>
 800bcd4:	d902      	bls.n	800bcdc <_free_r+0x78>
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	e7d6      	b.n	800bc8a <_free_r+0x26>
 800bcdc:	6825      	ldr	r5, [r4, #0]
 800bcde:	1961      	adds	r1, r4, r5
 800bce0:	428b      	cmp	r3, r1
 800bce2:	bf04      	itt	eq
 800bce4:	6819      	ldreq	r1, [r3, #0]
 800bce6:	685b      	ldreq	r3, [r3, #4]
 800bce8:	6063      	str	r3, [r4, #4]
 800bcea:	bf04      	itt	eq
 800bcec:	1949      	addeq	r1, r1, r5
 800bcee:	6021      	streq	r1, [r4, #0]
 800bcf0:	6054      	str	r4, [r2, #4]
 800bcf2:	e7ca      	b.n	800bc8a <_free_r+0x26>
 800bcf4:	b003      	add	sp, #12
 800bcf6:	bd30      	pop	{r4, r5, pc}
 800bcf8:	2000505c 	.word	0x2000505c

0800bcfc <malloc>:
 800bcfc:	4b02      	ldr	r3, [pc, #8]	; (800bd08 <malloc+0xc>)
 800bcfe:	4601      	mov	r1, r0
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	f000 b823 	b.w	800bd4c <_malloc_r>
 800bd06:	bf00      	nop
 800bd08:	20000088 	.word	0x20000088

0800bd0c <sbrk_aligned>:
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	4e0e      	ldr	r6, [pc, #56]	; (800bd48 <sbrk_aligned+0x3c>)
 800bd10:	460c      	mov	r4, r1
 800bd12:	6831      	ldr	r1, [r6, #0]
 800bd14:	4605      	mov	r5, r0
 800bd16:	b911      	cbnz	r1, 800bd1e <sbrk_aligned+0x12>
 800bd18:	f001 fe1a 	bl	800d950 <_sbrk_r>
 800bd1c:	6030      	str	r0, [r6, #0]
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4628      	mov	r0, r5
 800bd22:	f001 fe15 	bl	800d950 <_sbrk_r>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	d00a      	beq.n	800bd40 <sbrk_aligned+0x34>
 800bd2a:	1cc4      	adds	r4, r0, #3
 800bd2c:	f024 0403 	bic.w	r4, r4, #3
 800bd30:	42a0      	cmp	r0, r4
 800bd32:	d007      	beq.n	800bd44 <sbrk_aligned+0x38>
 800bd34:	1a21      	subs	r1, r4, r0
 800bd36:	4628      	mov	r0, r5
 800bd38:	f001 fe0a 	bl	800d950 <_sbrk_r>
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	d101      	bne.n	800bd44 <sbrk_aligned+0x38>
 800bd40:	f04f 34ff 	mov.w	r4, #4294967295
 800bd44:	4620      	mov	r0, r4
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	20005060 	.word	0x20005060

0800bd4c <_malloc_r>:
 800bd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd50:	1ccd      	adds	r5, r1, #3
 800bd52:	f025 0503 	bic.w	r5, r5, #3
 800bd56:	3508      	adds	r5, #8
 800bd58:	2d0c      	cmp	r5, #12
 800bd5a:	bf38      	it	cc
 800bd5c:	250c      	movcc	r5, #12
 800bd5e:	2d00      	cmp	r5, #0
 800bd60:	4607      	mov	r7, r0
 800bd62:	db01      	blt.n	800bd68 <_malloc_r+0x1c>
 800bd64:	42a9      	cmp	r1, r5
 800bd66:	d905      	bls.n	800bd74 <_malloc_r+0x28>
 800bd68:	230c      	movs	r3, #12
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	4630      	mov	r0, r6
 800bd70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be48 <_malloc_r+0xfc>
 800bd78:	f000 f868 	bl	800be4c <__malloc_lock>
 800bd7c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd80:	461c      	mov	r4, r3
 800bd82:	bb5c      	cbnz	r4, 800bddc <_malloc_r+0x90>
 800bd84:	4629      	mov	r1, r5
 800bd86:	4638      	mov	r0, r7
 800bd88:	f7ff ffc0 	bl	800bd0c <sbrk_aligned>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	4604      	mov	r4, r0
 800bd90:	d155      	bne.n	800be3e <_malloc_r+0xf2>
 800bd92:	f8d8 4000 	ldr.w	r4, [r8]
 800bd96:	4626      	mov	r6, r4
 800bd98:	2e00      	cmp	r6, #0
 800bd9a:	d145      	bne.n	800be28 <_malloc_r+0xdc>
 800bd9c:	2c00      	cmp	r4, #0
 800bd9e:	d048      	beq.n	800be32 <_malloc_r+0xe6>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	4631      	mov	r1, r6
 800bda4:	4638      	mov	r0, r7
 800bda6:	eb04 0903 	add.w	r9, r4, r3
 800bdaa:	f001 fdd1 	bl	800d950 <_sbrk_r>
 800bdae:	4581      	cmp	r9, r0
 800bdb0:	d13f      	bne.n	800be32 <_malloc_r+0xe6>
 800bdb2:	6821      	ldr	r1, [r4, #0]
 800bdb4:	1a6d      	subs	r5, r5, r1
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f7ff ffa7 	bl	800bd0c <sbrk_aligned>
 800bdbe:	3001      	adds	r0, #1
 800bdc0:	d037      	beq.n	800be32 <_malloc_r+0xe6>
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	442b      	add	r3, r5
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	f8d8 3000 	ldr.w	r3, [r8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d038      	beq.n	800be42 <_malloc_r+0xf6>
 800bdd0:	685a      	ldr	r2, [r3, #4]
 800bdd2:	42a2      	cmp	r2, r4
 800bdd4:	d12b      	bne.n	800be2e <_malloc_r+0xe2>
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	605a      	str	r2, [r3, #4]
 800bdda:	e00f      	b.n	800bdfc <_malloc_r+0xb0>
 800bddc:	6822      	ldr	r2, [r4, #0]
 800bdde:	1b52      	subs	r2, r2, r5
 800bde0:	d41f      	bmi.n	800be22 <_malloc_r+0xd6>
 800bde2:	2a0b      	cmp	r2, #11
 800bde4:	d917      	bls.n	800be16 <_malloc_r+0xca>
 800bde6:	1961      	adds	r1, r4, r5
 800bde8:	42a3      	cmp	r3, r4
 800bdea:	6025      	str	r5, [r4, #0]
 800bdec:	bf18      	it	ne
 800bdee:	6059      	strne	r1, [r3, #4]
 800bdf0:	6863      	ldr	r3, [r4, #4]
 800bdf2:	bf08      	it	eq
 800bdf4:	f8c8 1000 	streq.w	r1, [r8]
 800bdf8:	5162      	str	r2, [r4, r5]
 800bdfa:	604b      	str	r3, [r1, #4]
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f104 060b 	add.w	r6, r4, #11
 800be02:	f000 f829 	bl	800be58 <__malloc_unlock>
 800be06:	f026 0607 	bic.w	r6, r6, #7
 800be0a:	1d23      	adds	r3, r4, #4
 800be0c:	1af2      	subs	r2, r6, r3
 800be0e:	d0ae      	beq.n	800bd6e <_malloc_r+0x22>
 800be10:	1b9b      	subs	r3, r3, r6
 800be12:	50a3      	str	r3, [r4, r2]
 800be14:	e7ab      	b.n	800bd6e <_malloc_r+0x22>
 800be16:	42a3      	cmp	r3, r4
 800be18:	6862      	ldr	r2, [r4, #4]
 800be1a:	d1dd      	bne.n	800bdd8 <_malloc_r+0x8c>
 800be1c:	f8c8 2000 	str.w	r2, [r8]
 800be20:	e7ec      	b.n	800bdfc <_malloc_r+0xb0>
 800be22:	4623      	mov	r3, r4
 800be24:	6864      	ldr	r4, [r4, #4]
 800be26:	e7ac      	b.n	800bd82 <_malloc_r+0x36>
 800be28:	4634      	mov	r4, r6
 800be2a:	6876      	ldr	r6, [r6, #4]
 800be2c:	e7b4      	b.n	800bd98 <_malloc_r+0x4c>
 800be2e:	4613      	mov	r3, r2
 800be30:	e7cc      	b.n	800bdcc <_malloc_r+0x80>
 800be32:	230c      	movs	r3, #12
 800be34:	603b      	str	r3, [r7, #0]
 800be36:	4638      	mov	r0, r7
 800be38:	f000 f80e 	bl	800be58 <__malloc_unlock>
 800be3c:	e797      	b.n	800bd6e <_malloc_r+0x22>
 800be3e:	6025      	str	r5, [r4, #0]
 800be40:	e7dc      	b.n	800bdfc <_malloc_r+0xb0>
 800be42:	605b      	str	r3, [r3, #4]
 800be44:	deff      	udf	#255	; 0xff
 800be46:	bf00      	nop
 800be48:	2000505c 	.word	0x2000505c

0800be4c <__malloc_lock>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__malloc_lock+0x8>)
 800be4e:	f7ff b876 	b.w	800af3e <__retarget_lock_acquire_recursive>
 800be52:	bf00      	nop
 800be54:	20005058 	.word	0x20005058

0800be58 <__malloc_unlock>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__malloc_unlock+0x8>)
 800be5a:	f7ff b871 	b.w	800af40 <__retarget_lock_release_recursive>
 800be5e:	bf00      	nop
 800be60:	20005058 	.word	0x20005058

0800be64 <_Balloc>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	69c6      	ldr	r6, [r0, #28]
 800be68:	4604      	mov	r4, r0
 800be6a:	460d      	mov	r5, r1
 800be6c:	b976      	cbnz	r6, 800be8c <_Balloc+0x28>
 800be6e:	2010      	movs	r0, #16
 800be70:	f7ff ff44 	bl	800bcfc <malloc>
 800be74:	4602      	mov	r2, r0
 800be76:	61e0      	str	r0, [r4, #28]
 800be78:	b920      	cbnz	r0, 800be84 <_Balloc+0x20>
 800be7a:	4b18      	ldr	r3, [pc, #96]	; (800bedc <_Balloc+0x78>)
 800be7c:	4818      	ldr	r0, [pc, #96]	; (800bee0 <_Balloc+0x7c>)
 800be7e:	216b      	movs	r1, #107	; 0x6b
 800be80:	f001 fd7e 	bl	800d980 <__assert_func>
 800be84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be88:	6006      	str	r6, [r0, #0]
 800be8a:	60c6      	str	r6, [r0, #12]
 800be8c:	69e6      	ldr	r6, [r4, #28]
 800be8e:	68f3      	ldr	r3, [r6, #12]
 800be90:	b183      	cbz	r3, 800beb4 <_Balloc+0x50>
 800be92:	69e3      	ldr	r3, [r4, #28]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be9a:	b9b8      	cbnz	r0, 800becc <_Balloc+0x68>
 800be9c:	2101      	movs	r1, #1
 800be9e:	fa01 f605 	lsl.w	r6, r1, r5
 800bea2:	1d72      	adds	r2, r6, #5
 800bea4:	0092      	lsls	r2, r2, #2
 800bea6:	4620      	mov	r0, r4
 800bea8:	f001 fd88 	bl	800d9bc <_calloc_r>
 800beac:	b160      	cbz	r0, 800bec8 <_Balloc+0x64>
 800beae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800beb2:	e00e      	b.n	800bed2 <_Balloc+0x6e>
 800beb4:	2221      	movs	r2, #33	; 0x21
 800beb6:	2104      	movs	r1, #4
 800beb8:	4620      	mov	r0, r4
 800beba:	f001 fd7f 	bl	800d9bc <_calloc_r>
 800bebe:	69e3      	ldr	r3, [r4, #28]
 800bec0:	60f0      	str	r0, [r6, #12]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1e4      	bne.n	800be92 <_Balloc+0x2e>
 800bec8:	2000      	movs	r0, #0
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	6802      	ldr	r2, [r0, #0]
 800bece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bed2:	2300      	movs	r3, #0
 800bed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bed8:	e7f7      	b.n	800beca <_Balloc+0x66>
 800beda:	bf00      	nop
 800bedc:	0800f9e7 	.word	0x0800f9e7
 800bee0:	0800fa67 	.word	0x0800fa67

0800bee4 <_Bfree>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	69c6      	ldr	r6, [r0, #28]
 800bee8:	4605      	mov	r5, r0
 800beea:	460c      	mov	r4, r1
 800beec:	b976      	cbnz	r6, 800bf0c <_Bfree+0x28>
 800beee:	2010      	movs	r0, #16
 800bef0:	f7ff ff04 	bl	800bcfc <malloc>
 800bef4:	4602      	mov	r2, r0
 800bef6:	61e8      	str	r0, [r5, #28]
 800bef8:	b920      	cbnz	r0, 800bf04 <_Bfree+0x20>
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <_Bfree+0x3c>)
 800befc:	4809      	ldr	r0, [pc, #36]	; (800bf24 <_Bfree+0x40>)
 800befe:	218f      	movs	r1, #143	; 0x8f
 800bf00:	f001 fd3e 	bl	800d980 <__assert_func>
 800bf04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf08:	6006      	str	r6, [r0, #0]
 800bf0a:	60c6      	str	r6, [r0, #12]
 800bf0c:	b13c      	cbz	r4, 800bf1e <_Bfree+0x3a>
 800bf0e:	69eb      	ldr	r3, [r5, #28]
 800bf10:	6862      	ldr	r2, [r4, #4]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf18:	6021      	str	r1, [r4, #0]
 800bf1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	0800f9e7 	.word	0x0800f9e7
 800bf24:	0800fa67 	.word	0x0800fa67

0800bf28 <__multadd>:
 800bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2c:	690d      	ldr	r5, [r1, #16]
 800bf2e:	4607      	mov	r7, r0
 800bf30:	460c      	mov	r4, r1
 800bf32:	461e      	mov	r6, r3
 800bf34:	f101 0c14 	add.w	ip, r1, #20
 800bf38:	2000      	movs	r0, #0
 800bf3a:	f8dc 3000 	ldr.w	r3, [ip]
 800bf3e:	b299      	uxth	r1, r3
 800bf40:	fb02 6101 	mla	r1, r2, r1, r6
 800bf44:	0c1e      	lsrs	r6, r3, #16
 800bf46:	0c0b      	lsrs	r3, r1, #16
 800bf48:	fb02 3306 	mla	r3, r2, r6, r3
 800bf4c:	b289      	uxth	r1, r1
 800bf4e:	3001      	adds	r0, #1
 800bf50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf54:	4285      	cmp	r5, r0
 800bf56:	f84c 1b04 	str.w	r1, [ip], #4
 800bf5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf5e:	dcec      	bgt.n	800bf3a <__multadd+0x12>
 800bf60:	b30e      	cbz	r6, 800bfa6 <__multadd+0x7e>
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	42ab      	cmp	r3, r5
 800bf66:	dc19      	bgt.n	800bf9c <__multadd+0x74>
 800bf68:	6861      	ldr	r1, [r4, #4]
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	3101      	adds	r1, #1
 800bf6e:	f7ff ff79 	bl	800be64 <_Balloc>
 800bf72:	4680      	mov	r8, r0
 800bf74:	b928      	cbnz	r0, 800bf82 <__multadd+0x5a>
 800bf76:	4602      	mov	r2, r0
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <__multadd+0x84>)
 800bf7a:	480d      	ldr	r0, [pc, #52]	; (800bfb0 <__multadd+0x88>)
 800bf7c:	21ba      	movs	r1, #186	; 0xba
 800bf7e:	f001 fcff 	bl	800d980 <__assert_func>
 800bf82:	6922      	ldr	r2, [r4, #16]
 800bf84:	3202      	adds	r2, #2
 800bf86:	f104 010c 	add.w	r1, r4, #12
 800bf8a:	0092      	lsls	r2, r2, #2
 800bf8c:	300c      	adds	r0, #12
 800bf8e:	f7fe ffd8 	bl	800af42 <memcpy>
 800bf92:	4621      	mov	r1, r4
 800bf94:	4638      	mov	r0, r7
 800bf96:	f7ff ffa5 	bl	800bee4 <_Bfree>
 800bf9a:	4644      	mov	r4, r8
 800bf9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfa0:	3501      	adds	r5, #1
 800bfa2:	615e      	str	r6, [r3, #20]
 800bfa4:	6125      	str	r5, [r4, #16]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfac:	0800fa56 	.word	0x0800fa56
 800bfb0:	0800fa67 	.word	0x0800fa67

0800bfb4 <__s2b>:
 800bfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb8:	460c      	mov	r4, r1
 800bfba:	4615      	mov	r5, r2
 800bfbc:	461f      	mov	r7, r3
 800bfbe:	2209      	movs	r2, #9
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfc8:	2100      	movs	r1, #0
 800bfca:	2201      	movs	r2, #1
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	db09      	blt.n	800bfe4 <__s2b+0x30>
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f7ff ff47 	bl	800be64 <_Balloc>
 800bfd6:	b940      	cbnz	r0, 800bfea <__s2b+0x36>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	4b19      	ldr	r3, [pc, #100]	; (800c040 <__s2b+0x8c>)
 800bfdc:	4819      	ldr	r0, [pc, #100]	; (800c044 <__s2b+0x90>)
 800bfde:	21d3      	movs	r1, #211	; 0xd3
 800bfe0:	f001 fcce 	bl	800d980 <__assert_func>
 800bfe4:	0052      	lsls	r2, r2, #1
 800bfe6:	3101      	adds	r1, #1
 800bfe8:	e7f0      	b.n	800bfcc <__s2b+0x18>
 800bfea:	9b08      	ldr	r3, [sp, #32]
 800bfec:	6143      	str	r3, [r0, #20]
 800bfee:	2d09      	cmp	r5, #9
 800bff0:	f04f 0301 	mov.w	r3, #1
 800bff4:	6103      	str	r3, [r0, #16]
 800bff6:	dd16      	ble.n	800c026 <__s2b+0x72>
 800bff8:	f104 0909 	add.w	r9, r4, #9
 800bffc:	46c8      	mov	r8, r9
 800bffe:	442c      	add	r4, r5
 800c000:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c004:	4601      	mov	r1, r0
 800c006:	3b30      	subs	r3, #48	; 0x30
 800c008:	220a      	movs	r2, #10
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7ff ff8c 	bl	800bf28 <__multadd>
 800c010:	45a0      	cmp	r8, r4
 800c012:	d1f5      	bne.n	800c000 <__s2b+0x4c>
 800c014:	f1a5 0408 	sub.w	r4, r5, #8
 800c018:	444c      	add	r4, r9
 800c01a:	1b2d      	subs	r5, r5, r4
 800c01c:	1963      	adds	r3, r4, r5
 800c01e:	42bb      	cmp	r3, r7
 800c020:	db04      	blt.n	800c02c <__s2b+0x78>
 800c022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c026:	340a      	adds	r4, #10
 800c028:	2509      	movs	r5, #9
 800c02a:	e7f6      	b.n	800c01a <__s2b+0x66>
 800c02c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c030:	4601      	mov	r1, r0
 800c032:	3b30      	subs	r3, #48	; 0x30
 800c034:	220a      	movs	r2, #10
 800c036:	4630      	mov	r0, r6
 800c038:	f7ff ff76 	bl	800bf28 <__multadd>
 800c03c:	e7ee      	b.n	800c01c <__s2b+0x68>
 800c03e:	bf00      	nop
 800c040:	0800fa56 	.word	0x0800fa56
 800c044:	0800fa67 	.word	0x0800fa67

0800c048 <__hi0bits>:
 800c048:	0c03      	lsrs	r3, r0, #16
 800c04a:	041b      	lsls	r3, r3, #16
 800c04c:	b9d3      	cbnz	r3, 800c084 <__hi0bits+0x3c>
 800c04e:	0400      	lsls	r0, r0, #16
 800c050:	2310      	movs	r3, #16
 800c052:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c056:	bf04      	itt	eq
 800c058:	0200      	lsleq	r0, r0, #8
 800c05a:	3308      	addeq	r3, #8
 800c05c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c060:	bf04      	itt	eq
 800c062:	0100      	lsleq	r0, r0, #4
 800c064:	3304      	addeq	r3, #4
 800c066:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c06a:	bf04      	itt	eq
 800c06c:	0080      	lsleq	r0, r0, #2
 800c06e:	3302      	addeq	r3, #2
 800c070:	2800      	cmp	r0, #0
 800c072:	db05      	blt.n	800c080 <__hi0bits+0x38>
 800c074:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c078:	f103 0301 	add.w	r3, r3, #1
 800c07c:	bf08      	it	eq
 800c07e:	2320      	moveq	r3, #32
 800c080:	4618      	mov	r0, r3
 800c082:	4770      	bx	lr
 800c084:	2300      	movs	r3, #0
 800c086:	e7e4      	b.n	800c052 <__hi0bits+0xa>

0800c088 <__lo0bits>:
 800c088:	6803      	ldr	r3, [r0, #0]
 800c08a:	f013 0207 	ands.w	r2, r3, #7
 800c08e:	d00c      	beq.n	800c0aa <__lo0bits+0x22>
 800c090:	07d9      	lsls	r1, r3, #31
 800c092:	d422      	bmi.n	800c0da <__lo0bits+0x52>
 800c094:	079a      	lsls	r2, r3, #30
 800c096:	bf49      	itett	mi
 800c098:	085b      	lsrmi	r3, r3, #1
 800c09a:	089b      	lsrpl	r3, r3, #2
 800c09c:	6003      	strmi	r3, [r0, #0]
 800c09e:	2201      	movmi	r2, #1
 800c0a0:	bf5c      	itt	pl
 800c0a2:	6003      	strpl	r3, [r0, #0]
 800c0a4:	2202      	movpl	r2, #2
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	4770      	bx	lr
 800c0aa:	b299      	uxth	r1, r3
 800c0ac:	b909      	cbnz	r1, 800c0b2 <__lo0bits+0x2a>
 800c0ae:	0c1b      	lsrs	r3, r3, #16
 800c0b0:	2210      	movs	r2, #16
 800c0b2:	b2d9      	uxtb	r1, r3
 800c0b4:	b909      	cbnz	r1, 800c0ba <__lo0bits+0x32>
 800c0b6:	3208      	adds	r2, #8
 800c0b8:	0a1b      	lsrs	r3, r3, #8
 800c0ba:	0719      	lsls	r1, r3, #28
 800c0bc:	bf04      	itt	eq
 800c0be:	091b      	lsreq	r3, r3, #4
 800c0c0:	3204      	addeq	r2, #4
 800c0c2:	0799      	lsls	r1, r3, #30
 800c0c4:	bf04      	itt	eq
 800c0c6:	089b      	lsreq	r3, r3, #2
 800c0c8:	3202      	addeq	r2, #2
 800c0ca:	07d9      	lsls	r1, r3, #31
 800c0cc:	d403      	bmi.n	800c0d6 <__lo0bits+0x4e>
 800c0ce:	085b      	lsrs	r3, r3, #1
 800c0d0:	f102 0201 	add.w	r2, r2, #1
 800c0d4:	d003      	beq.n	800c0de <__lo0bits+0x56>
 800c0d6:	6003      	str	r3, [r0, #0]
 800c0d8:	e7e5      	b.n	800c0a6 <__lo0bits+0x1e>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	e7e3      	b.n	800c0a6 <__lo0bits+0x1e>
 800c0de:	2220      	movs	r2, #32
 800c0e0:	e7e1      	b.n	800c0a6 <__lo0bits+0x1e>
	...

0800c0e4 <__i2b>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	f7ff febb 	bl	800be64 <_Balloc>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	b928      	cbnz	r0, 800c0fe <__i2b+0x1a>
 800c0f2:	4b05      	ldr	r3, [pc, #20]	; (800c108 <__i2b+0x24>)
 800c0f4:	4805      	ldr	r0, [pc, #20]	; (800c10c <__i2b+0x28>)
 800c0f6:	f240 1145 	movw	r1, #325	; 0x145
 800c0fa:	f001 fc41 	bl	800d980 <__assert_func>
 800c0fe:	2301      	movs	r3, #1
 800c100:	6144      	str	r4, [r0, #20]
 800c102:	6103      	str	r3, [r0, #16]
 800c104:	bd10      	pop	{r4, pc}
 800c106:	bf00      	nop
 800c108:	0800fa56 	.word	0x0800fa56
 800c10c:	0800fa67 	.word	0x0800fa67

0800c110 <__multiply>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	4691      	mov	r9, r2
 800c116:	690a      	ldr	r2, [r1, #16]
 800c118:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	bfb8      	it	lt
 800c120:	460b      	movlt	r3, r1
 800c122:	460c      	mov	r4, r1
 800c124:	bfbc      	itt	lt
 800c126:	464c      	movlt	r4, r9
 800c128:	4699      	movlt	r9, r3
 800c12a:	6927      	ldr	r7, [r4, #16]
 800c12c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	6861      	ldr	r1, [r4, #4]
 800c134:	eb07 060a 	add.w	r6, r7, sl
 800c138:	42b3      	cmp	r3, r6
 800c13a:	b085      	sub	sp, #20
 800c13c:	bfb8      	it	lt
 800c13e:	3101      	addlt	r1, #1
 800c140:	f7ff fe90 	bl	800be64 <_Balloc>
 800c144:	b930      	cbnz	r0, 800c154 <__multiply+0x44>
 800c146:	4602      	mov	r2, r0
 800c148:	4b44      	ldr	r3, [pc, #272]	; (800c25c <__multiply+0x14c>)
 800c14a:	4845      	ldr	r0, [pc, #276]	; (800c260 <__multiply+0x150>)
 800c14c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c150:	f001 fc16 	bl	800d980 <__assert_func>
 800c154:	f100 0514 	add.w	r5, r0, #20
 800c158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c15c:	462b      	mov	r3, r5
 800c15e:	2200      	movs	r2, #0
 800c160:	4543      	cmp	r3, r8
 800c162:	d321      	bcc.n	800c1a8 <__multiply+0x98>
 800c164:	f104 0314 	add.w	r3, r4, #20
 800c168:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c16c:	f109 0314 	add.w	r3, r9, #20
 800c170:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	1b3a      	subs	r2, r7, r4
 800c178:	3a15      	subs	r2, #21
 800c17a:	f022 0203 	bic.w	r2, r2, #3
 800c17e:	3204      	adds	r2, #4
 800c180:	f104 0115 	add.w	r1, r4, #21
 800c184:	428f      	cmp	r7, r1
 800c186:	bf38      	it	cc
 800c188:	2204      	movcc	r2, #4
 800c18a:	9201      	str	r2, [sp, #4]
 800c18c:	9a02      	ldr	r2, [sp, #8]
 800c18e:	9303      	str	r3, [sp, #12]
 800c190:	429a      	cmp	r2, r3
 800c192:	d80c      	bhi.n	800c1ae <__multiply+0x9e>
 800c194:	2e00      	cmp	r6, #0
 800c196:	dd03      	ble.n	800c1a0 <__multiply+0x90>
 800c198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d05b      	beq.n	800c258 <__multiply+0x148>
 800c1a0:	6106      	str	r6, [r0, #16]
 800c1a2:	b005      	add	sp, #20
 800c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	f843 2b04 	str.w	r2, [r3], #4
 800c1ac:	e7d8      	b.n	800c160 <__multiply+0x50>
 800c1ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1b2:	f1ba 0f00 	cmp.w	sl, #0
 800c1b6:	d024      	beq.n	800c202 <__multiply+0xf2>
 800c1b8:	f104 0e14 	add.w	lr, r4, #20
 800c1bc:	46a9      	mov	r9, r5
 800c1be:	f04f 0c00 	mov.w	ip, #0
 800c1c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1c6:	f8d9 1000 	ldr.w	r1, [r9]
 800c1ca:	fa1f fb82 	uxth.w	fp, r2
 800c1ce:	b289      	uxth	r1, r1
 800c1d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1d8:	f8d9 2000 	ldr.w	r2, [r9]
 800c1dc:	4461      	add	r1, ip
 800c1de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1ea:	b289      	uxth	r1, r1
 800c1ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1f0:	4577      	cmp	r7, lr
 800c1f2:	f849 1b04 	str.w	r1, [r9], #4
 800c1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1fa:	d8e2      	bhi.n	800c1c2 <__multiply+0xb2>
 800c1fc:	9a01      	ldr	r2, [sp, #4]
 800c1fe:	f845 c002 	str.w	ip, [r5, r2]
 800c202:	9a03      	ldr	r2, [sp, #12]
 800c204:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c208:	3304      	adds	r3, #4
 800c20a:	f1b9 0f00 	cmp.w	r9, #0
 800c20e:	d021      	beq.n	800c254 <__multiply+0x144>
 800c210:	6829      	ldr	r1, [r5, #0]
 800c212:	f104 0c14 	add.w	ip, r4, #20
 800c216:	46ae      	mov	lr, r5
 800c218:	f04f 0a00 	mov.w	sl, #0
 800c21c:	f8bc b000 	ldrh.w	fp, [ip]
 800c220:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c224:	fb09 220b 	mla	r2, r9, fp, r2
 800c228:	4452      	add	r2, sl
 800c22a:	b289      	uxth	r1, r1
 800c22c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c230:	f84e 1b04 	str.w	r1, [lr], #4
 800c234:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c23c:	f8be 1000 	ldrh.w	r1, [lr]
 800c240:	fb09 110a 	mla	r1, r9, sl, r1
 800c244:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c248:	4567      	cmp	r7, ip
 800c24a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c24e:	d8e5      	bhi.n	800c21c <__multiply+0x10c>
 800c250:	9a01      	ldr	r2, [sp, #4]
 800c252:	50a9      	str	r1, [r5, r2]
 800c254:	3504      	adds	r5, #4
 800c256:	e799      	b.n	800c18c <__multiply+0x7c>
 800c258:	3e01      	subs	r6, #1
 800c25a:	e79b      	b.n	800c194 <__multiply+0x84>
 800c25c:	0800fa56 	.word	0x0800fa56
 800c260:	0800fa67 	.word	0x0800fa67

0800c264 <__pow5mult>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	4615      	mov	r5, r2
 800c26a:	f012 0203 	ands.w	r2, r2, #3
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	d007      	beq.n	800c284 <__pow5mult+0x20>
 800c274:	4c25      	ldr	r4, [pc, #148]	; (800c30c <__pow5mult+0xa8>)
 800c276:	3a01      	subs	r2, #1
 800c278:	2300      	movs	r3, #0
 800c27a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c27e:	f7ff fe53 	bl	800bf28 <__multadd>
 800c282:	4607      	mov	r7, r0
 800c284:	10ad      	asrs	r5, r5, #2
 800c286:	d03d      	beq.n	800c304 <__pow5mult+0xa0>
 800c288:	69f4      	ldr	r4, [r6, #28]
 800c28a:	b97c      	cbnz	r4, 800c2ac <__pow5mult+0x48>
 800c28c:	2010      	movs	r0, #16
 800c28e:	f7ff fd35 	bl	800bcfc <malloc>
 800c292:	4602      	mov	r2, r0
 800c294:	61f0      	str	r0, [r6, #28]
 800c296:	b928      	cbnz	r0, 800c2a4 <__pow5mult+0x40>
 800c298:	4b1d      	ldr	r3, [pc, #116]	; (800c310 <__pow5mult+0xac>)
 800c29a:	481e      	ldr	r0, [pc, #120]	; (800c314 <__pow5mult+0xb0>)
 800c29c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c2a0:	f001 fb6e 	bl	800d980 <__assert_func>
 800c2a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2a8:	6004      	str	r4, [r0, #0]
 800c2aa:	60c4      	str	r4, [r0, #12]
 800c2ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b4:	b94c      	cbnz	r4, 800c2ca <__pow5mult+0x66>
 800c2b6:	f240 2171 	movw	r1, #625	; 0x271
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff ff12 	bl	800c0e4 <__i2b>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	6003      	str	r3, [r0, #0]
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	07eb      	lsls	r3, r5, #31
 800c2d0:	d50a      	bpl.n	800c2e8 <__pow5mult+0x84>
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7ff ff1a 	bl	800c110 <__multiply>
 800c2dc:	4639      	mov	r1, r7
 800c2de:	4680      	mov	r8, r0
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff fdff 	bl	800bee4 <_Bfree>
 800c2e6:	4647      	mov	r7, r8
 800c2e8:	106d      	asrs	r5, r5, #1
 800c2ea:	d00b      	beq.n	800c304 <__pow5mult+0xa0>
 800c2ec:	6820      	ldr	r0, [r4, #0]
 800c2ee:	b938      	cbnz	r0, 800c300 <__pow5mult+0x9c>
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff ff0b 	bl	800c110 <__multiply>
 800c2fa:	6020      	str	r0, [r4, #0]
 800c2fc:	f8c0 9000 	str.w	r9, [r0]
 800c300:	4604      	mov	r4, r0
 800c302:	e7e4      	b.n	800c2ce <__pow5mult+0x6a>
 800c304:	4638      	mov	r0, r7
 800c306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30a:	bf00      	nop
 800c30c:	0800fbb0 	.word	0x0800fbb0
 800c310:	0800f9e7 	.word	0x0800f9e7
 800c314:	0800fa67 	.word	0x0800fa67

0800c318 <__lshift>:
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	460c      	mov	r4, r1
 800c31e:	6849      	ldr	r1, [r1, #4]
 800c320:	6923      	ldr	r3, [r4, #16]
 800c322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	4607      	mov	r7, r0
 800c32a:	4691      	mov	r9, r2
 800c32c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c330:	f108 0601 	add.w	r6, r8, #1
 800c334:	42b3      	cmp	r3, r6
 800c336:	db0b      	blt.n	800c350 <__lshift+0x38>
 800c338:	4638      	mov	r0, r7
 800c33a:	f7ff fd93 	bl	800be64 <_Balloc>
 800c33e:	4605      	mov	r5, r0
 800c340:	b948      	cbnz	r0, 800c356 <__lshift+0x3e>
 800c342:	4602      	mov	r2, r0
 800c344:	4b28      	ldr	r3, [pc, #160]	; (800c3e8 <__lshift+0xd0>)
 800c346:	4829      	ldr	r0, [pc, #164]	; (800c3ec <__lshift+0xd4>)
 800c348:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c34c:	f001 fb18 	bl	800d980 <__assert_func>
 800c350:	3101      	adds	r1, #1
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	e7ee      	b.n	800c334 <__lshift+0x1c>
 800c356:	2300      	movs	r3, #0
 800c358:	f100 0114 	add.w	r1, r0, #20
 800c35c:	f100 0210 	add.w	r2, r0, #16
 800c360:	4618      	mov	r0, r3
 800c362:	4553      	cmp	r3, sl
 800c364:	db33      	blt.n	800c3ce <__lshift+0xb6>
 800c366:	6920      	ldr	r0, [r4, #16]
 800c368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c36c:	f104 0314 	add.w	r3, r4, #20
 800c370:	f019 091f 	ands.w	r9, r9, #31
 800c374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c37c:	d02b      	beq.n	800c3d6 <__lshift+0xbe>
 800c37e:	f1c9 0e20 	rsb	lr, r9, #32
 800c382:	468a      	mov	sl, r1
 800c384:	2200      	movs	r2, #0
 800c386:	6818      	ldr	r0, [r3, #0]
 800c388:	fa00 f009 	lsl.w	r0, r0, r9
 800c38c:	4310      	orrs	r0, r2
 800c38e:	f84a 0b04 	str.w	r0, [sl], #4
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	459c      	cmp	ip, r3
 800c398:	fa22 f20e 	lsr.w	r2, r2, lr
 800c39c:	d8f3      	bhi.n	800c386 <__lshift+0x6e>
 800c39e:	ebac 0304 	sub.w	r3, ip, r4
 800c3a2:	3b15      	subs	r3, #21
 800c3a4:	f023 0303 	bic.w	r3, r3, #3
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	f104 0015 	add.w	r0, r4, #21
 800c3ae:	4584      	cmp	ip, r0
 800c3b0:	bf38      	it	cc
 800c3b2:	2304      	movcc	r3, #4
 800c3b4:	50ca      	str	r2, [r1, r3]
 800c3b6:	b10a      	cbz	r2, 800c3bc <__lshift+0xa4>
 800c3b8:	f108 0602 	add.w	r6, r8, #2
 800c3bc:	3e01      	subs	r6, #1
 800c3be:	4638      	mov	r0, r7
 800c3c0:	612e      	str	r6, [r5, #16]
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	f7ff fd8e 	bl	800bee4 <_Bfree>
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	e7c5      	b.n	800c362 <__lshift+0x4a>
 800c3d6:	3904      	subs	r1, #4
 800c3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3e0:	459c      	cmp	ip, r3
 800c3e2:	d8f9      	bhi.n	800c3d8 <__lshift+0xc0>
 800c3e4:	e7ea      	b.n	800c3bc <__lshift+0xa4>
 800c3e6:	bf00      	nop
 800c3e8:	0800fa56 	.word	0x0800fa56
 800c3ec:	0800fa67 	.word	0x0800fa67

0800c3f0 <__mcmp>:
 800c3f0:	b530      	push	{r4, r5, lr}
 800c3f2:	6902      	ldr	r2, [r0, #16]
 800c3f4:	690c      	ldr	r4, [r1, #16]
 800c3f6:	1b12      	subs	r2, r2, r4
 800c3f8:	d10e      	bne.n	800c418 <__mcmp+0x28>
 800c3fa:	f100 0314 	add.w	r3, r0, #20
 800c3fe:	3114      	adds	r1, #20
 800c400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c40c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c410:	42a5      	cmp	r5, r4
 800c412:	d003      	beq.n	800c41c <__mcmp+0x2c>
 800c414:	d305      	bcc.n	800c422 <__mcmp+0x32>
 800c416:	2201      	movs	r2, #1
 800c418:	4610      	mov	r0, r2
 800c41a:	bd30      	pop	{r4, r5, pc}
 800c41c:	4283      	cmp	r3, r0
 800c41e:	d3f3      	bcc.n	800c408 <__mcmp+0x18>
 800c420:	e7fa      	b.n	800c418 <__mcmp+0x28>
 800c422:	f04f 32ff 	mov.w	r2, #4294967295
 800c426:	e7f7      	b.n	800c418 <__mcmp+0x28>

0800c428 <__mdiff>:
 800c428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	460c      	mov	r4, r1
 800c42e:	4606      	mov	r6, r0
 800c430:	4611      	mov	r1, r2
 800c432:	4620      	mov	r0, r4
 800c434:	4690      	mov	r8, r2
 800c436:	f7ff ffdb 	bl	800c3f0 <__mcmp>
 800c43a:	1e05      	subs	r5, r0, #0
 800c43c:	d110      	bne.n	800c460 <__mdiff+0x38>
 800c43e:	4629      	mov	r1, r5
 800c440:	4630      	mov	r0, r6
 800c442:	f7ff fd0f 	bl	800be64 <_Balloc>
 800c446:	b930      	cbnz	r0, 800c456 <__mdiff+0x2e>
 800c448:	4b3a      	ldr	r3, [pc, #232]	; (800c534 <__mdiff+0x10c>)
 800c44a:	4602      	mov	r2, r0
 800c44c:	f240 2137 	movw	r1, #567	; 0x237
 800c450:	4839      	ldr	r0, [pc, #228]	; (800c538 <__mdiff+0x110>)
 800c452:	f001 fa95 	bl	800d980 <__assert_func>
 800c456:	2301      	movs	r3, #1
 800c458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	bfa4      	itt	ge
 800c462:	4643      	movge	r3, r8
 800c464:	46a0      	movge	r8, r4
 800c466:	4630      	mov	r0, r6
 800c468:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c46c:	bfa6      	itte	ge
 800c46e:	461c      	movge	r4, r3
 800c470:	2500      	movge	r5, #0
 800c472:	2501      	movlt	r5, #1
 800c474:	f7ff fcf6 	bl	800be64 <_Balloc>
 800c478:	b920      	cbnz	r0, 800c484 <__mdiff+0x5c>
 800c47a:	4b2e      	ldr	r3, [pc, #184]	; (800c534 <__mdiff+0x10c>)
 800c47c:	4602      	mov	r2, r0
 800c47e:	f240 2145 	movw	r1, #581	; 0x245
 800c482:	e7e5      	b.n	800c450 <__mdiff+0x28>
 800c484:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c488:	6926      	ldr	r6, [r4, #16]
 800c48a:	60c5      	str	r5, [r0, #12]
 800c48c:	f104 0914 	add.w	r9, r4, #20
 800c490:	f108 0514 	add.w	r5, r8, #20
 800c494:	f100 0e14 	add.w	lr, r0, #20
 800c498:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c49c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4a0:	f108 0210 	add.w	r2, r8, #16
 800c4a4:	46f2      	mov	sl, lr
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4b0:	fa11 f88b 	uxtah	r8, r1, fp
 800c4b4:	b299      	uxth	r1, r3
 800c4b6:	0c1b      	lsrs	r3, r3, #16
 800c4b8:	eba8 0801 	sub.w	r8, r8, r1
 800c4bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4c4:	fa1f f888 	uxth.w	r8, r8
 800c4c8:	1419      	asrs	r1, r3, #16
 800c4ca:	454e      	cmp	r6, r9
 800c4cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4d0:	f84a 3b04 	str.w	r3, [sl], #4
 800c4d4:	d8e8      	bhi.n	800c4a8 <__mdiff+0x80>
 800c4d6:	1b33      	subs	r3, r6, r4
 800c4d8:	3b15      	subs	r3, #21
 800c4da:	f023 0303 	bic.w	r3, r3, #3
 800c4de:	3304      	adds	r3, #4
 800c4e0:	3415      	adds	r4, #21
 800c4e2:	42a6      	cmp	r6, r4
 800c4e4:	bf38      	it	cc
 800c4e6:	2304      	movcc	r3, #4
 800c4e8:	441d      	add	r5, r3
 800c4ea:	4473      	add	r3, lr
 800c4ec:	469e      	mov	lr, r3
 800c4ee:	462e      	mov	r6, r5
 800c4f0:	4566      	cmp	r6, ip
 800c4f2:	d30e      	bcc.n	800c512 <__mdiff+0xea>
 800c4f4:	f10c 0203 	add.w	r2, ip, #3
 800c4f8:	1b52      	subs	r2, r2, r5
 800c4fa:	f022 0203 	bic.w	r2, r2, #3
 800c4fe:	3d03      	subs	r5, #3
 800c500:	45ac      	cmp	ip, r5
 800c502:	bf38      	it	cc
 800c504:	2200      	movcc	r2, #0
 800c506:	4413      	add	r3, r2
 800c508:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c50c:	b17a      	cbz	r2, 800c52e <__mdiff+0x106>
 800c50e:	6107      	str	r7, [r0, #16]
 800c510:	e7a4      	b.n	800c45c <__mdiff+0x34>
 800c512:	f856 8b04 	ldr.w	r8, [r6], #4
 800c516:	fa11 f288 	uxtah	r2, r1, r8
 800c51a:	1414      	asrs	r4, r2, #16
 800c51c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c520:	b292      	uxth	r2, r2
 800c522:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c526:	f84e 2b04 	str.w	r2, [lr], #4
 800c52a:	1421      	asrs	r1, r4, #16
 800c52c:	e7e0      	b.n	800c4f0 <__mdiff+0xc8>
 800c52e:	3f01      	subs	r7, #1
 800c530:	e7ea      	b.n	800c508 <__mdiff+0xe0>
 800c532:	bf00      	nop
 800c534:	0800fa56 	.word	0x0800fa56
 800c538:	0800fa67 	.word	0x0800fa67

0800c53c <__ulp>:
 800c53c:	b082      	sub	sp, #8
 800c53e:	ed8d 0b00 	vstr	d0, [sp]
 800c542:	9a01      	ldr	r2, [sp, #4]
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <__ulp+0x48>)
 800c546:	4013      	ands	r3, r2
 800c548:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dc08      	bgt.n	800c562 <__ulp+0x26>
 800c550:	425b      	negs	r3, r3
 800c552:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c556:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c55a:	da04      	bge.n	800c566 <__ulp+0x2a>
 800c55c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c560:	4113      	asrs	r3, r2
 800c562:	2200      	movs	r2, #0
 800c564:	e008      	b.n	800c578 <__ulp+0x3c>
 800c566:	f1a2 0314 	sub.w	r3, r2, #20
 800c56a:	2b1e      	cmp	r3, #30
 800c56c:	bfda      	itte	le
 800c56e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c572:	40da      	lsrle	r2, r3
 800c574:	2201      	movgt	r2, #1
 800c576:	2300      	movs	r3, #0
 800c578:	4619      	mov	r1, r3
 800c57a:	4610      	mov	r0, r2
 800c57c:	ec41 0b10 	vmov	d0, r0, r1
 800c580:	b002      	add	sp, #8
 800c582:	4770      	bx	lr
 800c584:	7ff00000 	.word	0x7ff00000

0800c588 <__b2d>:
 800c588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c58c:	6906      	ldr	r6, [r0, #16]
 800c58e:	f100 0814 	add.w	r8, r0, #20
 800c592:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c596:	1f37      	subs	r7, r6, #4
 800c598:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c59c:	4610      	mov	r0, r2
 800c59e:	f7ff fd53 	bl	800c048 <__hi0bits>
 800c5a2:	f1c0 0320 	rsb	r3, r0, #32
 800c5a6:	280a      	cmp	r0, #10
 800c5a8:	600b      	str	r3, [r1, #0]
 800c5aa:	491b      	ldr	r1, [pc, #108]	; (800c618 <__b2d+0x90>)
 800c5ac:	dc15      	bgt.n	800c5da <__b2d+0x52>
 800c5ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800c5b2:	fa22 f30c 	lsr.w	r3, r2, ip
 800c5b6:	45b8      	cmp	r8, r7
 800c5b8:	ea43 0501 	orr.w	r5, r3, r1
 800c5bc:	bf34      	ite	cc
 800c5be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5c2:	2300      	movcs	r3, #0
 800c5c4:	3015      	adds	r0, #21
 800c5c6:	fa02 f000 	lsl.w	r0, r2, r0
 800c5ca:	fa23 f30c 	lsr.w	r3, r3, ip
 800c5ce:	4303      	orrs	r3, r0
 800c5d0:	461c      	mov	r4, r3
 800c5d2:	ec45 4b10 	vmov	d0, r4, r5
 800c5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5da:	45b8      	cmp	r8, r7
 800c5dc:	bf3a      	itte	cc
 800c5de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5e2:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5e6:	2300      	movcs	r3, #0
 800c5e8:	380b      	subs	r0, #11
 800c5ea:	d012      	beq.n	800c612 <__b2d+0x8a>
 800c5ec:	f1c0 0120 	rsb	r1, r0, #32
 800c5f0:	fa23 f401 	lsr.w	r4, r3, r1
 800c5f4:	4082      	lsls	r2, r0
 800c5f6:	4322      	orrs	r2, r4
 800c5f8:	4547      	cmp	r7, r8
 800c5fa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c5fe:	bf8c      	ite	hi
 800c600:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c604:	2200      	movls	r2, #0
 800c606:	4083      	lsls	r3, r0
 800c608:	40ca      	lsrs	r2, r1
 800c60a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c60e:	4313      	orrs	r3, r2
 800c610:	e7de      	b.n	800c5d0 <__b2d+0x48>
 800c612:	ea42 0501 	orr.w	r5, r2, r1
 800c616:	e7db      	b.n	800c5d0 <__b2d+0x48>
 800c618:	3ff00000 	.word	0x3ff00000

0800c61c <__d2b>:
 800c61c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c620:	460f      	mov	r7, r1
 800c622:	2101      	movs	r1, #1
 800c624:	ec59 8b10 	vmov	r8, r9, d0
 800c628:	4616      	mov	r6, r2
 800c62a:	f7ff fc1b 	bl	800be64 <_Balloc>
 800c62e:	4604      	mov	r4, r0
 800c630:	b930      	cbnz	r0, 800c640 <__d2b+0x24>
 800c632:	4602      	mov	r2, r0
 800c634:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <__d2b+0xac>)
 800c636:	4825      	ldr	r0, [pc, #148]	; (800c6cc <__d2b+0xb0>)
 800c638:	f240 310f 	movw	r1, #783	; 0x30f
 800c63c:	f001 f9a0 	bl	800d980 <__assert_func>
 800c640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c648:	bb2d      	cbnz	r5, 800c696 <__d2b+0x7a>
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	f1b8 0300 	subs.w	r3, r8, #0
 800c650:	d026      	beq.n	800c6a0 <__d2b+0x84>
 800c652:	4668      	mov	r0, sp
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	f7ff fd17 	bl	800c088 <__lo0bits>
 800c65a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c65e:	b1e8      	cbz	r0, 800c69c <__d2b+0x80>
 800c660:	f1c0 0320 	rsb	r3, r0, #32
 800c664:	fa02 f303 	lsl.w	r3, r2, r3
 800c668:	430b      	orrs	r3, r1
 800c66a:	40c2      	lsrs	r2, r0
 800c66c:	6163      	str	r3, [r4, #20]
 800c66e:	9201      	str	r2, [sp, #4]
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	61a3      	str	r3, [r4, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	bf14      	ite	ne
 800c678:	2202      	movne	r2, #2
 800c67a:	2201      	moveq	r2, #1
 800c67c:	6122      	str	r2, [r4, #16]
 800c67e:	b1bd      	cbz	r5, 800c6b0 <__d2b+0x94>
 800c680:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c684:	4405      	add	r5, r0
 800c686:	603d      	str	r5, [r7, #0]
 800c688:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c68c:	6030      	str	r0, [r6, #0]
 800c68e:	4620      	mov	r0, r4
 800c690:	b003      	add	sp, #12
 800c692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c69a:	e7d6      	b.n	800c64a <__d2b+0x2e>
 800c69c:	6161      	str	r1, [r4, #20]
 800c69e:	e7e7      	b.n	800c670 <__d2b+0x54>
 800c6a0:	a801      	add	r0, sp, #4
 800c6a2:	f7ff fcf1 	bl	800c088 <__lo0bits>
 800c6a6:	9b01      	ldr	r3, [sp, #4]
 800c6a8:	6163      	str	r3, [r4, #20]
 800c6aa:	3020      	adds	r0, #32
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	e7e5      	b.n	800c67c <__d2b+0x60>
 800c6b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6b8:	6038      	str	r0, [r7, #0]
 800c6ba:	6918      	ldr	r0, [r3, #16]
 800c6bc:	f7ff fcc4 	bl	800c048 <__hi0bits>
 800c6c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6c4:	e7e2      	b.n	800c68c <__d2b+0x70>
 800c6c6:	bf00      	nop
 800c6c8:	0800fa56 	.word	0x0800fa56
 800c6cc:	0800fa67 	.word	0x0800fa67

0800c6d0 <__ratio>:
 800c6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	4688      	mov	r8, r1
 800c6d6:	4669      	mov	r1, sp
 800c6d8:	4681      	mov	r9, r0
 800c6da:	f7ff ff55 	bl	800c588 <__b2d>
 800c6de:	a901      	add	r1, sp, #4
 800c6e0:	4640      	mov	r0, r8
 800c6e2:	ec55 4b10 	vmov	r4, r5, d0
 800c6e6:	f7ff ff4f 	bl	800c588 <__b2d>
 800c6ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c6f2:	eba3 0c02 	sub.w	ip, r3, r2
 800c6f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6fa:	1a9b      	subs	r3, r3, r2
 800c6fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c700:	ec51 0b10 	vmov	r0, r1, d0
 800c704:	2b00      	cmp	r3, #0
 800c706:	bfd6      	itet	le
 800c708:	460a      	movle	r2, r1
 800c70a:	462a      	movgt	r2, r5
 800c70c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c710:	468b      	mov	fp, r1
 800c712:	462f      	mov	r7, r5
 800c714:	bfd4      	ite	le
 800c716:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c71a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c71e:	4620      	mov	r0, r4
 800c720:	ee10 2a10 	vmov	r2, s0
 800c724:	465b      	mov	r3, fp
 800c726:	4639      	mov	r1, r7
 800c728:	f7f4 f890 	bl	800084c <__aeabi_ddiv>
 800c72c:	ec41 0b10 	vmov	d0, r0, r1
 800c730:	b003      	add	sp, #12
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c736 <__copybits>:
 800c736:	3901      	subs	r1, #1
 800c738:	b570      	push	{r4, r5, r6, lr}
 800c73a:	1149      	asrs	r1, r1, #5
 800c73c:	6914      	ldr	r4, [r2, #16]
 800c73e:	3101      	adds	r1, #1
 800c740:	f102 0314 	add.w	r3, r2, #20
 800c744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c748:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c74c:	1f05      	subs	r5, r0, #4
 800c74e:	42a3      	cmp	r3, r4
 800c750:	d30c      	bcc.n	800c76c <__copybits+0x36>
 800c752:	1aa3      	subs	r3, r4, r2
 800c754:	3b11      	subs	r3, #17
 800c756:	f023 0303 	bic.w	r3, r3, #3
 800c75a:	3211      	adds	r2, #17
 800c75c:	42a2      	cmp	r2, r4
 800c75e:	bf88      	it	hi
 800c760:	2300      	movhi	r3, #0
 800c762:	4418      	add	r0, r3
 800c764:	2300      	movs	r3, #0
 800c766:	4288      	cmp	r0, r1
 800c768:	d305      	bcc.n	800c776 <__copybits+0x40>
 800c76a:	bd70      	pop	{r4, r5, r6, pc}
 800c76c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c770:	f845 6f04 	str.w	r6, [r5, #4]!
 800c774:	e7eb      	b.n	800c74e <__copybits+0x18>
 800c776:	f840 3b04 	str.w	r3, [r0], #4
 800c77a:	e7f4      	b.n	800c766 <__copybits+0x30>

0800c77c <__any_on>:
 800c77c:	f100 0214 	add.w	r2, r0, #20
 800c780:	6900      	ldr	r0, [r0, #16]
 800c782:	114b      	asrs	r3, r1, #5
 800c784:	4298      	cmp	r0, r3
 800c786:	b510      	push	{r4, lr}
 800c788:	db11      	blt.n	800c7ae <__any_on+0x32>
 800c78a:	dd0a      	ble.n	800c7a2 <__any_on+0x26>
 800c78c:	f011 011f 	ands.w	r1, r1, #31
 800c790:	d007      	beq.n	800c7a2 <__any_on+0x26>
 800c792:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c796:	fa24 f001 	lsr.w	r0, r4, r1
 800c79a:	fa00 f101 	lsl.w	r1, r0, r1
 800c79e:	428c      	cmp	r4, r1
 800c7a0:	d10b      	bne.n	800c7ba <__any_on+0x3e>
 800c7a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d803      	bhi.n	800c7b2 <__any_on+0x36>
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	e7f7      	b.n	800c7a2 <__any_on+0x26>
 800c7b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7b6:	2900      	cmp	r1, #0
 800c7b8:	d0f5      	beq.n	800c7a6 <__any_on+0x2a>
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	e7f6      	b.n	800c7ac <__any_on+0x30>

0800c7be <sulp>:
 800c7be:	b570      	push	{r4, r5, r6, lr}
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	ec45 4b10 	vmov	d0, r4, r5
 800c7c8:	4616      	mov	r6, r2
 800c7ca:	f7ff feb7 	bl	800c53c <__ulp>
 800c7ce:	ec51 0b10 	vmov	r0, r1, d0
 800c7d2:	b17e      	cbz	r6, 800c7f4 <sulp+0x36>
 800c7d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dd09      	ble.n	800c7f4 <sulp+0x36>
 800c7e0:	051b      	lsls	r3, r3, #20
 800c7e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c7e6:	2400      	movs	r4, #0
 800c7e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	462b      	mov	r3, r5
 800c7f0:	f7f3 ff02 	bl	80005f8 <__aeabi_dmul>
 800c7f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7f8 <_strtod_l>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	ed2d 8b02 	vpush	{d8}
 800c800:	b09b      	sub	sp, #108	; 0x6c
 800c802:	4604      	mov	r4, r0
 800c804:	9213      	str	r2, [sp, #76]	; 0x4c
 800c806:	2200      	movs	r2, #0
 800c808:	9216      	str	r2, [sp, #88]	; 0x58
 800c80a:	460d      	mov	r5, r1
 800c80c:	f04f 0800 	mov.w	r8, #0
 800c810:	f04f 0900 	mov.w	r9, #0
 800c814:	460a      	mov	r2, r1
 800c816:	9215      	str	r2, [sp, #84]	; 0x54
 800c818:	7811      	ldrb	r1, [r2, #0]
 800c81a:	292b      	cmp	r1, #43	; 0x2b
 800c81c:	d04c      	beq.n	800c8b8 <_strtod_l+0xc0>
 800c81e:	d83a      	bhi.n	800c896 <_strtod_l+0x9e>
 800c820:	290d      	cmp	r1, #13
 800c822:	d834      	bhi.n	800c88e <_strtod_l+0x96>
 800c824:	2908      	cmp	r1, #8
 800c826:	d834      	bhi.n	800c892 <_strtod_l+0x9a>
 800c828:	2900      	cmp	r1, #0
 800c82a:	d03d      	beq.n	800c8a8 <_strtod_l+0xb0>
 800c82c:	2200      	movs	r2, #0
 800c82e:	920a      	str	r2, [sp, #40]	; 0x28
 800c830:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c832:	7832      	ldrb	r2, [r6, #0]
 800c834:	2a30      	cmp	r2, #48	; 0x30
 800c836:	f040 80b4 	bne.w	800c9a2 <_strtod_l+0x1aa>
 800c83a:	7872      	ldrb	r2, [r6, #1]
 800c83c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c840:	2a58      	cmp	r2, #88	; 0x58
 800c842:	d170      	bne.n	800c926 <_strtod_l+0x12e>
 800c844:	9302      	str	r3, [sp, #8]
 800c846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	ab16      	add	r3, sp, #88	; 0x58
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	4a8e      	ldr	r2, [pc, #568]	; (800ca88 <_strtod_l+0x290>)
 800c850:	ab17      	add	r3, sp, #92	; 0x5c
 800c852:	a915      	add	r1, sp, #84	; 0x54
 800c854:	4620      	mov	r0, r4
 800c856:	f001 f92f 	bl	800dab8 <__gethex>
 800c85a:	f010 070f 	ands.w	r7, r0, #15
 800c85e:	4605      	mov	r5, r0
 800c860:	d005      	beq.n	800c86e <_strtod_l+0x76>
 800c862:	2f06      	cmp	r7, #6
 800c864:	d12a      	bne.n	800c8bc <_strtod_l+0xc4>
 800c866:	3601      	adds	r6, #1
 800c868:	2300      	movs	r3, #0
 800c86a:	9615      	str	r6, [sp, #84]	; 0x54
 800c86c:	930a      	str	r3, [sp, #40]	; 0x28
 800c86e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c870:	2b00      	cmp	r3, #0
 800c872:	f040 857f 	bne.w	800d374 <_strtod_l+0xb7c>
 800c876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c878:	b1db      	cbz	r3, 800c8b2 <_strtod_l+0xba>
 800c87a:	4642      	mov	r2, r8
 800c87c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c880:	ec43 2b10 	vmov	d0, r2, r3
 800c884:	b01b      	add	sp, #108	; 0x6c
 800c886:	ecbd 8b02 	vpop	{d8}
 800c88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88e:	2920      	cmp	r1, #32
 800c890:	d1cc      	bne.n	800c82c <_strtod_l+0x34>
 800c892:	3201      	adds	r2, #1
 800c894:	e7bf      	b.n	800c816 <_strtod_l+0x1e>
 800c896:	292d      	cmp	r1, #45	; 0x2d
 800c898:	d1c8      	bne.n	800c82c <_strtod_l+0x34>
 800c89a:	2101      	movs	r1, #1
 800c89c:	910a      	str	r1, [sp, #40]	; 0x28
 800c89e:	1c51      	adds	r1, r2, #1
 800c8a0:	9115      	str	r1, [sp, #84]	; 0x54
 800c8a2:	7852      	ldrb	r2, [r2, #1]
 800c8a4:	2a00      	cmp	r2, #0
 800c8a6:	d1c3      	bne.n	800c830 <_strtod_l+0x38>
 800c8a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8aa:	9515      	str	r5, [sp, #84]	; 0x54
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f040 855f 	bne.w	800d370 <_strtod_l+0xb78>
 800c8b2:	4642      	mov	r2, r8
 800c8b4:	464b      	mov	r3, r9
 800c8b6:	e7e3      	b.n	800c880 <_strtod_l+0x88>
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	e7ef      	b.n	800c89c <_strtod_l+0xa4>
 800c8bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c8be:	b13a      	cbz	r2, 800c8d0 <_strtod_l+0xd8>
 800c8c0:	2135      	movs	r1, #53	; 0x35
 800c8c2:	a818      	add	r0, sp, #96	; 0x60
 800c8c4:	f7ff ff37 	bl	800c736 <__copybits>
 800c8c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7ff fb0a 	bl	800bee4 <_Bfree>
 800c8d0:	3f01      	subs	r7, #1
 800c8d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8d4:	2f04      	cmp	r7, #4
 800c8d6:	d806      	bhi.n	800c8e6 <_strtod_l+0xee>
 800c8d8:	e8df f007 	tbb	[pc, r7]
 800c8dc:	201d0314 	.word	0x201d0314
 800c8e0:	14          	.byte	0x14
 800c8e1:	00          	.byte	0x00
 800c8e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c8e6:	05e9      	lsls	r1, r5, #23
 800c8e8:	bf48      	it	mi
 800c8ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c8ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8f2:	0d1b      	lsrs	r3, r3, #20
 800c8f4:	051b      	lsls	r3, r3, #20
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1b9      	bne.n	800c86e <_strtod_l+0x76>
 800c8fa:	f7fe faf5 	bl	800aee8 <__errno>
 800c8fe:	2322      	movs	r3, #34	; 0x22
 800c900:	6003      	str	r3, [r0, #0]
 800c902:	e7b4      	b.n	800c86e <_strtod_l+0x76>
 800c904:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c908:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c90c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c910:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c914:	e7e7      	b.n	800c8e6 <_strtod_l+0xee>
 800c916:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ca90 <_strtod_l+0x298>
 800c91a:	e7e4      	b.n	800c8e6 <_strtod_l+0xee>
 800c91c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c920:	f04f 38ff 	mov.w	r8, #4294967295
 800c924:	e7df      	b.n	800c8e6 <_strtod_l+0xee>
 800c926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	9215      	str	r2, [sp, #84]	; 0x54
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b30      	cmp	r3, #48	; 0x30
 800c930:	d0f9      	beq.n	800c926 <_strtod_l+0x12e>
 800c932:	2b00      	cmp	r3, #0
 800c934:	d09b      	beq.n	800c86e <_strtod_l+0x76>
 800c936:	2301      	movs	r3, #1
 800c938:	f04f 0a00 	mov.w	sl, #0
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c940:	930b      	str	r3, [sp, #44]	; 0x2c
 800c942:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c946:	46d3      	mov	fp, sl
 800c948:	220a      	movs	r2, #10
 800c94a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c94c:	7806      	ldrb	r6, [r0, #0]
 800c94e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c952:	b2d9      	uxtb	r1, r3
 800c954:	2909      	cmp	r1, #9
 800c956:	d926      	bls.n	800c9a6 <_strtod_l+0x1ae>
 800c958:	494c      	ldr	r1, [pc, #304]	; (800ca8c <_strtod_l+0x294>)
 800c95a:	2201      	movs	r2, #1
 800c95c:	f000 ffe6 	bl	800d92c <strncmp>
 800c960:	2800      	cmp	r0, #0
 800c962:	d030      	beq.n	800c9c6 <_strtod_l+0x1ce>
 800c964:	2000      	movs	r0, #0
 800c966:	4632      	mov	r2, r6
 800c968:	9005      	str	r0, [sp, #20]
 800c96a:	465e      	mov	r6, fp
 800c96c:	4603      	mov	r3, r0
 800c96e:	2a65      	cmp	r2, #101	; 0x65
 800c970:	d001      	beq.n	800c976 <_strtod_l+0x17e>
 800c972:	2a45      	cmp	r2, #69	; 0x45
 800c974:	d113      	bne.n	800c99e <_strtod_l+0x1a6>
 800c976:	b91e      	cbnz	r6, 800c980 <_strtod_l+0x188>
 800c978:	9a04      	ldr	r2, [sp, #16]
 800c97a:	4302      	orrs	r2, r0
 800c97c:	d094      	beq.n	800c8a8 <_strtod_l+0xb0>
 800c97e:	2600      	movs	r6, #0
 800c980:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c982:	1c6a      	adds	r2, r5, #1
 800c984:	9215      	str	r2, [sp, #84]	; 0x54
 800c986:	786a      	ldrb	r2, [r5, #1]
 800c988:	2a2b      	cmp	r2, #43	; 0x2b
 800c98a:	d074      	beq.n	800ca76 <_strtod_l+0x27e>
 800c98c:	2a2d      	cmp	r2, #45	; 0x2d
 800c98e:	d078      	beq.n	800ca82 <_strtod_l+0x28a>
 800c990:	f04f 0c00 	mov.w	ip, #0
 800c994:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c998:	2909      	cmp	r1, #9
 800c99a:	d97f      	bls.n	800ca9c <_strtod_l+0x2a4>
 800c99c:	9515      	str	r5, [sp, #84]	; 0x54
 800c99e:	2700      	movs	r7, #0
 800c9a0:	e09e      	b.n	800cae0 <_strtod_l+0x2e8>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e7c8      	b.n	800c938 <_strtod_l+0x140>
 800c9a6:	f1bb 0f08 	cmp.w	fp, #8
 800c9aa:	bfd8      	it	le
 800c9ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c9ae:	f100 0001 	add.w	r0, r0, #1
 800c9b2:	bfda      	itte	le
 800c9b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c9b8:	9309      	strle	r3, [sp, #36]	; 0x24
 800c9ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c9be:	f10b 0b01 	add.w	fp, fp, #1
 800c9c2:	9015      	str	r0, [sp, #84]	; 0x54
 800c9c4:	e7c1      	b.n	800c94a <_strtod_l+0x152>
 800c9c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	9215      	str	r2, [sp, #84]	; 0x54
 800c9cc:	785a      	ldrb	r2, [r3, #1]
 800c9ce:	f1bb 0f00 	cmp.w	fp, #0
 800c9d2:	d037      	beq.n	800ca44 <_strtod_l+0x24c>
 800c9d4:	9005      	str	r0, [sp, #20]
 800c9d6:	465e      	mov	r6, fp
 800c9d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c9dc:	2b09      	cmp	r3, #9
 800c9de:	d912      	bls.n	800ca06 <_strtod_l+0x20e>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e7c4      	b.n	800c96e <_strtod_l+0x176>
 800c9e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	9215      	str	r2, [sp, #84]	; 0x54
 800c9ea:	785a      	ldrb	r2, [r3, #1]
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	2a30      	cmp	r2, #48	; 0x30
 800c9f0:	d0f8      	beq.n	800c9e4 <_strtod_l+0x1ec>
 800c9f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c9f6:	2b08      	cmp	r3, #8
 800c9f8:	f200 84c1 	bhi.w	800d37e <_strtod_l+0xb86>
 800c9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9fe:	9005      	str	r0, [sp, #20]
 800ca00:	2000      	movs	r0, #0
 800ca02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca04:	4606      	mov	r6, r0
 800ca06:	3a30      	subs	r2, #48	; 0x30
 800ca08:	f100 0301 	add.w	r3, r0, #1
 800ca0c:	d014      	beq.n	800ca38 <_strtod_l+0x240>
 800ca0e:	9905      	ldr	r1, [sp, #20]
 800ca10:	4419      	add	r1, r3
 800ca12:	9105      	str	r1, [sp, #20]
 800ca14:	4633      	mov	r3, r6
 800ca16:	eb00 0c06 	add.w	ip, r0, r6
 800ca1a:	210a      	movs	r1, #10
 800ca1c:	4563      	cmp	r3, ip
 800ca1e:	d113      	bne.n	800ca48 <_strtod_l+0x250>
 800ca20:	1833      	adds	r3, r6, r0
 800ca22:	2b08      	cmp	r3, #8
 800ca24:	f106 0601 	add.w	r6, r6, #1
 800ca28:	4406      	add	r6, r0
 800ca2a:	dc1a      	bgt.n	800ca62 <_strtod_l+0x26a>
 800ca2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca2e:	230a      	movs	r3, #10
 800ca30:	fb03 2301 	mla	r3, r3, r1, r2
 800ca34:	9309      	str	r3, [sp, #36]	; 0x24
 800ca36:	2300      	movs	r3, #0
 800ca38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ca3a:	1c51      	adds	r1, r2, #1
 800ca3c:	9115      	str	r1, [sp, #84]	; 0x54
 800ca3e:	7852      	ldrb	r2, [r2, #1]
 800ca40:	4618      	mov	r0, r3
 800ca42:	e7c9      	b.n	800c9d8 <_strtod_l+0x1e0>
 800ca44:	4658      	mov	r0, fp
 800ca46:	e7d2      	b.n	800c9ee <_strtod_l+0x1f6>
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	f103 0301 	add.w	r3, r3, #1
 800ca4e:	dc03      	bgt.n	800ca58 <_strtod_l+0x260>
 800ca50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ca52:	434f      	muls	r7, r1
 800ca54:	9709      	str	r7, [sp, #36]	; 0x24
 800ca56:	e7e1      	b.n	800ca1c <_strtod_l+0x224>
 800ca58:	2b10      	cmp	r3, #16
 800ca5a:	bfd8      	it	le
 800ca5c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ca60:	e7dc      	b.n	800ca1c <_strtod_l+0x224>
 800ca62:	2e10      	cmp	r6, #16
 800ca64:	bfdc      	itt	le
 800ca66:	230a      	movle	r3, #10
 800ca68:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ca6c:	e7e3      	b.n	800ca36 <_strtod_l+0x23e>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9305      	str	r3, [sp, #20]
 800ca72:	2301      	movs	r3, #1
 800ca74:	e780      	b.n	800c978 <_strtod_l+0x180>
 800ca76:	f04f 0c00 	mov.w	ip, #0
 800ca7a:	1caa      	adds	r2, r5, #2
 800ca7c:	9215      	str	r2, [sp, #84]	; 0x54
 800ca7e:	78aa      	ldrb	r2, [r5, #2]
 800ca80:	e788      	b.n	800c994 <_strtod_l+0x19c>
 800ca82:	f04f 0c01 	mov.w	ip, #1
 800ca86:	e7f8      	b.n	800ca7a <_strtod_l+0x282>
 800ca88:	0800fbc0 	.word	0x0800fbc0
 800ca8c:	0800fbbc 	.word	0x0800fbbc
 800ca90:	7ff00000 	.word	0x7ff00000
 800ca94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ca96:	1c51      	adds	r1, r2, #1
 800ca98:	9115      	str	r1, [sp, #84]	; 0x54
 800ca9a:	7852      	ldrb	r2, [r2, #1]
 800ca9c:	2a30      	cmp	r2, #48	; 0x30
 800ca9e:	d0f9      	beq.n	800ca94 <_strtod_l+0x29c>
 800caa0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800caa4:	2908      	cmp	r1, #8
 800caa6:	f63f af7a 	bhi.w	800c99e <_strtod_l+0x1a6>
 800caaa:	3a30      	subs	r2, #48	; 0x30
 800caac:	9208      	str	r2, [sp, #32]
 800caae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cab0:	920c      	str	r2, [sp, #48]	; 0x30
 800cab2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cab4:	1c57      	adds	r7, r2, #1
 800cab6:	9715      	str	r7, [sp, #84]	; 0x54
 800cab8:	7852      	ldrb	r2, [r2, #1]
 800caba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cabe:	f1be 0f09 	cmp.w	lr, #9
 800cac2:	d938      	bls.n	800cb36 <_strtod_l+0x33e>
 800cac4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cac6:	1a7f      	subs	r7, r7, r1
 800cac8:	2f08      	cmp	r7, #8
 800caca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cace:	dc03      	bgt.n	800cad8 <_strtod_l+0x2e0>
 800cad0:	9908      	ldr	r1, [sp, #32]
 800cad2:	428f      	cmp	r7, r1
 800cad4:	bfa8      	it	ge
 800cad6:	460f      	movge	r7, r1
 800cad8:	f1bc 0f00 	cmp.w	ip, #0
 800cadc:	d000      	beq.n	800cae0 <_strtod_l+0x2e8>
 800cade:	427f      	negs	r7, r7
 800cae0:	2e00      	cmp	r6, #0
 800cae2:	d14f      	bne.n	800cb84 <_strtod_l+0x38c>
 800cae4:	9904      	ldr	r1, [sp, #16]
 800cae6:	4301      	orrs	r1, r0
 800cae8:	f47f aec1 	bne.w	800c86e <_strtod_l+0x76>
 800caec:	2b00      	cmp	r3, #0
 800caee:	f47f aedb 	bne.w	800c8a8 <_strtod_l+0xb0>
 800caf2:	2a69      	cmp	r2, #105	; 0x69
 800caf4:	d029      	beq.n	800cb4a <_strtod_l+0x352>
 800caf6:	dc26      	bgt.n	800cb46 <_strtod_l+0x34e>
 800caf8:	2a49      	cmp	r2, #73	; 0x49
 800cafa:	d026      	beq.n	800cb4a <_strtod_l+0x352>
 800cafc:	2a4e      	cmp	r2, #78	; 0x4e
 800cafe:	f47f aed3 	bne.w	800c8a8 <_strtod_l+0xb0>
 800cb02:	499b      	ldr	r1, [pc, #620]	; (800cd70 <_strtod_l+0x578>)
 800cb04:	a815      	add	r0, sp, #84	; 0x54
 800cb06:	f001 fa17 	bl	800df38 <__match>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	f43f aecc 	beq.w	800c8a8 <_strtod_l+0xb0>
 800cb10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b28      	cmp	r3, #40	; 0x28
 800cb16:	d12f      	bne.n	800cb78 <_strtod_l+0x380>
 800cb18:	4996      	ldr	r1, [pc, #600]	; (800cd74 <_strtod_l+0x57c>)
 800cb1a:	aa18      	add	r2, sp, #96	; 0x60
 800cb1c:	a815      	add	r0, sp, #84	; 0x54
 800cb1e:	f001 fa1f 	bl	800df60 <__hexnan>
 800cb22:	2805      	cmp	r0, #5
 800cb24:	d128      	bne.n	800cb78 <_strtod_l+0x380>
 800cb26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cb30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cb34:	e69b      	b.n	800c86e <_strtod_l+0x76>
 800cb36:	9f08      	ldr	r7, [sp, #32]
 800cb38:	210a      	movs	r1, #10
 800cb3a:	fb01 2107 	mla	r1, r1, r7, r2
 800cb3e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cb42:	9208      	str	r2, [sp, #32]
 800cb44:	e7b5      	b.n	800cab2 <_strtod_l+0x2ba>
 800cb46:	2a6e      	cmp	r2, #110	; 0x6e
 800cb48:	e7d9      	b.n	800cafe <_strtod_l+0x306>
 800cb4a:	498b      	ldr	r1, [pc, #556]	; (800cd78 <_strtod_l+0x580>)
 800cb4c:	a815      	add	r0, sp, #84	; 0x54
 800cb4e:	f001 f9f3 	bl	800df38 <__match>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f43f aea8 	beq.w	800c8a8 <_strtod_l+0xb0>
 800cb58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb5a:	4988      	ldr	r1, [pc, #544]	; (800cd7c <_strtod_l+0x584>)
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	a815      	add	r0, sp, #84	; 0x54
 800cb60:	9315      	str	r3, [sp, #84]	; 0x54
 800cb62:	f001 f9e9 	bl	800df38 <__match>
 800cb66:	b910      	cbnz	r0, 800cb6e <_strtod_l+0x376>
 800cb68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	9315      	str	r3, [sp, #84]	; 0x54
 800cb6e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cd8c <_strtod_l+0x594>
 800cb72:	f04f 0800 	mov.w	r8, #0
 800cb76:	e67a      	b.n	800c86e <_strtod_l+0x76>
 800cb78:	4881      	ldr	r0, [pc, #516]	; (800cd80 <_strtod_l+0x588>)
 800cb7a:	f000 fef9 	bl	800d970 <nan>
 800cb7e:	ec59 8b10 	vmov	r8, r9, d0
 800cb82:	e674      	b.n	800c86e <_strtod_l+0x76>
 800cb84:	9b05      	ldr	r3, [sp, #20]
 800cb86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb88:	1afb      	subs	r3, r7, r3
 800cb8a:	f1bb 0f00 	cmp.w	fp, #0
 800cb8e:	bf08      	it	eq
 800cb90:	46b3      	moveq	fp, r6
 800cb92:	2e10      	cmp	r6, #16
 800cb94:	9308      	str	r3, [sp, #32]
 800cb96:	4635      	mov	r5, r6
 800cb98:	bfa8      	it	ge
 800cb9a:	2510      	movge	r5, #16
 800cb9c:	f7f3 fcb2 	bl	8000504 <__aeabi_ui2d>
 800cba0:	2e09      	cmp	r6, #9
 800cba2:	4680      	mov	r8, r0
 800cba4:	4689      	mov	r9, r1
 800cba6:	dd13      	ble.n	800cbd0 <_strtod_l+0x3d8>
 800cba8:	4b76      	ldr	r3, [pc, #472]	; (800cd84 <_strtod_l+0x58c>)
 800cbaa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cbae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cbb2:	f7f3 fd21 	bl	80005f8 <__aeabi_dmul>
 800cbb6:	4680      	mov	r8, r0
 800cbb8:	4650      	mov	r0, sl
 800cbba:	4689      	mov	r9, r1
 800cbbc:	f7f3 fca2 	bl	8000504 <__aeabi_ui2d>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	f7f3 fb60 	bl	800028c <__adddf3>
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4689      	mov	r9, r1
 800cbd0:	2e0f      	cmp	r6, #15
 800cbd2:	dc38      	bgt.n	800cc46 <_strtod_l+0x44e>
 800cbd4:	9b08      	ldr	r3, [sp, #32]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f43f ae49 	beq.w	800c86e <_strtod_l+0x76>
 800cbdc:	dd24      	ble.n	800cc28 <_strtod_l+0x430>
 800cbde:	2b16      	cmp	r3, #22
 800cbe0:	dc0b      	bgt.n	800cbfa <_strtod_l+0x402>
 800cbe2:	4968      	ldr	r1, [pc, #416]	; (800cd84 <_strtod_l+0x58c>)
 800cbe4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbec:	4642      	mov	r2, r8
 800cbee:	464b      	mov	r3, r9
 800cbf0:	f7f3 fd02 	bl	80005f8 <__aeabi_dmul>
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	4689      	mov	r9, r1
 800cbf8:	e639      	b.n	800c86e <_strtod_l+0x76>
 800cbfa:	9a08      	ldr	r2, [sp, #32]
 800cbfc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cc00:	4293      	cmp	r3, r2
 800cc02:	db20      	blt.n	800cc46 <_strtod_l+0x44e>
 800cc04:	4c5f      	ldr	r4, [pc, #380]	; (800cd84 <_strtod_l+0x58c>)
 800cc06:	f1c6 060f 	rsb	r6, r6, #15
 800cc0a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cc0e:	4642      	mov	r2, r8
 800cc10:	464b      	mov	r3, r9
 800cc12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc16:	f7f3 fcef 	bl	80005f8 <__aeabi_dmul>
 800cc1a:	9b08      	ldr	r3, [sp, #32]
 800cc1c:	1b9e      	subs	r6, r3, r6
 800cc1e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cc22:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc26:	e7e3      	b.n	800cbf0 <_strtod_l+0x3f8>
 800cc28:	9b08      	ldr	r3, [sp, #32]
 800cc2a:	3316      	adds	r3, #22
 800cc2c:	db0b      	blt.n	800cc46 <_strtod_l+0x44e>
 800cc2e:	9b05      	ldr	r3, [sp, #20]
 800cc30:	1bdf      	subs	r7, r3, r7
 800cc32:	4b54      	ldr	r3, [pc, #336]	; (800cd84 <_strtod_l+0x58c>)
 800cc34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 fe04 	bl	800084c <__aeabi_ddiv>
 800cc44:	e7d6      	b.n	800cbf4 <_strtod_l+0x3fc>
 800cc46:	9b08      	ldr	r3, [sp, #32]
 800cc48:	1b75      	subs	r5, r6, r5
 800cc4a:	441d      	add	r5, r3
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	dd70      	ble.n	800cd32 <_strtod_l+0x53a>
 800cc50:	f015 030f 	ands.w	r3, r5, #15
 800cc54:	d00a      	beq.n	800cc6c <_strtod_l+0x474>
 800cc56:	494b      	ldr	r1, [pc, #300]	; (800cd84 <_strtod_l+0x58c>)
 800cc58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc5c:	4642      	mov	r2, r8
 800cc5e:	464b      	mov	r3, r9
 800cc60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc64:	f7f3 fcc8 	bl	80005f8 <__aeabi_dmul>
 800cc68:	4680      	mov	r8, r0
 800cc6a:	4689      	mov	r9, r1
 800cc6c:	f035 050f 	bics.w	r5, r5, #15
 800cc70:	d04d      	beq.n	800cd0e <_strtod_l+0x516>
 800cc72:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cc76:	dd22      	ble.n	800ccbe <_strtod_l+0x4c6>
 800cc78:	2500      	movs	r5, #0
 800cc7a:	46ab      	mov	fp, r5
 800cc7c:	9509      	str	r5, [sp, #36]	; 0x24
 800cc7e:	9505      	str	r5, [sp, #20]
 800cc80:	2322      	movs	r3, #34	; 0x22
 800cc82:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cd8c <_strtod_l+0x594>
 800cc86:	6023      	str	r3, [r4, #0]
 800cc88:	f04f 0800 	mov.w	r8, #0
 800cc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f43f aded 	beq.w	800c86e <_strtod_l+0x76>
 800cc94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cc96:	4620      	mov	r0, r4
 800cc98:	f7ff f924 	bl	800bee4 <_Bfree>
 800cc9c:	9905      	ldr	r1, [sp, #20]
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7ff f920 	bl	800bee4 <_Bfree>
 800cca4:	4659      	mov	r1, fp
 800cca6:	4620      	mov	r0, r4
 800cca8:	f7ff f91c 	bl	800bee4 <_Bfree>
 800ccac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f7ff f918 	bl	800bee4 <_Bfree>
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f7ff f914 	bl	800bee4 <_Bfree>
 800ccbc:	e5d7      	b.n	800c86e <_strtod_l+0x76>
 800ccbe:	4b32      	ldr	r3, [pc, #200]	; (800cd88 <_strtod_l+0x590>)
 800ccc0:	9304      	str	r3, [sp, #16]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	112d      	asrs	r5, r5, #4
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4649      	mov	r1, r9
 800ccca:	469a      	mov	sl, r3
 800cccc:	2d01      	cmp	r5, #1
 800ccce:	dc21      	bgt.n	800cd14 <_strtod_l+0x51c>
 800ccd0:	b10b      	cbz	r3, 800ccd6 <_strtod_l+0x4de>
 800ccd2:	4680      	mov	r8, r0
 800ccd4:	4689      	mov	r9, r1
 800ccd6:	492c      	ldr	r1, [pc, #176]	; (800cd88 <_strtod_l+0x590>)
 800ccd8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ccdc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cce0:	4642      	mov	r2, r8
 800cce2:	464b      	mov	r3, r9
 800cce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce8:	f7f3 fc86 	bl	80005f8 <__aeabi_dmul>
 800ccec:	4b27      	ldr	r3, [pc, #156]	; (800cd8c <_strtod_l+0x594>)
 800ccee:	460a      	mov	r2, r1
 800ccf0:	400b      	ands	r3, r1
 800ccf2:	4927      	ldr	r1, [pc, #156]	; (800cd90 <_strtod_l+0x598>)
 800ccf4:	428b      	cmp	r3, r1
 800ccf6:	4680      	mov	r8, r0
 800ccf8:	d8be      	bhi.n	800cc78 <_strtod_l+0x480>
 800ccfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ccfe:	428b      	cmp	r3, r1
 800cd00:	bf86      	itte	hi
 800cd02:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800cd94 <_strtod_l+0x59c>
 800cd06:	f04f 38ff 	movhi.w	r8, #4294967295
 800cd0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cd0e:	2300      	movs	r3, #0
 800cd10:	9304      	str	r3, [sp, #16]
 800cd12:	e07b      	b.n	800ce0c <_strtod_l+0x614>
 800cd14:	07ea      	lsls	r2, r5, #31
 800cd16:	d505      	bpl.n	800cd24 <_strtod_l+0x52c>
 800cd18:	9b04      	ldr	r3, [sp, #16]
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7f3 fc6b 	bl	80005f8 <__aeabi_dmul>
 800cd22:	2301      	movs	r3, #1
 800cd24:	9a04      	ldr	r2, [sp, #16]
 800cd26:	3208      	adds	r2, #8
 800cd28:	f10a 0a01 	add.w	sl, sl, #1
 800cd2c:	106d      	asrs	r5, r5, #1
 800cd2e:	9204      	str	r2, [sp, #16]
 800cd30:	e7cc      	b.n	800cccc <_strtod_l+0x4d4>
 800cd32:	d0ec      	beq.n	800cd0e <_strtod_l+0x516>
 800cd34:	426d      	negs	r5, r5
 800cd36:	f015 020f 	ands.w	r2, r5, #15
 800cd3a:	d00a      	beq.n	800cd52 <_strtod_l+0x55a>
 800cd3c:	4b11      	ldr	r3, [pc, #68]	; (800cd84 <_strtod_l+0x58c>)
 800cd3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd42:	4640      	mov	r0, r8
 800cd44:	4649      	mov	r1, r9
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7f3 fd7f 	bl	800084c <__aeabi_ddiv>
 800cd4e:	4680      	mov	r8, r0
 800cd50:	4689      	mov	r9, r1
 800cd52:	112d      	asrs	r5, r5, #4
 800cd54:	d0db      	beq.n	800cd0e <_strtod_l+0x516>
 800cd56:	2d1f      	cmp	r5, #31
 800cd58:	dd1e      	ble.n	800cd98 <_strtod_l+0x5a0>
 800cd5a:	2500      	movs	r5, #0
 800cd5c:	46ab      	mov	fp, r5
 800cd5e:	9509      	str	r5, [sp, #36]	; 0x24
 800cd60:	9505      	str	r5, [sp, #20]
 800cd62:	2322      	movs	r3, #34	; 0x22
 800cd64:	f04f 0800 	mov.w	r8, #0
 800cd68:	f04f 0900 	mov.w	r9, #0
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	e78d      	b.n	800cc8c <_strtod_l+0x494>
 800cd70:	0800f9ae 	.word	0x0800f9ae
 800cd74:	0800fbd4 	.word	0x0800fbd4
 800cd78:	0800f9a6 	.word	0x0800f9a6
 800cd7c:	0800f9dd 	.word	0x0800f9dd
 800cd80:	0800fc64 	.word	0x0800fc64
 800cd84:	0800fae8 	.word	0x0800fae8
 800cd88:	0800fac0 	.word	0x0800fac0
 800cd8c:	7ff00000 	.word	0x7ff00000
 800cd90:	7ca00000 	.word	0x7ca00000
 800cd94:	7fefffff 	.word	0x7fefffff
 800cd98:	f015 0310 	ands.w	r3, r5, #16
 800cd9c:	bf18      	it	ne
 800cd9e:	236a      	movne	r3, #106	; 0x6a
 800cda0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d144 <_strtod_l+0x94c>
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	4640      	mov	r0, r8
 800cda8:	4649      	mov	r1, r9
 800cdaa:	2300      	movs	r3, #0
 800cdac:	07ea      	lsls	r2, r5, #31
 800cdae:	d504      	bpl.n	800cdba <_strtod_l+0x5c2>
 800cdb0:	e9da 2300 	ldrd	r2, r3, [sl]
 800cdb4:	f7f3 fc20 	bl	80005f8 <__aeabi_dmul>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	106d      	asrs	r5, r5, #1
 800cdbc:	f10a 0a08 	add.w	sl, sl, #8
 800cdc0:	d1f4      	bne.n	800cdac <_strtod_l+0x5b4>
 800cdc2:	b10b      	cbz	r3, 800cdc8 <_strtod_l+0x5d0>
 800cdc4:	4680      	mov	r8, r0
 800cdc6:	4689      	mov	r9, r1
 800cdc8:	9b04      	ldr	r3, [sp, #16]
 800cdca:	b1bb      	cbz	r3, 800cdfc <_strtod_l+0x604>
 800cdcc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cdd0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	dd10      	ble.n	800cdfc <_strtod_l+0x604>
 800cdda:	2b1f      	cmp	r3, #31
 800cddc:	f340 811e 	ble.w	800d01c <_strtod_l+0x824>
 800cde0:	2b34      	cmp	r3, #52	; 0x34
 800cde2:	bfde      	ittt	le
 800cde4:	f04f 33ff 	movle.w	r3, #4294967295
 800cde8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cdec:	4093      	lslle	r3, r2
 800cdee:	f04f 0800 	mov.w	r8, #0
 800cdf2:	bfcc      	ite	gt
 800cdf4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cdf8:	ea03 0901 	andle.w	r9, r3, r1
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	4640      	mov	r0, r8
 800ce02:	4649      	mov	r1, r9
 800ce04:	f7f3 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1a6      	bne.n	800cd5a <_strtod_l+0x562>
 800ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce12:	4633      	mov	r3, r6
 800ce14:	465a      	mov	r2, fp
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff f8cc 	bl	800bfb4 <__s2b>
 800ce1c:	9009      	str	r0, [sp, #36]	; 0x24
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	f43f af2a 	beq.w	800cc78 <_strtod_l+0x480>
 800ce24:	9a08      	ldr	r2, [sp, #32]
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	eba3 0307 	sub.w	r3, r3, r7
 800ce2e:	bfa8      	it	ge
 800ce30:	2300      	movge	r3, #0
 800ce32:	930c      	str	r3, [sp, #48]	; 0x30
 800ce34:	2500      	movs	r5, #0
 800ce36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce3a:	9312      	str	r3, [sp, #72]	; 0x48
 800ce3c:	46ab      	mov	fp, r5
 800ce3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce40:	4620      	mov	r0, r4
 800ce42:	6859      	ldr	r1, [r3, #4]
 800ce44:	f7ff f80e 	bl	800be64 <_Balloc>
 800ce48:	9005      	str	r0, [sp, #20]
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f43f af18 	beq.w	800cc80 <_strtod_l+0x488>
 800ce50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce52:	691a      	ldr	r2, [r3, #16]
 800ce54:	3202      	adds	r2, #2
 800ce56:	f103 010c 	add.w	r1, r3, #12
 800ce5a:	0092      	lsls	r2, r2, #2
 800ce5c:	300c      	adds	r0, #12
 800ce5e:	f7fe f870 	bl	800af42 <memcpy>
 800ce62:	ec49 8b10 	vmov	d0, r8, r9
 800ce66:	aa18      	add	r2, sp, #96	; 0x60
 800ce68:	a917      	add	r1, sp, #92	; 0x5c
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7ff fbd6 	bl	800c61c <__d2b>
 800ce70:	ec49 8b18 	vmov	d8, r8, r9
 800ce74:	9016      	str	r0, [sp, #88]	; 0x58
 800ce76:	2800      	cmp	r0, #0
 800ce78:	f43f af02 	beq.w	800cc80 <_strtod_l+0x488>
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f7ff f930 	bl	800c0e4 <__i2b>
 800ce84:	4683      	mov	fp, r0
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f43f aefa 	beq.w	800cc80 <_strtod_l+0x488>
 800ce8c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ce8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce90:	2e00      	cmp	r6, #0
 800ce92:	bfab      	itete	ge
 800ce94:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ce96:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ce98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ce9a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ce9e:	bfac      	ite	ge
 800cea0:	eb06 0a03 	addge.w	sl, r6, r3
 800cea4:	1b9f      	sublt	r7, r3, r6
 800cea6:	9b04      	ldr	r3, [sp, #16]
 800cea8:	1af6      	subs	r6, r6, r3
 800ceaa:	4416      	add	r6, r2
 800ceac:	4ba0      	ldr	r3, [pc, #640]	; (800d130 <_strtod_l+0x938>)
 800ceae:	3e01      	subs	r6, #1
 800ceb0:	429e      	cmp	r6, r3
 800ceb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ceb6:	f280 80c4 	bge.w	800d042 <_strtod_l+0x84a>
 800ceba:	1b9b      	subs	r3, r3, r6
 800cebc:	2b1f      	cmp	r3, #31
 800cebe:	eba2 0203 	sub.w	r2, r2, r3
 800cec2:	f04f 0101 	mov.w	r1, #1
 800cec6:	f300 80b0 	bgt.w	800d02a <_strtod_l+0x832>
 800ceca:	fa01 f303 	lsl.w	r3, r1, r3
 800cece:	930e      	str	r3, [sp, #56]	; 0x38
 800ced0:	2300      	movs	r3, #0
 800ced2:	930d      	str	r3, [sp, #52]	; 0x34
 800ced4:	eb0a 0602 	add.w	r6, sl, r2
 800ced8:	9b04      	ldr	r3, [sp, #16]
 800ceda:	45b2      	cmp	sl, r6
 800cedc:	4417      	add	r7, r2
 800cede:	441f      	add	r7, r3
 800cee0:	4653      	mov	r3, sl
 800cee2:	bfa8      	it	ge
 800cee4:	4633      	movge	r3, r6
 800cee6:	42bb      	cmp	r3, r7
 800cee8:	bfa8      	it	ge
 800ceea:	463b      	movge	r3, r7
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bfc2      	ittt	gt
 800cef0:	1af6      	subgt	r6, r6, r3
 800cef2:	1aff      	subgt	r7, r7, r3
 800cef4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800cef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dd17      	ble.n	800cf2e <_strtod_l+0x736>
 800cefe:	4659      	mov	r1, fp
 800cf00:	461a      	mov	r2, r3
 800cf02:	4620      	mov	r0, r4
 800cf04:	f7ff f9ae 	bl	800c264 <__pow5mult>
 800cf08:	4683      	mov	fp, r0
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	f43f aeb8 	beq.w	800cc80 <_strtod_l+0x488>
 800cf10:	4601      	mov	r1, r0
 800cf12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7ff f8fb 	bl	800c110 <__multiply>
 800cf1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	f43f aeaf 	beq.w	800cc80 <_strtod_l+0x488>
 800cf22:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf24:	4620      	mov	r0, r4
 800cf26:	f7fe ffdd 	bl	800bee4 <_Bfree>
 800cf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf2c:	9316      	str	r3, [sp, #88]	; 0x58
 800cf2e:	2e00      	cmp	r6, #0
 800cf30:	f300 808c 	bgt.w	800d04c <_strtod_l+0x854>
 800cf34:	9b08      	ldr	r3, [sp, #32]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	dd08      	ble.n	800cf4c <_strtod_l+0x754>
 800cf3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf3c:	9905      	ldr	r1, [sp, #20]
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f7ff f990 	bl	800c264 <__pow5mult>
 800cf44:	9005      	str	r0, [sp, #20]
 800cf46:	2800      	cmp	r0, #0
 800cf48:	f43f ae9a 	beq.w	800cc80 <_strtod_l+0x488>
 800cf4c:	2f00      	cmp	r7, #0
 800cf4e:	dd08      	ble.n	800cf62 <_strtod_l+0x76a>
 800cf50:	9905      	ldr	r1, [sp, #20]
 800cf52:	463a      	mov	r2, r7
 800cf54:	4620      	mov	r0, r4
 800cf56:	f7ff f9df 	bl	800c318 <__lshift>
 800cf5a:	9005      	str	r0, [sp, #20]
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	f43f ae8f 	beq.w	800cc80 <_strtod_l+0x488>
 800cf62:	f1ba 0f00 	cmp.w	sl, #0
 800cf66:	dd08      	ble.n	800cf7a <_strtod_l+0x782>
 800cf68:	4659      	mov	r1, fp
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7ff f9d3 	bl	800c318 <__lshift>
 800cf72:	4683      	mov	fp, r0
 800cf74:	2800      	cmp	r0, #0
 800cf76:	f43f ae83 	beq.w	800cc80 <_strtod_l+0x488>
 800cf7a:	9a05      	ldr	r2, [sp, #20]
 800cf7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f7ff fa52 	bl	800c428 <__mdiff>
 800cf84:	4605      	mov	r5, r0
 800cf86:	2800      	cmp	r0, #0
 800cf88:	f43f ae7a 	beq.w	800cc80 <_strtod_l+0x488>
 800cf8c:	68c3      	ldr	r3, [r0, #12]
 800cf8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf90:	2300      	movs	r3, #0
 800cf92:	60c3      	str	r3, [r0, #12]
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7ff fa2b 	bl	800c3f0 <__mcmp>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	da60      	bge.n	800d060 <_strtod_l+0x868>
 800cf9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfa0:	ea53 0308 	orrs.w	r3, r3, r8
 800cfa4:	f040 8084 	bne.w	800d0b0 <_strtod_l+0x8b8>
 800cfa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d17f      	bne.n	800d0b0 <_strtod_l+0x8b8>
 800cfb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfb4:	0d1b      	lsrs	r3, r3, #20
 800cfb6:	051b      	lsls	r3, r3, #20
 800cfb8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cfbc:	d978      	bls.n	800d0b0 <_strtod_l+0x8b8>
 800cfbe:	696b      	ldr	r3, [r5, #20]
 800cfc0:	b913      	cbnz	r3, 800cfc8 <_strtod_l+0x7d0>
 800cfc2:	692b      	ldr	r3, [r5, #16]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	dd73      	ble.n	800d0b0 <_strtod_l+0x8b8>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	2201      	movs	r2, #1
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7ff f9a3 	bl	800c318 <__lshift>
 800cfd2:	4659      	mov	r1, fp
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	f7ff fa0b 	bl	800c3f0 <__mcmp>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	dd68      	ble.n	800d0b0 <_strtod_l+0x8b8>
 800cfde:	9904      	ldr	r1, [sp, #16]
 800cfe0:	4a54      	ldr	r2, [pc, #336]	; (800d134 <_strtod_l+0x93c>)
 800cfe2:	464b      	mov	r3, r9
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	f000 8084 	beq.w	800d0f2 <_strtod_l+0x8fa>
 800cfea:	ea02 0109 	and.w	r1, r2, r9
 800cfee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cff2:	dc7e      	bgt.n	800d0f2 <_strtod_l+0x8fa>
 800cff4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cff8:	f77f aeb3 	ble.w	800cd62 <_strtod_l+0x56a>
 800cffc:	4b4e      	ldr	r3, [pc, #312]	; (800d138 <_strtod_l+0x940>)
 800cffe:	4640      	mov	r0, r8
 800d000:	4649      	mov	r1, r9
 800d002:	2200      	movs	r2, #0
 800d004:	f7f3 faf8 	bl	80005f8 <__aeabi_dmul>
 800d008:	4b4a      	ldr	r3, [pc, #296]	; (800d134 <_strtod_l+0x93c>)
 800d00a:	400b      	ands	r3, r1
 800d00c:	4680      	mov	r8, r0
 800d00e:	4689      	mov	r9, r1
 800d010:	2b00      	cmp	r3, #0
 800d012:	f47f ae3f 	bne.w	800cc94 <_strtod_l+0x49c>
 800d016:	2322      	movs	r3, #34	; 0x22
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	e63b      	b.n	800cc94 <_strtod_l+0x49c>
 800d01c:	f04f 32ff 	mov.w	r2, #4294967295
 800d020:	fa02 f303 	lsl.w	r3, r2, r3
 800d024:	ea03 0808 	and.w	r8, r3, r8
 800d028:	e6e8      	b.n	800cdfc <_strtod_l+0x604>
 800d02a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d02e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d032:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d036:	36e2      	adds	r6, #226	; 0xe2
 800d038:	fa01 f306 	lsl.w	r3, r1, r6
 800d03c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d040:	e748      	b.n	800ced4 <_strtod_l+0x6dc>
 800d042:	2100      	movs	r1, #0
 800d044:	2301      	movs	r3, #1
 800d046:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d04a:	e743      	b.n	800ced4 <_strtod_l+0x6dc>
 800d04c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d04e:	4632      	mov	r2, r6
 800d050:	4620      	mov	r0, r4
 800d052:	f7ff f961 	bl	800c318 <__lshift>
 800d056:	9016      	str	r0, [sp, #88]	; 0x58
 800d058:	2800      	cmp	r0, #0
 800d05a:	f47f af6b 	bne.w	800cf34 <_strtod_l+0x73c>
 800d05e:	e60f      	b.n	800cc80 <_strtod_l+0x488>
 800d060:	46ca      	mov	sl, r9
 800d062:	d171      	bne.n	800d148 <_strtod_l+0x950>
 800d064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d066:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d06a:	b352      	cbz	r2, 800d0c2 <_strtod_l+0x8ca>
 800d06c:	4a33      	ldr	r2, [pc, #204]	; (800d13c <_strtod_l+0x944>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d12a      	bne.n	800d0c8 <_strtod_l+0x8d0>
 800d072:	9b04      	ldr	r3, [sp, #16]
 800d074:	4641      	mov	r1, r8
 800d076:	b1fb      	cbz	r3, 800d0b8 <_strtod_l+0x8c0>
 800d078:	4b2e      	ldr	r3, [pc, #184]	; (800d134 <_strtod_l+0x93c>)
 800d07a:	ea09 0303 	and.w	r3, r9, r3
 800d07e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d082:	f04f 32ff 	mov.w	r2, #4294967295
 800d086:	d81a      	bhi.n	800d0be <_strtod_l+0x8c6>
 800d088:	0d1b      	lsrs	r3, r3, #20
 800d08a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d08e:	fa02 f303 	lsl.w	r3, r2, r3
 800d092:	4299      	cmp	r1, r3
 800d094:	d118      	bne.n	800d0c8 <_strtod_l+0x8d0>
 800d096:	4b2a      	ldr	r3, [pc, #168]	; (800d140 <_strtod_l+0x948>)
 800d098:	459a      	cmp	sl, r3
 800d09a:	d102      	bne.n	800d0a2 <_strtod_l+0x8aa>
 800d09c:	3101      	adds	r1, #1
 800d09e:	f43f adef 	beq.w	800cc80 <_strtod_l+0x488>
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <_strtod_l+0x93c>)
 800d0a4:	ea0a 0303 	and.w	r3, sl, r3
 800d0a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d0ac:	f04f 0800 	mov.w	r8, #0
 800d0b0:	9b04      	ldr	r3, [sp, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1a2      	bne.n	800cffc <_strtod_l+0x804>
 800d0b6:	e5ed      	b.n	800cc94 <_strtod_l+0x49c>
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0bc:	e7e9      	b.n	800d092 <_strtod_l+0x89a>
 800d0be:	4613      	mov	r3, r2
 800d0c0:	e7e7      	b.n	800d092 <_strtod_l+0x89a>
 800d0c2:	ea53 0308 	orrs.w	r3, r3, r8
 800d0c6:	d08a      	beq.n	800cfde <_strtod_l+0x7e6>
 800d0c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ca:	b1e3      	cbz	r3, 800d106 <_strtod_l+0x90e>
 800d0cc:	ea13 0f0a 	tst.w	r3, sl
 800d0d0:	d0ee      	beq.n	800d0b0 <_strtod_l+0x8b8>
 800d0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0d4:	9a04      	ldr	r2, [sp, #16]
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	4649      	mov	r1, r9
 800d0da:	b1c3      	cbz	r3, 800d10e <_strtod_l+0x916>
 800d0dc:	f7ff fb6f 	bl	800c7be <sulp>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	ec51 0b18 	vmov	r0, r1, d8
 800d0e8:	f7f3 f8d0 	bl	800028c <__adddf3>
 800d0ec:	4680      	mov	r8, r0
 800d0ee:	4689      	mov	r9, r1
 800d0f0:	e7de      	b.n	800d0b0 <_strtod_l+0x8b8>
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d0f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d0fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d100:	f04f 38ff 	mov.w	r8, #4294967295
 800d104:	e7d4      	b.n	800d0b0 <_strtod_l+0x8b8>
 800d106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d108:	ea13 0f08 	tst.w	r3, r8
 800d10c:	e7e0      	b.n	800d0d0 <_strtod_l+0x8d8>
 800d10e:	f7ff fb56 	bl	800c7be <sulp>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	ec51 0b18 	vmov	r0, r1, d8
 800d11a:	f7f3 f8b5 	bl	8000288 <__aeabi_dsub>
 800d11e:	2200      	movs	r2, #0
 800d120:	2300      	movs	r3, #0
 800d122:	4680      	mov	r8, r0
 800d124:	4689      	mov	r9, r1
 800d126:	f7f3 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d0c0      	beq.n	800d0b0 <_strtod_l+0x8b8>
 800d12e:	e618      	b.n	800cd62 <_strtod_l+0x56a>
 800d130:	fffffc02 	.word	0xfffffc02
 800d134:	7ff00000 	.word	0x7ff00000
 800d138:	39500000 	.word	0x39500000
 800d13c:	000fffff 	.word	0x000fffff
 800d140:	7fefffff 	.word	0x7fefffff
 800d144:	0800fbe8 	.word	0x0800fbe8
 800d148:	4659      	mov	r1, fp
 800d14a:	4628      	mov	r0, r5
 800d14c:	f7ff fac0 	bl	800c6d0 <__ratio>
 800d150:	ec57 6b10 	vmov	r6, r7, d0
 800d154:	ee10 0a10 	vmov	r0, s0
 800d158:	2200      	movs	r2, #0
 800d15a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d15e:	4639      	mov	r1, r7
 800d160:	f7f3 fcc6 	bl	8000af0 <__aeabi_dcmple>
 800d164:	2800      	cmp	r0, #0
 800d166:	d071      	beq.n	800d24c <_strtod_l+0xa54>
 800d168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d17c      	bne.n	800d268 <_strtod_l+0xa70>
 800d16e:	f1b8 0f00 	cmp.w	r8, #0
 800d172:	d15a      	bne.n	800d22a <_strtod_l+0xa32>
 800d174:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d15d      	bne.n	800d238 <_strtod_l+0xa40>
 800d17c:	4b90      	ldr	r3, [pc, #576]	; (800d3c0 <_strtod_l+0xbc8>)
 800d17e:	2200      	movs	r2, #0
 800d180:	4630      	mov	r0, r6
 800d182:	4639      	mov	r1, r7
 800d184:	f7f3 fcaa 	bl	8000adc <__aeabi_dcmplt>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d15c      	bne.n	800d246 <_strtod_l+0xa4e>
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	4b8c      	ldr	r3, [pc, #560]	; (800d3c4 <_strtod_l+0xbcc>)
 800d192:	2200      	movs	r2, #0
 800d194:	f7f3 fa30 	bl	80005f8 <__aeabi_dmul>
 800d198:	4606      	mov	r6, r0
 800d19a:	460f      	mov	r7, r1
 800d19c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d1a0:	9606      	str	r6, [sp, #24]
 800d1a2:	9307      	str	r3, [sp, #28]
 800d1a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d1ac:	4b86      	ldr	r3, [pc, #536]	; (800d3c8 <_strtod_l+0xbd0>)
 800d1ae:	ea0a 0303 	and.w	r3, sl, r3
 800d1b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d1b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1b6:	4b85      	ldr	r3, [pc, #532]	; (800d3cc <_strtod_l+0xbd4>)
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	f040 8090 	bne.w	800d2de <_strtod_l+0xae6>
 800d1be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d1c2:	ec49 8b10 	vmov	d0, r8, r9
 800d1c6:	f7ff f9b9 	bl	800c53c <__ulp>
 800d1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1ce:	ec51 0b10 	vmov	r0, r1, d0
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	4642      	mov	r2, r8
 800d1d8:	464b      	mov	r3, r9
 800d1da:	f7f3 f857 	bl	800028c <__adddf3>
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4979      	ldr	r1, [pc, #484]	; (800d3c8 <_strtod_l+0xbd0>)
 800d1e2:	4a7b      	ldr	r2, [pc, #492]	; (800d3d0 <_strtod_l+0xbd8>)
 800d1e4:	4019      	ands	r1, r3
 800d1e6:	4291      	cmp	r1, r2
 800d1e8:	4680      	mov	r8, r0
 800d1ea:	d944      	bls.n	800d276 <_strtod_l+0xa7e>
 800d1ec:	ee18 2a90 	vmov	r2, s17
 800d1f0:	4b78      	ldr	r3, [pc, #480]	; (800d3d4 <_strtod_l+0xbdc>)
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d104      	bne.n	800d200 <_strtod_l+0xa08>
 800d1f6:	ee18 3a10 	vmov	r3, s16
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	f43f ad40 	beq.w	800cc80 <_strtod_l+0x488>
 800d200:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d3d4 <_strtod_l+0xbdc>
 800d204:	f04f 38ff 	mov.w	r8, #4294967295
 800d208:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d20a:	4620      	mov	r0, r4
 800d20c:	f7fe fe6a 	bl	800bee4 <_Bfree>
 800d210:	9905      	ldr	r1, [sp, #20]
 800d212:	4620      	mov	r0, r4
 800d214:	f7fe fe66 	bl	800bee4 <_Bfree>
 800d218:	4659      	mov	r1, fp
 800d21a:	4620      	mov	r0, r4
 800d21c:	f7fe fe62 	bl	800bee4 <_Bfree>
 800d220:	4629      	mov	r1, r5
 800d222:	4620      	mov	r0, r4
 800d224:	f7fe fe5e 	bl	800bee4 <_Bfree>
 800d228:	e609      	b.n	800ce3e <_strtod_l+0x646>
 800d22a:	f1b8 0f01 	cmp.w	r8, #1
 800d22e:	d103      	bne.n	800d238 <_strtod_l+0xa40>
 800d230:	f1b9 0f00 	cmp.w	r9, #0
 800d234:	f43f ad95 	beq.w	800cd62 <_strtod_l+0x56a>
 800d238:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d390 <_strtod_l+0xb98>
 800d23c:	4f60      	ldr	r7, [pc, #384]	; (800d3c0 <_strtod_l+0xbc8>)
 800d23e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d242:	2600      	movs	r6, #0
 800d244:	e7ae      	b.n	800d1a4 <_strtod_l+0x9ac>
 800d246:	4f5f      	ldr	r7, [pc, #380]	; (800d3c4 <_strtod_l+0xbcc>)
 800d248:	2600      	movs	r6, #0
 800d24a:	e7a7      	b.n	800d19c <_strtod_l+0x9a4>
 800d24c:	4b5d      	ldr	r3, [pc, #372]	; (800d3c4 <_strtod_l+0xbcc>)
 800d24e:	4630      	mov	r0, r6
 800d250:	4639      	mov	r1, r7
 800d252:	2200      	movs	r2, #0
 800d254:	f7f3 f9d0 	bl	80005f8 <__aeabi_dmul>
 800d258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d25a:	4606      	mov	r6, r0
 800d25c:	460f      	mov	r7, r1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d09c      	beq.n	800d19c <_strtod_l+0x9a4>
 800d262:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d266:	e79d      	b.n	800d1a4 <_strtod_l+0x9ac>
 800d268:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d398 <_strtod_l+0xba0>
 800d26c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d270:	ec57 6b17 	vmov	r6, r7, d7
 800d274:	e796      	b.n	800d1a4 <_strtod_l+0x9ac>
 800d276:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d27a:	9b04      	ldr	r3, [sp, #16]
 800d27c:	46ca      	mov	sl, r9
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1c2      	bne.n	800d208 <_strtod_l+0xa10>
 800d282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d288:	0d1b      	lsrs	r3, r3, #20
 800d28a:	051b      	lsls	r3, r3, #20
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d1bb      	bne.n	800d208 <_strtod_l+0xa10>
 800d290:	4630      	mov	r0, r6
 800d292:	4639      	mov	r1, r7
 800d294:	f7f3 fd10 	bl	8000cb8 <__aeabi_d2lz>
 800d298:	f7f3 f980 	bl	800059c <__aeabi_l2d>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	f7f2 fff0 	bl	8000288 <__aeabi_dsub>
 800d2a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2ae:	ea43 0308 	orr.w	r3, r3, r8
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	460f      	mov	r7, r1
 800d2b8:	d054      	beq.n	800d364 <_strtod_l+0xb6c>
 800d2ba:	a339      	add	r3, pc, #228	; (adr r3, 800d3a0 <_strtod_l+0xba8>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	f7f3 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f47f ace5 	bne.w	800cc94 <_strtod_l+0x49c>
 800d2ca:	a337      	add	r3, pc, #220	; (adr r3, 800d3a8 <_strtod_l+0xbb0>)
 800d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	4639      	mov	r1, r7
 800d2d4:	f7f3 fc20 	bl	8000b18 <__aeabi_dcmpgt>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d095      	beq.n	800d208 <_strtod_l+0xa10>
 800d2dc:	e4da      	b.n	800cc94 <_strtod_l+0x49c>
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	b333      	cbz	r3, 800d330 <_strtod_l+0xb38>
 800d2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d2e8:	d822      	bhi.n	800d330 <_strtod_l+0xb38>
 800d2ea:	a331      	add	r3, pc, #196	; (adr r3, 800d3b0 <_strtod_l+0xbb8>)
 800d2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	f7f3 fbfc 	bl	8000af0 <__aeabi_dcmple>
 800d2f8:	b1a0      	cbz	r0, 800d324 <_strtod_l+0xb2c>
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f7f3 fc53 	bl	8000ba8 <__aeabi_d2uiz>
 800d302:	2801      	cmp	r0, #1
 800d304:	bf38      	it	cc
 800d306:	2001      	movcc	r0, #1
 800d308:	f7f3 f8fc 	bl	8000504 <__aeabi_ui2d>
 800d30c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d30e:	4606      	mov	r6, r0
 800d310:	460f      	mov	r7, r1
 800d312:	bb23      	cbnz	r3, 800d35e <_strtod_l+0xb66>
 800d314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d318:	9010      	str	r0, [sp, #64]	; 0x40
 800d31a:	9311      	str	r3, [sp, #68]	; 0x44
 800d31c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d320:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d328:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d32c:	1a9b      	subs	r3, r3, r2
 800d32e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d330:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d334:	eeb0 0a48 	vmov.f32	s0, s16
 800d338:	eef0 0a68 	vmov.f32	s1, s17
 800d33c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d340:	f7ff f8fc 	bl	800c53c <__ulp>
 800d344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d348:	ec53 2b10 	vmov	r2, r3, d0
 800d34c:	f7f3 f954 	bl	80005f8 <__aeabi_dmul>
 800d350:	ec53 2b18 	vmov	r2, r3, d8
 800d354:	f7f2 ff9a 	bl	800028c <__adddf3>
 800d358:	4680      	mov	r8, r0
 800d35a:	4689      	mov	r9, r1
 800d35c:	e78d      	b.n	800d27a <_strtod_l+0xa82>
 800d35e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d362:	e7db      	b.n	800d31c <_strtod_l+0xb24>
 800d364:	a314      	add	r3, pc, #80	; (adr r3, 800d3b8 <_strtod_l+0xbc0>)
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f7f3 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800d36e:	e7b3      	b.n	800d2d8 <_strtod_l+0xae0>
 800d370:	2300      	movs	r3, #0
 800d372:	930a      	str	r3, [sp, #40]	; 0x28
 800d374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	f7ff ba7c 	b.w	800c876 <_strtod_l+0x7e>
 800d37e:	2a65      	cmp	r2, #101	; 0x65
 800d380:	f43f ab75 	beq.w	800ca6e <_strtod_l+0x276>
 800d384:	2a45      	cmp	r2, #69	; 0x45
 800d386:	f43f ab72 	beq.w	800ca6e <_strtod_l+0x276>
 800d38a:	2301      	movs	r3, #1
 800d38c:	f7ff bbaa 	b.w	800cae4 <_strtod_l+0x2ec>
 800d390:	00000000 	.word	0x00000000
 800d394:	bff00000 	.word	0xbff00000
 800d398:	00000000 	.word	0x00000000
 800d39c:	3ff00000 	.word	0x3ff00000
 800d3a0:	94a03595 	.word	0x94a03595
 800d3a4:	3fdfffff 	.word	0x3fdfffff
 800d3a8:	35afe535 	.word	0x35afe535
 800d3ac:	3fe00000 	.word	0x3fe00000
 800d3b0:	ffc00000 	.word	0xffc00000
 800d3b4:	41dfffff 	.word	0x41dfffff
 800d3b8:	94a03595 	.word	0x94a03595
 800d3bc:	3fcfffff 	.word	0x3fcfffff
 800d3c0:	3ff00000 	.word	0x3ff00000
 800d3c4:	3fe00000 	.word	0x3fe00000
 800d3c8:	7ff00000 	.word	0x7ff00000
 800d3cc:	7fe00000 	.word	0x7fe00000
 800d3d0:	7c9fffff 	.word	0x7c9fffff
 800d3d4:	7fefffff 	.word	0x7fefffff

0800d3d8 <_strtod_r>:
 800d3d8:	4b01      	ldr	r3, [pc, #4]	; (800d3e0 <_strtod_r+0x8>)
 800d3da:	f7ff ba0d 	b.w	800c7f8 <_strtod_l>
 800d3de:	bf00      	nop
 800d3e0:	2000008c 	.word	0x2000008c

0800d3e4 <_strtol_l.constprop.0>:
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ea:	d001      	beq.n	800d3f0 <_strtol_l.constprop.0+0xc>
 800d3ec:	2b24      	cmp	r3, #36	; 0x24
 800d3ee:	d906      	bls.n	800d3fe <_strtol_l.constprop.0+0x1a>
 800d3f0:	f7fd fd7a 	bl	800aee8 <__errno>
 800d3f4:	2316      	movs	r3, #22
 800d3f6:	6003      	str	r3, [r0, #0]
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d4e4 <_strtol_l.constprop.0+0x100>
 800d402:	460d      	mov	r5, r1
 800d404:	462e      	mov	r6, r5
 800d406:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d40a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d40e:	f017 0708 	ands.w	r7, r7, #8
 800d412:	d1f7      	bne.n	800d404 <_strtol_l.constprop.0+0x20>
 800d414:	2c2d      	cmp	r4, #45	; 0x2d
 800d416:	d132      	bne.n	800d47e <_strtol_l.constprop.0+0x9a>
 800d418:	782c      	ldrb	r4, [r5, #0]
 800d41a:	2701      	movs	r7, #1
 800d41c:	1cb5      	adds	r5, r6, #2
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d05b      	beq.n	800d4da <_strtol_l.constprop.0+0xf6>
 800d422:	2b10      	cmp	r3, #16
 800d424:	d109      	bne.n	800d43a <_strtol_l.constprop.0+0x56>
 800d426:	2c30      	cmp	r4, #48	; 0x30
 800d428:	d107      	bne.n	800d43a <_strtol_l.constprop.0+0x56>
 800d42a:	782c      	ldrb	r4, [r5, #0]
 800d42c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d430:	2c58      	cmp	r4, #88	; 0x58
 800d432:	d14d      	bne.n	800d4d0 <_strtol_l.constprop.0+0xec>
 800d434:	786c      	ldrb	r4, [r5, #1]
 800d436:	2310      	movs	r3, #16
 800d438:	3502      	adds	r5, #2
 800d43a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d43e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d442:	f04f 0e00 	mov.w	lr, #0
 800d446:	fbb8 f9f3 	udiv	r9, r8, r3
 800d44a:	4676      	mov	r6, lr
 800d44c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d450:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d454:	f1bc 0f09 	cmp.w	ip, #9
 800d458:	d816      	bhi.n	800d488 <_strtol_l.constprop.0+0xa4>
 800d45a:	4664      	mov	r4, ip
 800d45c:	42a3      	cmp	r3, r4
 800d45e:	dd24      	ble.n	800d4aa <_strtol_l.constprop.0+0xc6>
 800d460:	f1be 3fff 	cmp.w	lr, #4294967295
 800d464:	d008      	beq.n	800d478 <_strtol_l.constprop.0+0x94>
 800d466:	45b1      	cmp	r9, r6
 800d468:	d31c      	bcc.n	800d4a4 <_strtol_l.constprop.0+0xc0>
 800d46a:	d101      	bne.n	800d470 <_strtol_l.constprop.0+0x8c>
 800d46c:	45a2      	cmp	sl, r4
 800d46e:	db19      	blt.n	800d4a4 <_strtol_l.constprop.0+0xc0>
 800d470:	fb06 4603 	mla	r6, r6, r3, r4
 800d474:	f04f 0e01 	mov.w	lr, #1
 800d478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d47c:	e7e8      	b.n	800d450 <_strtol_l.constprop.0+0x6c>
 800d47e:	2c2b      	cmp	r4, #43	; 0x2b
 800d480:	bf04      	itt	eq
 800d482:	782c      	ldrbeq	r4, [r5, #0]
 800d484:	1cb5      	addeq	r5, r6, #2
 800d486:	e7ca      	b.n	800d41e <_strtol_l.constprop.0+0x3a>
 800d488:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d48c:	f1bc 0f19 	cmp.w	ip, #25
 800d490:	d801      	bhi.n	800d496 <_strtol_l.constprop.0+0xb2>
 800d492:	3c37      	subs	r4, #55	; 0x37
 800d494:	e7e2      	b.n	800d45c <_strtol_l.constprop.0+0x78>
 800d496:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d49a:	f1bc 0f19 	cmp.w	ip, #25
 800d49e:	d804      	bhi.n	800d4aa <_strtol_l.constprop.0+0xc6>
 800d4a0:	3c57      	subs	r4, #87	; 0x57
 800d4a2:	e7db      	b.n	800d45c <_strtol_l.constprop.0+0x78>
 800d4a4:	f04f 3eff 	mov.w	lr, #4294967295
 800d4a8:	e7e6      	b.n	800d478 <_strtol_l.constprop.0+0x94>
 800d4aa:	f1be 3fff 	cmp.w	lr, #4294967295
 800d4ae:	d105      	bne.n	800d4bc <_strtol_l.constprop.0+0xd8>
 800d4b0:	2322      	movs	r3, #34	; 0x22
 800d4b2:	6003      	str	r3, [r0, #0]
 800d4b4:	4646      	mov	r6, r8
 800d4b6:	b942      	cbnz	r2, 800d4ca <_strtol_l.constprop.0+0xe6>
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	e79e      	b.n	800d3fa <_strtol_l.constprop.0+0x16>
 800d4bc:	b107      	cbz	r7, 800d4c0 <_strtol_l.constprop.0+0xdc>
 800d4be:	4276      	negs	r6, r6
 800d4c0:	2a00      	cmp	r2, #0
 800d4c2:	d0f9      	beq.n	800d4b8 <_strtol_l.constprop.0+0xd4>
 800d4c4:	f1be 0f00 	cmp.w	lr, #0
 800d4c8:	d000      	beq.n	800d4cc <_strtol_l.constprop.0+0xe8>
 800d4ca:	1e69      	subs	r1, r5, #1
 800d4cc:	6011      	str	r1, [r2, #0]
 800d4ce:	e7f3      	b.n	800d4b8 <_strtol_l.constprop.0+0xd4>
 800d4d0:	2430      	movs	r4, #48	; 0x30
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1b1      	bne.n	800d43a <_strtol_l.constprop.0+0x56>
 800d4d6:	2308      	movs	r3, #8
 800d4d8:	e7af      	b.n	800d43a <_strtol_l.constprop.0+0x56>
 800d4da:	2c30      	cmp	r4, #48	; 0x30
 800d4dc:	d0a5      	beq.n	800d42a <_strtol_l.constprop.0+0x46>
 800d4de:	230a      	movs	r3, #10
 800d4e0:	e7ab      	b.n	800d43a <_strtol_l.constprop.0+0x56>
 800d4e2:	bf00      	nop
 800d4e4:	0800f8a1 	.word	0x0800f8a1

0800d4e8 <_strtol_r>:
 800d4e8:	f7ff bf7c 	b.w	800d3e4 <_strtol_l.constprop.0>

0800d4ec <__ssputs_r>:
 800d4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f0:	688e      	ldr	r6, [r1, #8]
 800d4f2:	461f      	mov	r7, r3
 800d4f4:	42be      	cmp	r6, r7
 800d4f6:	680b      	ldr	r3, [r1, #0]
 800d4f8:	4682      	mov	sl, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4690      	mov	r8, r2
 800d4fe:	d82c      	bhi.n	800d55a <__ssputs_r+0x6e>
 800d500:	898a      	ldrh	r2, [r1, #12]
 800d502:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d506:	d026      	beq.n	800d556 <__ssputs_r+0x6a>
 800d508:	6965      	ldr	r5, [r4, #20]
 800d50a:	6909      	ldr	r1, [r1, #16]
 800d50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d510:	eba3 0901 	sub.w	r9, r3, r1
 800d514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d518:	1c7b      	adds	r3, r7, #1
 800d51a:	444b      	add	r3, r9
 800d51c:	106d      	asrs	r5, r5, #1
 800d51e:	429d      	cmp	r5, r3
 800d520:	bf38      	it	cc
 800d522:	461d      	movcc	r5, r3
 800d524:	0553      	lsls	r3, r2, #21
 800d526:	d527      	bpl.n	800d578 <__ssputs_r+0x8c>
 800d528:	4629      	mov	r1, r5
 800d52a:	f7fe fc0f 	bl	800bd4c <_malloc_r>
 800d52e:	4606      	mov	r6, r0
 800d530:	b360      	cbz	r0, 800d58c <__ssputs_r+0xa0>
 800d532:	6921      	ldr	r1, [r4, #16]
 800d534:	464a      	mov	r2, r9
 800d536:	f7fd fd04 	bl	800af42 <memcpy>
 800d53a:	89a3      	ldrh	r3, [r4, #12]
 800d53c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d544:	81a3      	strh	r3, [r4, #12]
 800d546:	6126      	str	r6, [r4, #16]
 800d548:	6165      	str	r5, [r4, #20]
 800d54a:	444e      	add	r6, r9
 800d54c:	eba5 0509 	sub.w	r5, r5, r9
 800d550:	6026      	str	r6, [r4, #0]
 800d552:	60a5      	str	r5, [r4, #8]
 800d554:	463e      	mov	r6, r7
 800d556:	42be      	cmp	r6, r7
 800d558:	d900      	bls.n	800d55c <__ssputs_r+0x70>
 800d55a:	463e      	mov	r6, r7
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	4632      	mov	r2, r6
 800d560:	4641      	mov	r1, r8
 800d562:	f000 f9c9 	bl	800d8f8 <memmove>
 800d566:	68a3      	ldr	r3, [r4, #8]
 800d568:	1b9b      	subs	r3, r3, r6
 800d56a:	60a3      	str	r3, [r4, #8]
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	4433      	add	r3, r6
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	2000      	movs	r0, #0
 800d574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d578:	462a      	mov	r2, r5
 800d57a:	f000 fd9e 	bl	800e0ba <_realloc_r>
 800d57e:	4606      	mov	r6, r0
 800d580:	2800      	cmp	r0, #0
 800d582:	d1e0      	bne.n	800d546 <__ssputs_r+0x5a>
 800d584:	6921      	ldr	r1, [r4, #16]
 800d586:	4650      	mov	r0, sl
 800d588:	f7fe fb6c 	bl	800bc64 <_free_r>
 800d58c:	230c      	movs	r3, #12
 800d58e:	f8ca 3000 	str.w	r3, [sl]
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	f04f 30ff 	mov.w	r0, #4294967295
 800d59e:	e7e9      	b.n	800d574 <__ssputs_r+0x88>

0800d5a0 <_svfiprintf_r>:
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	4698      	mov	r8, r3
 800d5a6:	898b      	ldrh	r3, [r1, #12]
 800d5a8:	061b      	lsls	r3, r3, #24
 800d5aa:	b09d      	sub	sp, #116	; 0x74
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	460d      	mov	r5, r1
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	d50e      	bpl.n	800d5d2 <_svfiprintf_r+0x32>
 800d5b4:	690b      	ldr	r3, [r1, #16]
 800d5b6:	b963      	cbnz	r3, 800d5d2 <_svfiprintf_r+0x32>
 800d5b8:	2140      	movs	r1, #64	; 0x40
 800d5ba:	f7fe fbc7 	bl	800bd4c <_malloc_r>
 800d5be:	6028      	str	r0, [r5, #0]
 800d5c0:	6128      	str	r0, [r5, #16]
 800d5c2:	b920      	cbnz	r0, 800d5ce <_svfiprintf_r+0x2e>
 800d5c4:	230c      	movs	r3, #12
 800d5c6:	603b      	str	r3, [r7, #0]
 800d5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5cc:	e0d0      	b.n	800d770 <_svfiprintf_r+0x1d0>
 800d5ce:	2340      	movs	r3, #64	; 0x40
 800d5d0:	616b      	str	r3, [r5, #20]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d6:	2320      	movs	r3, #32
 800d5d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e0:	2330      	movs	r3, #48	; 0x30
 800d5e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d788 <_svfiprintf_r+0x1e8>
 800d5e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ea:	f04f 0901 	mov.w	r9, #1
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	469a      	mov	sl, r3
 800d5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f6:	b10a      	cbz	r2, 800d5fc <_svfiprintf_r+0x5c>
 800d5f8:	2a25      	cmp	r2, #37	; 0x25
 800d5fa:	d1f9      	bne.n	800d5f0 <_svfiprintf_r+0x50>
 800d5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d600:	d00b      	beq.n	800d61a <_svfiprintf_r+0x7a>
 800d602:	465b      	mov	r3, fp
 800d604:	4622      	mov	r2, r4
 800d606:	4629      	mov	r1, r5
 800d608:	4638      	mov	r0, r7
 800d60a:	f7ff ff6f 	bl	800d4ec <__ssputs_r>
 800d60e:	3001      	adds	r0, #1
 800d610:	f000 80a9 	beq.w	800d766 <_svfiprintf_r+0x1c6>
 800d614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d616:	445a      	add	r2, fp
 800d618:	9209      	str	r2, [sp, #36]	; 0x24
 800d61a:	f89a 3000 	ldrb.w	r3, [sl]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 80a1 	beq.w	800d766 <_svfiprintf_r+0x1c6>
 800d624:	2300      	movs	r3, #0
 800d626:	f04f 32ff 	mov.w	r2, #4294967295
 800d62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d62e:	f10a 0a01 	add.w	sl, sl, #1
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	9307      	str	r3, [sp, #28]
 800d636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d63a:	931a      	str	r3, [sp, #104]	; 0x68
 800d63c:	4654      	mov	r4, sl
 800d63e:	2205      	movs	r2, #5
 800d640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d644:	4850      	ldr	r0, [pc, #320]	; (800d788 <_svfiprintf_r+0x1e8>)
 800d646:	f7f2 fdc3 	bl	80001d0 <memchr>
 800d64a:	9a04      	ldr	r2, [sp, #16]
 800d64c:	b9d8      	cbnz	r0, 800d686 <_svfiprintf_r+0xe6>
 800d64e:	06d0      	lsls	r0, r2, #27
 800d650:	bf44      	itt	mi
 800d652:	2320      	movmi	r3, #32
 800d654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d658:	0711      	lsls	r1, r2, #28
 800d65a:	bf44      	itt	mi
 800d65c:	232b      	movmi	r3, #43	; 0x2b
 800d65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d662:	f89a 3000 	ldrb.w	r3, [sl]
 800d666:	2b2a      	cmp	r3, #42	; 0x2a
 800d668:	d015      	beq.n	800d696 <_svfiprintf_r+0xf6>
 800d66a:	9a07      	ldr	r2, [sp, #28]
 800d66c:	4654      	mov	r4, sl
 800d66e:	2000      	movs	r0, #0
 800d670:	f04f 0c0a 	mov.w	ip, #10
 800d674:	4621      	mov	r1, r4
 800d676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67a:	3b30      	subs	r3, #48	; 0x30
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	d94d      	bls.n	800d71c <_svfiprintf_r+0x17c>
 800d680:	b1b0      	cbz	r0, 800d6b0 <_svfiprintf_r+0x110>
 800d682:	9207      	str	r2, [sp, #28]
 800d684:	e014      	b.n	800d6b0 <_svfiprintf_r+0x110>
 800d686:	eba0 0308 	sub.w	r3, r0, r8
 800d68a:	fa09 f303 	lsl.w	r3, r9, r3
 800d68e:	4313      	orrs	r3, r2
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	46a2      	mov	sl, r4
 800d694:	e7d2      	b.n	800d63c <_svfiprintf_r+0x9c>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	1d19      	adds	r1, r3, #4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	9103      	str	r1, [sp, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfbb      	ittet	lt
 800d6a2:	425b      	neglt	r3, r3
 800d6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a8:	9307      	strge	r3, [sp, #28]
 800d6aa:	9307      	strlt	r3, [sp, #28]
 800d6ac:	bfb8      	it	lt
 800d6ae:	9204      	strlt	r2, [sp, #16]
 800d6b0:	7823      	ldrb	r3, [r4, #0]
 800d6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b4:	d10c      	bne.n	800d6d0 <_svfiprintf_r+0x130>
 800d6b6:	7863      	ldrb	r3, [r4, #1]
 800d6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ba:	d134      	bne.n	800d726 <_svfiprintf_r+0x186>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	9203      	str	r2, [sp, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfb8      	it	lt
 800d6c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6cc:	3402      	adds	r4, #2
 800d6ce:	9305      	str	r3, [sp, #20]
 800d6d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d798 <_svfiprintf_r+0x1f8>
 800d6d4:	7821      	ldrb	r1, [r4, #0]
 800d6d6:	2203      	movs	r2, #3
 800d6d8:	4650      	mov	r0, sl
 800d6da:	f7f2 fd79 	bl	80001d0 <memchr>
 800d6de:	b138      	cbz	r0, 800d6f0 <_svfiprintf_r+0x150>
 800d6e0:	9b04      	ldr	r3, [sp, #16]
 800d6e2:	eba0 000a 	sub.w	r0, r0, sl
 800d6e6:	2240      	movs	r2, #64	; 0x40
 800d6e8:	4082      	lsls	r2, r0
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	3401      	adds	r4, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f4:	4825      	ldr	r0, [pc, #148]	; (800d78c <_svfiprintf_r+0x1ec>)
 800d6f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fa:	2206      	movs	r2, #6
 800d6fc:	f7f2 fd68 	bl	80001d0 <memchr>
 800d700:	2800      	cmp	r0, #0
 800d702:	d038      	beq.n	800d776 <_svfiprintf_r+0x1d6>
 800d704:	4b22      	ldr	r3, [pc, #136]	; (800d790 <_svfiprintf_r+0x1f0>)
 800d706:	bb1b      	cbnz	r3, 800d750 <_svfiprintf_r+0x1b0>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	3307      	adds	r3, #7
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	9303      	str	r3, [sp, #12]
 800d714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d716:	4433      	add	r3, r6
 800d718:	9309      	str	r3, [sp, #36]	; 0x24
 800d71a:	e768      	b.n	800d5ee <_svfiprintf_r+0x4e>
 800d71c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d720:	460c      	mov	r4, r1
 800d722:	2001      	movs	r0, #1
 800d724:	e7a6      	b.n	800d674 <_svfiprintf_r+0xd4>
 800d726:	2300      	movs	r3, #0
 800d728:	3401      	adds	r4, #1
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f04f 0c0a 	mov.w	ip, #10
 800d732:	4620      	mov	r0, r4
 800d734:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d738:	3a30      	subs	r2, #48	; 0x30
 800d73a:	2a09      	cmp	r2, #9
 800d73c:	d903      	bls.n	800d746 <_svfiprintf_r+0x1a6>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0c6      	beq.n	800d6d0 <_svfiprintf_r+0x130>
 800d742:	9105      	str	r1, [sp, #20]
 800d744:	e7c4      	b.n	800d6d0 <_svfiprintf_r+0x130>
 800d746:	fb0c 2101 	mla	r1, ip, r1, r2
 800d74a:	4604      	mov	r4, r0
 800d74c:	2301      	movs	r3, #1
 800d74e:	e7f0      	b.n	800d732 <_svfiprintf_r+0x192>
 800d750:	ab03      	add	r3, sp, #12
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	462a      	mov	r2, r5
 800d756:	4b0f      	ldr	r3, [pc, #60]	; (800d794 <_svfiprintf_r+0x1f4>)
 800d758:	a904      	add	r1, sp, #16
 800d75a:	4638      	mov	r0, r7
 800d75c:	f7fc fc76 	bl	800a04c <_printf_float>
 800d760:	1c42      	adds	r2, r0, #1
 800d762:	4606      	mov	r6, r0
 800d764:	d1d6      	bne.n	800d714 <_svfiprintf_r+0x174>
 800d766:	89ab      	ldrh	r3, [r5, #12]
 800d768:	065b      	lsls	r3, r3, #25
 800d76a:	f53f af2d 	bmi.w	800d5c8 <_svfiprintf_r+0x28>
 800d76e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d770:	b01d      	add	sp, #116	; 0x74
 800d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d776:	ab03      	add	r3, sp, #12
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	462a      	mov	r2, r5
 800d77c:	4b05      	ldr	r3, [pc, #20]	; (800d794 <_svfiprintf_r+0x1f4>)
 800d77e:	a904      	add	r1, sp, #16
 800d780:	4638      	mov	r0, r7
 800d782:	f7fc ff07 	bl	800a594 <_printf_i>
 800d786:	e7eb      	b.n	800d760 <_svfiprintf_r+0x1c0>
 800d788:	0800fc10 	.word	0x0800fc10
 800d78c:	0800fc1a 	.word	0x0800fc1a
 800d790:	0800a04d 	.word	0x0800a04d
 800d794:	0800d4ed 	.word	0x0800d4ed
 800d798:	0800fc16 	.word	0x0800fc16

0800d79c <__sflush_r>:
 800d79c:	898a      	ldrh	r2, [r1, #12]
 800d79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	0710      	lsls	r0, r2, #28
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	d458      	bmi.n	800d85c <__sflush_r+0xc0>
 800d7aa:	684b      	ldr	r3, [r1, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dc05      	bgt.n	800d7bc <__sflush_r+0x20>
 800d7b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	dc02      	bgt.n	800d7bc <__sflush_r+0x20>
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	d0f9      	beq.n	800d7b6 <__sflush_r+0x1a>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7c8:	682f      	ldr	r7, [r5, #0]
 800d7ca:	6a21      	ldr	r1, [r4, #32]
 800d7cc:	602b      	str	r3, [r5, #0]
 800d7ce:	d032      	beq.n	800d836 <__sflush_r+0x9a>
 800d7d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	075a      	lsls	r2, r3, #29
 800d7d6:	d505      	bpl.n	800d7e4 <__sflush_r+0x48>
 800d7d8:	6863      	ldr	r3, [r4, #4]
 800d7da:	1ac0      	subs	r0, r0, r3
 800d7dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7de:	b10b      	cbz	r3, 800d7e4 <__sflush_r+0x48>
 800d7e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7e2:	1ac0      	subs	r0, r0, r3
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7ea:	6a21      	ldr	r1, [r4, #32]
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b0      	blx	r6
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	d106      	bne.n	800d804 <__sflush_r+0x68>
 800d7f6:	6829      	ldr	r1, [r5, #0]
 800d7f8:	291d      	cmp	r1, #29
 800d7fa:	d82b      	bhi.n	800d854 <__sflush_r+0xb8>
 800d7fc:	4a29      	ldr	r2, [pc, #164]	; (800d8a4 <__sflush_r+0x108>)
 800d7fe:	410a      	asrs	r2, r1
 800d800:	07d6      	lsls	r6, r2, #31
 800d802:	d427      	bmi.n	800d854 <__sflush_r+0xb8>
 800d804:	2200      	movs	r2, #0
 800d806:	6062      	str	r2, [r4, #4]
 800d808:	04d9      	lsls	r1, r3, #19
 800d80a:	6922      	ldr	r2, [r4, #16]
 800d80c:	6022      	str	r2, [r4, #0]
 800d80e:	d504      	bpl.n	800d81a <__sflush_r+0x7e>
 800d810:	1c42      	adds	r2, r0, #1
 800d812:	d101      	bne.n	800d818 <__sflush_r+0x7c>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	b903      	cbnz	r3, 800d81a <__sflush_r+0x7e>
 800d818:	6560      	str	r0, [r4, #84]	; 0x54
 800d81a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d81c:	602f      	str	r7, [r5, #0]
 800d81e:	2900      	cmp	r1, #0
 800d820:	d0c9      	beq.n	800d7b6 <__sflush_r+0x1a>
 800d822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d826:	4299      	cmp	r1, r3
 800d828:	d002      	beq.n	800d830 <__sflush_r+0x94>
 800d82a:	4628      	mov	r0, r5
 800d82c:	f7fe fa1a 	bl	800bc64 <_free_r>
 800d830:	2000      	movs	r0, #0
 800d832:	6360      	str	r0, [r4, #52]	; 0x34
 800d834:	e7c0      	b.n	800d7b8 <__sflush_r+0x1c>
 800d836:	2301      	movs	r3, #1
 800d838:	4628      	mov	r0, r5
 800d83a:	47b0      	blx	r6
 800d83c:	1c41      	adds	r1, r0, #1
 800d83e:	d1c8      	bne.n	800d7d2 <__sflush_r+0x36>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d0c5      	beq.n	800d7d2 <__sflush_r+0x36>
 800d846:	2b1d      	cmp	r3, #29
 800d848:	d001      	beq.n	800d84e <__sflush_r+0xb2>
 800d84a:	2b16      	cmp	r3, #22
 800d84c:	d101      	bne.n	800d852 <__sflush_r+0xb6>
 800d84e:	602f      	str	r7, [r5, #0]
 800d850:	e7b1      	b.n	800d7b6 <__sflush_r+0x1a>
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d858:	81a3      	strh	r3, [r4, #12]
 800d85a:	e7ad      	b.n	800d7b8 <__sflush_r+0x1c>
 800d85c:	690f      	ldr	r7, [r1, #16]
 800d85e:	2f00      	cmp	r7, #0
 800d860:	d0a9      	beq.n	800d7b6 <__sflush_r+0x1a>
 800d862:	0793      	lsls	r3, r2, #30
 800d864:	680e      	ldr	r6, [r1, #0]
 800d866:	bf08      	it	eq
 800d868:	694b      	ldreq	r3, [r1, #20]
 800d86a:	600f      	str	r7, [r1, #0]
 800d86c:	bf18      	it	ne
 800d86e:	2300      	movne	r3, #0
 800d870:	eba6 0807 	sub.w	r8, r6, r7
 800d874:	608b      	str	r3, [r1, #8]
 800d876:	f1b8 0f00 	cmp.w	r8, #0
 800d87a:	dd9c      	ble.n	800d7b6 <__sflush_r+0x1a>
 800d87c:	6a21      	ldr	r1, [r4, #32]
 800d87e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d880:	4643      	mov	r3, r8
 800d882:	463a      	mov	r2, r7
 800d884:	4628      	mov	r0, r5
 800d886:	47b0      	blx	r6
 800d888:	2800      	cmp	r0, #0
 800d88a:	dc06      	bgt.n	800d89a <__sflush_r+0xfe>
 800d88c:	89a3      	ldrh	r3, [r4, #12]
 800d88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d892:	81a3      	strh	r3, [r4, #12]
 800d894:	f04f 30ff 	mov.w	r0, #4294967295
 800d898:	e78e      	b.n	800d7b8 <__sflush_r+0x1c>
 800d89a:	4407      	add	r7, r0
 800d89c:	eba8 0800 	sub.w	r8, r8, r0
 800d8a0:	e7e9      	b.n	800d876 <__sflush_r+0xda>
 800d8a2:	bf00      	nop
 800d8a4:	dfbffffe 	.word	0xdfbffffe

0800d8a8 <_fflush_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	690b      	ldr	r3, [r1, #16]
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	b913      	cbnz	r3, 800d8b8 <_fflush_r+0x10>
 800d8b2:	2500      	movs	r5, #0
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
 800d8b8:	b118      	cbz	r0, 800d8c2 <_fflush_r+0x1a>
 800d8ba:	6a03      	ldr	r3, [r0, #32]
 800d8bc:	b90b      	cbnz	r3, 800d8c2 <_fflush_r+0x1a>
 800d8be:	f7fd fa27 	bl	800ad10 <__sinit>
 800d8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0f3      	beq.n	800d8b2 <_fflush_r+0xa>
 800d8ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8cc:	07d0      	lsls	r0, r2, #31
 800d8ce:	d404      	bmi.n	800d8da <_fflush_r+0x32>
 800d8d0:	0599      	lsls	r1, r3, #22
 800d8d2:	d402      	bmi.n	800d8da <_fflush_r+0x32>
 800d8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8d6:	f7fd fb32 	bl	800af3e <__retarget_lock_acquire_recursive>
 800d8da:	4628      	mov	r0, r5
 800d8dc:	4621      	mov	r1, r4
 800d8de:	f7ff ff5d 	bl	800d79c <__sflush_r>
 800d8e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8e4:	07da      	lsls	r2, r3, #31
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	d4e4      	bmi.n	800d8b4 <_fflush_r+0xc>
 800d8ea:	89a3      	ldrh	r3, [r4, #12]
 800d8ec:	059b      	lsls	r3, r3, #22
 800d8ee:	d4e1      	bmi.n	800d8b4 <_fflush_r+0xc>
 800d8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8f2:	f7fd fb25 	bl	800af40 <__retarget_lock_release_recursive>
 800d8f6:	e7dd      	b.n	800d8b4 <_fflush_r+0xc>

0800d8f8 <memmove>:
 800d8f8:	4288      	cmp	r0, r1
 800d8fa:	b510      	push	{r4, lr}
 800d8fc:	eb01 0402 	add.w	r4, r1, r2
 800d900:	d902      	bls.n	800d908 <memmove+0x10>
 800d902:	4284      	cmp	r4, r0
 800d904:	4623      	mov	r3, r4
 800d906:	d807      	bhi.n	800d918 <memmove+0x20>
 800d908:	1e43      	subs	r3, r0, #1
 800d90a:	42a1      	cmp	r1, r4
 800d90c:	d008      	beq.n	800d920 <memmove+0x28>
 800d90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d916:	e7f8      	b.n	800d90a <memmove+0x12>
 800d918:	4402      	add	r2, r0
 800d91a:	4601      	mov	r1, r0
 800d91c:	428a      	cmp	r2, r1
 800d91e:	d100      	bne.n	800d922 <memmove+0x2a>
 800d920:	bd10      	pop	{r4, pc}
 800d922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d92a:	e7f7      	b.n	800d91c <memmove+0x24>

0800d92c <strncmp>:
 800d92c:	b510      	push	{r4, lr}
 800d92e:	b16a      	cbz	r2, 800d94c <strncmp+0x20>
 800d930:	3901      	subs	r1, #1
 800d932:	1884      	adds	r4, r0, r2
 800d934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d938:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d103      	bne.n	800d948 <strncmp+0x1c>
 800d940:	42a0      	cmp	r0, r4
 800d942:	d001      	beq.n	800d948 <strncmp+0x1c>
 800d944:	2a00      	cmp	r2, #0
 800d946:	d1f5      	bne.n	800d934 <strncmp+0x8>
 800d948:	1ad0      	subs	r0, r2, r3
 800d94a:	bd10      	pop	{r4, pc}
 800d94c:	4610      	mov	r0, r2
 800d94e:	e7fc      	b.n	800d94a <strncmp+0x1e>

0800d950 <_sbrk_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	4d06      	ldr	r5, [pc, #24]	; (800d96c <_sbrk_r+0x1c>)
 800d954:	2300      	movs	r3, #0
 800d956:	4604      	mov	r4, r0
 800d958:	4608      	mov	r0, r1
 800d95a:	602b      	str	r3, [r5, #0]
 800d95c:	f7f5 fe16 	bl	800358c <_sbrk>
 800d960:	1c43      	adds	r3, r0, #1
 800d962:	d102      	bne.n	800d96a <_sbrk_r+0x1a>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	b103      	cbz	r3, 800d96a <_sbrk_r+0x1a>
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	bd38      	pop	{r3, r4, r5, pc}
 800d96c:	20005054 	.word	0x20005054

0800d970 <nan>:
 800d970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d978 <nan+0x8>
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	00000000 	.word	0x00000000
 800d97c:	7ff80000 	.word	0x7ff80000

0800d980 <__assert_func>:
 800d980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d982:	4614      	mov	r4, r2
 800d984:	461a      	mov	r2, r3
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <__assert_func+0x2c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4605      	mov	r5, r0
 800d98c:	68d8      	ldr	r0, [r3, #12]
 800d98e:	b14c      	cbz	r4, 800d9a4 <__assert_func+0x24>
 800d990:	4b07      	ldr	r3, [pc, #28]	; (800d9b0 <__assert_func+0x30>)
 800d992:	9100      	str	r1, [sp, #0]
 800d994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d998:	4906      	ldr	r1, [pc, #24]	; (800d9b4 <__assert_func+0x34>)
 800d99a:	462b      	mov	r3, r5
 800d99c:	f000 fbca 	bl	800e134 <fiprintf>
 800d9a0:	f000 fbda 	bl	800e158 <abort>
 800d9a4:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <__assert_func+0x38>)
 800d9a6:	461c      	mov	r4, r3
 800d9a8:	e7f3      	b.n	800d992 <__assert_func+0x12>
 800d9aa:	bf00      	nop
 800d9ac:	20000088 	.word	0x20000088
 800d9b0:	0800fc29 	.word	0x0800fc29
 800d9b4:	0800fc36 	.word	0x0800fc36
 800d9b8:	0800fc64 	.word	0x0800fc64

0800d9bc <_calloc_r>:
 800d9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9be:	fba1 2402 	umull	r2, r4, r1, r2
 800d9c2:	b94c      	cbnz	r4, 800d9d8 <_calloc_r+0x1c>
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	9201      	str	r2, [sp, #4]
 800d9c8:	f7fe f9c0 	bl	800bd4c <_malloc_r>
 800d9cc:	9a01      	ldr	r2, [sp, #4]
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	b930      	cbnz	r0, 800d9e0 <_calloc_r+0x24>
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	b003      	add	sp, #12
 800d9d6:	bd30      	pop	{r4, r5, pc}
 800d9d8:	220c      	movs	r2, #12
 800d9da:	6002      	str	r2, [r0, #0]
 800d9dc:	2500      	movs	r5, #0
 800d9de:	e7f8      	b.n	800d9d2 <_calloc_r+0x16>
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	f7fd fa2e 	bl	800ae42 <memset>
 800d9e6:	e7f4      	b.n	800d9d2 <_calloc_r+0x16>

0800d9e8 <rshift>:
 800d9e8:	6903      	ldr	r3, [r0, #16]
 800d9ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9f6:	f100 0414 	add.w	r4, r0, #20
 800d9fa:	dd45      	ble.n	800da88 <rshift+0xa0>
 800d9fc:	f011 011f 	ands.w	r1, r1, #31
 800da00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da08:	d10c      	bne.n	800da24 <rshift+0x3c>
 800da0a:	f100 0710 	add.w	r7, r0, #16
 800da0e:	4629      	mov	r1, r5
 800da10:	42b1      	cmp	r1, r6
 800da12:	d334      	bcc.n	800da7e <rshift+0x96>
 800da14:	1a9b      	subs	r3, r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	1eea      	subs	r2, r5, #3
 800da1a:	4296      	cmp	r6, r2
 800da1c:	bf38      	it	cc
 800da1e:	2300      	movcc	r3, #0
 800da20:	4423      	add	r3, r4
 800da22:	e015      	b.n	800da50 <rshift+0x68>
 800da24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da28:	f1c1 0820 	rsb	r8, r1, #32
 800da2c:	40cf      	lsrs	r7, r1
 800da2e:	f105 0e04 	add.w	lr, r5, #4
 800da32:	46a1      	mov	r9, r4
 800da34:	4576      	cmp	r6, lr
 800da36:	46f4      	mov	ip, lr
 800da38:	d815      	bhi.n	800da66 <rshift+0x7e>
 800da3a:	1a9a      	subs	r2, r3, r2
 800da3c:	0092      	lsls	r2, r2, #2
 800da3e:	3a04      	subs	r2, #4
 800da40:	3501      	adds	r5, #1
 800da42:	42ae      	cmp	r6, r5
 800da44:	bf38      	it	cc
 800da46:	2200      	movcc	r2, #0
 800da48:	18a3      	adds	r3, r4, r2
 800da4a:	50a7      	str	r7, [r4, r2]
 800da4c:	b107      	cbz	r7, 800da50 <rshift+0x68>
 800da4e:	3304      	adds	r3, #4
 800da50:	1b1a      	subs	r2, r3, r4
 800da52:	42a3      	cmp	r3, r4
 800da54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da58:	bf08      	it	eq
 800da5a:	2300      	moveq	r3, #0
 800da5c:	6102      	str	r2, [r0, #16]
 800da5e:	bf08      	it	eq
 800da60:	6143      	streq	r3, [r0, #20]
 800da62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da66:	f8dc c000 	ldr.w	ip, [ip]
 800da6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800da6e:	ea4c 0707 	orr.w	r7, ip, r7
 800da72:	f849 7b04 	str.w	r7, [r9], #4
 800da76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da7a:	40cf      	lsrs	r7, r1
 800da7c:	e7da      	b.n	800da34 <rshift+0x4c>
 800da7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800da82:	f847 cf04 	str.w	ip, [r7, #4]!
 800da86:	e7c3      	b.n	800da10 <rshift+0x28>
 800da88:	4623      	mov	r3, r4
 800da8a:	e7e1      	b.n	800da50 <rshift+0x68>

0800da8c <__hexdig_fun>:
 800da8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800da90:	2b09      	cmp	r3, #9
 800da92:	d802      	bhi.n	800da9a <__hexdig_fun+0xe>
 800da94:	3820      	subs	r0, #32
 800da96:	b2c0      	uxtb	r0, r0
 800da98:	4770      	bx	lr
 800da9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800da9e:	2b05      	cmp	r3, #5
 800daa0:	d801      	bhi.n	800daa6 <__hexdig_fun+0x1a>
 800daa2:	3847      	subs	r0, #71	; 0x47
 800daa4:	e7f7      	b.n	800da96 <__hexdig_fun+0xa>
 800daa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800daaa:	2b05      	cmp	r3, #5
 800daac:	d801      	bhi.n	800dab2 <__hexdig_fun+0x26>
 800daae:	3827      	subs	r0, #39	; 0x27
 800dab0:	e7f1      	b.n	800da96 <__hexdig_fun+0xa>
 800dab2:	2000      	movs	r0, #0
 800dab4:	4770      	bx	lr
	...

0800dab8 <__gethex>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	4617      	mov	r7, r2
 800dabe:	680a      	ldr	r2, [r1, #0]
 800dac0:	b085      	sub	sp, #20
 800dac2:	f102 0b02 	add.w	fp, r2, #2
 800dac6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800daca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dace:	4681      	mov	r9, r0
 800dad0:	468a      	mov	sl, r1
 800dad2:	9302      	str	r3, [sp, #8]
 800dad4:	32fe      	adds	r2, #254	; 0xfe
 800dad6:	eb02 030b 	add.w	r3, r2, fp
 800dada:	46d8      	mov	r8, fp
 800dadc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	2830      	cmp	r0, #48	; 0x30
 800dae4:	d0f7      	beq.n	800dad6 <__gethex+0x1e>
 800dae6:	f7ff ffd1 	bl	800da8c <__hexdig_fun>
 800daea:	4604      	mov	r4, r0
 800daec:	2800      	cmp	r0, #0
 800daee:	d138      	bne.n	800db62 <__gethex+0xaa>
 800daf0:	49a7      	ldr	r1, [pc, #668]	; (800dd90 <__gethex+0x2d8>)
 800daf2:	2201      	movs	r2, #1
 800daf4:	4640      	mov	r0, r8
 800daf6:	f7ff ff19 	bl	800d92c <strncmp>
 800dafa:	4606      	mov	r6, r0
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d169      	bne.n	800dbd4 <__gethex+0x11c>
 800db00:	f898 0001 	ldrb.w	r0, [r8, #1]
 800db04:	465d      	mov	r5, fp
 800db06:	f7ff ffc1 	bl	800da8c <__hexdig_fun>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d064      	beq.n	800dbd8 <__gethex+0x120>
 800db0e:	465a      	mov	r2, fp
 800db10:	7810      	ldrb	r0, [r2, #0]
 800db12:	2830      	cmp	r0, #48	; 0x30
 800db14:	4690      	mov	r8, r2
 800db16:	f102 0201 	add.w	r2, r2, #1
 800db1a:	d0f9      	beq.n	800db10 <__gethex+0x58>
 800db1c:	f7ff ffb6 	bl	800da8c <__hexdig_fun>
 800db20:	2301      	movs	r3, #1
 800db22:	fab0 f480 	clz	r4, r0
 800db26:	0964      	lsrs	r4, r4, #5
 800db28:	465e      	mov	r6, fp
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	4642      	mov	r2, r8
 800db2e:	4615      	mov	r5, r2
 800db30:	3201      	adds	r2, #1
 800db32:	7828      	ldrb	r0, [r5, #0]
 800db34:	f7ff ffaa 	bl	800da8c <__hexdig_fun>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d1f8      	bne.n	800db2e <__gethex+0x76>
 800db3c:	4994      	ldr	r1, [pc, #592]	; (800dd90 <__gethex+0x2d8>)
 800db3e:	2201      	movs	r2, #1
 800db40:	4628      	mov	r0, r5
 800db42:	f7ff fef3 	bl	800d92c <strncmp>
 800db46:	b978      	cbnz	r0, 800db68 <__gethex+0xb0>
 800db48:	b946      	cbnz	r6, 800db5c <__gethex+0xa4>
 800db4a:	1c6e      	adds	r6, r5, #1
 800db4c:	4632      	mov	r2, r6
 800db4e:	4615      	mov	r5, r2
 800db50:	3201      	adds	r2, #1
 800db52:	7828      	ldrb	r0, [r5, #0]
 800db54:	f7ff ff9a 	bl	800da8c <__hexdig_fun>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1f8      	bne.n	800db4e <__gethex+0x96>
 800db5c:	1b73      	subs	r3, r6, r5
 800db5e:	009e      	lsls	r6, r3, #2
 800db60:	e004      	b.n	800db6c <__gethex+0xb4>
 800db62:	2400      	movs	r4, #0
 800db64:	4626      	mov	r6, r4
 800db66:	e7e1      	b.n	800db2c <__gethex+0x74>
 800db68:	2e00      	cmp	r6, #0
 800db6a:	d1f7      	bne.n	800db5c <__gethex+0xa4>
 800db6c:	782b      	ldrb	r3, [r5, #0]
 800db6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db72:	2b50      	cmp	r3, #80	; 0x50
 800db74:	d13d      	bne.n	800dbf2 <__gethex+0x13a>
 800db76:	786b      	ldrb	r3, [r5, #1]
 800db78:	2b2b      	cmp	r3, #43	; 0x2b
 800db7a:	d02f      	beq.n	800dbdc <__gethex+0x124>
 800db7c:	2b2d      	cmp	r3, #45	; 0x2d
 800db7e:	d031      	beq.n	800dbe4 <__gethex+0x12c>
 800db80:	1c69      	adds	r1, r5, #1
 800db82:	f04f 0b00 	mov.w	fp, #0
 800db86:	7808      	ldrb	r0, [r1, #0]
 800db88:	f7ff ff80 	bl	800da8c <__hexdig_fun>
 800db8c:	1e42      	subs	r2, r0, #1
 800db8e:	b2d2      	uxtb	r2, r2
 800db90:	2a18      	cmp	r2, #24
 800db92:	d82e      	bhi.n	800dbf2 <__gethex+0x13a>
 800db94:	f1a0 0210 	sub.w	r2, r0, #16
 800db98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db9c:	f7ff ff76 	bl	800da8c <__hexdig_fun>
 800dba0:	f100 3cff 	add.w	ip, r0, #4294967295
 800dba4:	fa5f fc8c 	uxtb.w	ip, ip
 800dba8:	f1bc 0f18 	cmp.w	ip, #24
 800dbac:	d91d      	bls.n	800dbea <__gethex+0x132>
 800dbae:	f1bb 0f00 	cmp.w	fp, #0
 800dbb2:	d000      	beq.n	800dbb6 <__gethex+0xfe>
 800dbb4:	4252      	negs	r2, r2
 800dbb6:	4416      	add	r6, r2
 800dbb8:	f8ca 1000 	str.w	r1, [sl]
 800dbbc:	b1dc      	cbz	r4, 800dbf6 <__gethex+0x13e>
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bf14      	ite	ne
 800dbc4:	f04f 0800 	movne.w	r8, #0
 800dbc8:	f04f 0806 	moveq.w	r8, #6
 800dbcc:	4640      	mov	r0, r8
 800dbce:	b005      	add	sp, #20
 800dbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd4:	4645      	mov	r5, r8
 800dbd6:	4626      	mov	r6, r4
 800dbd8:	2401      	movs	r4, #1
 800dbda:	e7c7      	b.n	800db6c <__gethex+0xb4>
 800dbdc:	f04f 0b00 	mov.w	fp, #0
 800dbe0:	1ca9      	adds	r1, r5, #2
 800dbe2:	e7d0      	b.n	800db86 <__gethex+0xce>
 800dbe4:	f04f 0b01 	mov.w	fp, #1
 800dbe8:	e7fa      	b.n	800dbe0 <__gethex+0x128>
 800dbea:	230a      	movs	r3, #10
 800dbec:	fb03 0002 	mla	r0, r3, r2, r0
 800dbf0:	e7d0      	b.n	800db94 <__gethex+0xdc>
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	e7e0      	b.n	800dbb8 <__gethex+0x100>
 800dbf6:	eba5 0308 	sub.w	r3, r5, r8
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	2b07      	cmp	r3, #7
 800dc00:	dc0a      	bgt.n	800dc18 <__gethex+0x160>
 800dc02:	4648      	mov	r0, r9
 800dc04:	f7fe f92e 	bl	800be64 <_Balloc>
 800dc08:	4604      	mov	r4, r0
 800dc0a:	b940      	cbnz	r0, 800dc1e <__gethex+0x166>
 800dc0c:	4b61      	ldr	r3, [pc, #388]	; (800dd94 <__gethex+0x2dc>)
 800dc0e:	4602      	mov	r2, r0
 800dc10:	21e4      	movs	r1, #228	; 0xe4
 800dc12:	4861      	ldr	r0, [pc, #388]	; (800dd98 <__gethex+0x2e0>)
 800dc14:	f7ff feb4 	bl	800d980 <__assert_func>
 800dc18:	3101      	adds	r1, #1
 800dc1a:	105b      	asrs	r3, r3, #1
 800dc1c:	e7ef      	b.n	800dbfe <__gethex+0x146>
 800dc1e:	f100 0a14 	add.w	sl, r0, #20
 800dc22:	2300      	movs	r3, #0
 800dc24:	495a      	ldr	r1, [pc, #360]	; (800dd90 <__gethex+0x2d8>)
 800dc26:	f8cd a004 	str.w	sl, [sp, #4]
 800dc2a:	469b      	mov	fp, r3
 800dc2c:	45a8      	cmp	r8, r5
 800dc2e:	d342      	bcc.n	800dcb6 <__gethex+0x1fe>
 800dc30:	9801      	ldr	r0, [sp, #4]
 800dc32:	f840 bb04 	str.w	fp, [r0], #4
 800dc36:	eba0 000a 	sub.w	r0, r0, sl
 800dc3a:	1080      	asrs	r0, r0, #2
 800dc3c:	6120      	str	r0, [r4, #16]
 800dc3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800dc42:	4658      	mov	r0, fp
 800dc44:	f7fe fa00 	bl	800c048 <__hi0bits>
 800dc48:	683d      	ldr	r5, [r7, #0]
 800dc4a:	eba8 0000 	sub.w	r0, r8, r0
 800dc4e:	42a8      	cmp	r0, r5
 800dc50:	dd59      	ble.n	800dd06 <__gethex+0x24e>
 800dc52:	eba0 0805 	sub.w	r8, r0, r5
 800dc56:	4641      	mov	r1, r8
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7fe fd8f 	bl	800c77c <__any_on>
 800dc5e:	4683      	mov	fp, r0
 800dc60:	b1b8      	cbz	r0, 800dc92 <__gethex+0x1da>
 800dc62:	f108 33ff 	add.w	r3, r8, #4294967295
 800dc66:	1159      	asrs	r1, r3, #5
 800dc68:	f003 021f 	and.w	r2, r3, #31
 800dc6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc70:	f04f 0b01 	mov.w	fp, #1
 800dc74:	fa0b f202 	lsl.w	r2, fp, r2
 800dc78:	420a      	tst	r2, r1
 800dc7a:	d00a      	beq.n	800dc92 <__gethex+0x1da>
 800dc7c:	455b      	cmp	r3, fp
 800dc7e:	dd06      	ble.n	800dc8e <__gethex+0x1d6>
 800dc80:	f1a8 0102 	sub.w	r1, r8, #2
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7fe fd79 	bl	800c77c <__any_on>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d138      	bne.n	800dd00 <__gethex+0x248>
 800dc8e:	f04f 0b02 	mov.w	fp, #2
 800dc92:	4641      	mov	r1, r8
 800dc94:	4620      	mov	r0, r4
 800dc96:	f7ff fea7 	bl	800d9e8 <rshift>
 800dc9a:	4446      	add	r6, r8
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	42b3      	cmp	r3, r6
 800dca0:	da41      	bge.n	800dd26 <__gethex+0x26e>
 800dca2:	4621      	mov	r1, r4
 800dca4:	4648      	mov	r0, r9
 800dca6:	f7fe f91d 	bl	800bee4 <_Bfree>
 800dcaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcac:	2300      	movs	r3, #0
 800dcae:	6013      	str	r3, [r2, #0]
 800dcb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dcb4:	e78a      	b.n	800dbcc <__gethex+0x114>
 800dcb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800dcba:	2a2e      	cmp	r2, #46	; 0x2e
 800dcbc:	d014      	beq.n	800dce8 <__gethex+0x230>
 800dcbe:	2b20      	cmp	r3, #32
 800dcc0:	d106      	bne.n	800dcd0 <__gethex+0x218>
 800dcc2:	9b01      	ldr	r3, [sp, #4]
 800dcc4:	f843 bb04 	str.w	fp, [r3], #4
 800dcc8:	f04f 0b00 	mov.w	fp, #0
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	465b      	mov	r3, fp
 800dcd0:	7828      	ldrb	r0, [r5, #0]
 800dcd2:	9303      	str	r3, [sp, #12]
 800dcd4:	f7ff feda 	bl	800da8c <__hexdig_fun>
 800dcd8:	9b03      	ldr	r3, [sp, #12]
 800dcda:	f000 000f 	and.w	r0, r0, #15
 800dcde:	4098      	lsls	r0, r3
 800dce0:	ea4b 0b00 	orr.w	fp, fp, r0
 800dce4:	3304      	adds	r3, #4
 800dce6:	e7a1      	b.n	800dc2c <__gethex+0x174>
 800dce8:	45a8      	cmp	r8, r5
 800dcea:	d8e8      	bhi.n	800dcbe <__gethex+0x206>
 800dcec:	2201      	movs	r2, #1
 800dcee:	4628      	mov	r0, r5
 800dcf0:	9303      	str	r3, [sp, #12]
 800dcf2:	f7ff fe1b 	bl	800d92c <strncmp>
 800dcf6:	4926      	ldr	r1, [pc, #152]	; (800dd90 <__gethex+0x2d8>)
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d1df      	bne.n	800dcbe <__gethex+0x206>
 800dcfe:	e795      	b.n	800dc2c <__gethex+0x174>
 800dd00:	f04f 0b03 	mov.w	fp, #3
 800dd04:	e7c5      	b.n	800dc92 <__gethex+0x1da>
 800dd06:	da0b      	bge.n	800dd20 <__gethex+0x268>
 800dd08:	eba5 0800 	sub.w	r8, r5, r0
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	4642      	mov	r2, r8
 800dd10:	4648      	mov	r0, r9
 800dd12:	f7fe fb01 	bl	800c318 <__lshift>
 800dd16:	eba6 0608 	sub.w	r6, r6, r8
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	f100 0a14 	add.w	sl, r0, #20
 800dd20:	f04f 0b00 	mov.w	fp, #0
 800dd24:	e7ba      	b.n	800dc9c <__gethex+0x1e4>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	42b3      	cmp	r3, r6
 800dd2a:	dd73      	ble.n	800de14 <__gethex+0x35c>
 800dd2c:	1b9e      	subs	r6, r3, r6
 800dd2e:	42b5      	cmp	r5, r6
 800dd30:	dc34      	bgt.n	800dd9c <__gethex+0x2e4>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d023      	beq.n	800dd80 <__gethex+0x2c8>
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d025      	beq.n	800dd88 <__gethex+0x2d0>
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d115      	bne.n	800dd6c <__gethex+0x2b4>
 800dd40:	42b5      	cmp	r5, r6
 800dd42:	d113      	bne.n	800dd6c <__gethex+0x2b4>
 800dd44:	2d01      	cmp	r5, #1
 800dd46:	d10b      	bne.n	800dd60 <__gethex+0x2a8>
 800dd48:	9a02      	ldr	r2, [sp, #8]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6013      	str	r3, [r2, #0]
 800dd4e:	2301      	movs	r3, #1
 800dd50:	6123      	str	r3, [r4, #16]
 800dd52:	f8ca 3000 	str.w	r3, [sl]
 800dd56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd58:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dd5c:	601c      	str	r4, [r3, #0]
 800dd5e:	e735      	b.n	800dbcc <__gethex+0x114>
 800dd60:	1e69      	subs	r1, r5, #1
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7fe fd0a 	bl	800c77c <__any_on>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d1ed      	bne.n	800dd48 <__gethex+0x290>
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	4648      	mov	r0, r9
 800dd70:	f7fe f8b8 	bl	800bee4 <_Bfree>
 800dd74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd76:	2300      	movs	r3, #0
 800dd78:	6013      	str	r3, [r2, #0]
 800dd7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dd7e:	e725      	b.n	800dbcc <__gethex+0x114>
 800dd80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1f2      	bne.n	800dd6c <__gethex+0x2b4>
 800dd86:	e7df      	b.n	800dd48 <__gethex+0x290>
 800dd88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1dc      	bne.n	800dd48 <__gethex+0x290>
 800dd8e:	e7ed      	b.n	800dd6c <__gethex+0x2b4>
 800dd90:	0800fbbc 	.word	0x0800fbbc
 800dd94:	0800fa56 	.word	0x0800fa56
 800dd98:	0800fc65 	.word	0x0800fc65
 800dd9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800dda0:	f1bb 0f00 	cmp.w	fp, #0
 800dda4:	d133      	bne.n	800de0e <__gethex+0x356>
 800dda6:	f1b8 0f00 	cmp.w	r8, #0
 800ddaa:	d004      	beq.n	800ddb6 <__gethex+0x2fe>
 800ddac:	4641      	mov	r1, r8
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f7fe fce4 	bl	800c77c <__any_on>
 800ddb4:	4683      	mov	fp, r0
 800ddb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ddba:	2301      	movs	r3, #1
 800ddbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ddc0:	f008 081f 	and.w	r8, r8, #31
 800ddc4:	fa03 f308 	lsl.w	r3, r3, r8
 800ddc8:	4213      	tst	r3, r2
 800ddca:	4631      	mov	r1, r6
 800ddcc:	4620      	mov	r0, r4
 800ddce:	bf18      	it	ne
 800ddd0:	f04b 0b02 	orrne.w	fp, fp, #2
 800ddd4:	1bad      	subs	r5, r5, r6
 800ddd6:	f7ff fe07 	bl	800d9e8 <rshift>
 800ddda:	687e      	ldr	r6, [r7, #4]
 800dddc:	f04f 0802 	mov.w	r8, #2
 800dde0:	f1bb 0f00 	cmp.w	fp, #0
 800dde4:	d04a      	beq.n	800de7c <__gethex+0x3c4>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d016      	beq.n	800de1a <__gethex+0x362>
 800ddec:	2b03      	cmp	r3, #3
 800ddee:	d018      	beq.n	800de22 <__gethex+0x36a>
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d109      	bne.n	800de08 <__gethex+0x350>
 800ddf4:	f01b 0f02 	tst.w	fp, #2
 800ddf8:	d006      	beq.n	800de08 <__gethex+0x350>
 800ddfa:	f8da 3000 	ldr.w	r3, [sl]
 800ddfe:	ea4b 0b03 	orr.w	fp, fp, r3
 800de02:	f01b 0f01 	tst.w	fp, #1
 800de06:	d10f      	bne.n	800de28 <__gethex+0x370>
 800de08:	f048 0810 	orr.w	r8, r8, #16
 800de0c:	e036      	b.n	800de7c <__gethex+0x3c4>
 800de0e:	f04f 0b01 	mov.w	fp, #1
 800de12:	e7d0      	b.n	800ddb6 <__gethex+0x2fe>
 800de14:	f04f 0801 	mov.w	r8, #1
 800de18:	e7e2      	b.n	800dde0 <__gethex+0x328>
 800de1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de1c:	f1c3 0301 	rsb	r3, r3, #1
 800de20:	930f      	str	r3, [sp, #60]	; 0x3c
 800de22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0ef      	beq.n	800de08 <__gethex+0x350>
 800de28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de2c:	f104 0214 	add.w	r2, r4, #20
 800de30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800de3a:	2300      	movs	r3, #0
 800de3c:	4694      	mov	ip, r2
 800de3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800de42:	f1b1 3fff 	cmp.w	r1, #4294967295
 800de46:	d01e      	beq.n	800de86 <__gethex+0x3ce>
 800de48:	3101      	adds	r1, #1
 800de4a:	f8cc 1000 	str.w	r1, [ip]
 800de4e:	f1b8 0f02 	cmp.w	r8, #2
 800de52:	f104 0214 	add.w	r2, r4, #20
 800de56:	d13d      	bne.n	800ded4 <__gethex+0x41c>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	3b01      	subs	r3, #1
 800de5c:	42ab      	cmp	r3, r5
 800de5e:	d10b      	bne.n	800de78 <__gethex+0x3c0>
 800de60:	1169      	asrs	r1, r5, #5
 800de62:	2301      	movs	r3, #1
 800de64:	f005 051f 	and.w	r5, r5, #31
 800de68:	fa03 f505 	lsl.w	r5, r3, r5
 800de6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de70:	421d      	tst	r5, r3
 800de72:	bf18      	it	ne
 800de74:	f04f 0801 	movne.w	r8, #1
 800de78:	f048 0820 	orr.w	r8, r8, #32
 800de7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de7e:	601c      	str	r4, [r3, #0]
 800de80:	9b02      	ldr	r3, [sp, #8]
 800de82:	601e      	str	r6, [r3, #0]
 800de84:	e6a2      	b.n	800dbcc <__gethex+0x114>
 800de86:	4290      	cmp	r0, r2
 800de88:	f842 3c04 	str.w	r3, [r2, #-4]
 800de8c:	d8d6      	bhi.n	800de3c <__gethex+0x384>
 800de8e:	68a2      	ldr	r2, [r4, #8]
 800de90:	4593      	cmp	fp, r2
 800de92:	db17      	blt.n	800dec4 <__gethex+0x40c>
 800de94:	6861      	ldr	r1, [r4, #4]
 800de96:	4648      	mov	r0, r9
 800de98:	3101      	adds	r1, #1
 800de9a:	f7fd ffe3 	bl	800be64 <_Balloc>
 800de9e:	4682      	mov	sl, r0
 800dea0:	b918      	cbnz	r0, 800deaa <__gethex+0x3f2>
 800dea2:	4b1b      	ldr	r3, [pc, #108]	; (800df10 <__gethex+0x458>)
 800dea4:	4602      	mov	r2, r0
 800dea6:	2184      	movs	r1, #132	; 0x84
 800dea8:	e6b3      	b.n	800dc12 <__gethex+0x15a>
 800deaa:	6922      	ldr	r2, [r4, #16]
 800deac:	3202      	adds	r2, #2
 800deae:	f104 010c 	add.w	r1, r4, #12
 800deb2:	0092      	lsls	r2, r2, #2
 800deb4:	300c      	adds	r0, #12
 800deb6:	f7fd f844 	bl	800af42 <memcpy>
 800deba:	4621      	mov	r1, r4
 800debc:	4648      	mov	r0, r9
 800debe:	f7fe f811 	bl	800bee4 <_Bfree>
 800dec2:	4654      	mov	r4, sl
 800dec4:	6922      	ldr	r2, [r4, #16]
 800dec6:	1c51      	adds	r1, r2, #1
 800dec8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800decc:	6121      	str	r1, [r4, #16]
 800dece:	2101      	movs	r1, #1
 800ded0:	6151      	str	r1, [r2, #20]
 800ded2:	e7bc      	b.n	800de4e <__gethex+0x396>
 800ded4:	6921      	ldr	r1, [r4, #16]
 800ded6:	4559      	cmp	r1, fp
 800ded8:	dd0b      	ble.n	800def2 <__gethex+0x43a>
 800deda:	2101      	movs	r1, #1
 800dedc:	4620      	mov	r0, r4
 800dede:	f7ff fd83 	bl	800d9e8 <rshift>
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	3601      	adds	r6, #1
 800dee6:	42b3      	cmp	r3, r6
 800dee8:	f6ff aedb 	blt.w	800dca2 <__gethex+0x1ea>
 800deec:	f04f 0801 	mov.w	r8, #1
 800def0:	e7c2      	b.n	800de78 <__gethex+0x3c0>
 800def2:	f015 051f 	ands.w	r5, r5, #31
 800def6:	d0f9      	beq.n	800deec <__gethex+0x434>
 800def8:	9b01      	ldr	r3, [sp, #4]
 800defa:	441a      	add	r2, r3
 800defc:	f1c5 0520 	rsb	r5, r5, #32
 800df00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800df04:	f7fe f8a0 	bl	800c048 <__hi0bits>
 800df08:	42a8      	cmp	r0, r5
 800df0a:	dbe6      	blt.n	800deda <__gethex+0x422>
 800df0c:	e7ee      	b.n	800deec <__gethex+0x434>
 800df0e:	bf00      	nop
 800df10:	0800fa56 	.word	0x0800fa56

0800df14 <L_shift>:
 800df14:	f1c2 0208 	rsb	r2, r2, #8
 800df18:	0092      	lsls	r2, r2, #2
 800df1a:	b570      	push	{r4, r5, r6, lr}
 800df1c:	f1c2 0620 	rsb	r6, r2, #32
 800df20:	6843      	ldr	r3, [r0, #4]
 800df22:	6804      	ldr	r4, [r0, #0]
 800df24:	fa03 f506 	lsl.w	r5, r3, r6
 800df28:	432c      	orrs	r4, r5
 800df2a:	40d3      	lsrs	r3, r2
 800df2c:	6004      	str	r4, [r0, #0]
 800df2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800df32:	4288      	cmp	r0, r1
 800df34:	d3f4      	bcc.n	800df20 <L_shift+0xc>
 800df36:	bd70      	pop	{r4, r5, r6, pc}

0800df38 <__match>:
 800df38:	b530      	push	{r4, r5, lr}
 800df3a:	6803      	ldr	r3, [r0, #0]
 800df3c:	3301      	adds	r3, #1
 800df3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df42:	b914      	cbnz	r4, 800df4a <__match+0x12>
 800df44:	6003      	str	r3, [r0, #0]
 800df46:	2001      	movs	r0, #1
 800df48:	bd30      	pop	{r4, r5, pc}
 800df4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800df52:	2d19      	cmp	r5, #25
 800df54:	bf98      	it	ls
 800df56:	3220      	addls	r2, #32
 800df58:	42a2      	cmp	r2, r4
 800df5a:	d0f0      	beq.n	800df3e <__match+0x6>
 800df5c:	2000      	movs	r0, #0
 800df5e:	e7f3      	b.n	800df48 <__match+0x10>

0800df60 <__hexnan>:
 800df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	680b      	ldr	r3, [r1, #0]
 800df66:	6801      	ldr	r1, [r0, #0]
 800df68:	115e      	asrs	r6, r3, #5
 800df6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df6e:	f013 031f 	ands.w	r3, r3, #31
 800df72:	b087      	sub	sp, #28
 800df74:	bf18      	it	ne
 800df76:	3604      	addne	r6, #4
 800df78:	2500      	movs	r5, #0
 800df7a:	1f37      	subs	r7, r6, #4
 800df7c:	4682      	mov	sl, r0
 800df7e:	4690      	mov	r8, r2
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	f846 5c04 	str.w	r5, [r6, #-4]
 800df86:	46b9      	mov	r9, r7
 800df88:	463c      	mov	r4, r7
 800df8a:	9502      	str	r5, [sp, #8]
 800df8c:	46ab      	mov	fp, r5
 800df8e:	784a      	ldrb	r2, [r1, #1]
 800df90:	1c4b      	adds	r3, r1, #1
 800df92:	9303      	str	r3, [sp, #12]
 800df94:	b342      	cbz	r2, 800dfe8 <__hexnan+0x88>
 800df96:	4610      	mov	r0, r2
 800df98:	9105      	str	r1, [sp, #20]
 800df9a:	9204      	str	r2, [sp, #16]
 800df9c:	f7ff fd76 	bl	800da8c <__hexdig_fun>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d14f      	bne.n	800e044 <__hexnan+0xe4>
 800dfa4:	9a04      	ldr	r2, [sp, #16]
 800dfa6:	9905      	ldr	r1, [sp, #20]
 800dfa8:	2a20      	cmp	r2, #32
 800dfaa:	d818      	bhi.n	800dfde <__hexnan+0x7e>
 800dfac:	9b02      	ldr	r3, [sp, #8]
 800dfae:	459b      	cmp	fp, r3
 800dfb0:	dd13      	ble.n	800dfda <__hexnan+0x7a>
 800dfb2:	454c      	cmp	r4, r9
 800dfb4:	d206      	bcs.n	800dfc4 <__hexnan+0x64>
 800dfb6:	2d07      	cmp	r5, #7
 800dfb8:	dc04      	bgt.n	800dfc4 <__hexnan+0x64>
 800dfba:	462a      	mov	r2, r5
 800dfbc:	4649      	mov	r1, r9
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f7ff ffa8 	bl	800df14 <L_shift>
 800dfc4:	4544      	cmp	r4, r8
 800dfc6:	d950      	bls.n	800e06a <__hexnan+0x10a>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f1a4 0904 	sub.w	r9, r4, #4
 800dfce:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfd2:	f8cd b008 	str.w	fp, [sp, #8]
 800dfd6:	464c      	mov	r4, r9
 800dfd8:	461d      	mov	r5, r3
 800dfda:	9903      	ldr	r1, [sp, #12]
 800dfdc:	e7d7      	b.n	800df8e <__hexnan+0x2e>
 800dfde:	2a29      	cmp	r2, #41	; 0x29
 800dfe0:	d155      	bne.n	800e08e <__hexnan+0x12e>
 800dfe2:	3102      	adds	r1, #2
 800dfe4:	f8ca 1000 	str.w	r1, [sl]
 800dfe8:	f1bb 0f00 	cmp.w	fp, #0
 800dfec:	d04f      	beq.n	800e08e <__hexnan+0x12e>
 800dfee:	454c      	cmp	r4, r9
 800dff0:	d206      	bcs.n	800e000 <__hexnan+0xa0>
 800dff2:	2d07      	cmp	r5, #7
 800dff4:	dc04      	bgt.n	800e000 <__hexnan+0xa0>
 800dff6:	462a      	mov	r2, r5
 800dff8:	4649      	mov	r1, r9
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff ff8a 	bl	800df14 <L_shift>
 800e000:	4544      	cmp	r4, r8
 800e002:	d934      	bls.n	800e06e <__hexnan+0x10e>
 800e004:	f1a8 0204 	sub.w	r2, r8, #4
 800e008:	4623      	mov	r3, r4
 800e00a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e00e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e012:	429f      	cmp	r7, r3
 800e014:	d2f9      	bcs.n	800e00a <__hexnan+0xaa>
 800e016:	1b3b      	subs	r3, r7, r4
 800e018:	f023 0303 	bic.w	r3, r3, #3
 800e01c:	3304      	adds	r3, #4
 800e01e:	3e03      	subs	r6, #3
 800e020:	3401      	adds	r4, #1
 800e022:	42a6      	cmp	r6, r4
 800e024:	bf38      	it	cc
 800e026:	2304      	movcc	r3, #4
 800e028:	4443      	add	r3, r8
 800e02a:	2200      	movs	r2, #0
 800e02c:	f843 2b04 	str.w	r2, [r3], #4
 800e030:	429f      	cmp	r7, r3
 800e032:	d2fb      	bcs.n	800e02c <__hexnan+0xcc>
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	b91b      	cbnz	r3, 800e040 <__hexnan+0xe0>
 800e038:	4547      	cmp	r7, r8
 800e03a:	d126      	bne.n	800e08a <__hexnan+0x12a>
 800e03c:	2301      	movs	r3, #1
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	2005      	movs	r0, #5
 800e042:	e025      	b.n	800e090 <__hexnan+0x130>
 800e044:	3501      	adds	r5, #1
 800e046:	2d08      	cmp	r5, #8
 800e048:	f10b 0b01 	add.w	fp, fp, #1
 800e04c:	dd06      	ble.n	800e05c <__hexnan+0xfc>
 800e04e:	4544      	cmp	r4, r8
 800e050:	d9c3      	bls.n	800dfda <__hexnan+0x7a>
 800e052:	2300      	movs	r3, #0
 800e054:	f844 3c04 	str.w	r3, [r4, #-4]
 800e058:	2501      	movs	r5, #1
 800e05a:	3c04      	subs	r4, #4
 800e05c:	6822      	ldr	r2, [r4, #0]
 800e05e:	f000 000f 	and.w	r0, r0, #15
 800e062:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e066:	6020      	str	r0, [r4, #0]
 800e068:	e7b7      	b.n	800dfda <__hexnan+0x7a>
 800e06a:	2508      	movs	r5, #8
 800e06c:	e7b5      	b.n	800dfda <__hexnan+0x7a>
 800e06e:	9b01      	ldr	r3, [sp, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0df      	beq.n	800e034 <__hexnan+0xd4>
 800e074:	f1c3 0320 	rsb	r3, r3, #32
 800e078:	f04f 32ff 	mov.w	r2, #4294967295
 800e07c:	40da      	lsrs	r2, r3
 800e07e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e082:	4013      	ands	r3, r2
 800e084:	f846 3c04 	str.w	r3, [r6, #-4]
 800e088:	e7d4      	b.n	800e034 <__hexnan+0xd4>
 800e08a:	3f04      	subs	r7, #4
 800e08c:	e7d2      	b.n	800e034 <__hexnan+0xd4>
 800e08e:	2004      	movs	r0, #4
 800e090:	b007      	add	sp, #28
 800e092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e096 <__ascii_mbtowc>:
 800e096:	b082      	sub	sp, #8
 800e098:	b901      	cbnz	r1, 800e09c <__ascii_mbtowc+0x6>
 800e09a:	a901      	add	r1, sp, #4
 800e09c:	b142      	cbz	r2, 800e0b0 <__ascii_mbtowc+0x1a>
 800e09e:	b14b      	cbz	r3, 800e0b4 <__ascii_mbtowc+0x1e>
 800e0a0:	7813      	ldrb	r3, [r2, #0]
 800e0a2:	600b      	str	r3, [r1, #0]
 800e0a4:	7812      	ldrb	r2, [r2, #0]
 800e0a6:	1e10      	subs	r0, r2, #0
 800e0a8:	bf18      	it	ne
 800e0aa:	2001      	movne	r0, #1
 800e0ac:	b002      	add	sp, #8
 800e0ae:	4770      	bx	lr
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	e7fb      	b.n	800e0ac <__ascii_mbtowc+0x16>
 800e0b4:	f06f 0001 	mvn.w	r0, #1
 800e0b8:	e7f8      	b.n	800e0ac <__ascii_mbtowc+0x16>

0800e0ba <_realloc_r>:
 800e0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0be:	4680      	mov	r8, r0
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	460e      	mov	r6, r1
 800e0c4:	b921      	cbnz	r1, 800e0d0 <_realloc_r+0x16>
 800e0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	f7fd be3e 	b.w	800bd4c <_malloc_r>
 800e0d0:	b92a      	cbnz	r2, 800e0de <_realloc_r+0x24>
 800e0d2:	f7fd fdc7 	bl	800bc64 <_free_r>
 800e0d6:	4625      	mov	r5, r4
 800e0d8:	4628      	mov	r0, r5
 800e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0de:	f000 f842 	bl	800e166 <_malloc_usable_size_r>
 800e0e2:	4284      	cmp	r4, r0
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	d802      	bhi.n	800e0ee <_realloc_r+0x34>
 800e0e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0ec:	d812      	bhi.n	800e114 <_realloc_r+0x5a>
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	4640      	mov	r0, r8
 800e0f2:	f7fd fe2b 	bl	800bd4c <_malloc_r>
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d0ed      	beq.n	800e0d8 <_realloc_r+0x1e>
 800e0fc:	42bc      	cmp	r4, r7
 800e0fe:	4622      	mov	r2, r4
 800e100:	4631      	mov	r1, r6
 800e102:	bf28      	it	cs
 800e104:	463a      	movcs	r2, r7
 800e106:	f7fc ff1c 	bl	800af42 <memcpy>
 800e10a:	4631      	mov	r1, r6
 800e10c:	4640      	mov	r0, r8
 800e10e:	f7fd fda9 	bl	800bc64 <_free_r>
 800e112:	e7e1      	b.n	800e0d8 <_realloc_r+0x1e>
 800e114:	4635      	mov	r5, r6
 800e116:	e7df      	b.n	800e0d8 <_realloc_r+0x1e>

0800e118 <__ascii_wctomb>:
 800e118:	b149      	cbz	r1, 800e12e <__ascii_wctomb+0x16>
 800e11a:	2aff      	cmp	r2, #255	; 0xff
 800e11c:	bf85      	ittet	hi
 800e11e:	238a      	movhi	r3, #138	; 0x8a
 800e120:	6003      	strhi	r3, [r0, #0]
 800e122:	700a      	strbls	r2, [r1, #0]
 800e124:	f04f 30ff 	movhi.w	r0, #4294967295
 800e128:	bf98      	it	ls
 800e12a:	2001      	movls	r0, #1
 800e12c:	4770      	bx	lr
 800e12e:	4608      	mov	r0, r1
 800e130:	4770      	bx	lr
	...

0800e134 <fiprintf>:
 800e134:	b40e      	push	{r1, r2, r3}
 800e136:	b503      	push	{r0, r1, lr}
 800e138:	4601      	mov	r1, r0
 800e13a:	ab03      	add	r3, sp, #12
 800e13c:	4805      	ldr	r0, [pc, #20]	; (800e154 <fiprintf+0x20>)
 800e13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e142:	6800      	ldr	r0, [r0, #0]
 800e144:	9301      	str	r3, [sp, #4]
 800e146:	f000 f83f 	bl	800e1c8 <_vfiprintf_r>
 800e14a:	b002      	add	sp, #8
 800e14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e150:	b003      	add	sp, #12
 800e152:	4770      	bx	lr
 800e154:	20000088 	.word	0x20000088

0800e158 <abort>:
 800e158:	b508      	push	{r3, lr}
 800e15a:	2006      	movs	r0, #6
 800e15c:	f000 fa0c 	bl	800e578 <raise>
 800e160:	2001      	movs	r0, #1
 800e162:	f7f5 f99b 	bl	800349c <_exit>

0800e166 <_malloc_usable_size_r>:
 800e166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e16a:	1f18      	subs	r0, r3, #4
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bfbc      	itt	lt
 800e170:	580b      	ldrlt	r3, [r1, r0]
 800e172:	18c0      	addlt	r0, r0, r3
 800e174:	4770      	bx	lr

0800e176 <__sfputc_r>:
 800e176:	6893      	ldr	r3, [r2, #8]
 800e178:	3b01      	subs	r3, #1
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	b410      	push	{r4}
 800e17e:	6093      	str	r3, [r2, #8]
 800e180:	da08      	bge.n	800e194 <__sfputc_r+0x1e>
 800e182:	6994      	ldr	r4, [r2, #24]
 800e184:	42a3      	cmp	r3, r4
 800e186:	db01      	blt.n	800e18c <__sfputc_r+0x16>
 800e188:	290a      	cmp	r1, #10
 800e18a:	d103      	bne.n	800e194 <__sfputc_r+0x1e>
 800e18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e190:	f000 b934 	b.w	800e3fc <__swbuf_r>
 800e194:	6813      	ldr	r3, [r2, #0]
 800e196:	1c58      	adds	r0, r3, #1
 800e198:	6010      	str	r0, [r2, #0]
 800e19a:	7019      	strb	r1, [r3, #0]
 800e19c:	4608      	mov	r0, r1
 800e19e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <__sfputs_r>:
 800e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460f      	mov	r7, r1
 800e1aa:	4614      	mov	r4, r2
 800e1ac:	18d5      	adds	r5, r2, r3
 800e1ae:	42ac      	cmp	r4, r5
 800e1b0:	d101      	bne.n	800e1b6 <__sfputs_r+0x12>
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	e007      	b.n	800e1c6 <__sfputs_r+0x22>
 800e1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ba:	463a      	mov	r2, r7
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7ff ffda 	bl	800e176 <__sfputc_r>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	d1f3      	bne.n	800e1ae <__sfputs_r+0xa>
 800e1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1c8 <_vfiprintf_r>:
 800e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1cc:	460d      	mov	r5, r1
 800e1ce:	b09d      	sub	sp, #116	; 0x74
 800e1d0:	4614      	mov	r4, r2
 800e1d2:	4698      	mov	r8, r3
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	b118      	cbz	r0, 800e1e0 <_vfiprintf_r+0x18>
 800e1d8:	6a03      	ldr	r3, [r0, #32]
 800e1da:	b90b      	cbnz	r3, 800e1e0 <_vfiprintf_r+0x18>
 800e1dc:	f7fc fd98 	bl	800ad10 <__sinit>
 800e1e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1e2:	07d9      	lsls	r1, r3, #31
 800e1e4:	d405      	bmi.n	800e1f2 <_vfiprintf_r+0x2a>
 800e1e6:	89ab      	ldrh	r3, [r5, #12]
 800e1e8:	059a      	lsls	r2, r3, #22
 800e1ea:	d402      	bmi.n	800e1f2 <_vfiprintf_r+0x2a>
 800e1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1ee:	f7fc fea6 	bl	800af3e <__retarget_lock_acquire_recursive>
 800e1f2:	89ab      	ldrh	r3, [r5, #12]
 800e1f4:	071b      	lsls	r3, r3, #28
 800e1f6:	d501      	bpl.n	800e1fc <_vfiprintf_r+0x34>
 800e1f8:	692b      	ldr	r3, [r5, #16]
 800e1fa:	b99b      	cbnz	r3, 800e224 <_vfiprintf_r+0x5c>
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	4630      	mov	r0, r6
 800e200:	f000 f93a 	bl	800e478 <__swsetup_r>
 800e204:	b170      	cbz	r0, 800e224 <_vfiprintf_r+0x5c>
 800e206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e208:	07dc      	lsls	r4, r3, #31
 800e20a:	d504      	bpl.n	800e216 <_vfiprintf_r+0x4e>
 800e20c:	f04f 30ff 	mov.w	r0, #4294967295
 800e210:	b01d      	add	sp, #116	; 0x74
 800e212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e216:	89ab      	ldrh	r3, [r5, #12]
 800e218:	0598      	lsls	r0, r3, #22
 800e21a:	d4f7      	bmi.n	800e20c <_vfiprintf_r+0x44>
 800e21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e21e:	f7fc fe8f 	bl	800af40 <__retarget_lock_release_recursive>
 800e222:	e7f3      	b.n	800e20c <_vfiprintf_r+0x44>
 800e224:	2300      	movs	r3, #0
 800e226:	9309      	str	r3, [sp, #36]	; 0x24
 800e228:	2320      	movs	r3, #32
 800e22a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e232:	2330      	movs	r3, #48	; 0x30
 800e234:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e3e8 <_vfiprintf_r+0x220>
 800e238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e23c:	f04f 0901 	mov.w	r9, #1
 800e240:	4623      	mov	r3, r4
 800e242:	469a      	mov	sl, r3
 800e244:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e248:	b10a      	cbz	r2, 800e24e <_vfiprintf_r+0x86>
 800e24a:	2a25      	cmp	r2, #37	; 0x25
 800e24c:	d1f9      	bne.n	800e242 <_vfiprintf_r+0x7a>
 800e24e:	ebba 0b04 	subs.w	fp, sl, r4
 800e252:	d00b      	beq.n	800e26c <_vfiprintf_r+0xa4>
 800e254:	465b      	mov	r3, fp
 800e256:	4622      	mov	r2, r4
 800e258:	4629      	mov	r1, r5
 800e25a:	4630      	mov	r0, r6
 800e25c:	f7ff ffa2 	bl	800e1a4 <__sfputs_r>
 800e260:	3001      	adds	r0, #1
 800e262:	f000 80a9 	beq.w	800e3b8 <_vfiprintf_r+0x1f0>
 800e266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e268:	445a      	add	r2, fp
 800e26a:	9209      	str	r2, [sp, #36]	; 0x24
 800e26c:	f89a 3000 	ldrb.w	r3, [sl]
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 80a1 	beq.w	800e3b8 <_vfiprintf_r+0x1f0>
 800e276:	2300      	movs	r3, #0
 800e278:	f04f 32ff 	mov.w	r2, #4294967295
 800e27c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e280:	f10a 0a01 	add.w	sl, sl, #1
 800e284:	9304      	str	r3, [sp, #16]
 800e286:	9307      	str	r3, [sp, #28]
 800e288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e28c:	931a      	str	r3, [sp, #104]	; 0x68
 800e28e:	4654      	mov	r4, sl
 800e290:	2205      	movs	r2, #5
 800e292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e296:	4854      	ldr	r0, [pc, #336]	; (800e3e8 <_vfiprintf_r+0x220>)
 800e298:	f7f1 ff9a 	bl	80001d0 <memchr>
 800e29c:	9a04      	ldr	r2, [sp, #16]
 800e29e:	b9d8      	cbnz	r0, 800e2d8 <_vfiprintf_r+0x110>
 800e2a0:	06d1      	lsls	r1, r2, #27
 800e2a2:	bf44      	itt	mi
 800e2a4:	2320      	movmi	r3, #32
 800e2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2aa:	0713      	lsls	r3, r2, #28
 800e2ac:	bf44      	itt	mi
 800e2ae:	232b      	movmi	r3, #43	; 0x2b
 800e2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ba:	d015      	beq.n	800e2e8 <_vfiprintf_r+0x120>
 800e2bc:	9a07      	ldr	r2, [sp, #28]
 800e2be:	4654      	mov	r4, sl
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	f04f 0c0a 	mov.w	ip, #10
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2cc:	3b30      	subs	r3, #48	; 0x30
 800e2ce:	2b09      	cmp	r3, #9
 800e2d0:	d94d      	bls.n	800e36e <_vfiprintf_r+0x1a6>
 800e2d2:	b1b0      	cbz	r0, 800e302 <_vfiprintf_r+0x13a>
 800e2d4:	9207      	str	r2, [sp, #28]
 800e2d6:	e014      	b.n	800e302 <_vfiprintf_r+0x13a>
 800e2d8:	eba0 0308 	sub.w	r3, r0, r8
 800e2dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	9304      	str	r3, [sp, #16]
 800e2e4:	46a2      	mov	sl, r4
 800e2e6:	e7d2      	b.n	800e28e <_vfiprintf_r+0xc6>
 800e2e8:	9b03      	ldr	r3, [sp, #12]
 800e2ea:	1d19      	adds	r1, r3, #4
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	9103      	str	r1, [sp, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	bfbb      	ittet	lt
 800e2f4:	425b      	neglt	r3, r3
 800e2f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e2fa:	9307      	strge	r3, [sp, #28]
 800e2fc:	9307      	strlt	r3, [sp, #28]
 800e2fe:	bfb8      	it	lt
 800e300:	9204      	strlt	r2, [sp, #16]
 800e302:	7823      	ldrb	r3, [r4, #0]
 800e304:	2b2e      	cmp	r3, #46	; 0x2e
 800e306:	d10c      	bne.n	800e322 <_vfiprintf_r+0x15a>
 800e308:	7863      	ldrb	r3, [r4, #1]
 800e30a:	2b2a      	cmp	r3, #42	; 0x2a
 800e30c:	d134      	bne.n	800e378 <_vfiprintf_r+0x1b0>
 800e30e:	9b03      	ldr	r3, [sp, #12]
 800e310:	1d1a      	adds	r2, r3, #4
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	9203      	str	r2, [sp, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	bfb8      	it	lt
 800e31a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e31e:	3402      	adds	r4, #2
 800e320:	9305      	str	r3, [sp, #20]
 800e322:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e3f8 <_vfiprintf_r+0x230>
 800e326:	7821      	ldrb	r1, [r4, #0]
 800e328:	2203      	movs	r2, #3
 800e32a:	4650      	mov	r0, sl
 800e32c:	f7f1 ff50 	bl	80001d0 <memchr>
 800e330:	b138      	cbz	r0, 800e342 <_vfiprintf_r+0x17a>
 800e332:	9b04      	ldr	r3, [sp, #16]
 800e334:	eba0 000a 	sub.w	r0, r0, sl
 800e338:	2240      	movs	r2, #64	; 0x40
 800e33a:	4082      	lsls	r2, r0
 800e33c:	4313      	orrs	r3, r2
 800e33e:	3401      	adds	r4, #1
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e346:	4829      	ldr	r0, [pc, #164]	; (800e3ec <_vfiprintf_r+0x224>)
 800e348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e34c:	2206      	movs	r2, #6
 800e34e:	f7f1 ff3f 	bl	80001d0 <memchr>
 800e352:	2800      	cmp	r0, #0
 800e354:	d03f      	beq.n	800e3d6 <_vfiprintf_r+0x20e>
 800e356:	4b26      	ldr	r3, [pc, #152]	; (800e3f0 <_vfiprintf_r+0x228>)
 800e358:	bb1b      	cbnz	r3, 800e3a2 <_vfiprintf_r+0x1da>
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	3307      	adds	r3, #7
 800e35e:	f023 0307 	bic.w	r3, r3, #7
 800e362:	3308      	adds	r3, #8
 800e364:	9303      	str	r3, [sp, #12]
 800e366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e368:	443b      	add	r3, r7
 800e36a:	9309      	str	r3, [sp, #36]	; 0x24
 800e36c:	e768      	b.n	800e240 <_vfiprintf_r+0x78>
 800e36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e372:	460c      	mov	r4, r1
 800e374:	2001      	movs	r0, #1
 800e376:	e7a6      	b.n	800e2c6 <_vfiprintf_r+0xfe>
 800e378:	2300      	movs	r3, #0
 800e37a:	3401      	adds	r4, #1
 800e37c:	9305      	str	r3, [sp, #20]
 800e37e:	4619      	mov	r1, r3
 800e380:	f04f 0c0a 	mov.w	ip, #10
 800e384:	4620      	mov	r0, r4
 800e386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e38a:	3a30      	subs	r2, #48	; 0x30
 800e38c:	2a09      	cmp	r2, #9
 800e38e:	d903      	bls.n	800e398 <_vfiprintf_r+0x1d0>
 800e390:	2b00      	cmp	r3, #0
 800e392:	d0c6      	beq.n	800e322 <_vfiprintf_r+0x15a>
 800e394:	9105      	str	r1, [sp, #20]
 800e396:	e7c4      	b.n	800e322 <_vfiprintf_r+0x15a>
 800e398:	fb0c 2101 	mla	r1, ip, r1, r2
 800e39c:	4604      	mov	r4, r0
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e7f0      	b.n	800e384 <_vfiprintf_r+0x1bc>
 800e3a2:	ab03      	add	r3, sp, #12
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	462a      	mov	r2, r5
 800e3a8:	4b12      	ldr	r3, [pc, #72]	; (800e3f4 <_vfiprintf_r+0x22c>)
 800e3aa:	a904      	add	r1, sp, #16
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f7fb fe4d 	bl	800a04c <_printf_float>
 800e3b2:	4607      	mov	r7, r0
 800e3b4:	1c78      	adds	r0, r7, #1
 800e3b6:	d1d6      	bne.n	800e366 <_vfiprintf_r+0x19e>
 800e3b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3ba:	07d9      	lsls	r1, r3, #31
 800e3bc:	d405      	bmi.n	800e3ca <_vfiprintf_r+0x202>
 800e3be:	89ab      	ldrh	r3, [r5, #12]
 800e3c0:	059a      	lsls	r2, r3, #22
 800e3c2:	d402      	bmi.n	800e3ca <_vfiprintf_r+0x202>
 800e3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3c6:	f7fc fdbb 	bl	800af40 <__retarget_lock_release_recursive>
 800e3ca:	89ab      	ldrh	r3, [r5, #12]
 800e3cc:	065b      	lsls	r3, r3, #25
 800e3ce:	f53f af1d 	bmi.w	800e20c <_vfiprintf_r+0x44>
 800e3d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3d4:	e71c      	b.n	800e210 <_vfiprintf_r+0x48>
 800e3d6:	ab03      	add	r3, sp, #12
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	462a      	mov	r2, r5
 800e3dc:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <_vfiprintf_r+0x22c>)
 800e3de:	a904      	add	r1, sp, #16
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7fc f8d7 	bl	800a594 <_printf_i>
 800e3e6:	e7e4      	b.n	800e3b2 <_vfiprintf_r+0x1ea>
 800e3e8:	0800fc10 	.word	0x0800fc10
 800e3ec:	0800fc1a 	.word	0x0800fc1a
 800e3f0:	0800a04d 	.word	0x0800a04d
 800e3f4:	0800e1a5 	.word	0x0800e1a5
 800e3f8:	0800fc16 	.word	0x0800fc16

0800e3fc <__swbuf_r>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	460e      	mov	r6, r1
 800e400:	4614      	mov	r4, r2
 800e402:	4605      	mov	r5, r0
 800e404:	b118      	cbz	r0, 800e40e <__swbuf_r+0x12>
 800e406:	6a03      	ldr	r3, [r0, #32]
 800e408:	b90b      	cbnz	r3, 800e40e <__swbuf_r+0x12>
 800e40a:	f7fc fc81 	bl	800ad10 <__sinit>
 800e40e:	69a3      	ldr	r3, [r4, #24]
 800e410:	60a3      	str	r3, [r4, #8]
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	071a      	lsls	r2, r3, #28
 800e416:	d525      	bpl.n	800e464 <__swbuf_r+0x68>
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	b31b      	cbz	r3, 800e464 <__swbuf_r+0x68>
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	6922      	ldr	r2, [r4, #16]
 800e420:	1a98      	subs	r0, r3, r2
 800e422:	6963      	ldr	r3, [r4, #20]
 800e424:	b2f6      	uxtb	r6, r6
 800e426:	4283      	cmp	r3, r0
 800e428:	4637      	mov	r7, r6
 800e42a:	dc04      	bgt.n	800e436 <__swbuf_r+0x3a>
 800e42c:	4621      	mov	r1, r4
 800e42e:	4628      	mov	r0, r5
 800e430:	f7ff fa3a 	bl	800d8a8 <_fflush_r>
 800e434:	b9e0      	cbnz	r0, 800e470 <__swbuf_r+0x74>
 800e436:	68a3      	ldr	r3, [r4, #8]
 800e438:	3b01      	subs	r3, #1
 800e43a:	60a3      	str	r3, [r4, #8]
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	6022      	str	r2, [r4, #0]
 800e442:	701e      	strb	r6, [r3, #0]
 800e444:	6962      	ldr	r2, [r4, #20]
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	429a      	cmp	r2, r3
 800e44a:	d004      	beq.n	800e456 <__swbuf_r+0x5a>
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	07db      	lsls	r3, r3, #31
 800e450:	d506      	bpl.n	800e460 <__swbuf_r+0x64>
 800e452:	2e0a      	cmp	r6, #10
 800e454:	d104      	bne.n	800e460 <__swbuf_r+0x64>
 800e456:	4621      	mov	r1, r4
 800e458:	4628      	mov	r0, r5
 800e45a:	f7ff fa25 	bl	800d8a8 <_fflush_r>
 800e45e:	b938      	cbnz	r0, 800e470 <__swbuf_r+0x74>
 800e460:	4638      	mov	r0, r7
 800e462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e464:	4621      	mov	r1, r4
 800e466:	4628      	mov	r0, r5
 800e468:	f000 f806 	bl	800e478 <__swsetup_r>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d0d5      	beq.n	800e41c <__swbuf_r+0x20>
 800e470:	f04f 37ff 	mov.w	r7, #4294967295
 800e474:	e7f4      	b.n	800e460 <__swbuf_r+0x64>
	...

0800e478 <__swsetup_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4b2a      	ldr	r3, [pc, #168]	; (800e524 <__swsetup_r+0xac>)
 800e47c:	4605      	mov	r5, r0
 800e47e:	6818      	ldr	r0, [r3, #0]
 800e480:	460c      	mov	r4, r1
 800e482:	b118      	cbz	r0, 800e48c <__swsetup_r+0x14>
 800e484:	6a03      	ldr	r3, [r0, #32]
 800e486:	b90b      	cbnz	r3, 800e48c <__swsetup_r+0x14>
 800e488:	f7fc fc42 	bl	800ad10 <__sinit>
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e492:	0718      	lsls	r0, r3, #28
 800e494:	d422      	bmi.n	800e4dc <__swsetup_r+0x64>
 800e496:	06d9      	lsls	r1, r3, #27
 800e498:	d407      	bmi.n	800e4aa <__swsetup_r+0x32>
 800e49a:	2309      	movs	r3, #9
 800e49c:	602b      	str	r3, [r5, #0]
 800e49e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4a2:	81a3      	strh	r3, [r4, #12]
 800e4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a8:	e034      	b.n	800e514 <__swsetup_r+0x9c>
 800e4aa:	0758      	lsls	r0, r3, #29
 800e4ac:	d512      	bpl.n	800e4d4 <__swsetup_r+0x5c>
 800e4ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4b0:	b141      	cbz	r1, 800e4c4 <__swsetup_r+0x4c>
 800e4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4b6:	4299      	cmp	r1, r3
 800e4b8:	d002      	beq.n	800e4c0 <__swsetup_r+0x48>
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7fd fbd2 	bl	800bc64 <_free_r>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	6363      	str	r3, [r4, #52]	; 0x34
 800e4c4:	89a3      	ldrh	r3, [r4, #12]
 800e4c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4ca:	81a3      	strh	r3, [r4, #12]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	6063      	str	r3, [r4, #4]
 800e4d0:	6923      	ldr	r3, [r4, #16]
 800e4d2:	6023      	str	r3, [r4, #0]
 800e4d4:	89a3      	ldrh	r3, [r4, #12]
 800e4d6:	f043 0308 	orr.w	r3, r3, #8
 800e4da:	81a3      	strh	r3, [r4, #12]
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	b94b      	cbnz	r3, 800e4f4 <__swsetup_r+0x7c>
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4ea:	d003      	beq.n	800e4f4 <__swsetup_r+0x7c>
 800e4ec:	4621      	mov	r1, r4
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	f000 f884 	bl	800e5fc <__smakebuf_r>
 800e4f4:	89a0      	ldrh	r0, [r4, #12]
 800e4f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4fa:	f010 0301 	ands.w	r3, r0, #1
 800e4fe:	d00a      	beq.n	800e516 <__swsetup_r+0x9e>
 800e500:	2300      	movs	r3, #0
 800e502:	60a3      	str	r3, [r4, #8]
 800e504:	6963      	ldr	r3, [r4, #20]
 800e506:	425b      	negs	r3, r3
 800e508:	61a3      	str	r3, [r4, #24]
 800e50a:	6923      	ldr	r3, [r4, #16]
 800e50c:	b943      	cbnz	r3, 800e520 <__swsetup_r+0xa8>
 800e50e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e512:	d1c4      	bne.n	800e49e <__swsetup_r+0x26>
 800e514:	bd38      	pop	{r3, r4, r5, pc}
 800e516:	0781      	lsls	r1, r0, #30
 800e518:	bf58      	it	pl
 800e51a:	6963      	ldrpl	r3, [r4, #20]
 800e51c:	60a3      	str	r3, [r4, #8]
 800e51e:	e7f4      	b.n	800e50a <__swsetup_r+0x92>
 800e520:	2000      	movs	r0, #0
 800e522:	e7f7      	b.n	800e514 <__swsetup_r+0x9c>
 800e524:	20000088 	.word	0x20000088

0800e528 <_raise_r>:
 800e528:	291f      	cmp	r1, #31
 800e52a:	b538      	push	{r3, r4, r5, lr}
 800e52c:	4604      	mov	r4, r0
 800e52e:	460d      	mov	r5, r1
 800e530:	d904      	bls.n	800e53c <_raise_r+0x14>
 800e532:	2316      	movs	r3, #22
 800e534:	6003      	str	r3, [r0, #0]
 800e536:	f04f 30ff 	mov.w	r0, #4294967295
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e53e:	b112      	cbz	r2, 800e546 <_raise_r+0x1e>
 800e540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e544:	b94b      	cbnz	r3, 800e55a <_raise_r+0x32>
 800e546:	4620      	mov	r0, r4
 800e548:	f000 f830 	bl	800e5ac <_getpid_r>
 800e54c:	462a      	mov	r2, r5
 800e54e:	4601      	mov	r1, r0
 800e550:	4620      	mov	r0, r4
 800e552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e556:	f000 b817 	b.w	800e588 <_kill_r>
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d00a      	beq.n	800e574 <_raise_r+0x4c>
 800e55e:	1c59      	adds	r1, r3, #1
 800e560:	d103      	bne.n	800e56a <_raise_r+0x42>
 800e562:	2316      	movs	r3, #22
 800e564:	6003      	str	r3, [r0, #0]
 800e566:	2001      	movs	r0, #1
 800e568:	e7e7      	b.n	800e53a <_raise_r+0x12>
 800e56a:	2400      	movs	r4, #0
 800e56c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e570:	4628      	mov	r0, r5
 800e572:	4798      	blx	r3
 800e574:	2000      	movs	r0, #0
 800e576:	e7e0      	b.n	800e53a <_raise_r+0x12>

0800e578 <raise>:
 800e578:	4b02      	ldr	r3, [pc, #8]	; (800e584 <raise+0xc>)
 800e57a:	4601      	mov	r1, r0
 800e57c:	6818      	ldr	r0, [r3, #0]
 800e57e:	f7ff bfd3 	b.w	800e528 <_raise_r>
 800e582:	bf00      	nop
 800e584:	20000088 	.word	0x20000088

0800e588 <_kill_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	4d07      	ldr	r5, [pc, #28]	; (800e5a8 <_kill_r+0x20>)
 800e58c:	2300      	movs	r3, #0
 800e58e:	4604      	mov	r4, r0
 800e590:	4608      	mov	r0, r1
 800e592:	4611      	mov	r1, r2
 800e594:	602b      	str	r3, [r5, #0]
 800e596:	f7f4 ff71 	bl	800347c <_kill>
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	d102      	bne.n	800e5a4 <_kill_r+0x1c>
 800e59e:	682b      	ldr	r3, [r5, #0]
 800e5a0:	b103      	cbz	r3, 800e5a4 <_kill_r+0x1c>
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	bd38      	pop	{r3, r4, r5, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20005054 	.word	0x20005054

0800e5ac <_getpid_r>:
 800e5ac:	f7f4 bf5e 	b.w	800346c <_getpid>

0800e5b0 <__swhatbuf_r>:
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b8:	2900      	cmp	r1, #0
 800e5ba:	b096      	sub	sp, #88	; 0x58
 800e5bc:	4615      	mov	r5, r2
 800e5be:	461e      	mov	r6, r3
 800e5c0:	da0d      	bge.n	800e5de <__swhatbuf_r+0x2e>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e5c8:	f04f 0100 	mov.w	r1, #0
 800e5cc:	bf0c      	ite	eq
 800e5ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e5d2:	2340      	movne	r3, #64	; 0x40
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	6031      	str	r1, [r6, #0]
 800e5d8:	602b      	str	r3, [r5, #0]
 800e5da:	b016      	add	sp, #88	; 0x58
 800e5dc:	bd70      	pop	{r4, r5, r6, pc}
 800e5de:	466a      	mov	r2, sp
 800e5e0:	f000 f848 	bl	800e674 <_fstat_r>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dbec      	blt.n	800e5c2 <__swhatbuf_r+0x12>
 800e5e8:	9901      	ldr	r1, [sp, #4]
 800e5ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e5ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e5f2:	4259      	negs	r1, r3
 800e5f4:	4159      	adcs	r1, r3
 800e5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5fa:	e7eb      	b.n	800e5d4 <__swhatbuf_r+0x24>

0800e5fc <__smakebuf_r>:
 800e5fc:	898b      	ldrh	r3, [r1, #12]
 800e5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e600:	079d      	lsls	r5, r3, #30
 800e602:	4606      	mov	r6, r0
 800e604:	460c      	mov	r4, r1
 800e606:	d507      	bpl.n	800e618 <__smakebuf_r+0x1c>
 800e608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	6123      	str	r3, [r4, #16]
 800e610:	2301      	movs	r3, #1
 800e612:	6163      	str	r3, [r4, #20]
 800e614:	b002      	add	sp, #8
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	ab01      	add	r3, sp, #4
 800e61a:	466a      	mov	r2, sp
 800e61c:	f7ff ffc8 	bl	800e5b0 <__swhatbuf_r>
 800e620:	9900      	ldr	r1, [sp, #0]
 800e622:	4605      	mov	r5, r0
 800e624:	4630      	mov	r0, r6
 800e626:	f7fd fb91 	bl	800bd4c <_malloc_r>
 800e62a:	b948      	cbnz	r0, 800e640 <__smakebuf_r+0x44>
 800e62c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e630:	059a      	lsls	r2, r3, #22
 800e632:	d4ef      	bmi.n	800e614 <__smakebuf_r+0x18>
 800e634:	f023 0303 	bic.w	r3, r3, #3
 800e638:	f043 0302 	orr.w	r3, r3, #2
 800e63c:	81a3      	strh	r3, [r4, #12]
 800e63e:	e7e3      	b.n	800e608 <__smakebuf_r+0xc>
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	6020      	str	r0, [r4, #0]
 800e644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e648:	81a3      	strh	r3, [r4, #12]
 800e64a:	9b00      	ldr	r3, [sp, #0]
 800e64c:	6163      	str	r3, [r4, #20]
 800e64e:	9b01      	ldr	r3, [sp, #4]
 800e650:	6120      	str	r0, [r4, #16]
 800e652:	b15b      	cbz	r3, 800e66c <__smakebuf_r+0x70>
 800e654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e658:	4630      	mov	r0, r6
 800e65a:	f000 f81d 	bl	800e698 <_isatty_r>
 800e65e:	b128      	cbz	r0, 800e66c <__smakebuf_r+0x70>
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	f023 0303 	bic.w	r3, r3, #3
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	431d      	orrs	r5, r3
 800e670:	81a5      	strh	r5, [r4, #12]
 800e672:	e7cf      	b.n	800e614 <__smakebuf_r+0x18>

0800e674 <_fstat_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4d07      	ldr	r5, [pc, #28]	; (800e694 <_fstat_r+0x20>)
 800e678:	2300      	movs	r3, #0
 800e67a:	4604      	mov	r4, r0
 800e67c:	4608      	mov	r0, r1
 800e67e:	4611      	mov	r1, r2
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	f7f4 ff5a 	bl	800353a <_fstat>
 800e686:	1c43      	adds	r3, r0, #1
 800e688:	d102      	bne.n	800e690 <_fstat_r+0x1c>
 800e68a:	682b      	ldr	r3, [r5, #0]
 800e68c:	b103      	cbz	r3, 800e690 <_fstat_r+0x1c>
 800e68e:	6023      	str	r3, [r4, #0]
 800e690:	bd38      	pop	{r3, r4, r5, pc}
 800e692:	bf00      	nop
 800e694:	20005054 	.word	0x20005054

0800e698 <_isatty_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4d06      	ldr	r5, [pc, #24]	; (800e6b4 <_isatty_r+0x1c>)
 800e69c:	2300      	movs	r3, #0
 800e69e:	4604      	mov	r4, r0
 800e6a0:	4608      	mov	r0, r1
 800e6a2:	602b      	str	r3, [r5, #0]
 800e6a4:	f7f4 ff59 	bl	800355a <_isatty>
 800e6a8:	1c43      	adds	r3, r0, #1
 800e6aa:	d102      	bne.n	800e6b2 <_isatty_r+0x1a>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	b103      	cbz	r3, 800e6b2 <_isatty_r+0x1a>
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	20005054 	.word	0x20005054

0800e6b8 <cos>:
 800e6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ba:	ec53 2b10 	vmov	r2, r3, d0
 800e6be:	4826      	ldr	r0, [pc, #152]	; (800e758 <cos+0xa0>)
 800e6c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e6c4:	4281      	cmp	r1, r0
 800e6c6:	dc06      	bgt.n	800e6d6 <cos+0x1e>
 800e6c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e750 <cos+0x98>
 800e6cc:	b005      	add	sp, #20
 800e6ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6d2:	f000 b91d 	b.w	800e910 <__kernel_cos>
 800e6d6:	4821      	ldr	r0, [pc, #132]	; (800e75c <cos+0xa4>)
 800e6d8:	4281      	cmp	r1, r0
 800e6da:	dd09      	ble.n	800e6f0 <cos+0x38>
 800e6dc:	ee10 0a10 	vmov	r0, s0
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	f7f1 fdd1 	bl	8000288 <__aeabi_dsub>
 800e6e6:	ec41 0b10 	vmov	d0, r0, r1
 800e6ea:	b005      	add	sp, #20
 800e6ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6f0:	4668      	mov	r0, sp
 800e6f2:	f000 fa95 	bl	800ec20 <__ieee754_rem_pio2>
 800e6f6:	f000 0003 	and.w	r0, r0, #3
 800e6fa:	2801      	cmp	r0, #1
 800e6fc:	d00b      	beq.n	800e716 <cos+0x5e>
 800e6fe:	2802      	cmp	r0, #2
 800e700:	d016      	beq.n	800e730 <cos+0x78>
 800e702:	b9e0      	cbnz	r0, 800e73e <cos+0x86>
 800e704:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e708:	ed9d 0b00 	vldr	d0, [sp]
 800e70c:	f000 f900 	bl	800e910 <__kernel_cos>
 800e710:	ec51 0b10 	vmov	r0, r1, d0
 800e714:	e7e7      	b.n	800e6e6 <cos+0x2e>
 800e716:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e71a:	ed9d 0b00 	vldr	d0, [sp]
 800e71e:	f000 f9bf 	bl	800eaa0 <__kernel_sin>
 800e722:	ec53 2b10 	vmov	r2, r3, d0
 800e726:	ee10 0a10 	vmov	r0, s0
 800e72a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e72e:	e7da      	b.n	800e6e6 <cos+0x2e>
 800e730:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e734:	ed9d 0b00 	vldr	d0, [sp]
 800e738:	f000 f8ea 	bl	800e910 <__kernel_cos>
 800e73c:	e7f1      	b.n	800e722 <cos+0x6a>
 800e73e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e742:	ed9d 0b00 	vldr	d0, [sp]
 800e746:	2001      	movs	r0, #1
 800e748:	f000 f9aa 	bl	800eaa0 <__kernel_sin>
 800e74c:	e7e0      	b.n	800e710 <cos+0x58>
 800e74e:	bf00      	nop
	...
 800e758:	3fe921fb 	.word	0x3fe921fb
 800e75c:	7fefffff 	.word	0x7fefffff

0800e760 <sin>:
 800e760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e762:	ec53 2b10 	vmov	r2, r3, d0
 800e766:	4828      	ldr	r0, [pc, #160]	; (800e808 <sin+0xa8>)
 800e768:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e76c:	4281      	cmp	r1, r0
 800e76e:	dc07      	bgt.n	800e780 <sin+0x20>
 800e770:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e800 <sin+0xa0>
 800e774:	2000      	movs	r0, #0
 800e776:	b005      	add	sp, #20
 800e778:	f85d eb04 	ldr.w	lr, [sp], #4
 800e77c:	f000 b990 	b.w	800eaa0 <__kernel_sin>
 800e780:	4822      	ldr	r0, [pc, #136]	; (800e80c <sin+0xac>)
 800e782:	4281      	cmp	r1, r0
 800e784:	dd09      	ble.n	800e79a <sin+0x3a>
 800e786:	ee10 0a10 	vmov	r0, s0
 800e78a:	4619      	mov	r1, r3
 800e78c:	f7f1 fd7c 	bl	8000288 <__aeabi_dsub>
 800e790:	ec41 0b10 	vmov	d0, r0, r1
 800e794:	b005      	add	sp, #20
 800e796:	f85d fb04 	ldr.w	pc, [sp], #4
 800e79a:	4668      	mov	r0, sp
 800e79c:	f000 fa40 	bl	800ec20 <__ieee754_rem_pio2>
 800e7a0:	f000 0003 	and.w	r0, r0, #3
 800e7a4:	2801      	cmp	r0, #1
 800e7a6:	d00c      	beq.n	800e7c2 <sin+0x62>
 800e7a8:	2802      	cmp	r0, #2
 800e7aa:	d011      	beq.n	800e7d0 <sin+0x70>
 800e7ac:	b9f0      	cbnz	r0, 800e7ec <sin+0x8c>
 800e7ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7b2:	ed9d 0b00 	vldr	d0, [sp]
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	f000 f972 	bl	800eaa0 <__kernel_sin>
 800e7bc:	ec51 0b10 	vmov	r0, r1, d0
 800e7c0:	e7e6      	b.n	800e790 <sin+0x30>
 800e7c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7c6:	ed9d 0b00 	vldr	d0, [sp]
 800e7ca:	f000 f8a1 	bl	800e910 <__kernel_cos>
 800e7ce:	e7f5      	b.n	800e7bc <sin+0x5c>
 800e7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7d4:	ed9d 0b00 	vldr	d0, [sp]
 800e7d8:	2001      	movs	r0, #1
 800e7da:	f000 f961 	bl	800eaa0 <__kernel_sin>
 800e7de:	ec53 2b10 	vmov	r2, r3, d0
 800e7e2:	ee10 0a10 	vmov	r0, s0
 800e7e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e7ea:	e7d1      	b.n	800e790 <sin+0x30>
 800e7ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7f0:	ed9d 0b00 	vldr	d0, [sp]
 800e7f4:	f000 f88c 	bl	800e910 <__kernel_cos>
 800e7f8:	e7f1      	b.n	800e7de <sin+0x7e>
 800e7fa:	bf00      	nop
 800e7fc:	f3af 8000 	nop.w
	...
 800e808:	3fe921fb 	.word	0x3fe921fb
 800e80c:	7fefffff 	.word	0x7fefffff

0800e810 <floor>:
 800e810:	ec51 0b10 	vmov	r0, r1, d0
 800e814:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e81c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e820:	2e13      	cmp	r6, #19
 800e822:	ee10 5a10 	vmov	r5, s0
 800e826:	ee10 8a10 	vmov	r8, s0
 800e82a:	460c      	mov	r4, r1
 800e82c:	dc31      	bgt.n	800e892 <floor+0x82>
 800e82e:	2e00      	cmp	r6, #0
 800e830:	da14      	bge.n	800e85c <floor+0x4c>
 800e832:	a333      	add	r3, pc, #204	; (adr r3, 800e900 <floor+0xf0>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 fd28 	bl	800028c <__adddf3>
 800e83c:	2200      	movs	r2, #0
 800e83e:	2300      	movs	r3, #0
 800e840:	f7f2 f96a 	bl	8000b18 <__aeabi_dcmpgt>
 800e844:	b138      	cbz	r0, 800e856 <floor+0x46>
 800e846:	2c00      	cmp	r4, #0
 800e848:	da53      	bge.n	800e8f2 <floor+0xe2>
 800e84a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e84e:	4325      	orrs	r5, r4
 800e850:	d052      	beq.n	800e8f8 <floor+0xe8>
 800e852:	4c2d      	ldr	r4, [pc, #180]	; (800e908 <floor+0xf8>)
 800e854:	2500      	movs	r5, #0
 800e856:	4621      	mov	r1, r4
 800e858:	4628      	mov	r0, r5
 800e85a:	e024      	b.n	800e8a6 <floor+0x96>
 800e85c:	4f2b      	ldr	r7, [pc, #172]	; (800e90c <floor+0xfc>)
 800e85e:	4137      	asrs	r7, r6
 800e860:	ea01 0307 	and.w	r3, r1, r7
 800e864:	4303      	orrs	r3, r0
 800e866:	d01e      	beq.n	800e8a6 <floor+0x96>
 800e868:	a325      	add	r3, pc, #148	; (adr r3, 800e900 <floor+0xf0>)
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f7f1 fd0d 	bl	800028c <__adddf3>
 800e872:	2200      	movs	r2, #0
 800e874:	2300      	movs	r3, #0
 800e876:	f7f2 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d0eb      	beq.n	800e856 <floor+0x46>
 800e87e:	2c00      	cmp	r4, #0
 800e880:	bfbe      	ittt	lt
 800e882:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e886:	4133      	asrlt	r3, r6
 800e888:	18e4      	addlt	r4, r4, r3
 800e88a:	ea24 0407 	bic.w	r4, r4, r7
 800e88e:	2500      	movs	r5, #0
 800e890:	e7e1      	b.n	800e856 <floor+0x46>
 800e892:	2e33      	cmp	r6, #51	; 0x33
 800e894:	dd0b      	ble.n	800e8ae <floor+0x9e>
 800e896:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e89a:	d104      	bne.n	800e8a6 <floor+0x96>
 800e89c:	ee10 2a10 	vmov	r2, s0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	f7f1 fcf3 	bl	800028c <__adddf3>
 800e8a6:	ec41 0b10 	vmov	d0, r0, r1
 800e8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e8b2:	f04f 37ff 	mov.w	r7, #4294967295
 800e8b6:	40df      	lsrs	r7, r3
 800e8b8:	4238      	tst	r0, r7
 800e8ba:	d0f4      	beq.n	800e8a6 <floor+0x96>
 800e8bc:	a310      	add	r3, pc, #64	; (adr r3, 800e900 <floor+0xf0>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	f7f1 fce3 	bl	800028c <__adddf3>
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f7f2 f925 	bl	8000b18 <__aeabi_dcmpgt>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d0c1      	beq.n	800e856 <floor+0x46>
 800e8d2:	2c00      	cmp	r4, #0
 800e8d4:	da0a      	bge.n	800e8ec <floor+0xdc>
 800e8d6:	2e14      	cmp	r6, #20
 800e8d8:	d101      	bne.n	800e8de <floor+0xce>
 800e8da:	3401      	adds	r4, #1
 800e8dc:	e006      	b.n	800e8ec <floor+0xdc>
 800e8de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	40b3      	lsls	r3, r6
 800e8e6:	441d      	add	r5, r3
 800e8e8:	45a8      	cmp	r8, r5
 800e8ea:	d8f6      	bhi.n	800e8da <floor+0xca>
 800e8ec:	ea25 0507 	bic.w	r5, r5, r7
 800e8f0:	e7b1      	b.n	800e856 <floor+0x46>
 800e8f2:	2500      	movs	r5, #0
 800e8f4:	462c      	mov	r4, r5
 800e8f6:	e7ae      	b.n	800e856 <floor+0x46>
 800e8f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e8fc:	e7ab      	b.n	800e856 <floor+0x46>
 800e8fe:	bf00      	nop
 800e900:	8800759c 	.word	0x8800759c
 800e904:	7e37e43c 	.word	0x7e37e43c
 800e908:	bff00000 	.word	0xbff00000
 800e90c:	000fffff 	.word	0x000fffff

0800e910 <__kernel_cos>:
 800e910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	ec57 6b10 	vmov	r6, r7, d0
 800e918:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e91c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e920:	ed8d 1b00 	vstr	d1, [sp]
 800e924:	da07      	bge.n	800e936 <__kernel_cos+0x26>
 800e926:	ee10 0a10 	vmov	r0, s0
 800e92a:	4639      	mov	r1, r7
 800e92c:	f7f2 f914 	bl	8000b58 <__aeabi_d2iz>
 800e930:	2800      	cmp	r0, #0
 800e932:	f000 8088 	beq.w	800ea46 <__kernel_cos+0x136>
 800e936:	4632      	mov	r2, r6
 800e938:	463b      	mov	r3, r7
 800e93a:	4630      	mov	r0, r6
 800e93c:	4639      	mov	r1, r7
 800e93e:	f7f1 fe5b 	bl	80005f8 <__aeabi_dmul>
 800e942:	4b51      	ldr	r3, [pc, #324]	; (800ea88 <__kernel_cos+0x178>)
 800e944:	2200      	movs	r2, #0
 800e946:	4604      	mov	r4, r0
 800e948:	460d      	mov	r5, r1
 800e94a:	f7f1 fe55 	bl	80005f8 <__aeabi_dmul>
 800e94e:	a340      	add	r3, pc, #256	; (adr r3, 800ea50 <__kernel_cos+0x140>)
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	4682      	mov	sl, r0
 800e956:	468b      	mov	fp, r1
 800e958:	4620      	mov	r0, r4
 800e95a:	4629      	mov	r1, r5
 800e95c:	f7f1 fe4c 	bl	80005f8 <__aeabi_dmul>
 800e960:	a33d      	add	r3, pc, #244	; (adr r3, 800ea58 <__kernel_cos+0x148>)
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	f7f1 fc91 	bl	800028c <__adddf3>
 800e96a:	4622      	mov	r2, r4
 800e96c:	462b      	mov	r3, r5
 800e96e:	f7f1 fe43 	bl	80005f8 <__aeabi_dmul>
 800e972:	a33b      	add	r3, pc, #236	; (adr r3, 800ea60 <__kernel_cos+0x150>)
 800e974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e978:	f7f1 fc86 	bl	8000288 <__aeabi_dsub>
 800e97c:	4622      	mov	r2, r4
 800e97e:	462b      	mov	r3, r5
 800e980:	f7f1 fe3a 	bl	80005f8 <__aeabi_dmul>
 800e984:	a338      	add	r3, pc, #224	; (adr r3, 800ea68 <__kernel_cos+0x158>)
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 fc7f 	bl	800028c <__adddf3>
 800e98e:	4622      	mov	r2, r4
 800e990:	462b      	mov	r3, r5
 800e992:	f7f1 fe31 	bl	80005f8 <__aeabi_dmul>
 800e996:	a336      	add	r3, pc, #216	; (adr r3, 800ea70 <__kernel_cos+0x160>)
 800e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99c:	f7f1 fc74 	bl	8000288 <__aeabi_dsub>
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	f7f1 fe28 	bl	80005f8 <__aeabi_dmul>
 800e9a8:	a333      	add	r3, pc, #204	; (adr r3, 800ea78 <__kernel_cos+0x168>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	f7f1 fc6d 	bl	800028c <__adddf3>
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	462b      	mov	r3, r5
 800e9b6:	f7f1 fe1f 	bl	80005f8 <__aeabi_dmul>
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	462b      	mov	r3, r5
 800e9be:	f7f1 fe1b 	bl	80005f8 <__aeabi_dmul>
 800e9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	f7f1 fe13 	bl	80005f8 <__aeabi_dmul>
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f7f1 fc55 	bl	8000288 <__aeabi_dsub>
 800e9de:	4b2b      	ldr	r3, [pc, #172]	; (800ea8c <__kernel_cos+0x17c>)
 800e9e0:	4598      	cmp	r8, r3
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	460f      	mov	r7, r1
 800e9e6:	dc10      	bgt.n	800ea0a <__kernel_cos+0xfa>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4650      	mov	r0, sl
 800e9ee:	4659      	mov	r1, fp
 800e9f0:	f7f1 fc4a 	bl	8000288 <__aeabi_dsub>
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4926      	ldr	r1, [pc, #152]	; (800ea90 <__kernel_cos+0x180>)
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	f7f1 fc44 	bl	8000288 <__aeabi_dsub>
 800ea00:	ec41 0b10 	vmov	d0, r0, r1
 800ea04:	b003      	add	sp, #12
 800ea06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0a:	4b22      	ldr	r3, [pc, #136]	; (800ea94 <__kernel_cos+0x184>)
 800ea0c:	4920      	ldr	r1, [pc, #128]	; (800ea90 <__kernel_cos+0x180>)
 800ea0e:	4598      	cmp	r8, r3
 800ea10:	bfcc      	ite	gt
 800ea12:	4d21      	ldrgt	r5, [pc, #132]	; (800ea98 <__kernel_cos+0x188>)
 800ea14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ea18:	2400      	movs	r4, #0
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	462b      	mov	r3, r5
 800ea1e:	2000      	movs	r0, #0
 800ea20:	f7f1 fc32 	bl	8000288 <__aeabi_dsub>
 800ea24:	4622      	mov	r2, r4
 800ea26:	4680      	mov	r8, r0
 800ea28:	4689      	mov	r9, r1
 800ea2a:	462b      	mov	r3, r5
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	4659      	mov	r1, fp
 800ea30:	f7f1 fc2a 	bl	8000288 <__aeabi_dsub>
 800ea34:	4632      	mov	r2, r6
 800ea36:	463b      	mov	r3, r7
 800ea38:	f7f1 fc26 	bl	8000288 <__aeabi_dsub>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4640      	mov	r0, r8
 800ea42:	4649      	mov	r1, r9
 800ea44:	e7da      	b.n	800e9fc <__kernel_cos+0xec>
 800ea46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ea80 <__kernel_cos+0x170>
 800ea4a:	e7db      	b.n	800ea04 <__kernel_cos+0xf4>
 800ea4c:	f3af 8000 	nop.w
 800ea50:	be8838d4 	.word	0xbe8838d4
 800ea54:	bda8fae9 	.word	0xbda8fae9
 800ea58:	bdb4b1c4 	.word	0xbdb4b1c4
 800ea5c:	3e21ee9e 	.word	0x3e21ee9e
 800ea60:	809c52ad 	.word	0x809c52ad
 800ea64:	3e927e4f 	.word	0x3e927e4f
 800ea68:	19cb1590 	.word	0x19cb1590
 800ea6c:	3efa01a0 	.word	0x3efa01a0
 800ea70:	16c15177 	.word	0x16c15177
 800ea74:	3f56c16c 	.word	0x3f56c16c
 800ea78:	5555554c 	.word	0x5555554c
 800ea7c:	3fa55555 	.word	0x3fa55555
 800ea80:	00000000 	.word	0x00000000
 800ea84:	3ff00000 	.word	0x3ff00000
 800ea88:	3fe00000 	.word	0x3fe00000
 800ea8c:	3fd33332 	.word	0x3fd33332
 800ea90:	3ff00000 	.word	0x3ff00000
 800ea94:	3fe90000 	.word	0x3fe90000
 800ea98:	3fd20000 	.word	0x3fd20000
 800ea9c:	00000000 	.word	0x00000000

0800eaa0 <__kernel_sin>:
 800eaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa4:	ed2d 8b04 	vpush	{d8-d9}
 800eaa8:	eeb0 8a41 	vmov.f32	s16, s2
 800eaac:	eef0 8a61 	vmov.f32	s17, s3
 800eab0:	ec55 4b10 	vmov	r4, r5, d0
 800eab4:	b083      	sub	sp, #12
 800eab6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eaba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eabe:	9001      	str	r0, [sp, #4]
 800eac0:	da06      	bge.n	800ead0 <__kernel_sin+0x30>
 800eac2:	ee10 0a10 	vmov	r0, s0
 800eac6:	4629      	mov	r1, r5
 800eac8:	f7f2 f846 	bl	8000b58 <__aeabi_d2iz>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d051      	beq.n	800eb74 <__kernel_sin+0xd4>
 800ead0:	4622      	mov	r2, r4
 800ead2:	462b      	mov	r3, r5
 800ead4:	4620      	mov	r0, r4
 800ead6:	4629      	mov	r1, r5
 800ead8:	f7f1 fd8e 	bl	80005f8 <__aeabi_dmul>
 800eadc:	4682      	mov	sl, r0
 800eade:	468b      	mov	fp, r1
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4620      	mov	r0, r4
 800eae6:	4629      	mov	r1, r5
 800eae8:	f7f1 fd86 	bl	80005f8 <__aeabi_dmul>
 800eaec:	a341      	add	r3, pc, #260	; (adr r3, 800ebf4 <__kernel_sin+0x154>)
 800eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf2:	4680      	mov	r8, r0
 800eaf4:	4689      	mov	r9, r1
 800eaf6:	4650      	mov	r0, sl
 800eaf8:	4659      	mov	r1, fp
 800eafa:	f7f1 fd7d 	bl	80005f8 <__aeabi_dmul>
 800eafe:	a33f      	add	r3, pc, #252	; (adr r3, 800ebfc <__kernel_sin+0x15c>)
 800eb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb04:	f7f1 fbc0 	bl	8000288 <__aeabi_dsub>
 800eb08:	4652      	mov	r2, sl
 800eb0a:	465b      	mov	r3, fp
 800eb0c:	f7f1 fd74 	bl	80005f8 <__aeabi_dmul>
 800eb10:	a33c      	add	r3, pc, #240	; (adr r3, 800ec04 <__kernel_sin+0x164>)
 800eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb16:	f7f1 fbb9 	bl	800028c <__adddf3>
 800eb1a:	4652      	mov	r2, sl
 800eb1c:	465b      	mov	r3, fp
 800eb1e:	f7f1 fd6b 	bl	80005f8 <__aeabi_dmul>
 800eb22:	a33a      	add	r3, pc, #232	; (adr r3, 800ec0c <__kernel_sin+0x16c>)
 800eb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb28:	f7f1 fbae 	bl	8000288 <__aeabi_dsub>
 800eb2c:	4652      	mov	r2, sl
 800eb2e:	465b      	mov	r3, fp
 800eb30:	f7f1 fd62 	bl	80005f8 <__aeabi_dmul>
 800eb34:	a337      	add	r3, pc, #220	; (adr r3, 800ec14 <__kernel_sin+0x174>)
 800eb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3a:	f7f1 fba7 	bl	800028c <__adddf3>
 800eb3e:	9b01      	ldr	r3, [sp, #4]
 800eb40:	4606      	mov	r6, r0
 800eb42:	460f      	mov	r7, r1
 800eb44:	b9eb      	cbnz	r3, 800eb82 <__kernel_sin+0xe2>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4650      	mov	r0, sl
 800eb4c:	4659      	mov	r1, fp
 800eb4e:	f7f1 fd53 	bl	80005f8 <__aeabi_dmul>
 800eb52:	a325      	add	r3, pc, #148	; (adr r3, 800ebe8 <__kernel_sin+0x148>)
 800eb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb58:	f7f1 fb96 	bl	8000288 <__aeabi_dsub>
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	464b      	mov	r3, r9
 800eb60:	f7f1 fd4a 	bl	80005f8 <__aeabi_dmul>
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	4620      	mov	r0, r4
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f7f1 fb8e 	bl	800028c <__adddf3>
 800eb70:	4604      	mov	r4, r0
 800eb72:	460d      	mov	r5, r1
 800eb74:	ec45 4b10 	vmov	d0, r4, r5
 800eb78:	b003      	add	sp, #12
 800eb7a:	ecbd 8b04 	vpop	{d8-d9}
 800eb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb82:	4b1b      	ldr	r3, [pc, #108]	; (800ebf0 <__kernel_sin+0x150>)
 800eb84:	ec51 0b18 	vmov	r0, r1, d8
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f7f1 fd35 	bl	80005f8 <__aeabi_dmul>
 800eb8e:	4632      	mov	r2, r6
 800eb90:	ec41 0b19 	vmov	d9, r0, r1
 800eb94:	463b      	mov	r3, r7
 800eb96:	4640      	mov	r0, r8
 800eb98:	4649      	mov	r1, r9
 800eb9a:	f7f1 fd2d 	bl	80005f8 <__aeabi_dmul>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	ec51 0b19 	vmov	r0, r1, d9
 800eba6:	f7f1 fb6f 	bl	8000288 <__aeabi_dsub>
 800ebaa:	4652      	mov	r2, sl
 800ebac:	465b      	mov	r3, fp
 800ebae:	f7f1 fd23 	bl	80005f8 <__aeabi_dmul>
 800ebb2:	ec53 2b18 	vmov	r2, r3, d8
 800ebb6:	f7f1 fb67 	bl	8000288 <__aeabi_dsub>
 800ebba:	a30b      	add	r3, pc, #44	; (adr r3, 800ebe8 <__kernel_sin+0x148>)
 800ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	460f      	mov	r7, r1
 800ebc4:	4640      	mov	r0, r8
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	f7f1 fd16 	bl	80005f8 <__aeabi_dmul>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	f7f1 fb5a 	bl	800028c <__adddf3>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4620      	mov	r0, r4
 800ebde:	4629      	mov	r1, r5
 800ebe0:	f7f1 fb52 	bl	8000288 <__aeabi_dsub>
 800ebe4:	e7c4      	b.n	800eb70 <__kernel_sin+0xd0>
 800ebe6:	bf00      	nop
 800ebe8:	55555549 	.word	0x55555549
 800ebec:	3fc55555 	.word	0x3fc55555
 800ebf0:	3fe00000 	.word	0x3fe00000
 800ebf4:	5acfd57c 	.word	0x5acfd57c
 800ebf8:	3de5d93a 	.word	0x3de5d93a
 800ebfc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ec00:	3e5ae5e6 	.word	0x3e5ae5e6
 800ec04:	57b1fe7d 	.word	0x57b1fe7d
 800ec08:	3ec71de3 	.word	0x3ec71de3
 800ec0c:	19c161d5 	.word	0x19c161d5
 800ec10:	3f2a01a0 	.word	0x3f2a01a0
 800ec14:	1110f8a6 	.word	0x1110f8a6
 800ec18:	3f811111 	.word	0x3f811111
 800ec1c:	00000000 	.word	0x00000000

0800ec20 <__ieee754_rem_pio2>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	ed2d 8b02 	vpush	{d8}
 800ec28:	ec55 4b10 	vmov	r4, r5, d0
 800ec2c:	4bca      	ldr	r3, [pc, #808]	; (800ef58 <__ieee754_rem_pio2+0x338>)
 800ec2e:	b08b      	sub	sp, #44	; 0x2c
 800ec30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ec34:	4598      	cmp	r8, r3
 800ec36:	4682      	mov	sl, r0
 800ec38:	9502      	str	r5, [sp, #8]
 800ec3a:	dc08      	bgt.n	800ec4e <__ieee754_rem_pio2+0x2e>
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2300      	movs	r3, #0
 800ec40:	ed80 0b00 	vstr	d0, [r0]
 800ec44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec48:	f04f 0b00 	mov.w	fp, #0
 800ec4c:	e028      	b.n	800eca0 <__ieee754_rem_pio2+0x80>
 800ec4e:	4bc3      	ldr	r3, [pc, #780]	; (800ef5c <__ieee754_rem_pio2+0x33c>)
 800ec50:	4598      	cmp	r8, r3
 800ec52:	dc78      	bgt.n	800ed46 <__ieee754_rem_pio2+0x126>
 800ec54:	9b02      	ldr	r3, [sp, #8]
 800ec56:	4ec2      	ldr	r6, [pc, #776]	; (800ef60 <__ieee754_rem_pio2+0x340>)
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	ee10 0a10 	vmov	r0, s0
 800ec5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ef20 <__ieee754_rem_pio2+0x300>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	4629      	mov	r1, r5
 800ec66:	dd39      	ble.n	800ecdc <__ieee754_rem_pio2+0xbc>
 800ec68:	f7f1 fb0e 	bl	8000288 <__aeabi_dsub>
 800ec6c:	45b0      	cmp	r8, r6
 800ec6e:	4604      	mov	r4, r0
 800ec70:	460d      	mov	r5, r1
 800ec72:	d01b      	beq.n	800ecac <__ieee754_rem_pio2+0x8c>
 800ec74:	a3ac      	add	r3, pc, #688	; (adr r3, 800ef28 <__ieee754_rem_pio2+0x308>)
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	f7f1 fb05 	bl	8000288 <__aeabi_dsub>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	e9ca 2300 	strd	r2, r3, [sl]
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 fafd 	bl	8000288 <__aeabi_dsub>
 800ec8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ef28 <__ieee754_rem_pio2+0x308>)
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	f7f1 faf8 	bl	8000288 <__aeabi_dsub>
 800ec98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec9c:	f04f 0b01 	mov.w	fp, #1
 800eca0:	4658      	mov	r0, fp
 800eca2:	b00b      	add	sp, #44	; 0x2c
 800eca4:	ecbd 8b02 	vpop	{d8}
 800eca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecac:	a3a0      	add	r3, pc, #640	; (adr r3, 800ef30 <__ieee754_rem_pio2+0x310>)
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	f7f1 fae9 	bl	8000288 <__aeabi_dsub>
 800ecb6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ef38 <__ieee754_rem_pio2+0x318>)
 800ecb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	460d      	mov	r5, r1
 800ecc0:	f7f1 fae2 	bl	8000288 <__aeabi_dsub>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	e9ca 2300 	strd	r2, r3, [sl]
 800eccc:	4620      	mov	r0, r4
 800ecce:	4629      	mov	r1, r5
 800ecd0:	f7f1 fada 	bl	8000288 <__aeabi_dsub>
 800ecd4:	a398      	add	r3, pc, #608	; (adr r3, 800ef38 <__ieee754_rem_pio2+0x318>)
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	e7db      	b.n	800ec94 <__ieee754_rem_pio2+0x74>
 800ecdc:	f7f1 fad6 	bl	800028c <__adddf3>
 800ece0:	45b0      	cmp	r8, r6
 800ece2:	4604      	mov	r4, r0
 800ece4:	460d      	mov	r5, r1
 800ece6:	d016      	beq.n	800ed16 <__ieee754_rem_pio2+0xf6>
 800ece8:	a38f      	add	r3, pc, #572	; (adr r3, 800ef28 <__ieee754_rem_pio2+0x308>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	f7f1 facd 	bl	800028c <__adddf3>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	e9ca 2300 	strd	r2, r3, [sl]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	f7f1 fac3 	bl	8000288 <__aeabi_dsub>
 800ed02:	a389      	add	r3, pc, #548	; (adr r3, 800ef28 <__ieee754_rem_pio2+0x308>)
 800ed04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed08:	f7f1 fac0 	bl	800028c <__adddf3>
 800ed0c:	f04f 3bff 	mov.w	fp, #4294967295
 800ed10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed14:	e7c4      	b.n	800eca0 <__ieee754_rem_pio2+0x80>
 800ed16:	a386      	add	r3, pc, #536	; (adr r3, 800ef30 <__ieee754_rem_pio2+0x310>)
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	f7f1 fab6 	bl	800028c <__adddf3>
 800ed20:	a385      	add	r3, pc, #532	; (adr r3, 800ef38 <__ieee754_rem_pio2+0x318>)
 800ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed26:	4604      	mov	r4, r0
 800ed28:	460d      	mov	r5, r1
 800ed2a:	f7f1 faaf 	bl	800028c <__adddf3>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	e9ca 2300 	strd	r2, r3, [sl]
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7f1 faa5 	bl	8000288 <__aeabi_dsub>
 800ed3e:	a37e      	add	r3, pc, #504	; (adr r3, 800ef38 <__ieee754_rem_pio2+0x318>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	e7e0      	b.n	800ed08 <__ieee754_rem_pio2+0xe8>
 800ed46:	4b87      	ldr	r3, [pc, #540]	; (800ef64 <__ieee754_rem_pio2+0x344>)
 800ed48:	4598      	cmp	r8, r3
 800ed4a:	f300 80d8 	bgt.w	800eefe <__ieee754_rem_pio2+0x2de>
 800ed4e:	f000 f96d 	bl	800f02c <fabs>
 800ed52:	ec55 4b10 	vmov	r4, r5, d0
 800ed56:	ee10 0a10 	vmov	r0, s0
 800ed5a:	a379      	add	r3, pc, #484	; (adr r3, 800ef40 <__ieee754_rem_pio2+0x320>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 fc49 	bl	80005f8 <__aeabi_dmul>
 800ed66:	4b80      	ldr	r3, [pc, #512]	; (800ef68 <__ieee754_rem_pio2+0x348>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f7f1 fa8f 	bl	800028c <__adddf3>
 800ed6e:	f7f1 fef3 	bl	8000b58 <__aeabi_d2iz>
 800ed72:	4683      	mov	fp, r0
 800ed74:	f7f1 fbd6 	bl	8000524 <__aeabi_i2d>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	ec43 2b18 	vmov	d8, r2, r3
 800ed80:	a367      	add	r3, pc, #412	; (adr r3, 800ef20 <__ieee754_rem_pio2+0x300>)
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	f7f1 fc37 	bl	80005f8 <__aeabi_dmul>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4620      	mov	r0, r4
 800ed90:	4629      	mov	r1, r5
 800ed92:	f7f1 fa79 	bl	8000288 <__aeabi_dsub>
 800ed96:	a364      	add	r3, pc, #400	; (adr r3, 800ef28 <__ieee754_rem_pio2+0x308>)
 800ed98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	460f      	mov	r7, r1
 800eda0:	ec51 0b18 	vmov	r0, r1, d8
 800eda4:	f7f1 fc28 	bl	80005f8 <__aeabi_dmul>
 800eda8:	f1bb 0f1f 	cmp.w	fp, #31
 800edac:	4604      	mov	r4, r0
 800edae:	460d      	mov	r5, r1
 800edb0:	dc0d      	bgt.n	800edce <__ieee754_rem_pio2+0x1ae>
 800edb2:	4b6e      	ldr	r3, [pc, #440]	; (800ef6c <__ieee754_rem_pio2+0x34c>)
 800edb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800edb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbc:	4543      	cmp	r3, r8
 800edbe:	d006      	beq.n	800edce <__ieee754_rem_pio2+0x1ae>
 800edc0:	4622      	mov	r2, r4
 800edc2:	462b      	mov	r3, r5
 800edc4:	4630      	mov	r0, r6
 800edc6:	4639      	mov	r1, r7
 800edc8:	f7f1 fa5e 	bl	8000288 <__aeabi_dsub>
 800edcc:	e00e      	b.n	800edec <__ieee754_rem_pio2+0x1cc>
 800edce:	462b      	mov	r3, r5
 800edd0:	4622      	mov	r2, r4
 800edd2:	4630      	mov	r0, r6
 800edd4:	4639      	mov	r1, r7
 800edd6:	f7f1 fa57 	bl	8000288 <__aeabi_dsub>
 800edda:	ea4f 5328 	mov.w	r3, r8, asr #20
 800edde:	9303      	str	r3, [sp, #12]
 800ede0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ede4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ede8:	2b10      	cmp	r3, #16
 800edea:	dc02      	bgt.n	800edf2 <__ieee754_rem_pio2+0x1d2>
 800edec:	e9ca 0100 	strd	r0, r1, [sl]
 800edf0:	e039      	b.n	800ee66 <__ieee754_rem_pio2+0x246>
 800edf2:	a34f      	add	r3, pc, #316	; (adr r3, 800ef30 <__ieee754_rem_pio2+0x310>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	ec51 0b18 	vmov	r0, r1, d8
 800edfc:	f7f1 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ee00:	4604      	mov	r4, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	4630      	mov	r0, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	f7f1 fa3c 	bl	8000288 <__aeabi_dsub>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	4680      	mov	r8, r0
 800ee16:	4689      	mov	r9, r1
 800ee18:	4630      	mov	r0, r6
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	f7f1 fa34 	bl	8000288 <__aeabi_dsub>
 800ee20:	4622      	mov	r2, r4
 800ee22:	462b      	mov	r3, r5
 800ee24:	f7f1 fa30 	bl	8000288 <__aeabi_dsub>
 800ee28:	a343      	add	r3, pc, #268	; (adr r3, 800ef38 <__ieee754_rem_pio2+0x318>)
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	4604      	mov	r4, r0
 800ee30:	460d      	mov	r5, r1
 800ee32:	ec51 0b18 	vmov	r0, r1, d8
 800ee36:	f7f1 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	f7f1 fa23 	bl	8000288 <__aeabi_dsub>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4604      	mov	r4, r0
 800ee48:	460d      	mov	r5, r1
 800ee4a:	4640      	mov	r0, r8
 800ee4c:	4649      	mov	r1, r9
 800ee4e:	f7f1 fa1b 	bl	8000288 <__aeabi_dsub>
 800ee52:	9a03      	ldr	r2, [sp, #12]
 800ee54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b31      	cmp	r3, #49	; 0x31
 800ee5c:	dc24      	bgt.n	800eea8 <__ieee754_rem_pio2+0x288>
 800ee5e:	e9ca 0100 	strd	r0, r1, [sl]
 800ee62:	4646      	mov	r6, r8
 800ee64:	464f      	mov	r7, r9
 800ee66:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	4642      	mov	r2, r8
 800ee6e:	464b      	mov	r3, r9
 800ee70:	4639      	mov	r1, r7
 800ee72:	f7f1 fa09 	bl	8000288 <__aeabi_dsub>
 800ee76:	462b      	mov	r3, r5
 800ee78:	4622      	mov	r2, r4
 800ee7a:	f7f1 fa05 	bl	8000288 <__aeabi_dsub>
 800ee7e:	9b02      	ldr	r3, [sp, #8]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee86:	f6bf af0b 	bge.w	800eca0 <__ieee754_rem_pio2+0x80>
 800ee8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ee8e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee96:	f8ca 8000 	str.w	r8, [sl]
 800ee9a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ee9e:	f8ca 300c 	str.w	r3, [sl, #12]
 800eea2:	f1cb 0b00 	rsb	fp, fp, #0
 800eea6:	e6fb      	b.n	800eca0 <__ieee754_rem_pio2+0x80>
 800eea8:	a327      	add	r3, pc, #156	; (adr r3, 800ef48 <__ieee754_rem_pio2+0x328>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	ec51 0b18 	vmov	r0, r1, d8
 800eeb2:	f7f1 fba1 	bl	80005f8 <__aeabi_dmul>
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	460d      	mov	r5, r1
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	4640      	mov	r0, r8
 800eec0:	4649      	mov	r1, r9
 800eec2:	f7f1 f9e1 	bl	8000288 <__aeabi_dsub>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4606      	mov	r6, r0
 800eecc:	460f      	mov	r7, r1
 800eece:	4640      	mov	r0, r8
 800eed0:	4649      	mov	r1, r9
 800eed2:	f7f1 f9d9 	bl	8000288 <__aeabi_dsub>
 800eed6:	4622      	mov	r2, r4
 800eed8:	462b      	mov	r3, r5
 800eeda:	f7f1 f9d5 	bl	8000288 <__aeabi_dsub>
 800eede:	a31c      	add	r3, pc, #112	; (adr r3, 800ef50 <__ieee754_rem_pio2+0x330>)
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	4604      	mov	r4, r0
 800eee6:	460d      	mov	r5, r1
 800eee8:	ec51 0b18 	vmov	r0, r1, d8
 800eeec:	f7f1 fb84 	bl	80005f8 <__aeabi_dmul>
 800eef0:	4622      	mov	r2, r4
 800eef2:	462b      	mov	r3, r5
 800eef4:	f7f1 f9c8 	bl	8000288 <__aeabi_dsub>
 800eef8:	4604      	mov	r4, r0
 800eefa:	460d      	mov	r5, r1
 800eefc:	e760      	b.n	800edc0 <__ieee754_rem_pio2+0x1a0>
 800eefe:	4b1c      	ldr	r3, [pc, #112]	; (800ef70 <__ieee754_rem_pio2+0x350>)
 800ef00:	4598      	cmp	r8, r3
 800ef02:	dd37      	ble.n	800ef74 <__ieee754_rem_pio2+0x354>
 800ef04:	ee10 2a10 	vmov	r2, s0
 800ef08:	462b      	mov	r3, r5
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	f7f1 f9bb 	bl	8000288 <__aeabi_dsub>
 800ef12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef16:	e9ca 0100 	strd	r0, r1, [sl]
 800ef1a:	e695      	b.n	800ec48 <__ieee754_rem_pio2+0x28>
 800ef1c:	f3af 8000 	nop.w
 800ef20:	54400000 	.word	0x54400000
 800ef24:	3ff921fb 	.word	0x3ff921fb
 800ef28:	1a626331 	.word	0x1a626331
 800ef2c:	3dd0b461 	.word	0x3dd0b461
 800ef30:	1a600000 	.word	0x1a600000
 800ef34:	3dd0b461 	.word	0x3dd0b461
 800ef38:	2e037073 	.word	0x2e037073
 800ef3c:	3ba3198a 	.word	0x3ba3198a
 800ef40:	6dc9c883 	.word	0x6dc9c883
 800ef44:	3fe45f30 	.word	0x3fe45f30
 800ef48:	2e000000 	.word	0x2e000000
 800ef4c:	3ba3198a 	.word	0x3ba3198a
 800ef50:	252049c1 	.word	0x252049c1
 800ef54:	397b839a 	.word	0x397b839a
 800ef58:	3fe921fb 	.word	0x3fe921fb
 800ef5c:	4002d97b 	.word	0x4002d97b
 800ef60:	3ff921fb 	.word	0x3ff921fb
 800ef64:	413921fb 	.word	0x413921fb
 800ef68:	3fe00000 	.word	0x3fe00000
 800ef6c:	0800fcc8 	.word	0x0800fcc8
 800ef70:	7fefffff 	.word	0x7fefffff
 800ef74:	ea4f 5628 	mov.w	r6, r8, asr #20
 800ef78:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800ef7c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800ef80:	4620      	mov	r0, r4
 800ef82:	460d      	mov	r5, r1
 800ef84:	f7f1 fde8 	bl	8000b58 <__aeabi_d2iz>
 800ef88:	f7f1 facc 	bl	8000524 <__aeabi_i2d>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	460b      	mov	r3, r1
 800ef90:	4620      	mov	r0, r4
 800ef92:	4629      	mov	r1, r5
 800ef94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef98:	f7f1 f976 	bl	8000288 <__aeabi_dsub>
 800ef9c:	4b21      	ldr	r3, [pc, #132]	; (800f024 <__ieee754_rem_pio2+0x404>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f7f1 fb2a 	bl	80005f8 <__aeabi_dmul>
 800efa4:	460d      	mov	r5, r1
 800efa6:	4604      	mov	r4, r0
 800efa8:	f7f1 fdd6 	bl	8000b58 <__aeabi_d2iz>
 800efac:	f7f1 faba 	bl	8000524 <__aeabi_i2d>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800efbc:	f7f1 f964 	bl	8000288 <__aeabi_dsub>
 800efc0:	4b18      	ldr	r3, [pc, #96]	; (800f024 <__ieee754_rem_pio2+0x404>)
 800efc2:	2200      	movs	r2, #0
 800efc4:	f7f1 fb18 	bl	80005f8 <__aeabi_dmul>
 800efc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800efcc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800efd0:	2703      	movs	r7, #3
 800efd2:	2400      	movs	r4, #0
 800efd4:	2500      	movs	r5, #0
 800efd6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800efda:	4622      	mov	r2, r4
 800efdc:	462b      	mov	r3, r5
 800efde:	46b9      	mov	r9, r7
 800efe0:	3f01      	subs	r7, #1
 800efe2:	f7f1 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d1f5      	bne.n	800efd6 <__ieee754_rem_pio2+0x3b6>
 800efea:	4b0f      	ldr	r3, [pc, #60]	; (800f028 <__ieee754_rem_pio2+0x408>)
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	2302      	movs	r3, #2
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	4632      	mov	r2, r6
 800eff4:	464b      	mov	r3, r9
 800eff6:	4651      	mov	r1, sl
 800eff8:	a804      	add	r0, sp, #16
 800effa:	f000 f821 	bl	800f040 <__kernel_rem_pio2>
 800effe:	9b02      	ldr	r3, [sp, #8]
 800f000:	2b00      	cmp	r3, #0
 800f002:	4683      	mov	fp, r0
 800f004:	f6bf ae4c 	bge.w	800eca0 <__ieee754_rem_pio2+0x80>
 800f008:	e9da 2100 	ldrd	r2, r1, [sl]
 800f00c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f010:	e9ca 2300 	strd	r2, r3, [sl]
 800f014:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f018:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f01c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f020:	e73f      	b.n	800eea2 <__ieee754_rem_pio2+0x282>
 800f022:	bf00      	nop
 800f024:	41700000 	.word	0x41700000
 800f028:	0800fd48 	.word	0x0800fd48

0800f02c <fabs>:
 800f02c:	ec51 0b10 	vmov	r0, r1, d0
 800f030:	ee10 2a10 	vmov	r2, s0
 800f034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f038:	ec43 2b10 	vmov	d0, r2, r3
 800f03c:	4770      	bx	lr
	...

0800f040 <__kernel_rem_pio2>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	ed2d 8b02 	vpush	{d8}
 800f048:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f04c:	f112 0f14 	cmn.w	r2, #20
 800f050:	9306      	str	r3, [sp, #24]
 800f052:	9104      	str	r1, [sp, #16]
 800f054:	4bc2      	ldr	r3, [pc, #776]	; (800f360 <__kernel_rem_pio2+0x320>)
 800f056:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f058:	9009      	str	r0, [sp, #36]	; 0x24
 800f05a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	9b06      	ldr	r3, [sp, #24]
 800f062:	f103 33ff 	add.w	r3, r3, #4294967295
 800f066:	bfa8      	it	ge
 800f068:	1ed4      	subge	r4, r2, #3
 800f06a:	9305      	str	r3, [sp, #20]
 800f06c:	bfb2      	itee	lt
 800f06e:	2400      	movlt	r4, #0
 800f070:	2318      	movge	r3, #24
 800f072:	fb94 f4f3 	sdivge	r4, r4, r3
 800f076:	f06f 0317 	mvn.w	r3, #23
 800f07a:	fb04 3303 	mla	r3, r4, r3, r3
 800f07e:	eb03 0a02 	add.w	sl, r3, r2
 800f082:	9b00      	ldr	r3, [sp, #0]
 800f084:	9a05      	ldr	r2, [sp, #20]
 800f086:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f350 <__kernel_rem_pio2+0x310>
 800f08a:	eb03 0802 	add.w	r8, r3, r2
 800f08e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f090:	1aa7      	subs	r7, r4, r2
 800f092:	ae20      	add	r6, sp, #128	; 0x80
 800f094:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f098:	2500      	movs	r5, #0
 800f09a:	4545      	cmp	r5, r8
 800f09c:	dd13      	ble.n	800f0c6 <__kernel_rem_pio2+0x86>
 800f09e:	9b06      	ldr	r3, [sp, #24]
 800f0a0:	aa20      	add	r2, sp, #128	; 0x80
 800f0a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f0a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f0aa:	f04f 0800 	mov.w	r8, #0
 800f0ae:	9b00      	ldr	r3, [sp, #0]
 800f0b0:	4598      	cmp	r8, r3
 800f0b2:	dc31      	bgt.n	800f118 <__kernel_rem_pio2+0xd8>
 800f0b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f350 <__kernel_rem_pio2+0x310>
 800f0b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f0bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f0c0:	462f      	mov	r7, r5
 800f0c2:	2600      	movs	r6, #0
 800f0c4:	e01b      	b.n	800f0fe <__kernel_rem_pio2+0xbe>
 800f0c6:	42ef      	cmn	r7, r5
 800f0c8:	d407      	bmi.n	800f0da <__kernel_rem_pio2+0x9a>
 800f0ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f0ce:	f7f1 fa29 	bl	8000524 <__aeabi_i2d>
 800f0d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f0d6:	3501      	adds	r5, #1
 800f0d8:	e7df      	b.n	800f09a <__kernel_rem_pio2+0x5a>
 800f0da:	ec51 0b18 	vmov	r0, r1, d8
 800f0de:	e7f8      	b.n	800f0d2 <__kernel_rem_pio2+0x92>
 800f0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f0e8:	f7f1 fa86 	bl	80005f8 <__aeabi_dmul>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0f4:	f7f1 f8ca 	bl	800028c <__adddf3>
 800f0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0fc:	3601      	adds	r6, #1
 800f0fe:	9b05      	ldr	r3, [sp, #20]
 800f100:	429e      	cmp	r6, r3
 800f102:	f1a7 0708 	sub.w	r7, r7, #8
 800f106:	ddeb      	ble.n	800f0e0 <__kernel_rem_pio2+0xa0>
 800f108:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f10c:	f108 0801 	add.w	r8, r8, #1
 800f110:	ecab 7b02 	vstmia	fp!, {d7}
 800f114:	3508      	adds	r5, #8
 800f116:	e7ca      	b.n	800f0ae <__kernel_rem_pio2+0x6e>
 800f118:	9b00      	ldr	r3, [sp, #0]
 800f11a:	aa0c      	add	r2, sp, #48	; 0x30
 800f11c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f120:	930b      	str	r3, [sp, #44]	; 0x2c
 800f122:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f124:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f128:	9c00      	ldr	r4, [sp, #0]
 800f12a:	930a      	str	r3, [sp, #40]	; 0x28
 800f12c:	00e3      	lsls	r3, r4, #3
 800f12e:	9308      	str	r3, [sp, #32]
 800f130:	ab98      	add	r3, sp, #608	; 0x260
 800f132:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f136:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f13a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f13e:	ab70      	add	r3, sp, #448	; 0x1c0
 800f140:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f144:	46c3      	mov	fp, r8
 800f146:	46a1      	mov	r9, r4
 800f148:	f1b9 0f00 	cmp.w	r9, #0
 800f14c:	f1a5 0508 	sub.w	r5, r5, #8
 800f150:	dc77      	bgt.n	800f242 <__kernel_rem_pio2+0x202>
 800f152:	ec47 6b10 	vmov	d0, r6, r7
 800f156:	4650      	mov	r0, sl
 800f158:	f000 fac2 	bl	800f6e0 <scalbn>
 800f15c:	ec57 6b10 	vmov	r6, r7, d0
 800f160:	2200      	movs	r2, #0
 800f162:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f166:	ee10 0a10 	vmov	r0, s0
 800f16a:	4639      	mov	r1, r7
 800f16c:	f7f1 fa44 	bl	80005f8 <__aeabi_dmul>
 800f170:	ec41 0b10 	vmov	d0, r0, r1
 800f174:	f7ff fb4c 	bl	800e810 <floor>
 800f178:	4b7a      	ldr	r3, [pc, #488]	; (800f364 <__kernel_rem_pio2+0x324>)
 800f17a:	ec51 0b10 	vmov	r0, r1, d0
 800f17e:	2200      	movs	r2, #0
 800f180:	f7f1 fa3a 	bl	80005f8 <__aeabi_dmul>
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	4630      	mov	r0, r6
 800f18a:	4639      	mov	r1, r7
 800f18c:	f7f1 f87c 	bl	8000288 <__aeabi_dsub>
 800f190:	460f      	mov	r7, r1
 800f192:	4606      	mov	r6, r0
 800f194:	f7f1 fce0 	bl	8000b58 <__aeabi_d2iz>
 800f198:	9002      	str	r0, [sp, #8]
 800f19a:	f7f1 f9c3 	bl	8000524 <__aeabi_i2d>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	4639      	mov	r1, r7
 800f1a6:	f7f1 f86f 	bl	8000288 <__aeabi_dsub>
 800f1aa:	f1ba 0f00 	cmp.w	sl, #0
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	460f      	mov	r7, r1
 800f1b2:	dd6d      	ble.n	800f290 <__kernel_rem_pio2+0x250>
 800f1b4:	1e61      	subs	r1, r4, #1
 800f1b6:	ab0c      	add	r3, sp, #48	; 0x30
 800f1b8:	9d02      	ldr	r5, [sp, #8]
 800f1ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1be:	f1ca 0018 	rsb	r0, sl, #24
 800f1c2:	fa43 f200 	asr.w	r2, r3, r0
 800f1c6:	4415      	add	r5, r2
 800f1c8:	4082      	lsls	r2, r0
 800f1ca:	1a9b      	subs	r3, r3, r2
 800f1cc:	aa0c      	add	r2, sp, #48	; 0x30
 800f1ce:	9502      	str	r5, [sp, #8]
 800f1d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f1d4:	f1ca 0217 	rsb	r2, sl, #23
 800f1d8:	fa43 fb02 	asr.w	fp, r3, r2
 800f1dc:	f1bb 0f00 	cmp.w	fp, #0
 800f1e0:	dd65      	ble.n	800f2ae <__kernel_rem_pio2+0x26e>
 800f1e2:	9b02      	ldr	r3, [sp, #8]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	9302      	str	r3, [sp, #8]
 800f1ea:	4615      	mov	r5, r2
 800f1ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f1f0:	4294      	cmp	r4, r2
 800f1f2:	f300 809f 	bgt.w	800f334 <__kernel_rem_pio2+0x2f4>
 800f1f6:	f1ba 0f00 	cmp.w	sl, #0
 800f1fa:	dd07      	ble.n	800f20c <__kernel_rem_pio2+0x1cc>
 800f1fc:	f1ba 0f01 	cmp.w	sl, #1
 800f200:	f000 80c1 	beq.w	800f386 <__kernel_rem_pio2+0x346>
 800f204:	f1ba 0f02 	cmp.w	sl, #2
 800f208:	f000 80c7 	beq.w	800f39a <__kernel_rem_pio2+0x35a>
 800f20c:	f1bb 0f02 	cmp.w	fp, #2
 800f210:	d14d      	bne.n	800f2ae <__kernel_rem_pio2+0x26e>
 800f212:	4632      	mov	r2, r6
 800f214:	463b      	mov	r3, r7
 800f216:	4954      	ldr	r1, [pc, #336]	; (800f368 <__kernel_rem_pio2+0x328>)
 800f218:	2000      	movs	r0, #0
 800f21a:	f7f1 f835 	bl	8000288 <__aeabi_dsub>
 800f21e:	4606      	mov	r6, r0
 800f220:	460f      	mov	r7, r1
 800f222:	2d00      	cmp	r5, #0
 800f224:	d043      	beq.n	800f2ae <__kernel_rem_pio2+0x26e>
 800f226:	4650      	mov	r0, sl
 800f228:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f358 <__kernel_rem_pio2+0x318>
 800f22c:	f000 fa58 	bl	800f6e0 <scalbn>
 800f230:	4630      	mov	r0, r6
 800f232:	4639      	mov	r1, r7
 800f234:	ec53 2b10 	vmov	r2, r3, d0
 800f238:	f7f1 f826 	bl	8000288 <__aeabi_dsub>
 800f23c:	4606      	mov	r6, r0
 800f23e:	460f      	mov	r7, r1
 800f240:	e035      	b.n	800f2ae <__kernel_rem_pio2+0x26e>
 800f242:	4b4a      	ldr	r3, [pc, #296]	; (800f36c <__kernel_rem_pio2+0x32c>)
 800f244:	2200      	movs	r2, #0
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	f7f1 f9d5 	bl	80005f8 <__aeabi_dmul>
 800f24e:	f7f1 fc83 	bl	8000b58 <__aeabi_d2iz>
 800f252:	f7f1 f967 	bl	8000524 <__aeabi_i2d>
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	ec43 2b18 	vmov	d8, r2, r3
 800f25e:	4b44      	ldr	r3, [pc, #272]	; (800f370 <__kernel_rem_pio2+0x330>)
 800f260:	2200      	movs	r2, #0
 800f262:	f7f1 f9c9 	bl	80005f8 <__aeabi_dmul>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4630      	mov	r0, r6
 800f26c:	4639      	mov	r1, r7
 800f26e:	f7f1 f80b 	bl	8000288 <__aeabi_dsub>
 800f272:	f7f1 fc71 	bl	8000b58 <__aeabi_d2iz>
 800f276:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f27a:	f84b 0b04 	str.w	r0, [fp], #4
 800f27e:	ec51 0b18 	vmov	r0, r1, d8
 800f282:	f7f1 f803 	bl	800028c <__adddf3>
 800f286:	f109 39ff 	add.w	r9, r9, #4294967295
 800f28a:	4606      	mov	r6, r0
 800f28c:	460f      	mov	r7, r1
 800f28e:	e75b      	b.n	800f148 <__kernel_rem_pio2+0x108>
 800f290:	d106      	bne.n	800f2a0 <__kernel_rem_pio2+0x260>
 800f292:	1e63      	subs	r3, r4, #1
 800f294:	aa0c      	add	r2, sp, #48	; 0x30
 800f296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f29a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f29e:	e79d      	b.n	800f1dc <__kernel_rem_pio2+0x19c>
 800f2a0:	4b34      	ldr	r3, [pc, #208]	; (800f374 <__kernel_rem_pio2+0x334>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f7f1 fc2e 	bl	8000b04 <__aeabi_dcmpge>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d140      	bne.n	800f32e <__kernel_rem_pio2+0x2ee>
 800f2ac:	4683      	mov	fp, r0
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	f7f1 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	f000 80c1 	beq.w	800f442 <__kernel_rem_pio2+0x402>
 800f2c0:	1e65      	subs	r5, r4, #1
 800f2c2:	462b      	mov	r3, r5
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	9900      	ldr	r1, [sp, #0]
 800f2c8:	428b      	cmp	r3, r1
 800f2ca:	da6d      	bge.n	800f3a8 <__kernel_rem_pio2+0x368>
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	f000 808a 	beq.w	800f3e6 <__kernel_rem_pio2+0x3a6>
 800f2d2:	ab0c      	add	r3, sp, #48	; 0x30
 800f2d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f2d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 80ae 	beq.w	800f43e <__kernel_rem_pio2+0x3fe>
 800f2e2:	4650      	mov	r0, sl
 800f2e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f358 <__kernel_rem_pio2+0x318>
 800f2e8:	f000 f9fa 	bl	800f6e0 <scalbn>
 800f2ec:	1c6b      	adds	r3, r5, #1
 800f2ee:	00da      	lsls	r2, r3, #3
 800f2f0:	9205      	str	r2, [sp, #20]
 800f2f2:	ec57 6b10 	vmov	r6, r7, d0
 800f2f6:	aa70      	add	r2, sp, #448	; 0x1c0
 800f2f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f36c <__kernel_rem_pio2+0x32c>
 800f2fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f300:	462c      	mov	r4, r5
 800f302:	f04f 0800 	mov.w	r8, #0
 800f306:	2c00      	cmp	r4, #0
 800f308:	f280 80d4 	bge.w	800f4b4 <__kernel_rem_pio2+0x474>
 800f30c:	462c      	mov	r4, r5
 800f30e:	2c00      	cmp	r4, #0
 800f310:	f2c0 8102 	blt.w	800f518 <__kernel_rem_pio2+0x4d8>
 800f314:	4b18      	ldr	r3, [pc, #96]	; (800f378 <__kernel_rem_pio2+0x338>)
 800f316:	461e      	mov	r6, r3
 800f318:	ab70      	add	r3, sp, #448	; 0x1c0
 800f31a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f31e:	1b2b      	subs	r3, r5, r4
 800f320:	f04f 0900 	mov.w	r9, #0
 800f324:	f04f 0a00 	mov.w	sl, #0
 800f328:	2700      	movs	r7, #0
 800f32a:	9306      	str	r3, [sp, #24]
 800f32c:	e0e6      	b.n	800f4fc <__kernel_rem_pio2+0x4bc>
 800f32e:	f04f 0b02 	mov.w	fp, #2
 800f332:	e756      	b.n	800f1e2 <__kernel_rem_pio2+0x1a2>
 800f334:	f8d8 3000 	ldr.w	r3, [r8]
 800f338:	bb05      	cbnz	r5, 800f37c <__kernel_rem_pio2+0x33c>
 800f33a:	b123      	cbz	r3, 800f346 <__kernel_rem_pio2+0x306>
 800f33c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f340:	f8c8 3000 	str.w	r3, [r8]
 800f344:	2301      	movs	r3, #1
 800f346:	3201      	adds	r2, #1
 800f348:	f108 0804 	add.w	r8, r8, #4
 800f34c:	461d      	mov	r5, r3
 800f34e:	e74f      	b.n	800f1f0 <__kernel_rem_pio2+0x1b0>
	...
 800f35c:	3ff00000 	.word	0x3ff00000
 800f360:	0800fe90 	.word	0x0800fe90
 800f364:	40200000 	.word	0x40200000
 800f368:	3ff00000 	.word	0x3ff00000
 800f36c:	3e700000 	.word	0x3e700000
 800f370:	41700000 	.word	0x41700000
 800f374:	3fe00000 	.word	0x3fe00000
 800f378:	0800fe50 	.word	0x0800fe50
 800f37c:	1acb      	subs	r3, r1, r3
 800f37e:	f8c8 3000 	str.w	r3, [r8]
 800f382:	462b      	mov	r3, r5
 800f384:	e7df      	b.n	800f346 <__kernel_rem_pio2+0x306>
 800f386:	1e62      	subs	r2, r4, #1
 800f388:	ab0c      	add	r3, sp, #48	; 0x30
 800f38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f38e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f392:	a90c      	add	r1, sp, #48	; 0x30
 800f394:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f398:	e738      	b.n	800f20c <__kernel_rem_pio2+0x1cc>
 800f39a:	1e62      	subs	r2, r4, #1
 800f39c:	ab0c      	add	r3, sp, #48	; 0x30
 800f39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f3a6:	e7f4      	b.n	800f392 <__kernel_rem_pio2+0x352>
 800f3a8:	a90c      	add	r1, sp, #48	; 0x30
 800f3aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	430a      	orrs	r2, r1
 800f3b2:	e788      	b.n	800f2c6 <__kernel_rem_pio2+0x286>
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f3ba:	2900      	cmp	r1, #0
 800f3bc:	d0fa      	beq.n	800f3b4 <__kernel_rem_pio2+0x374>
 800f3be:	9a08      	ldr	r2, [sp, #32]
 800f3c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f3c4:	446a      	add	r2, sp
 800f3c6:	3a98      	subs	r2, #152	; 0x98
 800f3c8:	9208      	str	r2, [sp, #32]
 800f3ca:	9a06      	ldr	r2, [sp, #24]
 800f3cc:	a920      	add	r1, sp, #128	; 0x80
 800f3ce:	18a2      	adds	r2, r4, r2
 800f3d0:	18e3      	adds	r3, r4, r3
 800f3d2:	f104 0801 	add.w	r8, r4, #1
 800f3d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f3da:	9302      	str	r3, [sp, #8]
 800f3dc:	9b02      	ldr	r3, [sp, #8]
 800f3de:	4543      	cmp	r3, r8
 800f3e0:	da04      	bge.n	800f3ec <__kernel_rem_pio2+0x3ac>
 800f3e2:	461c      	mov	r4, r3
 800f3e4:	e6a2      	b.n	800f12c <__kernel_rem_pio2+0xec>
 800f3e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e7e4      	b.n	800f3b6 <__kernel_rem_pio2+0x376>
 800f3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f3f2:	f7f1 f897 	bl	8000524 <__aeabi_i2d>
 800f3f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3fc:	46ab      	mov	fp, r5
 800f3fe:	461c      	mov	r4, r3
 800f400:	f04f 0900 	mov.w	r9, #0
 800f404:	2600      	movs	r6, #0
 800f406:	2700      	movs	r7, #0
 800f408:	9b05      	ldr	r3, [sp, #20]
 800f40a:	4599      	cmp	r9, r3
 800f40c:	dd06      	ble.n	800f41c <__kernel_rem_pio2+0x3dc>
 800f40e:	9b08      	ldr	r3, [sp, #32]
 800f410:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f414:	f108 0801 	add.w	r8, r8, #1
 800f418:	9308      	str	r3, [sp, #32]
 800f41a:	e7df      	b.n	800f3dc <__kernel_rem_pio2+0x39c>
 800f41c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f420:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f424:	f7f1 f8e8 	bl	80005f8 <__aeabi_dmul>
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	4630      	mov	r0, r6
 800f42e:	4639      	mov	r1, r7
 800f430:	f7f0 ff2c 	bl	800028c <__adddf3>
 800f434:	f109 0901 	add.w	r9, r9, #1
 800f438:	4606      	mov	r6, r0
 800f43a:	460f      	mov	r7, r1
 800f43c:	e7e4      	b.n	800f408 <__kernel_rem_pio2+0x3c8>
 800f43e:	3d01      	subs	r5, #1
 800f440:	e747      	b.n	800f2d2 <__kernel_rem_pio2+0x292>
 800f442:	ec47 6b10 	vmov	d0, r6, r7
 800f446:	f1ca 0000 	rsb	r0, sl, #0
 800f44a:	f000 f949 	bl	800f6e0 <scalbn>
 800f44e:	ec57 6b10 	vmov	r6, r7, d0
 800f452:	4ba0      	ldr	r3, [pc, #640]	; (800f6d4 <__kernel_rem_pio2+0x694>)
 800f454:	ee10 0a10 	vmov	r0, s0
 800f458:	2200      	movs	r2, #0
 800f45a:	4639      	mov	r1, r7
 800f45c:	f7f1 fb52 	bl	8000b04 <__aeabi_dcmpge>
 800f460:	b1f8      	cbz	r0, 800f4a2 <__kernel_rem_pio2+0x462>
 800f462:	4b9d      	ldr	r3, [pc, #628]	; (800f6d8 <__kernel_rem_pio2+0x698>)
 800f464:	2200      	movs	r2, #0
 800f466:	4630      	mov	r0, r6
 800f468:	4639      	mov	r1, r7
 800f46a:	f7f1 f8c5 	bl	80005f8 <__aeabi_dmul>
 800f46e:	f7f1 fb73 	bl	8000b58 <__aeabi_d2iz>
 800f472:	4680      	mov	r8, r0
 800f474:	f7f1 f856 	bl	8000524 <__aeabi_i2d>
 800f478:	4b96      	ldr	r3, [pc, #600]	; (800f6d4 <__kernel_rem_pio2+0x694>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	f7f1 f8bc 	bl	80005f8 <__aeabi_dmul>
 800f480:	460b      	mov	r3, r1
 800f482:	4602      	mov	r2, r0
 800f484:	4639      	mov	r1, r7
 800f486:	4630      	mov	r0, r6
 800f488:	f7f0 fefe 	bl	8000288 <__aeabi_dsub>
 800f48c:	f7f1 fb64 	bl	8000b58 <__aeabi_d2iz>
 800f490:	1c65      	adds	r5, r4, #1
 800f492:	ab0c      	add	r3, sp, #48	; 0x30
 800f494:	f10a 0a18 	add.w	sl, sl, #24
 800f498:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f49c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f4a0:	e71f      	b.n	800f2e2 <__kernel_rem_pio2+0x2a2>
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f1 fb57 	bl	8000b58 <__aeabi_d2iz>
 800f4aa:	ab0c      	add	r3, sp, #48	; 0x30
 800f4ac:	4625      	mov	r5, r4
 800f4ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f4b2:	e716      	b.n	800f2e2 <__kernel_rem_pio2+0x2a2>
 800f4b4:	ab0c      	add	r3, sp, #48	; 0x30
 800f4b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f4ba:	f7f1 f833 	bl	8000524 <__aeabi_i2d>
 800f4be:	4632      	mov	r2, r6
 800f4c0:	463b      	mov	r3, r7
 800f4c2:	f7f1 f899 	bl	80005f8 <__aeabi_dmul>
 800f4c6:	4642      	mov	r2, r8
 800f4c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f4cc:	464b      	mov	r3, r9
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	f7f1 f891 	bl	80005f8 <__aeabi_dmul>
 800f4d6:	3c01      	subs	r4, #1
 800f4d8:	4606      	mov	r6, r0
 800f4da:	460f      	mov	r7, r1
 800f4dc:	e713      	b.n	800f306 <__kernel_rem_pio2+0x2c6>
 800f4de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f4e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f4e6:	f7f1 f887 	bl	80005f8 <__aeabi_dmul>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	4648      	mov	r0, r9
 800f4f0:	4651      	mov	r1, sl
 800f4f2:	f7f0 fecb 	bl	800028c <__adddf3>
 800f4f6:	3701      	adds	r7, #1
 800f4f8:	4681      	mov	r9, r0
 800f4fa:	468a      	mov	sl, r1
 800f4fc:	9b00      	ldr	r3, [sp, #0]
 800f4fe:	429f      	cmp	r7, r3
 800f500:	dc02      	bgt.n	800f508 <__kernel_rem_pio2+0x4c8>
 800f502:	9b06      	ldr	r3, [sp, #24]
 800f504:	429f      	cmp	r7, r3
 800f506:	ddea      	ble.n	800f4de <__kernel_rem_pio2+0x49e>
 800f508:	9a06      	ldr	r2, [sp, #24]
 800f50a:	ab48      	add	r3, sp, #288	; 0x120
 800f50c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f510:	e9c6 9a00 	strd	r9, sl, [r6]
 800f514:	3c01      	subs	r4, #1
 800f516:	e6fa      	b.n	800f30e <__kernel_rem_pio2+0x2ce>
 800f518:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	dc0b      	bgt.n	800f536 <__kernel_rem_pio2+0x4f6>
 800f51e:	2b00      	cmp	r3, #0
 800f520:	dc39      	bgt.n	800f596 <__kernel_rem_pio2+0x556>
 800f522:	d05d      	beq.n	800f5e0 <__kernel_rem_pio2+0x5a0>
 800f524:	9b02      	ldr	r3, [sp, #8]
 800f526:	f003 0007 	and.w	r0, r3, #7
 800f52a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f52e:	ecbd 8b02 	vpop	{d8}
 800f532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f536:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f538:	2b03      	cmp	r3, #3
 800f53a:	d1f3      	bne.n	800f524 <__kernel_rem_pio2+0x4e4>
 800f53c:	9b05      	ldr	r3, [sp, #20]
 800f53e:	9500      	str	r5, [sp, #0]
 800f540:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f544:	eb0d 0403 	add.w	r4, sp, r3
 800f548:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f54c:	46a2      	mov	sl, r4
 800f54e:	9b00      	ldr	r3, [sp, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	f1aa 0a08 	sub.w	sl, sl, #8
 800f556:	dc69      	bgt.n	800f62c <__kernel_rem_pio2+0x5ec>
 800f558:	46aa      	mov	sl, r5
 800f55a:	f1ba 0f01 	cmp.w	sl, #1
 800f55e:	f1a4 0408 	sub.w	r4, r4, #8
 800f562:	f300 8083 	bgt.w	800f66c <__kernel_rem_pio2+0x62c>
 800f566:	9c05      	ldr	r4, [sp, #20]
 800f568:	ab48      	add	r3, sp, #288	; 0x120
 800f56a:	441c      	add	r4, r3
 800f56c:	2000      	movs	r0, #0
 800f56e:	2100      	movs	r1, #0
 800f570:	2d01      	cmp	r5, #1
 800f572:	f300 809a 	bgt.w	800f6aa <__kernel_rem_pio2+0x66a>
 800f576:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f57a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f57e:	f1bb 0f00 	cmp.w	fp, #0
 800f582:	f040 8098 	bne.w	800f6b6 <__kernel_rem_pio2+0x676>
 800f586:	9b04      	ldr	r3, [sp, #16]
 800f588:	e9c3 7800 	strd	r7, r8, [r3]
 800f58c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f590:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f594:	e7c6      	b.n	800f524 <__kernel_rem_pio2+0x4e4>
 800f596:	9e05      	ldr	r6, [sp, #20]
 800f598:	ab48      	add	r3, sp, #288	; 0x120
 800f59a:	441e      	add	r6, r3
 800f59c:	462c      	mov	r4, r5
 800f59e:	2000      	movs	r0, #0
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	2c00      	cmp	r4, #0
 800f5a4:	da33      	bge.n	800f60e <__kernel_rem_pio2+0x5ce>
 800f5a6:	f1bb 0f00 	cmp.w	fp, #0
 800f5aa:	d036      	beq.n	800f61a <__kernel_rem_pio2+0x5da>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5b2:	9c04      	ldr	r4, [sp, #16]
 800f5b4:	e9c4 2300 	strd	r2, r3, [r4]
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f5c0:	f7f0 fe62 	bl	8000288 <__aeabi_dsub>
 800f5c4:	ae4a      	add	r6, sp, #296	; 0x128
 800f5c6:	2401      	movs	r4, #1
 800f5c8:	42a5      	cmp	r5, r4
 800f5ca:	da29      	bge.n	800f620 <__kernel_rem_pio2+0x5e0>
 800f5cc:	f1bb 0f00 	cmp.w	fp, #0
 800f5d0:	d002      	beq.n	800f5d8 <__kernel_rem_pio2+0x598>
 800f5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	9b04      	ldr	r3, [sp, #16]
 800f5da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f5de:	e7a1      	b.n	800f524 <__kernel_rem_pio2+0x4e4>
 800f5e0:	9c05      	ldr	r4, [sp, #20]
 800f5e2:	ab48      	add	r3, sp, #288	; 0x120
 800f5e4:	441c      	add	r4, r3
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	2d00      	cmp	r5, #0
 800f5ec:	da09      	bge.n	800f602 <__kernel_rem_pio2+0x5c2>
 800f5ee:	f1bb 0f00 	cmp.w	fp, #0
 800f5f2:	d002      	beq.n	800f5fa <__kernel_rem_pio2+0x5ba>
 800f5f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	9b04      	ldr	r3, [sp, #16]
 800f5fc:	e9c3 0100 	strd	r0, r1, [r3]
 800f600:	e790      	b.n	800f524 <__kernel_rem_pio2+0x4e4>
 800f602:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f606:	f7f0 fe41 	bl	800028c <__adddf3>
 800f60a:	3d01      	subs	r5, #1
 800f60c:	e7ed      	b.n	800f5ea <__kernel_rem_pio2+0x5aa>
 800f60e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f612:	f7f0 fe3b 	bl	800028c <__adddf3>
 800f616:	3c01      	subs	r4, #1
 800f618:	e7c3      	b.n	800f5a2 <__kernel_rem_pio2+0x562>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	e7c8      	b.n	800f5b2 <__kernel_rem_pio2+0x572>
 800f620:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f624:	f7f0 fe32 	bl	800028c <__adddf3>
 800f628:	3401      	adds	r4, #1
 800f62a:	e7cd      	b.n	800f5c8 <__kernel_rem_pio2+0x588>
 800f62c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f630:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f634:	9b00      	ldr	r3, [sp, #0]
 800f636:	3b01      	subs	r3, #1
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	4632      	mov	r2, r6
 800f63c:	463b      	mov	r3, r7
 800f63e:	4640      	mov	r0, r8
 800f640:	4649      	mov	r1, r9
 800f642:	f7f0 fe23 	bl	800028c <__adddf3>
 800f646:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	4640      	mov	r0, r8
 800f650:	4649      	mov	r1, r9
 800f652:	f7f0 fe19 	bl	8000288 <__aeabi_dsub>
 800f656:	4632      	mov	r2, r6
 800f658:	463b      	mov	r3, r7
 800f65a:	f7f0 fe17 	bl	800028c <__adddf3>
 800f65e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f662:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f666:	ed8a 7b00 	vstr	d7, [sl]
 800f66a:	e770      	b.n	800f54e <__kernel_rem_pio2+0x50e>
 800f66c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f670:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f674:	4640      	mov	r0, r8
 800f676:	4632      	mov	r2, r6
 800f678:	463b      	mov	r3, r7
 800f67a:	4649      	mov	r1, r9
 800f67c:	f7f0 fe06 	bl	800028c <__adddf3>
 800f680:	e9cd 0100 	strd	r0, r1, [sp]
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4640      	mov	r0, r8
 800f68a:	4649      	mov	r1, r9
 800f68c:	f7f0 fdfc 	bl	8000288 <__aeabi_dsub>
 800f690:	4632      	mov	r2, r6
 800f692:	463b      	mov	r3, r7
 800f694:	f7f0 fdfa 	bl	800028c <__adddf3>
 800f698:	ed9d 7b00 	vldr	d7, [sp]
 800f69c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f6a0:	ed84 7b00 	vstr	d7, [r4]
 800f6a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6a8:	e757      	b.n	800f55a <__kernel_rem_pio2+0x51a>
 800f6aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f6ae:	f7f0 fded 	bl	800028c <__adddf3>
 800f6b2:	3d01      	subs	r5, #1
 800f6b4:	e75c      	b.n	800f570 <__kernel_rem_pio2+0x530>
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	9a04      	ldr	r2, [sp, #16]
 800f6ba:	601f      	str	r7, [r3, #0]
 800f6bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f6c0:	605c      	str	r4, [r3, #4]
 800f6c2:	609d      	str	r5, [r3, #8]
 800f6c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f6c8:	60d3      	str	r3, [r2, #12]
 800f6ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6ce:	6110      	str	r0, [r2, #16]
 800f6d0:	6153      	str	r3, [r2, #20]
 800f6d2:	e727      	b.n	800f524 <__kernel_rem_pio2+0x4e4>
 800f6d4:	41700000 	.word	0x41700000
 800f6d8:	3e700000 	.word	0x3e700000
 800f6dc:	00000000 	.word	0x00000000

0800f6e0 <scalbn>:
 800f6e0:	b570      	push	{r4, r5, r6, lr}
 800f6e2:	ec55 4b10 	vmov	r4, r5, d0
 800f6e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	b999      	cbnz	r1, 800f718 <scalbn+0x38>
 800f6f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f6f4:	4323      	orrs	r3, r4
 800f6f6:	d03f      	beq.n	800f778 <scalbn+0x98>
 800f6f8:	4b35      	ldr	r3, [pc, #212]	; (800f7d0 <scalbn+0xf0>)
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	ee10 0a10 	vmov	r0, s0
 800f700:	2200      	movs	r2, #0
 800f702:	f7f0 ff79 	bl	80005f8 <__aeabi_dmul>
 800f706:	4b33      	ldr	r3, [pc, #204]	; (800f7d4 <scalbn+0xf4>)
 800f708:	429e      	cmp	r6, r3
 800f70a:	4604      	mov	r4, r0
 800f70c:	460d      	mov	r5, r1
 800f70e:	da10      	bge.n	800f732 <scalbn+0x52>
 800f710:	a327      	add	r3, pc, #156	; (adr r3, 800f7b0 <scalbn+0xd0>)
 800f712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f716:	e01f      	b.n	800f758 <scalbn+0x78>
 800f718:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f71c:	4291      	cmp	r1, r2
 800f71e:	d10c      	bne.n	800f73a <scalbn+0x5a>
 800f720:	ee10 2a10 	vmov	r2, s0
 800f724:	4620      	mov	r0, r4
 800f726:	4629      	mov	r1, r5
 800f728:	f7f0 fdb0 	bl	800028c <__adddf3>
 800f72c:	4604      	mov	r4, r0
 800f72e:	460d      	mov	r5, r1
 800f730:	e022      	b.n	800f778 <scalbn+0x98>
 800f732:	460b      	mov	r3, r1
 800f734:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f738:	3936      	subs	r1, #54	; 0x36
 800f73a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f73e:	4296      	cmp	r6, r2
 800f740:	dd0d      	ble.n	800f75e <scalbn+0x7e>
 800f742:	2d00      	cmp	r5, #0
 800f744:	a11c      	add	r1, pc, #112	; (adr r1, 800f7b8 <scalbn+0xd8>)
 800f746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f74a:	da02      	bge.n	800f752 <scalbn+0x72>
 800f74c:	a11c      	add	r1, pc, #112	; (adr r1, 800f7c0 <scalbn+0xe0>)
 800f74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f752:	a319      	add	r3, pc, #100	; (adr r3, 800f7b8 <scalbn+0xd8>)
 800f754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f758:	f7f0 ff4e 	bl	80005f8 <__aeabi_dmul>
 800f75c:	e7e6      	b.n	800f72c <scalbn+0x4c>
 800f75e:	1872      	adds	r2, r6, r1
 800f760:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f764:	428a      	cmp	r2, r1
 800f766:	dcec      	bgt.n	800f742 <scalbn+0x62>
 800f768:	2a00      	cmp	r2, #0
 800f76a:	dd08      	ble.n	800f77e <scalbn+0x9e>
 800f76c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f770:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f774:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f778:	ec45 4b10 	vmov	d0, r4, r5
 800f77c:	bd70      	pop	{r4, r5, r6, pc}
 800f77e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f782:	da08      	bge.n	800f796 <scalbn+0xb6>
 800f784:	2d00      	cmp	r5, #0
 800f786:	a10a      	add	r1, pc, #40	; (adr r1, 800f7b0 <scalbn+0xd0>)
 800f788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f78c:	dac0      	bge.n	800f710 <scalbn+0x30>
 800f78e:	a10e      	add	r1, pc, #56	; (adr r1, 800f7c8 <scalbn+0xe8>)
 800f790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f794:	e7bc      	b.n	800f710 <scalbn+0x30>
 800f796:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f79a:	3236      	adds	r2, #54	; 0x36
 800f79c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <scalbn+0xf8>)
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	e7d5      	b.n	800f758 <scalbn+0x78>
 800f7ac:	f3af 8000 	nop.w
 800f7b0:	c2f8f359 	.word	0xc2f8f359
 800f7b4:	01a56e1f 	.word	0x01a56e1f
 800f7b8:	8800759c 	.word	0x8800759c
 800f7bc:	7e37e43c 	.word	0x7e37e43c
 800f7c0:	8800759c 	.word	0x8800759c
 800f7c4:	fe37e43c 	.word	0xfe37e43c
 800f7c8:	c2f8f359 	.word	0xc2f8f359
 800f7cc:	81a56e1f 	.word	0x81a56e1f
 800f7d0:	43500000 	.word	0x43500000
 800f7d4:	ffff3cb0 	.word	0xffff3cb0
 800f7d8:	3c900000 	.word	0x3c900000

0800f7dc <_init>:
 800f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7de:	bf00      	nop
 800f7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7e2:	bc08      	pop	{r3}
 800f7e4:	469e      	mov	lr, r3
 800f7e6:	4770      	bx	lr

0800f7e8 <_fini>:
 800f7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ea:	bf00      	nop
 800f7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ee:	bc08      	pop	{r3}
 800f7f0:	469e      	mov	lr, r3
 800f7f2:	4770      	bx	lr
