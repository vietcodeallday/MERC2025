
MERC2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800fd70  0800fd70  0001fd70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010438  08010438  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010438  08010438  00020438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010440  08010440  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010440  08010440  00020440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010444  08010444  00020444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010448  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00004ebc  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200050b4  200050b4  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a970  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cf9  00000000  00000000  0004abdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  0004e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001329  00000000  00000000  00050180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025a60  00000000  00000000  000514a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d847  00000000  00000000  00076f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dac3f  00000000  00000000  00094750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007fc8  00000000  00000000  0016f390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00177358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd54 	.word	0x0800fd54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800fd54 	.word	0x0800fd54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_rpm>:
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
//	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
double get_rpm(int motor){
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
//	const float timeout = (float)(1/osKernelGetSysTimerFreq())*160000;
////	reset_tick();
	switch (motor){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d029      	beq.n	8001052 <get_rpm+0x62>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b03      	cmp	r3, #3
 8001002:	dc36      	bgt.n	8001072 <get_rpm+0x82>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d003      	beq.n	8001012 <get_rpm+0x22>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d010      	beq.n	8001032 <get_rpm+0x42>
 8001010:	e02f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8001012:	4b61      	ldr	r3, [pc, #388]	; (8001198 <get_rpm+0x1a8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <get_rpm+0x30>
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	e000      	b.n	8001022 <get_rpm+0x32>
 8001020:	2200      	movs	r2, #0
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <get_rpm+0x1ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8001028:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <get_rpm+0x1a8>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <get_rpm+0x1b0>)
 800102e:	701a      	strb	r2, [r3, #0]
			break;
 8001030:	e01f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <get_rpm+0x1b4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <get_rpm+0x50>
 800103a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103e:	e000      	b.n	8001042 <get_rpm+0x52>
 8001040:	2200      	movs	r2, #0
 8001042:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <get_rpm+0x1b8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <get_rpm+0x1b4>)
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <get_rpm+0x1b0>)
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e00f      	b.n	8001072 <get_rpm+0x82>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8001052:	4b56      	ldr	r3, [pc, #344]	; (80011ac <get_rpm+0x1bc>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <get_rpm+0x70>
 800105a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105e:	e000      	b.n	8001062 <get_rpm+0x72>
 8001060:	2200      	movs	r2, #0
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <get_rpm+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8001068:	4b50      	ldr	r3, [pc, #320]	; (80011ac <get_rpm+0x1bc>)
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <get_rpm+0x1b0>)
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <get_rpm+0x1b0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f8da 	bl	8001230 <ResetLoop>
//	uint32_t a=osKernelGetTickCount();
	uint32_t a=xTaskGetTickCount();
 800107c:	f007 fcc4 	bl	8008a08 <xTaskGetTickCount>
 8001080:	60f8      	str	r0, [r7, #12]
//	TickType_t a = pdTICKS_TO_MS( xTaskGetTickCount());
//	uint32_t a= osKernelSysTick();
//	UARTprintf("tick: %d \n",a);

	while(xTaskGetTickCount()- a <= 10){
 8001082:	e029      	b.n	80010d8 <get_rpm+0xe8>
		switch (motor){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <get_rpm+0xca>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b03      	cmp	r3, #3
 800108e:	dc1b      	bgt.n	80010c8 <get_rpm+0xd8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <get_rpm+0xae>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d007      	beq.n	80010ac <get_rpm+0xbc>
 800109c:	e014      	b.n	80010c8 <get_rpm+0xd8>
		case MOTOR_1:
			cnt = __HAL_TIM_GET_COUNTER(&htim1);
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <get_rpm+0x1ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <get_rpm+0x1c4>)
 80010a8:	801a      	strh	r2, [r3, #0]
			break;
 80010aa:	e00d      	b.n	80010c8 <get_rpm+0xd8>

		case MOTOR_2:
			cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <get_rpm+0x1b8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <get_rpm+0x1c4>)
 80010b6:	801a      	strh	r2, [r3, #0]
			break;
 80010b8:	e006      	b.n	80010c8 <get_rpm+0xd8>

		case MOTOR_3:
			cnt = __HAL_TIM_GET_COUNTER(&htim4);
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <get_rpm+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <get_rpm+0x1c4>)
 80010c4:	801a      	strh	r2, [r3, #0]
			break;
 80010c6:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <get_rpm+0x1c4>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <get_rpm+0x1b0>)
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f878 	bl	80011c8 <CountLoop>
	while(xTaskGetTickCount()- a <= 10){
 80010d8:	f007 fc96 	bl	8008a08 <xTaskGetTickCount>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d9ce      	bls.n	8001084 <get_rpm+0x94>
	}
//	UARTprintf("loop: %d, \t cnt: %d \r\n",loop,cnt);
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*100*60;
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <get_rpm+0x1c8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	a325      	add	r3, pc, #148	; (adr r3, 8001188 <get_rpm+0x198>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <get_rpm+0x1b0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d008      	beq.n	800111c <get_rpm+0x12c>
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <get_rpm+0x1c4>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001112:	33ff      	adds	r3, #255	; 0xff
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa05 	bl	8000524 <__aeabi_i2d>
 800111a:	e004      	b.n	8001126 <get_rpm+0x136>
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <get_rpm+0x1c4>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ef 	bl	8000504 <__aeabi_ui2d>
 8001126:	4622      	mov	r2, r4
 8001128:	462b      	mov	r3, r5
 800112a:	f7ff f8af 	bl	800028c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a316      	add	r3, pc, #88	; (adr r3, 8001190 <get_rpm+0x1a0>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fb86 	bl	800084c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <get_rpm+0x1cc>)
 800114e:	f7ff fa53 	bl	80005f8 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <get_rpm+0x1d0>)
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4916      	ldr	r1, [pc, #88]	; (80011c4 <get_rpm+0x1d4>)
 800116a:	e9c1 2300 	strd	r2, r3, [r1]
//	rpm=(rpm>1000)?0:rpm;
	return rpm;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <get_rpm+0x1d4>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	ec43 2b17 	vmov	d7, r2, r3
}
 8001178:	eeb0 0a47 	vmov.f32	s0, s14
 800117c:	eef0 0a67 	vmov.f32	s1, s15
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	00000000 	.word	0x00000000
 800118c:	40efbd00 	.word	0x40efbd00
 8001190:	00000000 	.word	0x00000000
 8001194:	40e6f300 	.word	0x40e6f300
 8001198:	20000001 	.word	0x20000001
 800119c:	200002d8 	.word	0x200002d8
 80011a0:	20000228 	.word	0x20000228
 80011a4:	20000002 	.word	0x20000002
 80011a8:	20000368 	.word	0x20000368
 80011ac:	20000003 	.word	0x20000003
 80011b0:	200003b0 	.word	0x200003b0
 80011b4:	20000220 	.word	0x20000220
 80011b8:	20000224 	.word	0x20000224
 80011bc:	40590000 	.word	0x40590000
 80011c0:	404e0000 	.word	0x404e0000
 80011c4:	20000218 	.word	0x20000218

080011c8 <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	if (!flag){
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00d      	beq.n	8001200 <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <CountLoop+0x60>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d204      	bcs.n	80011f8 <CountLoop+0x30>
			loop++;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <CountLoop+0x64>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <CountLoop+0x64>)
 80011f6:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <CountLoop+0x60>)
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 80011fe:	e00c      	b.n	800121a <CountLoop+0x52>
		if(cnt>preCnt){	//
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <CountLoop+0x60>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	429a      	cmp	r2, r3
 8001208:	d904      	bls.n	8001214 <CountLoop+0x4c>
			loop++;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <CountLoop+0x64>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <CountLoop+0x64>)
 8001212:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <CountLoop+0x60>)
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	8013      	strh	r3, [r2, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000222 	.word	0x20000222
 800122c:	20000224 	.word	0x20000224

08001230 <ResetLoop>:
void ResetLoop(bool flag){
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	loop=0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <ResetLoop+0x30>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
	preCnt=(flag)?65535:0;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <ResetLoop+0x1c>
 8001246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124a:	e000      	b.n	800124e <ResetLoop+0x1e>
 800124c:	2200      	movs	r2, #0
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <ResetLoop+0x34>)
 8001250:	801a      	strh	r2, [r3, #0]
//	if(!flag){
//		preCnt=0;
//	}else{
//		preCnt=65535;
//	}
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000224 	.word	0x20000224
 8001264:	20000222 	.word	0x20000222

08001268 <pid_config>:
uint8_t flag_V_slow=false;
uint8_t rx_data;



void pid_config(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	pid.Kp=0.3;
 800126c:	491a      	ldr	r1, [pc, #104]	; (80012d8 <pid_config+0x70>)
 800126e:	a314      	add	r3, pc, #80	; (adr r3, 80012c0 <pid_config+0x58>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
	pid.Ki=0.2;
 8001278:	4917      	ldr	r1, [pc, #92]	; (80012d8 <pid_config+0x70>)
 800127a:	a313      	add	r3, pc, #76	; (adr r3, 80012c8 <pid_config+0x60>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid.Kd=0.005;
 8001284:	4914      	ldr	r1, [pc, #80]	; (80012d8 <pid_config+0x70>)
 8001286:	a312      	add	r3, pc, #72	; (adr r3, 80012d0 <pid_config+0x68>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid.target_val_1=V1;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <pid_config+0x74>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	4910      	ldr	r1, [pc, #64]	; (80012d8 <pid_config+0x70>)
 8001298:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid.target_val_2=V2;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <pid_config+0x78>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <pid_config+0x70>)
 80012a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid.target_val_3=V3;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <pid_config+0x7c>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <pid_config+0x70>)
 80012b0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID_init(&pid);
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <pid_config+0x70>)
 80012b6:	f001 fd61 	bl	8002d7c <PID_init>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	33333333 	.word	0x33333333
 80012c4:	3fd33333 	.word	0x3fd33333
 80012c8:	9999999a 	.word	0x9999999a
 80012cc:	3fc99999 	.word	0x3fc99999
 80012d0:	47ae147b 	.word	0x47ae147b
 80012d4:	3f747ae1 	.word	0x3f747ae1
 80012d8:	20000490 	.word	0x20000490
 80012dc:	20000510 	.word	0x20000510
 80012e0:	20000518 	.word	0x20000518
 80012e4:	20000520 	.word	0x20000520

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ec:	f002 fc12 	bl	8003b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f880 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f000 fbb6 	bl	8001a64 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012f8:	f000 f948 	bl	800158c <MX_TIM1_Init>
  MX_TIM3_Init();
 80012fc:	f000 fa1e 	bl	800173c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001300:	f000 fa70 	bl	80017e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001304:	f000 fac2 	bl	800188c <MX_TIM5_Init>
  MX_TIM9_Init();
 8001308:	f000 fb40 	bl	800198c <MX_TIM9_Init>
  MX_I2C1_Init();
 800130c:	f000 f8da 	bl	80014c4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001310:	f000 f906 	bl	8001520 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001314:	f000 f992 	bl	800163c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1);
 8001318:	4829      	ldr	r0, [pc, #164]	; (80013c0 <main+0xd8>)
 800131a:	f001 fd19 	bl	8002d50 <PCA9685_Init>

  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 100); //motor 1
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <main+0xdc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c
  	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, 100); //motor 2
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <main+0xdc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2264      	movs	r2, #100	; 0x64
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
  	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, 100); //motor 3
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <main+0xe0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2264      	movs	r2, #100	; 0x64
 8001334:	635a      	str	r2, [r3, #52]	; 0x34


	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100);
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <main+0xe4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2264      	movs	r2, #100	; 0x64
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100);
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <main+0xe4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2264      	movs	r2, #100	; 0x64
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_2, 100);
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <main+0xe0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2264      	movs	r2, #100	; 0x64
 800134c:	639a      	str	r2, [r3, #56]	; 0x38

//  	HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_SET);
//  	HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, GPIO_PIN_SET);
//  	HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, GPIO_PIN_SET);

    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800134e:	2108      	movs	r1, #8
 8001350:	481c      	ldr	r0, [pc, #112]	; (80013c4 <main+0xdc>)
 8001352:	f005 f917 	bl	8006584 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001356:	210c      	movs	r1, #12
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <main+0xdc>)
 800135a:	f005 f913 	bl	8006584 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800135e:	2100      	movs	r1, #0
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <main+0xe0>)
 8001362:	f005 f90f 	bl	8006584 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001366:	2108      	movs	r1, #8
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <main+0xe4>)
 800136a:	f005 f90b 	bl	8006584 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800136e:	210c      	movs	r1, #12
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <main+0xe4>)
 8001372:	f005 f907 	bl	8006584 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001376:	2104      	movs	r1, #4
 8001378:	4813      	ldr	r0, [pc, #76]	; (80013c8 <main+0xe0>)
 800137a:	f005 f903 	bl	8006584 <HAL_TIM_PWM_Start>


    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800137e:	2104      	movs	r1, #4
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <main+0xe8>)
 8001382:	f005 fa6d 	bl	8006860 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001386:	2104      	movs	r1, #4
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <main+0xec>)
 800138a:	f005 fa69 	bl	8006860 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800138e:	2104      	movs	r1, #4
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <main+0xf0>)
 8001392:	f005 fa65 	bl	8006860 <HAL_TIM_Encoder_Start>
//    __HAL_UART_ENABLE_IT(&huart5, UART_IT_RXNE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001396:	f006 f983 	bl	80076a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CONTROL */
  CONTROLHandle = osThreadNew(StartControl, NULL, &CONTROL_attributes);
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <main+0xf4>)
 800139c:	2100      	movs	r1, #0
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <main+0xf8>)
 80013a0:	f006 f9c8 	bl	8007734 <osThreadNew>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <main+0xfc>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* creation of PID */
  PIDHandle = osThreadNew(StartPID, NULL, &PID_attributes);
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <main+0x100>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	480f      	ldr	r0, [pc, #60]	; (80013ec <main+0x104>)
 80013b0:	f006 f9c0 	bl	8007734 <osThreadNew>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <main+0x108>)
 80013b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ba:	f006 f995 	bl	80076e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013be:	e7fe      	b.n	80013be <main+0xd6>
 80013c0:	2000022c 	.word	0x2000022c
 80013c4:	200003f8 	.word	0x200003f8
 80013c8:	20000440 	.word	0x20000440
 80013cc:	20000320 	.word	0x20000320
 80013d0:	200002d8 	.word	0x200002d8
 80013d4:	20000368 	.word	0x20000368
 80013d8:	200003b0 	.word	0x200003b0
 80013dc:	0800fd94 	.word	0x0800fd94
 80013e0:	080020fd 	.word	0x080020fd
 80013e4:	20000488 	.word	0x20000488
 80013e8:	0800fdb8 	.word	0x0800fdb8
 80013ec:	08002195 	.word	0x08002195
 80013f0:	2000048c 	.word	0x2000048c

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f009 fe35 	bl	800b072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <SystemClock_Config+0xc8>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <SystemClock_Config+0xc8>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <SystemClock_Config+0xc8>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <SystemClock_Config+0xcc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <SystemClock_Config+0xcc>)
 800143e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <SystemClock_Config+0xcc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001458:	2310      	movs	r3, #16
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145c:	2302      	movs	r3, #2
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001464:	2308      	movs	r3, #8
 8001466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001470:	2304      	movs	r3, #4
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f003 ffc9 	bl	8005410 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001484:	f000 fea2 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2302      	movs	r3, #2
 800148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 fa2c 	bl	8005900 <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80014ae:	f000 fe8d 	bl	80021cc <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	; 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <MX_I2C1_Init+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_I2C1_Init+0x58>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_I2C1_Init+0x50>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_I2C1_Init+0x50>)
 8001502:	f002 fde1 	bl	80040c8 <HAL_I2C_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800150c:	f000 fe5e 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000022c 	.word	0x2000022c
 8001518:	40005400 	.word	0x40005400
 800151c:	00061a80 	.word	0x00061a80

08001520 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_SPI3_Init+0x64>)
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <MX_SPI3_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_SPI3_Init+0x64>)
 800152c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001530:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_SPI3_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_SPI3_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_SPI3_Init+0x64>)
 8001540:	2202      	movs	r2, #2
 8001542:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_SPI3_Init+0x64>)
 8001546:	2201      	movs	r2, #1
 8001548:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_SPI3_Init+0x64>)
 800154c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001550:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SPI3_Init+0x64>)
 8001554:	2228      	movs	r2, #40	; 0x28
 8001556:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_SPI3_Init+0x64>)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SPI3_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_SPI3_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SPI3_Init+0x64>)
 800156c:	220a      	movs	r2, #10
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_SPI3_Init+0x64>)
 8001572:	f004 fbd7 	bl	8005d24 <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800157c:	f000 fe26 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000280 	.word	0x20000280
 8001588:	40003c00 	.word	0x40003c00

0800158c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2224      	movs	r2, #36	; 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f009 fd69 	bl	800b072 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <MX_TIM1_Init+0xac>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_TIM1_Init+0xa8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015d4:	2303      	movs	r3, #3
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ec:	2301      	movs	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_TIM1_Init+0xa8>)
 8001600:	f005 f888 	bl	8006714 <HAL_TIM_Encoder_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800160a:	f000 fddf 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_TIM1_Init+0xa8>)
 800161c:	f005 ff6c 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001626:	f000 fdd1 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002d8 	.word	0x200002d8
 8001638:	40010000 	.word	0x40010000

0800163c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <MX_TIM2_Init+0xfc>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <MX_TIM2_Init+0xfc>)
 8001676:	2207      	movs	r2, #7
 8001678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <MX_TIM2_Init+0xfc>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001680:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <MX_TIM2_Init+0xfc>)
 8001682:	2263      	movs	r2, #99	; 0x63
 8001684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <MX_TIM2_Init+0xfc>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <MX_TIM2_Init+0xfc>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001692:	4829      	ldr	r0, [pc, #164]	; (8001738 <MX_TIM2_Init+0xfc>)
 8001694:	f004 fe5c 	bl	8006350 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800169e:	f000 fd95 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ac:	4619      	mov	r1, r3
 80016ae:	4822      	ldr	r0, [pc, #136]	; (8001738 <MX_TIM2_Init+0xfc>)
 80016b0:	f005 fb16 	bl	8006ce0 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016ba:	f000 fd87 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016be:	481e      	ldr	r0, [pc, #120]	; (8001738 <MX_TIM2_Init+0xfc>)
 80016c0:	f004 ff06 	bl	80064d0 <HAL_TIM_PWM_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016ca:	f000 fd7f 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	4619      	mov	r1, r3
 80016dc:	4816      	ldr	r0, [pc, #88]	; (8001738 <MX_TIM2_Init+0xfc>)
 80016de:	f005 ff0b 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016e8:	f000 fd70 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ec:	2360      	movs	r3, #96	; 0x60
 80016ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2208      	movs	r2, #8
 8001700:	4619      	mov	r1, r3
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <MX_TIM2_Init+0xfc>)
 8001704:	f005 fa2a 	bl	8006b5c <HAL_TIM_PWM_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800170e:	f000 fd5d 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	220c      	movs	r2, #12
 8001716:	4619      	mov	r1, r3
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM2_Init+0xfc>)
 800171a:	f005 fa1f 	bl	8006b5c <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001724:	f000 fd52 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM2_Init+0xfc>)
 800172a:	f001 ffab 	bl	8003684 <HAL_TIM_MspPostInit>

}
 800172e:	bf00      	nop
 8001730:	3738      	adds	r7, #56	; 0x38
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000320 	.word	0x20000320

0800173c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f009 fc91 	bl	800b072 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_TIM3_Init+0xa0>)
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <MX_TIM3_Init+0xa4>)
 800175c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_TIM3_Init+0xa0>)
 800176c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_TIM3_Init+0xa0>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_TIM3_Init+0xa0>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800177e:	2303      	movs	r3, #3
 8001780:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001796:	2301      	movs	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <MX_TIM3_Init+0xa0>)
 80017aa:	f004 ffb3 	bl	8006714 <HAL_TIM_Encoder_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017b4:	f000 fd0a 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_TIM3_Init+0xa0>)
 80017c6:	f005 fe97 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017d0:	f000 fcfc 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000368 	.word	0x20000368
 80017e0:	40000400 	.word	0x40000400

080017e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f009 fc3d 	bl	800b072 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_TIM4_Init+0xa0>)
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <MX_TIM4_Init+0xa4>)
 8001804:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_TIM4_Init+0xa0>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_TIM4_Init+0xa0>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_TIM4_Init+0xa0>)
 8001814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001818:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_TIM4_Init+0xa0>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_TIM4_Init+0xa0>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001826:	2303      	movs	r3, #3
 8001828:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800182e:	2301      	movs	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800183e:	2301      	movs	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <MX_TIM4_Init+0xa0>)
 8001852:	f004 ff5f 	bl	8006714 <HAL_TIM_Encoder_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800185c:	f000 fcb6 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_TIM4_Init+0xa0>)
 800186e:	f005 fe43 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001878:	f000 fca8 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200003b0 	.word	0x200003b0
 8001888:	40000800 	.word	0x40000800

0800188c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018be:	4a32      	ldr	r2, [pc, #200]	; (8001988 <MX_TIM5_Init+0xfc>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018d0:	2263      	movs	r2, #99	; 0x63
 80018d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018e0:	4828      	ldr	r0, [pc, #160]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018e2:	f004 fd35 	bl	8006350 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80018ec:	f000 fc6e 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4821      	ldr	r0, [pc, #132]	; (8001984 <MX_TIM5_Init+0xf8>)
 80018fe:	f005 f9ef 	bl	8006ce0 <HAL_TIM_ConfigClockSource>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001908:	f000 fc60 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <MX_TIM5_Init+0xf8>)
 800190e:	f004 fddf 	bl	80064d0 <HAL_TIM_PWM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001918:	f000 fc58 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4619      	mov	r1, r3
 800192a:	4816      	ldr	r0, [pc, #88]	; (8001984 <MX_TIM5_Init+0xf8>)
 800192c:	f005 fde4 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001936:	f000 fc49 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193a:	2360      	movs	r3, #96	; 0x60
 800193c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2208      	movs	r2, #8
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_TIM5_Init+0xf8>)
 8001952:	f005 f903 	bl	8006b5c <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800195c:	f000 fc36 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	220c      	movs	r2, #12
 8001964:	4619      	mov	r1, r3
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM5_Init+0xf8>)
 8001968:	f005 f8f8 	bl	8006b5c <HAL_TIM_PWM_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001972:	f000 fc2b 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM5_Init+0xf8>)
 8001978:	f001 fe84 	bl	8003684 <HAL_TIM_MspPostInit>

}
 800197c:	bf00      	nop
 800197e:	3738      	adds	r7, #56	; 0x38
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200003f8 	.word	0x200003f8
 8001988:	40000c00 	.word	0x40000c00

0800198c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019b4:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <MX_TIM9_Init+0xd4>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8-1;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019ba:	2207      	movs	r2, #7
 80019bc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019c6:	2263      	movs	r2, #99	; 0x63
 80019c8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80019d6:	4821      	ldr	r0, [pc, #132]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019d8:	f004 fcba 	bl	8006350 <HAL_TIM_Base_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80019e2:	f000 fbf3 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	4619      	mov	r1, r3
 80019f2:	481a      	ldr	r0, [pc, #104]	; (8001a5c <MX_TIM9_Init+0xd0>)
 80019f4:	f005 f974 	bl	8006ce0 <HAL_TIM_ConfigClockSource>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80019fe:	f000 fbe5 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a02:	4816      	ldr	r0, [pc, #88]	; (8001a5c <MX_TIM9_Init+0xd0>)
 8001a04:	f004 fd64 	bl	80064d0 <HAL_TIM_PWM_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8001a0e:	f000 fbdd 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	; 0x60
 8001a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_TIM9_Init+0xd0>)
 8001a2a:	f005 f897 	bl	8006b5c <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8001a34:	f000 fbca 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <MX_TIM9_Init+0xd0>)
 8001a40:	f005 f88c 	bl	8006b5c <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 8001a4a:	f000 fbbf 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <MX_TIM9_Init+0xd0>)
 8001a50:	f001 fe18 	bl	8003684 <HAL_TIM_MspPostInit>

}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000440 	.word	0x20000440
 8001a60:	40014000 	.word	0x40014000

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a47      	ldr	r2, [pc, #284]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MX_GPIO_Init+0x13c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2110      	movs	r1, #16
 8001b26:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <MX_GPIO_Init+0x140>)
 8001b28:	f002 fab4 	bl	8004094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b32:	481d      	ldr	r0, [pc, #116]	; (8001ba8 <MX_GPIO_Init+0x144>)
 8001b34:	f002 faae 	bl	8004094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L298_IN1_Pin|L298_IN2_Pin|L298_IN3_Pin|L298_IN4_Pin
 8001b38:	2200      	movs	r2, #0
 8001b3a:	219f      	movs	r1, #159	; 0x9f
 8001b3c:	481b      	ldr	r0, [pc, #108]	; (8001bac <MX_GPIO_Init+0x148>)
 8001b3e:	f002 faa9 	bl	8004094 <HAL_GPIO_WritePin>
                          |L298_IN5_Pin|L298_IN6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8001b42:	2310      	movs	r3, #16
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4812      	ldr	r0, [pc, #72]	; (8001ba4 <MX_GPIO_Init+0x140>)
 8001b5a:	f002 f8ff 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin|DIRECTION_1_Pin;
 8001b5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <MX_GPIO_Init+0x144>)
 8001b78:	f002 f8f0 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : L298_IN1_Pin L298_IN2_Pin L298_IN3_Pin L298_IN4_Pin
                           L298_IN5_Pin L298_IN6_Pin */
  GPIO_InitStruct.Pin = L298_IN1_Pin|L298_IN2_Pin|L298_IN3_Pin|L298_IN4_Pin
 8001b7c:	239f      	movs	r3, #159	; 0x9f
 8001b7e:	61fb      	str	r3, [r7, #28]
                          |L298_IN5_Pin|L298_IN6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4806      	ldr	r0, [pc, #24]	; (8001bac <MX_GPIO_Init+0x148>)
 8001b94:	f002 f8e2 	bl	8003d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	3730      	adds	r7, #48	; 0x30
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40020c00 	.word	0x40020c00

08001bb0 <Moving>:

/* USER CODE BEGIN 4 */
void Moving(uint8_t PSX_RX, double Vd, double Theta){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bbc:	ed87 1b00 	vstr	d1, [r7]
 8001bc0:	75fb      	strb	r3, [r7, #23]
	if(flag_V_slow==true) Vd /= 1000.0f;
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <Moving+0x118>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10b      	bne.n	8001be2 <Moving+0x32>
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <Moving+0x11c>)
 8001bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd4:	f7fe fe3a 	bl	800084c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001be0:	e00e      	b.n	8001c00 <Moving+0x50>
	else if(flag_V_slow==false) Vd /= 200.0f;
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <Moving+0x118>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <Moving+0x50>
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <Moving+0x120>)
 8001bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf4:	f7fe fe2a 	bl	800084c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Robot_Move(Vd, Theta,0);
 8001c00:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8001cb0 <Moving+0x100>
 8001c04:	ed97 1b00 	vldr	d1, [r7]
 8001c08:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c0c:	f000 fae4 	bl	80021d8 <Robot_Move>
	switch(PSX_RX){
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2bef      	cmp	r3, #239	; 0xef
 8001c14:	d00a      	beq.n	8001c2c <Moving+0x7c>
 8001c16:	2bef      	cmp	r3, #239	; 0xef
 8001c18:	dc43      	bgt.n	8001ca2 <Moving+0xf2>
 8001c1a:	2bdf      	cmp	r3, #223	; 0xdf
 8001c1c:	d02c      	beq.n	8001c78 <Moving+0xc8>
 8001c1e:	2bdf      	cmp	r3, #223	; 0xdf
 8001c20:	dc3f      	bgt.n	8001ca2 <Moving+0xf2>
 8001c22:	2b7f      	cmp	r3, #127	; 0x7f
 8001c24:	d031      	beq.n	8001c8a <Moving+0xda>
 8001c26:	2bbf      	cmp	r3, #191	; 0xbf
 8001c28:	d013      	beq.n	8001c52 <Moving+0xa2>
		break;
	case Rotate_Left:
		Robot_Move(0, 0, 0.3);
		break;
	}
}
 8001c2a:	e03a      	b.n	8001ca2 <Moving+0xf2>
		if(select_hand==1) PCA9685_SetServoAngle(0, 360);
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <Moving+0x124>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d104      	bne.n	8001c3e <Moving+0x8e>
 8001c34:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001cd8 <Moving+0x128>
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f001 f82d 	bl	8002c98 <PCA9685_SetServoAngle>
		if(select_hand==2) PCA9685_SetServoAngle(6, 360);
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <Moving+0x124>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d12a      	bne.n	8001c9c <Moving+0xec>
 8001c46:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001cd8 <Moving+0x128>
 8001c4a:	2006      	movs	r0, #6
 8001c4c:	f001 f824 	bl	8002c98 <PCA9685_SetServoAngle>
		break;
 8001c50:	e024      	b.n	8001c9c <Moving+0xec>
		if(select_hand==1) PCA9685_SetServoAngle(0, 0);
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <Moving+0x124>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d104      	bne.n	8001c64 <Moving+0xb4>
 8001c5a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001cdc <Moving+0x12c>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f001 f81a 	bl	8002c98 <PCA9685_SetServoAngle>
		if(select_hand==2) PCA9685_SetServoAngle(6, 0);
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <Moving+0x124>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d119      	bne.n	8001ca0 <Moving+0xf0>
 8001c6c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001cdc <Moving+0x12c>
 8001c70:	2006      	movs	r0, #6
 8001c72:	f001 f811 	bl	8002c98 <PCA9685_SetServoAngle>
		break;
 8001c76:	e013      	b.n	8001ca0 <Moving+0xf0>
		Robot_Move(0, 0, -0.3);
 8001c78:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8001cb8 <Moving+0x108>
 8001c7c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8001cb0 <Moving+0x100>
 8001c80:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001cb0 <Moving+0x100>
 8001c84:	f000 faa8 	bl	80021d8 <Robot_Move>
		break;
 8001c88:	e00b      	b.n	8001ca2 <Moving+0xf2>
		Robot_Move(0, 0, 0.3);
 8001c8a:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001cc0 <Moving+0x110>
 8001c8e:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8001cb0 <Moving+0x100>
 8001c92:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001cb0 <Moving+0x100>
 8001c96:	f000 fa9f 	bl	80021d8 <Robot_Move>
		break;
 8001c9a:	e002      	b.n	8001ca2 <Moving+0xf2>
		break;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <Moving+0xf2>
		break;
 8001ca0:	bf00      	nop
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
	...
 8001cb8:	33333333 	.word	0x33333333
 8001cbc:	bfd33333 	.word	0xbfd33333
 8001cc0:	33333333 	.word	0x33333333
 8001cc4:	3fd33333 	.word	0x3fd33333
 8001cc8:	20000508 	.word	0x20000508
 8001ccc:	408f4000 	.word	0x408f4000
 8001cd0:	40690000 	.word	0x40690000
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	43b40000 	.word	0x43b40000
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <Hand>:
void Hand(uint8_t PSX_RX){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	switch(PSX_RX){
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2bfe      	cmp	r3, #254	; 0xfe
 8001cee:	f300 80bf 	bgt.w	8001e70 <Hand+0x190>
 8001cf2:	2bdf      	cmp	r3, #223	; 0xdf
 8001cf4:	da05      	bge.n	8001d02 <Hand+0x22>
 8001cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf8:	f000 80a7 	beq.w	8001e4a <Hand+0x16a>
 8001cfc:	2bbf      	cmp	r3, #191	; 0xbf
 8001cfe:	d074      	beq.n	8001dea <Hand+0x10a>
 8001d00:	e0b6      	b.n	8001e70 <Hand+0x190>
 8001d02:	3bdf      	subs	r3, #223	; 0xdf
 8001d04:	2b1f      	cmp	r3, #31
 8001d06:	f200 80b3 	bhi.w	8001e70 <Hand+0x190>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <Hand+0x30>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001e25 	.word	0x08001e25
 8001d14:	08001e71 	.word	0x08001e71
 8001d18:	08001e71 	.word	0x08001e71
 8001d1c:	08001e71 	.word	0x08001e71
 8001d20:	08001e71 	.word	0x08001e71
 8001d24:	08001e71 	.word	0x08001e71
 8001d28:	08001e71 	.word	0x08001e71
 8001d2c:	08001e71 	.word	0x08001e71
 8001d30:	08001e71 	.word	0x08001e71
 8001d34:	08001e71 	.word	0x08001e71
 8001d38:	08001e71 	.word	0x08001e71
 8001d3c:	08001e71 	.word	0x08001e71
 8001d40:	08001e71 	.word	0x08001e71
 8001d44:	08001e71 	.word	0x08001e71
 8001d48:	08001e71 	.word	0x08001e71
 8001d4c:	08001e71 	.word	0x08001e71
 8001d50:	08001db1 	.word	0x08001db1
 8001d54:	08001e71 	.word	0x08001e71
 8001d58:	08001e71 	.word	0x08001e71
 8001d5c:	08001e71 	.word	0x08001e71
 8001d60:	08001e71 	.word	0x08001e71
 8001d64:	08001e71 	.word	0x08001e71
 8001d68:	08001e71 	.word	0x08001e71
 8001d6c:	08001e71 	.word	0x08001e71
 8001d70:	08001da1 	.word	0x08001da1
 8001d74:	08001e71 	.word	0x08001e71
 8001d78:	08001e71 	.word	0x08001e71
 8001d7c:	08001e71 	.word	0x08001e71
 8001d80:	08001da9 	.word	0x08001da9
 8001d84:	08001e71 	.word	0x08001e71
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001d91 	.word	0x08001d91
	case Select_Hand_1:
		select_hand=1;
 8001d90:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <Hand+0x204>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
		break;
 8001d96:	e0a0      	b.n	8001eda <Hand+0x1fa>
	case Select_Hand_2:
		select_hand=2;
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <Hand+0x204>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	701a      	strb	r2, [r3, #0]
		break;
 8001d9e:	e09c      	b.n	8001eda <Hand+0x1fa>
	case Fast:
		flag_V_slow=false;
 8001da0:	4b51      	ldr	r3, [pc, #324]	; (8001ee8 <Hand+0x208>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
		break;
 8001da6:	e098      	b.n	8001eda <Hand+0x1fa>
	case Slow:
		flag_V_slow=true;
 8001da8:	4b4f      	ldr	r3, [pc, #316]	; (8001ee8 <Hand+0x208>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
		break;
 8001dae:	e094      	b.n	8001eda <Hand+0x1fa>
	case Lift:
		if(select_hand==1){
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <Hand+0x204>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d109      	bne.n	8001dcc <Hand+0xec>
			HAL_GPIO_WritePin(L298_IN3_GPIO_Port, L298_IN3_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2104      	movs	r1, #4
 8001dbc:	484b      	ldr	r0, [pc, #300]	; (8001eec <Hand+0x20c>)
 8001dbe:	f002 f969 	bl	8004094 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L298_IN4_GPIO_Port, L298_IN4_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2108      	movs	r1, #8
 8001dc6:	4849      	ldr	r0, [pc, #292]	; (8001eec <Hand+0x20c>)
 8001dc8:	f002 f964 	bl	8004094 <HAL_GPIO_WritePin>
		}
		if(select_hand==2){
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <Hand+0x204>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d179      	bne.n	8001ec8 <Hand+0x1e8>
			HAL_GPIO_WritePin(L298_IN1_GPIO_Port, L298_IN1_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4844      	ldr	r0, [pc, #272]	; (8001eec <Hand+0x20c>)
 8001dda:	f002 f95b 	bl	8004094 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L298_IN2_GPIO_Port, L298_IN2_Pin, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2102      	movs	r1, #2
 8001de2:	4842      	ldr	r0, [pc, #264]	; (8001eec <Hand+0x20c>)
 8001de4:	f002 f956 	bl	8004094 <HAL_GPIO_WritePin>
		}
		break;
 8001de8:	e06e      	b.n	8001ec8 <Hand+0x1e8>
	case Down:
		if(select_hand==1){
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <Hand+0x204>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d109      	bne.n	8001e06 <Hand+0x126>
			HAL_GPIO_WritePin(L298_IN3_GPIO_Port, L298_IN3_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2104      	movs	r1, #4
 8001df6:	483d      	ldr	r0, [pc, #244]	; (8001eec <Hand+0x20c>)
 8001df8:	f002 f94c 	bl	8004094 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L298_IN4_GPIO_Port, L298_IN4_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2108      	movs	r1, #8
 8001e00:	483a      	ldr	r0, [pc, #232]	; (8001eec <Hand+0x20c>)
 8001e02:	f002 f947 	bl	8004094 <HAL_GPIO_WritePin>
		}
		if(select_hand==2){
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <Hand+0x204>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d15e      	bne.n	8001ecc <Hand+0x1ec>
			HAL_GPIO_WritePin(L298_IN1_GPIO_Port, L298_IN1_Pin, GPIO_PIN_SET);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2101      	movs	r1, #1
 8001e12:	4836      	ldr	r0, [pc, #216]	; (8001eec <Hand+0x20c>)
 8001e14:	f002 f93e 	bl	8004094 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L298_IN2_GPIO_Port, L298_IN2_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4833      	ldr	r0, [pc, #204]	; (8001eec <Hand+0x20c>)
 8001e1e:	f002 f939 	bl	8004094 <HAL_GPIO_WritePin>
		}
		break;
 8001e22:	e053      	b.n	8001ecc <Hand+0x1ec>
	case Open://tay 0
		if(select_hand==1)	PCA9685_SetServoAngle(2, 360);
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <Hand+0x204>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d104      	bne.n	8001e36 <Hand+0x156>
 8001e2c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001ef0 <Hand+0x210>
 8001e30:	2002      	movs	r0, #2
 8001e32:	f000 ff31 	bl	8002c98 <PCA9685_SetServoAngle>

		if(select_hand==2)	PCA9685_SetServoAngle(4, 360);
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <Hand+0x204>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d148      	bne.n	8001ed0 <Hand+0x1f0>
 8001e3e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001ef0 <Hand+0x210>
 8001e42:	2004      	movs	r0, #4
 8001e44:	f000 ff28 	bl	8002c98 <PCA9685_SetServoAngle>
		break;
 8001e48:	e042      	b.n	8001ed0 <Hand+0x1f0>
	case Close:
		if(select_hand==1)	PCA9685_SetServoAngle(2, 0);
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <Hand+0x204>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d104      	bne.n	8001e5c <Hand+0x17c>
 8001e52:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001ef4 <Hand+0x214>
 8001e56:	2002      	movs	r0, #2
 8001e58:	f000 ff1e 	bl	8002c98 <PCA9685_SetServoAngle>
		if(select_hand==2)	PCA9685_SetServoAngle(4, 0);
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <Hand+0x204>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d137      	bne.n	8001ed4 <Hand+0x1f4>
 8001e64:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001ef4 <Hand+0x214>
 8001e68:	2004      	movs	r0, #4
 8001e6a:	f000 ff15 	bl	8002c98 <PCA9685_SetServoAngle>

		break;
 8001e6e:	e031      	b.n	8001ed4 <Hand+0x1f4>
	default:
		HAL_GPIO_WritePin(L298_IN1_GPIO_Port, L298_IN1_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2101      	movs	r1, #1
 8001e74:	481d      	ldr	r0, [pc, #116]	; (8001eec <Hand+0x20c>)
 8001e76:	f002 f90d 	bl	8004094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L298_IN2_GPIO_Port, L298_IN2_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	481b      	ldr	r0, [pc, #108]	; (8001eec <Hand+0x20c>)
 8001e80:	f002 f908 	bl	8004094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L298_IN3_GPIO_Port, L298_IN3_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2104      	movs	r1, #4
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <Hand+0x20c>)
 8001e8a:	f002 f903 	bl	8004094 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L298_IN4_GPIO_Port, L298_IN4_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2108      	movs	r1, #8
 8001e92:	4816      	ldr	r0, [pc, #88]	; (8001eec <Hand+0x20c>)
 8001e94:	f002 f8fe 	bl	8004094 <HAL_GPIO_WritePin>
		if(select_hand==1){
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <Hand+0x204>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d109      	bne.n	8001eb4 <Hand+0x1d4>
			PCA9685_SetServoAngle(0, 181);
 8001ea0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001ef8 <Hand+0x218>
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f000 fef7 	bl	8002c98 <PCA9685_SetServoAngle>
			PCA9685_SetServoAngle(2, 87);
 8001eaa:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001efc <Hand+0x21c>
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f000 fef2 	bl	8002c98 <PCA9685_SetServoAngle>
		}
		if(select_hand==2)	PCA9685_SetServoAngle(6, 180);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <Hand+0x204>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d10d      	bne.n	8001ed8 <Hand+0x1f8>
 8001ebc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001f00 <Hand+0x220>
 8001ec0:	2006      	movs	r0, #6
 8001ec2:	f000 fee9 	bl	8002c98 <PCA9685_SetServoAngle>
		break;
 8001ec6:	e007      	b.n	8001ed8 <Hand+0x1f8>
		break;
 8001ec8:	bf00      	nop
 8001eca:	e006      	b.n	8001eda <Hand+0x1fa>
		break;
 8001ecc:	bf00      	nop
 8001ece:	e004      	b.n	8001eda <Hand+0x1fa>
		break;
 8001ed0:	bf00      	nop
 8001ed2:	e002      	b.n	8001eda <Hand+0x1fa>
		break;
 8001ed4:	bf00      	nop
 8001ed6:	e000      	b.n	8001eda <Hand+0x1fa>
		break;
 8001ed8:	bf00      	nop
	}

}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000508 	.word	0x20000508
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	43b40000 	.word	0x43b40000
 8001ef4:	00000000 	.word	0x00000000
 8001ef8:	43350000 	.word	0x43350000
 8001efc:	42ae0000 	.word	0x42ae0000
 8001f00:	43340000 	.word	0x43340000
 8001f04:	00000000 	.word	0x00000000

08001f08 <Calculate_angle>:
void Calculate_angle(double LX, double LY) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f12:	ed87 1b00 	vstr	d1, [r7]

    double angle_rad = atan(LY / LX);
 8001f16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1e:	f7fe fc95 	bl	800084c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b17 	vmov	d7, r2, r3
 8001f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2e:	eef0 0a67 	vmov.f32	s1, s15
 8001f32:	f00c fcd9 	bl	800e8e8 <atan>
 8001f36:	ed87 0b04 	vstr	d0, [r7, #16]
    Theta = angle_rad * (180.0f / PI)-30.0f;
 8001f3a:	a33b      	add	r3, pc, #236	; (adr r3, 8002028 <Calculate_angle+0x120>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f44:	f7fe fb58 	bl	80005f8 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <Calculate_angle+0x110>)
 8001f56:	f7fe f997 	bl	8000288 <__aeabi_dsub>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	492f      	ldr	r1, [pc, #188]	; (800201c <Calculate_angle+0x114>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
    if(LX < 0)Theta += 180.0f;
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f70:	f7fe fdb4 	bl	8000adc <__aeabi_dcmplt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <Calculate_angle+0x8c>
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <Calculate_angle+0x114>)
 8001f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <Calculate_angle+0x118>)
 8001f86:	f7fe f981 	bl	800028c <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4923      	ldr	r1, [pc, #140]	; (800201c <Calculate_angle+0x114>)
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
    if(LX >= 0 && LY < 0)Theta += 360.0f;
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa0:	f7fe fdb0 	bl	8000b04 <__aeabi_dcmpge>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d017      	beq.n	8001fda <Calculate_angle+0xd2>
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fb6:	f7fe fd91 	bl	8000adc <__aeabi_dcmplt>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <Calculate_angle+0xd2>
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <Calculate_angle+0x114>)
 8001fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <Calculate_angle+0x11c>)
 8001fcc:	f7fe f95e 	bl	800028c <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4911      	ldr	r1, [pc, #68]	; (800201c <Calculate_angle+0x114>)
 8001fd6:	e9c1 2300 	strd	r2, r3, [r1]
    if(Theta<0) Theta+=360.0f;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <Calculate_angle+0x114>)
 8001fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	f7fe fd78 	bl	8000adc <__aeabi_dcmplt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d100      	bne.n	8001ff4 <Calculate_angle+0xec>
}
 8001ff2:	e00c      	b.n	800200e <Calculate_angle+0x106>
    if(Theta<0) Theta+=360.0f;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <Calculate_angle+0x114>)
 8001ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <Calculate_angle+0x11c>)
 8002000:	f7fe f944 	bl	800028c <__adddf3>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4904      	ldr	r1, [pc, #16]	; (800201c <Calculate_angle+0x114>)
 800200a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	403e0000 	.word	0x403e0000
 800201c:	20000500 	.word	0x20000500
 8002020:	40668000 	.word	0x40668000
 8002024:	40768000 	.word	0x40768000
 8002028:	1a53b118 	.word	0x1a53b118
 800202c:	404ca5dc 	.word	0x404ca5dc

08002030 <Caculate_Vd>:

void Caculate_Vd(uint8_t PSX_RX[]){
 8002030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	int8_t LX=PSX_RX[7];
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3307      	adds	r3, #7
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	73fb      	strb	r3, [r7, #15]
	int8_t LY=PSX_RX[8];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3308      	adds	r3, #8
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	73bb      	strb	r3, [r7, #14]

	LX=LX-128;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3b80      	subs	r3, #128	; 0x80
 800204e:	b2db      	uxtb	r3, r3
 8002050:	73fb      	strb	r3, [r7, #15]
	LY=127-LY;
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002058:	b2db      	uxtb	r3, r3
 800205a:	73bb      	strb	r3, [r7, #14]

	Vd=(fabs(LX)>=fabs(LY))?fabs(LX):fabs(LY);
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa5f 	bl	8000524 <__aeabi_i2d>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4690      	mov	r8, r2
 800206c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa55 	bl	8000524 <__aeabi_i2d>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4692      	mov	sl, r2
 8002080:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002084:	4652      	mov	r2, sl
 8002086:	465b      	mov	r3, fp
 8002088:	4640      	mov	r0, r8
 800208a:	4649      	mov	r1, r9
 800208c:	f7fe fd3a 	bl	8000b04 <__aeabi_dcmpge>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <Caculate_Vd+0x7c>
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa42 	bl	8000524 <__aeabi_i2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4614      	mov	r4, r2
 80020a6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80020aa:	e009      	b.n	80020c0 <Caculate_Vd+0x90>
 80020ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa37 	bl	8000524 <__aeabi_i2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4614      	mov	r4, r2
 80020bc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <Caculate_Vd+0xc8>)
 80020c2:	e9c3 4500 	strd	r4, r5, [r3]
	Calculate_angle((double)LX, (double)LY);
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa2a 	bl	8000524 <__aeabi_i2d>
 80020d0:	4604      	mov	r4, r0
 80020d2:	460d      	mov	r5, r1
 80020d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fa23 	bl	8000524 <__aeabi_i2d>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	ec43 2b11 	vmov	d1, r2, r3
 80020e6:	ec45 4b10 	vmov	d0, r4, r5
 80020ea:	f7ff ff0d 	bl	8001f08 <Calculate_angle>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f8:	200004f8 	.word	0x200004f8

080020fc <StartControl>:
  * @retval None
  */

/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	uint8_t PSX_RX[9]= { 0x00 };
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	711a      	strb	r2, [r3, #4]
	uint8_t PSX_TX[2] = {
 8002112:	f244 2301 	movw	r3, #16897	; 0x4201
 8002116:	813b      	strh	r3, [r7, #8]
		0x01, 0x42
	};
	spi_enable;
 8002118:	2200      	movs	r2, #0
 800211a:	2110      	movs	r1, #16
 800211c:	4819      	ldr	r0, [pc, #100]	; (8002184 <StartControl+0x88>)
 800211e:	f001 ffb9 	bl	8004094 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, PSX_TX, PSX_RX, 9, 10);
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	f107 0108 	add.w	r1, r7, #8
 800212a:	230a      	movs	r3, #10
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2309      	movs	r3, #9
 8002130:	4815      	ldr	r0, [pc, #84]	; (8002188 <StartControl+0x8c>)
 8002132:	f003 fe80 	bl	8005e36 <HAL_SPI_TransmitReceive>
	spi_disable;
 8002136:	2201      	movs	r2, #1
 8002138:	2110      	movs	r1, #16
 800213a:	4812      	ldr	r0, [pc, #72]	; (8002184 <StartControl+0x88>)
 800213c:	f001 ffaa 	bl	8004094 <HAL_GPIO_WritePin>
	if(PSX_RX[1]==0x73){
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	2b73      	cmp	r3, #115	; 0x73
 8002144:	d11a      	bne.n	800217c <StartControl+0x80>
		Caculate_Vd(PSX_RX);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff70 	bl	8002030 <Caculate_Vd>
		Hand(PSX_RX[4]);
 8002150:	7c3b      	ldrb	r3, [r7, #16]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fdc4 	bl	8001ce0 <Hand>
		Moving(PSX_RX[3],Vd,Theta);
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <StartControl+0x90>)
 800215c:	ed92 7b00 	vldr	d7, [r2]
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <StartControl+0x94>)
 8002162:	ed92 6b00 	vldr	d6, [r2]
 8002166:	eeb0 1a46 	vmov.f32	s2, s12
 800216a:	eef0 1a66 	vmov.f32	s3, s13
 800216e:	eeb0 0a47 	vmov.f32	s0, s14
 8002172:	eef0 0a67 	vmov.f32	s1, s15
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fd1a 	bl	8001bb0 <Moving>
	}

		osDelay(100);
 800217c:	2064      	movs	r0, #100	; 0x64
 800217e:	f005 fb6b 	bl	8007858 <osDelay>
  {
 8002182:	e7bf      	b.n	8002104 <StartControl+0x8>
 8002184:	40020000 	.word	0x40020000
 8002188:	20000280 	.word	0x20000280
 800218c:	200004f8 	.word	0x200004f8
 8002190:	20000500 	.word	0x20000500

08002194 <StartPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID */
void StartPID(void *argument)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {

	PID();
 800219c:	f000 fff0 	bl	8003180 <PID>
	osDelay(50);
 80021a0:	2032      	movs	r0, #50	; 0x32
 80021a2:	f005 fb59 	bl	8007858 <osDelay>
	PID();
 80021a6:	e7f9      	b.n	800219c <StartPID+0x8>

080021a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ba:	f001 fccd 	bl	8003b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40014400 	.word	0x40014400

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <Error_Handler+0x8>
	...

080021d8 <Robot_Move>:
bool flag_rot_1=true, flag_rot_2=true, flag_rot_3=true;

double prev_duty_1=100, prev_duty_2=100, prev_duty_3=100;
double duty=100;

void Robot_Move(double Vd, double Theta, double Vtheta){
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b092      	sub	sp, #72	; 0x48
 80021de:	af00      	add	r7, sp, #0
 80021e0:	ed87 0b06 	vstr	d0, [r7, #24]
 80021e4:	ed87 1b04 	vstr	d1, [r7, #16]
 80021e8:	ed87 2b02 	vstr	d2, [r7, #8]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V2=Vd*(-0.87*cos(Theta*PI/180)-0.5f*sin(Theta*PI/180))+Vtheta;
 80021ec:	a396      	add	r3, pc, #600	; (adr r3, 8002448 <Robot_Move+0x270>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021f6:	f7fe f9ff 	bl	80005f8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b94      	ldr	r3, [pc, #592]	; (8002458 <Robot_Move+0x280>)
 8002208:	f7fe fb20 	bl	800084c <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	ec43 2b17 	vmov	d7, r2, r3
 8002214:	eeb0 0a47 	vmov.f32	s0, s14
 8002218:	eef0 0a67 	vmov.f32	s1, s15
 800221c:	f00c fd04 	bl	800ec28 <cos>
 8002220:	ec51 0b10 	vmov	r0, r1, d0
 8002224:	a386      	add	r3, pc, #536	; (adr r3, 8002440 <Robot_Move+0x268>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fe f9e5 	bl	80005f8 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 2300 	strd	r2, r3, [r7]
 8002236:	a384      	add	r3, pc, #528	; (adr r3, 8002448 <Robot_Move+0x270>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002240:	f7fe f9da 	bl	80005f8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b81      	ldr	r3, [pc, #516]	; (8002458 <Robot_Move+0x280>)
 8002252:	f7fe fafb 	bl	800084c <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	ec43 2b17 	vmov	d7, r2, r3
 800225e:	eeb0 0a47 	vmov.f32	s0, s14
 8002262:	eef0 0a67 	vmov.f32	s1, s15
 8002266:	f00c fd3f 	bl	800ece8 <sin>
 800226a:	ec51 0b10 	vmov	r0, r1, d0
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b7a      	ldr	r3, [pc, #488]	; (800245c <Robot_Move+0x284>)
 8002274:	f7fe f9c0 	bl	80005f8 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002280:	f7fe f802 	bl	8000288 <__aeabi_dsub>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002290:	f7fe f9b2 	bl	80005f8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022a0:	f7fd fff4 	bl	800028c <__adddf3>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	496d      	ldr	r1, [pc, #436]	; (8002460 <Robot_Move+0x288>)
 80022aa:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*(0.87*cos(Theta*PI/180)-0.5f*sin(Theta*PI/180))+Vtheta;
 80022ae:	a366      	add	r3, pc, #408	; (adr r3, 8002448 <Robot_Move+0x270>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022b8:	f7fe f99e 	bl	80005f8 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b63      	ldr	r3, [pc, #396]	; (8002458 <Robot_Move+0x280>)
 80022ca:	f7fe fabf 	bl	800084c <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ec43 2b17 	vmov	d7, r2, r3
 80022d6:	eeb0 0a47 	vmov.f32	s0, s14
 80022da:	eef0 0a67 	vmov.f32	s1, s15
 80022de:	f00c fca3 	bl	800ec28 <cos>
 80022e2:	ec51 0b10 	vmov	r0, r1, d0
 80022e6:	a35a      	add	r3, pc, #360	; (adr r3, 8002450 <Robot_Move+0x278>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f984 	bl	80005f8 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	e9c7 2300 	strd	r2, r3, [r7]
 80022f8:	a353      	add	r3, pc, #332	; (adr r3, 8002448 <Robot_Move+0x270>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002302:	f7fe f979 	bl	80005f8 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	4b51      	ldr	r3, [pc, #324]	; (8002458 <Robot_Move+0x280>)
 8002314:	f7fe fa9a 	bl	800084c <__aeabi_ddiv>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	ec43 2b17 	vmov	d7, r2, r3
 8002320:	eeb0 0a47 	vmov.f32	s0, s14
 8002324:	eef0 0a67 	vmov.f32	s1, s15
 8002328:	f00c fcde 	bl	800ece8 <sin>
 800232c:	ec51 0b10 	vmov	r0, r1, d0
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b49      	ldr	r3, [pc, #292]	; (800245c <Robot_Move+0x284>)
 8002336:	f7fe f95f 	bl	80005f8 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002342:	f7fd ffa1 	bl	8000288 <__aeabi_dsub>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002352:	f7fe f951 	bl	80005f8 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002362:	f7fd ff93 	bl	800028c <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	493e      	ldr	r1, [pc, #248]	; (8002464 <Robot_Move+0x28c>)
 800236c:	e9c1 2300 	strd	r2, r3, [r1]
	V1=Vd*sin(Theta*PI/180)+Vtheta;
 8002370:	a335      	add	r3, pc, #212	; (adr r3, 8002448 <Robot_Move+0x270>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800237a:	f7fe f93d 	bl	80005f8 <__aeabi_dmul>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <Robot_Move+0x280>)
 800238c:	f7fe fa5e 	bl	800084c <__aeabi_ddiv>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	ec43 2b17 	vmov	d7, r2, r3
 8002398:	eeb0 0a47 	vmov.f32	s0, s14
 800239c:	eef0 0a67 	vmov.f32	s1, s15
 80023a0:	f00c fca2 	bl	800ece8 <sin>
 80023a4:	ec51 0b10 	vmov	r0, r1, d0
 80023a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ac:	f7fe f924 	bl	80005f8 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023bc:	f7fd ff66 	bl	800028c <__adddf3>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4928      	ldr	r1, [pc, #160]	; (8002468 <Robot_Move+0x290>)
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <Robot_Move+0x290>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	4611      	mov	r1, r2
 80023d2:	6439      	str	r1, [r7, #64]	; 0x40
 80023d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <Robot_Move+0x288>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	4611      	mov	r1, r2
 80023e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <Robot_Move+0x28c>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	4611      	mov	r1, r2
 80023f2:	6339      	str	r1, [r7, #48]	; 0x30
 80023f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax = V1_abs;
 80023fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 8002402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002406:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800240a:	f7fe fb85 	bl	8000b18 <__aeabi_dcmpgt>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <Robot_Move+0x242>
 8002414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002418:	e001      	b.n	800241e <Robot_Move+0x246>
 800241a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800241e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 8002422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002426:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800242a:	f7fe fb75 	bl	8000b18 <__aeabi_dcmpgt>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <Robot_Move+0x294>
 8002434:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002438:	e01a      	b.n	8002470 <Robot_Move+0x298>
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	3d70a3d7 	.word	0x3d70a3d7
 8002444:	bfebd70a 	.word	0xbfebd70a
 8002448:	54524550 	.word	0x54524550
 800244c:	400921fb 	.word	0x400921fb
 8002450:	3d70a3d7 	.word	0x3d70a3d7
 8002454:	3febd70a 	.word	0x3febd70a
 8002458:	40668000 	.word	0x40668000
 800245c:	3fe00000 	.word	0x3fe00000
 8002460:	20000518 	.word	0x20000518
 8002464:	20000520 	.word	0x20000520
 8002468:	20000510 	.word	0x20000510
 800246c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002470:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>3){
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b75      	ldr	r3, [pc, #468]	; (8002650 <Robot_Move+0x478>)
 800247a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800247e:	f7fe fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02e      	beq.n	80024e6 <Robot_Move+0x30e>
	Temp=3/Vmax;
 8002488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800248c:	f04f 0000 	mov.w	r0, #0
 8002490:	496f      	ldr	r1, [pc, #444]	; (8002650 <Robot_Move+0x478>)
 8002492:	f7fe f9db 	bl	800084c <__aeabi_ddiv>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 800249e:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <Robot_Move+0x47c>)
 80024a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024a8:	f7fe f8a6 	bl	80005f8 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4968      	ldr	r1, [pc, #416]	; (8002654 <Robot_Move+0x47c>)
 80024b2:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <Robot_Move+0x480>)
 80024b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024c0:	f7fe f89a 	bl	80005f8 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4963      	ldr	r1, [pc, #396]	; (8002658 <Robot_Move+0x480>)
 80024ca:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <Robot_Move+0x484>)
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024d8:	f7fe f88e 	bl	80005f8 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	495e      	ldr	r1, [pc, #376]	; (800265c <Robot_Move+0x484>)
 80024e2:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	if(V1<0){
 80024e6:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <Robot_Move+0x47c>)
 80024e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	f7fe faf2 	bl	8000adc <__aeabi_dcmplt>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <Robot_Move+0x342>
	 Rotation(MOTOR_1, !CLOCK_WISE);
 80024fe:	2100      	movs	r1, #0
 8002500:	2001      	movs	r0, #1
 8002502:	f000 f98b 	bl	800281c <Rotation>
	 V1=fabs(V1);
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <Robot_Move+0x47c>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	4692      	mov	sl, r2
 800250e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <Robot_Move+0x47c>)
 8002514:	e9c3 ab00 	strd	sl, fp, [r3]
 8002518:	e00f      	b.n	800253a <Robot_Move+0x362>
	} else if(V1>0){
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <Robot_Move+0x47c>)
 800251c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f7fe faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <Robot_Move+0x362>
	 Rotation(MOTOR_1, CLOCK_WISE);
 8002532:	2101      	movs	r1, #1
 8002534:	2001      	movs	r0, #1
 8002536:	f000 f971 	bl	800281c <Rotation>
	}
	if(V2<0){
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <Robot_Move+0x480>)
 800253c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	f7fe fac8 	bl	8000adc <__aeabi_dcmplt>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <Robot_Move+0x396>
	 Rotation(MOTOR_2, !CLOCK_WISE);
 8002552:	2100      	movs	r1, #0
 8002554:	2002      	movs	r0, #2
 8002556:	f000 f961 	bl	800281c <Rotation>
	 V2=fabs(V2);
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <Robot_Move+0x480>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	4690      	mov	r8, r2
 8002562:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002566:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <Robot_Move+0x480>)
 8002568:	e9c3 8900 	strd	r8, r9, [r3]
 800256c:	e00f      	b.n	800258e <Robot_Move+0x3b6>
	} else if(V2>0){
 800256e:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <Robot_Move+0x480>)
 8002570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	f7fe facc 	bl	8000b18 <__aeabi_dcmpgt>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <Robot_Move+0x3b6>
	 Rotation(MOTOR_2, CLOCK_WISE);
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f000 f947 	bl	800281c <Rotation>
	}
	if(V3<0){
 800258e:	4b33      	ldr	r3, [pc, #204]	; (800265c <Robot_Move+0x484>)
 8002590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f7fe fa9e 	bl	8000adc <__aeabi_dcmplt>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00d      	beq.n	80025c2 <Robot_Move+0x3ea>
	 Rotation(MOTOR_3, !CLOCK_WISE);
 80025a6:	2100      	movs	r1, #0
 80025a8:	2003      	movs	r0, #3
 80025aa:	f000 f937 	bl	800281c <Rotation>
	 V3=fabs(V3);
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <Robot_Move+0x484>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	4614      	mov	r4, r2
 80025b6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <Robot_Move+0x484>)
 80025bc:	e9c3 4500 	strd	r4, r5, [r3]
 80025c0:	e00f      	b.n	80025e2 <Robot_Move+0x40a>
	} else if(V3>0){
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <Robot_Move+0x484>)
 80025c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	f7fe faa2 	bl	8000b18 <__aeabi_dcmpgt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <Robot_Move+0x40a>
	 Rotation(MOTOR_3, CLOCK_WISE);
 80025da:	2101      	movs	r1, #1
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f91d 	bl	800281c <Rotation>
	}

	V1=v2rpm(V1);
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <Robot_Move+0x47c>)
 80025e4:	ed93 7b00 	vldr	d7, [r3]
 80025e8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ec:	eef0 0a67 	vmov.f32	s1, s15
 80025f0:	f000 f972 	bl	80028d8 <v2rpm>
 80025f4:	eeb0 7a40 	vmov.f32	s14, s0
 80025f8:	eef0 7a60 	vmov.f32	s15, s1
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <Robot_Move+0x47c>)
 80025fe:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <Robot_Move+0x480>)
 8002604:	ed93 7b00 	vldr	d7, [r3]
 8002608:	eeb0 0a47 	vmov.f32	s0, s14
 800260c:	eef0 0a67 	vmov.f32	s1, s15
 8002610:	f000 f962 	bl	80028d8 <v2rpm>
 8002614:	eeb0 7a40 	vmov.f32	s14, s0
 8002618:	eef0 7a60 	vmov.f32	s15, s1
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <Robot_Move+0x480>)
 800261e:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <Robot_Move+0x484>)
 8002624:	ed93 7b00 	vldr	d7, [r3]
 8002628:	eeb0 0a47 	vmov.f32	s0, s14
 800262c:	eef0 0a67 	vmov.f32	s1, s15
 8002630:	f000 f952 	bl	80028d8 <v2rpm>
 8002634:	eeb0 7a40 	vmov.f32	s14, s0
 8002638:	eef0 7a60 	vmov.f32	s15, s1
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <Robot_Move+0x484>)
 800263e:	ed83 7b00 	vstr	d7, [r3]
	pid_config();
 8002642:	f7fe fe11 	bl	8001268 <pid_config>

}
 8002646:	bf00      	nop
 8002648:	3748      	adds	r7, #72	; 0x48
 800264a:	46bd      	mov	sp, r7
 800264c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002650:	40080000 	.word	0x40080000
 8002654:	20000510 	.word	0x20000510
 8002658:	20000518 	.word	0x20000518
 800265c:	20000520 	.word	0x20000520

08002660 <set_duty_cycle>:
double rpm_to_duty(double rpm){
	double duty=(98.15-0.6*rpm);
	return duty;
}
void set_duty_cycle(int motor, double out){
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	ed87 0b00 	vstr	d0, [r7]
	if(motor==MOTOR_1){
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d132      	bne.n	80026d8 <set_duty_cycle+0x78>
		prev_duty_1=prev_duty_1-out;
 8002672:	4b51      	ldr	r3, [pc, #324]	; (80027b8 <set_duty_cycle+0x158>)
 8002674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800267c:	f7fd fe04 	bl	8000288 <__aeabi_dsub>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	494c      	ldr	r1, [pc, #304]	; (80027b8 <set_duty_cycle+0x158>)
 8002686:	e9c1 2300 	strd	r2, r3, [r1]
		prev_duty_1=(prev_duty_1>100)?100:((prev_duty_1<0)?0:prev_duty_1);
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <set_duty_cycle+0x158>)
 800268c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	4b49      	ldr	r3, [pc, #292]	; (80027bc <set_duty_cycle+0x15c>)
 8002696:	f7fe fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <set_duty_cycle+0x48>
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b45      	ldr	r3, [pc, #276]	; (80027bc <set_duty_cycle+0x15c>)
 80026a6:	e013      	b.n	80026d0 <set_duty_cycle+0x70>
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <set_duty_cycle+0x158>)
 80026aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	f7fe fa11 	bl	8000adc <__aeabi_dcmplt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <set_duty_cycle+0x6a>
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e002      	b.n	80026d0 <set_duty_cycle+0x70>
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <set_duty_cycle+0x158>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	4939      	ldr	r1, [pc, #228]	; (80027b8 <set_duty_cycle+0x158>)
 80026d2:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else if(motor==MOTOR_3){
		prev_duty_3=prev_duty_3-out;
		prev_duty_3=(prev_duty_3>100)?100:((prev_duty_3<0)?0:prev_duty_3);
	}
}
 80026d6:	e06a      	b.n	80027ae <set_duty_cycle+0x14e>
	else if(motor==MOTOR_2){
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d132      	bne.n	8002744 <set_duty_cycle+0xe4>
		prev_duty_2=prev_duty_2-out;
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <set_duty_cycle+0x160>)
 80026e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e8:	f7fd fdce 	bl	8000288 <__aeabi_dsub>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4933      	ldr	r1, [pc, #204]	; (80027c0 <set_duty_cycle+0x160>)
 80026f2:	e9c1 2300 	strd	r2, r3, [r1]
		prev_duty_2=(prev_duty_2>100)?100:((prev_duty_2<0)?0:prev_duty_2);
 80026f6:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <set_duty_cycle+0x160>)
 80026f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <set_duty_cycle+0x15c>)
 8002702:	f7fe fa09 	bl	8000b18 <__aeabi_dcmpgt>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <set_duty_cycle+0xb4>
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <set_duty_cycle+0x15c>)
 8002712:	e013      	b.n	800273c <set_duty_cycle+0xdc>
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <set_duty_cycle+0x160>)
 8002716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f7fe f9db 	bl	8000adc <__aeabi_dcmplt>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <set_duty_cycle+0xd6>
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e002      	b.n	800273c <set_duty_cycle+0xdc>
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <set_duty_cycle+0x160>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	4920      	ldr	r1, [pc, #128]	; (80027c0 <set_duty_cycle+0x160>)
 800273e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002742:	e034      	b.n	80027ae <set_duty_cycle+0x14e>
	else if(motor==MOTOR_3){
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d131      	bne.n	80027ae <set_duty_cycle+0x14e>
		prev_duty_3=prev_duty_3-out;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <set_duty_cycle+0x164>)
 800274c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002754:	f7fd fd98 	bl	8000288 <__aeabi_dsub>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4919      	ldr	r1, [pc, #100]	; (80027c4 <set_duty_cycle+0x164>)
 800275e:	e9c1 2300 	strd	r2, r3, [r1]
		prev_duty_3=(prev_duty_3>100)?100:((prev_duty_3<0)?0:prev_duty_3);
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <set_duty_cycle+0x164>)
 8002764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <set_duty_cycle+0x15c>)
 800276e:	f7fe f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <set_duty_cycle+0x120>
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <set_duty_cycle+0x15c>)
 800277e:	e013      	b.n	80027a8 <set_duty_cycle+0x148>
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <set_duty_cycle+0x164>)
 8002782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f7fe f9a5 	bl	8000adc <__aeabi_dcmplt>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <set_duty_cycle+0x142>
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e002      	b.n	80027a8 <set_duty_cycle+0x148>
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <set_duty_cycle+0x164>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <set_duty_cycle+0x164>)
 80027aa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000008 	.word	0x20000008
 80027bc:	40590000 	.word	0x40590000
 80027c0:	20000010 	.word	0x20000010
 80027c4:	20000018 	.word	0x20000018

080027c8 <Run_Now>:
void Run_Now(double duty_1, double duty_2, double duty_3){
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	ed87 0b04 	vstr	d0, [r7, #16]
 80027d2:	ed87 1b02 	vstr	d1, [r7, #8]
 80027d6:	ed87 2b00 	vstr	d2, [r7]
//	duty_1=rpm_to_duty(V1);
//	duty_2=rpm_to_duty(V2);
//	duty_3=rpm_to_duty(V3);

	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, duty_1);
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <Run_Now+0x4c>)
 80027dc:	681c      	ldr	r4, [r3, #0]
 80027de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e2:	f7fe f9e1 	bl	8000ba8 <__aeabi_d2uiz>
 80027e6:	4603      	mov	r3, r0
 80027e8:	63e3      	str	r3, [r4, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_4, duty_2);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <Run_Now+0x4c>)
 80027ec:	681c      	ldr	r4, [r3, #0]
 80027ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027f2:	f7fe f9d9 	bl	8000ba8 <__aeabi_d2uiz>
 80027f6:	4603      	mov	r3, r0
 80027f8:	6423      	str	r3, [r4, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, duty_3);
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <Run_Now+0x50>)
 80027fc:	681c      	ldr	r4, [r3, #0]
 80027fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002802:	f7fe f9d1 	bl	8000ba8 <__aeabi_d2uiz>
 8002806:	4603      	mov	r3, r0
 8002808:	6363      	str	r3, [r4, #52]	; 0x34
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	bf00      	nop
 8002814:	200003f8 	.word	0x200003f8
 8002818:	20000440 	.word	0x20000440

0800281c <Rotation>:
void Rotation(int motor, int rotation){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d115      	bne.n	8002858 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d109      	bne.n	8002846 <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 8002832:	2201      	movs	r2, #1
 8002834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002838:	4822      	ldr	r0, [pc, #136]	; (80028c4 <Rotation+0xa8>)
 800283a:	f001 fc2b 	bl	8004094 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <Rotation+0xac>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e008      	b.n	8002858 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284c:	481d      	ldr	r0, [pc, #116]	; (80028c4 <Rotation+0xa8>)
 800284e:	f001 fc21 	bl	8004094 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <Rotation+0xac>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d115      	bne.n	800288a <Rotation+0x6e>
		if(rotation==CLOCK_WISE){
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d109      	bne.n	8002878 <Rotation+0x5c>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800286a:	4816      	ldr	r0, [pc, #88]	; (80028c4 <Rotation+0xa8>)
 800286c:	f001 fc12 	bl	8004094 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <Rotation+0xb0>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e008      	b.n	800288a <Rotation+0x6e>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 8002878:	2200      	movs	r2, #0
 800287a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800287e:	4811      	ldr	r0, [pc, #68]	; (80028c4 <Rotation+0xa8>)
 8002880:	f001 fc08 	bl	8004094 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <Rotation+0xb0>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d115      	bne.n	80028bc <Rotation+0xa0>
		if(rotation==CLOCK_WISE){
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d109      	bne.n	80028aa <Rotation+0x8e>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800289c:	4809      	ldr	r0, [pc, #36]	; (80028c4 <Rotation+0xa8>)
 800289e:	f001 fbf9 	bl	8004094 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <Rotation+0xb4>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 80028a8:	e008      	b.n	80028bc <Rotation+0xa0>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <Rotation+0xa8>)
 80028b2:	f001 fbef 	bl	8004094 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <Rotation+0xb4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	20000001 	.word	0x20000001
 80028cc:	20000002 	.word	0x20000002
 80028d0:	20000003 	.word	0x20000003
 80028d4:	00000000 	.word	0x00000000

080028d8 <v2rpm>:

double v2rpm (double vantoc){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 80028e2:	a30e      	add	r3, pc, #56	; (adr r3, 800291c <v2rpm+0x44>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028ec:	f7fd ffae 	bl	800084c <__aeabi_ddiv>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <v2rpm+0x40>)
 80028fe:	f7fd fe7b 	bl	80005f8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	ec43 2b17 	vmov	d7, r2, r3
}
 800290a:	eeb0 0a47 	vmov.f32	s0, s14
 800290e:	eef0 0a67 	vmov.f32	s1, s15
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	404e0000 	.word	0x404e0000
 800291c:	5b30428a 	.word	0x5b30428a
 8002920:	3fd8209f 	.word	0x3fd8209f

08002924 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af04      	add	r7, sp, #16
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
 800292e:	460b      	mov	r3, r1
 8002930:	71bb      	strb	r3, [r7, #6]
 8002932:	4613      	mov	r3, r2
 8002934:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8002936:	797b      	ldrb	r3, [r7, #5]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <PCA9685_SetBit+0x1c>
 800293c:	2301      	movs	r3, #1
 800293e:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <PCA9685_SetBit+0xb0>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	b29a      	uxth	r2, r3
 8002948:	230a      	movs	r3, #10
 800294a:	9302      	str	r3, [sp, #8]
 800294c:	2301      	movs	r3, #1
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	f107 030f 	add.w	r3, r7, #15
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2301      	movs	r3, #1
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	f001 fef1 	bl	8004740 <HAL_I2C_Mem_Read>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e031      	b.n	80029cc <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8002968:	79bb      	ldrb	r3, [r7, #6]
 800296a:	2201      	movs	r2, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	b25b      	sxtb	r3, r3
 8002972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002976:	b25b      	sxtb	r3, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	b25a      	sxtb	r2, r3
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	b25b      	sxtb	r3, r3
 8002980:	4013      	ands	r3, r2
 8002982:	b25b      	sxtb	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8002988:	797b      	ldrb	r3, [r7, #5]
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	b25a      	sxtb	r2, r3
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	b25b      	sxtb	r3, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	b25b      	sxtb	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <PCA9685_SetBit+0xb0>)
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	230a      	movs	r3, #10
 80029ac:	9302      	str	r3, [sp, #8]
 80029ae:	2301      	movs	r3, #1
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	f107 030f 	add.w	r3, r7, #15
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2301      	movs	r3, #1
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	f001 fdc6 	bl	800454c <HAL_I2C_Mem_Write>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000528 	.word	0x20000528

080029d8 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80029de:	2306      	movs	r3, #6
 80029e0:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <PCA9685_SoftwareReset+0x30>)
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	1dfa      	adds	r2, r7, #7
 80029e8:	230a      	movs	r3, #10
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	2100      	movs	r1, #0
 80029f0:	f001 fcae 	bl	8004350 <HAL_I2C_Master_Transmit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000528 	.word	0x20000528

08002a0c <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff ff81 	bl	8002924 <PCA9685_SetBit>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2107      	movs	r1, #7
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7ff ff71 	bl	8002924 <PCA9685_SetBit>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2105      	movs	r1, #5
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff ff61 	bl	8002924 <PCA9685_SetBit>
 8002a62:	4603      	mov	r3, r0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	0000      	movs	r0, r0
	...

08002a70 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af04      	add	r7, sp, #16
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d902      	bls.n	8002a8a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8002a84:	2303      	movs	r3, #3
 8002a86:	72fb      	strb	r3, [r7, #11]
 8002a88:	e046      	b.n	8002b18 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d802      	bhi.n	8002a96 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8002a90:	23ff      	movs	r3, #255	; 0xff
 8002a92:	72fb      	strb	r3, [r7, #11]
 8002a94:	e040      	b.n	8002b18 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa0:	ee17 0a90 	vmov	r0, s15
 8002aa4:	f7fd fd50 	bl	8000548 <__aeabi_f2d>
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <PCA9685_SetPwmFrequency+0xe8>)
 8002aae:	f7fd fda3 	bl	80005f8 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	a126      	add	r1, pc, #152	; (adr r1, 8002b50 <PCA9685_SetPwmFrequency+0xe0>)
 8002ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002abc:	f7fd fec6 	bl	800084c <__aeabi_ddiv>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <PCA9685_SetPwmFrequency+0xec>)
 8002ace:	f7fd fbdb 	bl	8000288 <__aeabi_dsub>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fe f885 	bl	8000be8 <__aeabi_d2f>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7fd fd30 	bl	8000548 <__aeabi_f2d>
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <PCA9685_SetPwmFrequency+0xf0>)
 8002aee:	f7fd fbcd 	bl	800028c <__adddf3>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ec43 2b17 	vmov	d7, r2, r3
 8002afa:	eeb0 0a47 	vmov.f32	s0, s14
 8002afe:	eef0 0a67 	vmov.f32	s1, s15
 8002b02:	f00c f949 	bl	800ed98 <floor>
 8002b06:	ec53 2b10 	vmov	r2, r3, d0
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f84b 	bl	8000ba8 <__aeabi_d2uiz>
 8002b12:	4603      	mov	r3, r0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff ff77 	bl	8002a0c <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <PCA9685_SetPwmFrequency+0xf4>)
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	230a      	movs	r3, #10
 8002b24:	9302      	str	r3, [sp, #8]
 8002b26:	2301      	movs	r3, #1
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f107 030b 	add.w	r3, r7, #11
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2301      	movs	r3, #1
 8002b32:	22fe      	movs	r2, #254	; 0xfe
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	f001 fd09 	bl	800454c <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff ff66 	bl	8002a0c <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff73 	bl	8002a2c <PCA9685_RestartMode>
	return PCA9685_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	00000000 	.word	0x00000000
 8002b54:	4177d784 	.word	0x4177d784
 8002b58:	40b00000 	.word	0x40b00000
 8002b5c:	3ff00000 	.word	0x3ff00000
 8002b60:	3fe00000 	.word	0x3fe00000
 8002b64:	20000528 	.word	0x20000528

08002b68 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af04      	add	r7, sp, #16
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	460b      	mov	r3, r1
 8002b74:	80bb      	strh	r3, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3306      	adds	r3, #6
 8002b82:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <PCA9685_SetPwm+0x70>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	230a      	movs	r3, #10
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	f001 fcc5 	bl	800454c <HAL_I2C_Mem_Write>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000528 	.word	0x20000528

08002bdc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	460b      	mov	r3, r1
 8002be8:	80bb      	strh	r3, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8002bee:	88bb      	ldrh	r3, [r7, #4]
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf4:	d302      	bcc.n	8002bfc <PCA9685_SetPin+0x20>
 8002bf6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002bfa:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8002bfc:	79bb      	ldrb	r3, [r7, #6]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d025      	beq.n	8002c4e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8002c02:	88bb      	ldrh	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d108      	bne.n	8002c1a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ffa9 	bl	8002b68 <PCA9685_SetPwm>
 8002c16:	4603      	mov	r3, r0
 8002c18:	e03a      	b.n	8002c90 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff9b 	bl	8002b68 <PCA9685_SetPwm>
 8002c32:	4603      	mov	r3, r0
 8002c34:	e02c      	b.n	8002c90 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8002c36:	88bb      	ldrh	r3, [r7, #4]
 8002c38:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002c3c:	330f      	adds	r3, #15
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff8f 	bl	8002b68 <PCA9685_SetPwm>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	e020      	b.n	8002c90 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8002c4e:	88bb      	ldrh	r3, [r7, #4]
 8002c50:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d108      	bne.n	8002c6a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff81 	bl	8002b68 <PCA9685_SetPwm>
 8002c66:	4603      	mov	r3, r0
 8002c68:	e012      	b.n	8002c90 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8002c6a:	88bb      	ldrh	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff75 	bl	8002b68 <PCA9685_SetPwm>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	e006      	b.n	8002c90 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8002c82:	88ba      	ldrh	r2, [r7, #4]
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff6d 	bl	8002b68 <PCA9685_SetPwm>
 8002c8e:	4603      	mov	r3, r0
    }
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	ed87 0a00 	vstr	s0, [r7]
 8002ca4:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8002ca6:	edd7 7a00 	vldr	s15, [r7]
 8002caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	d502      	bpl.n	8002cba <PCA9685_SetServoAngle+0x22>
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8002cba:	edd7 7a00 	vldr	s15, [r7]
 8002cbe:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002d40 <PCA9685_SetServoAngle+0xa8>
 8002cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	dd01      	ble.n	8002cd0 <PCA9685_SetServoAngle+0x38>
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <PCA9685_SetServoAngle+0xac>)
 8002cce:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8002cd0:	6838      	ldr	r0, [r7, #0]
 8002cd2:	f7fd fc39 	bl	8000548 <__aeabi_f2d>
 8002cd6:	a318      	add	r3, pc, #96	; (adr r3, 8002d38 <PCA9685_SetServoAngle+0xa0>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fc8c 	bl	80005f8 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <PCA9685_SetServoAngle+0xb0>)
 8002cee:	f7fd fdad 	bl	800084c <__aeabi_ddiv>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <PCA9685_SetServoAngle+0xb4>)
 8002d00:	f7fd fac4 	bl	800028c <__adddf3>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7fd ff6c 	bl	8000be8 <__aeabi_d2f>
 8002d10:	4603      	mov	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8002d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1c:	ee17 3a90 	vmov	r3, s15
 8002d20:	b299      	uxth	r1, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2200      	movs	r2, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff58 	bl	8002bdc <PCA9685_SetPin>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	00000000 	.word	0x00000000
 8002d3c:	40786000 	.word	0x40786000
 8002d40:	43b40000 	.word	0x43b40000
 8002d44:	43b40000 	.word	0x43b40000
 8002d48:	40768000 	.word	0x40768000
 8002d4c:	405b8000 	.word	0x405b8000

08002d50 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8002d58:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <PCA9685_Init+0x28>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8002d5e:	f7ff fe3b 	bl	80029d8 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8002d62:	2030      	movs	r0, #48	; 0x30
 8002d64:	f7ff fe84 	bl	8002a70 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7ff fe6f 	bl	8002a4c <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000528 	.word	0x20000528

08002d7c <PID_init>:
,err_next
,actual_val
,pre_actual_val_1=0
,pre_actual_val_2=0
,pre_actual_val_3=0;
void PID_init(PID_Param_t *par){
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	4913      	ldr	r1, [pc, #76]	; (8002dd8 <PID_init+0x5c>)
 8002d8c:	e9c1 2300 	strd	r2, r3, [r1]
	Ki=par->Ki;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d96:	4911      	ldr	r1, [pc, #68]	; (8002ddc <PID_init+0x60>)
 8002d98:	e9c1 2300 	strd	r2, r3, [r1]
	Kd=par->Kd;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002da2:	490f      	ldr	r1, [pc, #60]	; (8002de0 <PID_init+0x64>)
 8002da4:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_1=par->target_val_1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dae:	490d      	ldr	r1, [pc, #52]	; (8002de4 <PID_init+0x68>)
 8002db0:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_2=par->target_val_2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002dba:	490b      	ldr	r1, [pc, #44]	; (8002de8 <PID_init+0x6c>)
 8002dbc:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_3=par->target_val_3;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002dc6:	4909      	ldr	r1, [pc, #36]	; (8002dec <PID_init+0x70>)
 8002dc8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	20000530 	.word	0x20000530
 8002ddc:	20000538 	.word	0x20000538
 8002de0:	20000540 	.word	0x20000540
 8002de4:	20000548 	.word	0x20000548
 8002de8:	20000550 	.word	0x20000550
 8002dec:	20000558 	.word	0x20000558

08002df0 <update_motor_values>:

double update_motor_values(double target_val, double actual_val, double prev_actual_val,double err_last, double err_next) {
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b08a      	sub	sp, #40	; 0x28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	ed87 0b08 	vstr	d0, [r7, #32]
 8002dfc:	ed87 1b06 	vstr	d1, [r7, #24]
 8002e00:	ed87 2b04 	vstr	d2, [r7, #16]
 8002e04:	ed87 3b02 	vstr	d3, [r7, #8]
 8002e08:	ed87 4b00 	vstr	d4, [r7]

	if((uint8_t)target_val==0){
 8002e0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e10:	f7fd feca 	bl	8000ba8 <__aeabi_d2uiz>
 8002e14:	4603      	mov	r3, r0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <update_motor_values+0x3c>
		actual_val=-30;
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <update_motor_values+0x174>)
 8002e22:	e9c7 2306 	strd	r2, r3, [r7, #24]
		return actual_val;
 8002e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2a:	e091      	b.n	8002f50 <update_motor_values+0x160>
	}
	err=target_val-actual_val;
 8002e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e34:	f7fd fa28 	bl	8000288 <__aeabi_dsub>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	494a      	ldr	r1, [pc, #296]	; (8002f68 <update_motor_values+0x178>)
 8002e3e:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <update_motor_values+0x17c>)
 8002e44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <update_motor_values+0x178>)
 8002e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e52:	f7fd fa19 	bl	8000288 <__aeabi_dsub>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fbcb 	bl	80005f8 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e6e:	f7fd fa0d 	bl	800028c <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4614      	mov	r4, r2
 8002e78:	461d      	mov	r5, r3
				  + pid.Ki*err
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <update_motor_values+0x17c>)
 8002e7c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <update_motor_values+0x178>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f7fd fbb7 	bl	80005f8 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd f9fb 	bl	800028c <__adddf3>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4692      	mov	sl, r2
 8002e9c:	469b      	mov	fp, r3
				  + pid.Kd*(err - 2 * err_next + err_last);
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <update_motor_values+0x17c>)
 8002ea0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <update_motor_values+0x178>)
 8002ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	f7fd f9eb 	bl	800028c <__adddf3>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4640      	mov	r0, r8
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	f7fd f9e3 	bl	8000288 <__aeabi_dsub>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ece:	f7fd f9dd 	bl	800028c <__adddf3>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	f7fd fb8d 	bl	80005f8 <__aeabi_dmul>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8002ee2:	4650      	mov	r0, sl
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	f7fd f9d1 	bl	800028c <__adddf3>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	err_last = err_next;
 8002ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err_next = err;
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <update_motor_values+0x178>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	e9c7 2300 	strd	r2, r3, [r7]
	actual_val=(actual_val>10)?10:actual_val;
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <update_motor_values+0x180>)
 8002f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f0e:	f7fd fe03 	bl	8000b18 <__aeabi_dcmpgt>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <update_motor_values+0x130>
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <update_motor_values+0x180>)
 8002f1e:	e001      	b.n	8002f24 <update_motor_values+0x134>
 8002f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f24:	e9c7 2306 	strd	r2, r3, [r7, #24]
	actual_val=(actual_val<-10)?-10:actual_val;
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <update_motor_values+0x184>)
 8002f2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f32:	f7fd fdd3 	bl	8000adc <__aeabi_dcmplt>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <update_motor_values+0x154>
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <update_motor_values+0x184>)
 8002f42:	e001      	b.n	8002f48 <update_motor_values+0x158>
 8002f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f48:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return actual_val;
 8002f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002f50:	ec43 2b17 	vmov	d7, r2, r3
 8002f54:	eeb0 0a47 	vmov.f32	s0, s14
 8002f58:	eef0 0a67 	vmov.f32	s1, s15
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f64:	c03e0000 	.word	0xc03e0000
 8002f68:	20000560 	.word	0x20000560
 8002f6c:	20000490 	.word	0x20000490
 8002f70:	40240000 	.word	0x40240000
 8002f74:	c0240000 	.word	0xc0240000

08002f78 <save_Err>:
void save_Err(int motor){
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	switch(motor){
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d02f      	beq.n	8002fe6 <save_Err+0x6e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	dc3f      	bgt.n	800300c <save_Err+0x94>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d003      	beq.n	8002f9a <save_Err+0x22>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d013      	beq.n	8002fc0 <save_Err+0x48>
		pre_actual_val_3=actual_val;
		err_last_3=err_last;
		err_next_3=err_next;
		break;
	}
}
 8002f98:	e038      	b.n	800300c <save_Err+0x94>
		pre_actual_val_1=actual_val;
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <save_Err+0xa0>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	491e      	ldr	r1, [pc, #120]	; (800301c <save_Err+0xa4>)
 8002fa2:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_1=err_last;
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <save_Err+0xa8>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	491d      	ldr	r1, [pc, #116]	; (8003024 <save_Err+0xac>)
 8002fae:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_1=err_next;
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <save_Err+0xb0>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	491c      	ldr	r1, [pc, #112]	; (800302c <save_Err+0xb4>)
 8002fba:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002fbe:	e025      	b.n	800300c <save_Err+0x94>
		pre_actual_val_2=actual_val;
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <save_Err+0xa0>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	491a      	ldr	r1, [pc, #104]	; (8003030 <save_Err+0xb8>)
 8002fc8:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_2=err_last;
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <save_Err+0xa8>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	4918      	ldr	r1, [pc, #96]	; (8003034 <save_Err+0xbc>)
 8002fd4:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_2=err_next;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <save_Err+0xb0>)
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	4916      	ldr	r1, [pc, #88]	; (8003038 <save_Err+0xc0>)
 8002fe0:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002fe4:	e012      	b.n	800300c <save_Err+0x94>
		pre_actual_val_3=actual_val;
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <save_Err+0xa0>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	4913      	ldr	r1, [pc, #76]	; (800303c <save_Err+0xc4>)
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]
		err_last_3=err_last;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <save_Err+0xa8>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	4911      	ldr	r1, [pc, #68]	; (8003040 <save_Err+0xc8>)
 8002ffa:	e9c1 2300 	strd	r2, r3, [r1]
		err_next_3=err_next;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <save_Err+0xb0>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	490f      	ldr	r1, [pc, #60]	; (8003044 <save_Err+0xcc>)
 8003006:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800300a:	bf00      	nop
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	200005a8 	.word	0x200005a8
 800301c:	200005b0 	.word	0x200005b0
 8003020:	20000580 	.word	0x20000580
 8003024:	20000568 	.word	0x20000568
 8003028:	200005a0 	.word	0x200005a0
 800302c:	20000588 	.word	0x20000588
 8003030:	200005b8 	.word	0x200005b8
 8003034:	20000570 	.word	0x20000570
 8003038:	20000590 	.word	0x20000590
 800303c:	200005c0 	.word	0x200005c0
 8003040:	20000578 	.word	0x20000578
 8003044:	20000598 	.word	0x20000598

08003048 <PID_Calculation>:
double PID_Calculation(int motor, double actual_val){
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	ed87 0b00 	vstr	d0, [r7]

	switch(motor) {
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d04d      	beq.n	80030f6 <PID_Calculation+0xae>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b03      	cmp	r3, #3
 800305e:	dc6c      	bgt.n	800313a <PID_Calculation+0xf2>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <PID_Calculation+0x26>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d022      	beq.n	80030b2 <PID_Calculation+0x6a>
 800306c:	e065      	b.n	800313a <PID_Calculation+0xf2>
	    case MOTOR_1:
			actual_val=update_motor_values(target_val_1, actual_val, pre_actual_val_1, err_last_1, err_next_1);
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <PID_Calculation+0x108>)
 8003070:	ed93 7b00 	vldr	d7, [r3]
 8003074:	4b37      	ldr	r3, [pc, #220]	; (8003154 <PID_Calculation+0x10c>)
 8003076:	ed93 6b00 	vldr	d6, [r3]
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <PID_Calculation+0x110>)
 800307c:	ed93 5b00 	vldr	d5, [r3]
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <PID_Calculation+0x114>)
 8003082:	ed93 4b00 	vldr	d4, [r3]
 8003086:	eeb0 3a45 	vmov.f32	s6, s10
 800308a:	eef0 3a65 	vmov.f32	s7, s11
 800308e:	eeb0 2a46 	vmov.f32	s4, s12
 8003092:	eef0 2a66 	vmov.f32	s5, s13
 8003096:	ed97 1b00 	vldr	d1, [r7]
 800309a:	eeb0 0a47 	vmov.f32	s0, s14
 800309e:	eef0 0a67 	vmov.f32	s1, s15
 80030a2:	f7ff fea5 	bl	8002df0 <update_motor_values>
 80030a6:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_1);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7ff ff64 	bl	8002f78 <save_Err>

	        break;
 80030b0:	e043      	b.n	800313a <PID_Calculation+0xf2>
	    case MOTOR_2:
			actual_val=update_motor_values(target_val_2, actual_val, pre_actual_val_2, err_last_2, err_next_2);
 80030b2:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <PID_Calculation+0x118>)
 80030b4:	ed93 7b00 	vldr	d7, [r3]
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <PID_Calculation+0x11c>)
 80030ba:	ed93 6b00 	vldr	d6, [r3]
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <PID_Calculation+0x120>)
 80030c0:	ed93 5b00 	vldr	d5, [r3]
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <PID_Calculation+0x124>)
 80030c6:	ed93 4b00 	vldr	d4, [r3]
 80030ca:	eeb0 3a45 	vmov.f32	s6, s10
 80030ce:	eef0 3a65 	vmov.f32	s7, s11
 80030d2:	eeb0 2a46 	vmov.f32	s4, s12
 80030d6:	eef0 2a66 	vmov.f32	s5, s13
 80030da:	ed97 1b00 	vldr	d1, [r7]
 80030de:	eeb0 0a47 	vmov.f32	s0, s14
 80030e2:	eef0 0a67 	vmov.f32	s1, s15
 80030e6:	f7ff fe83 	bl	8002df0 <update_motor_values>
 80030ea:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_2);
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7ff ff42 	bl	8002f78 <save_Err>

	        break;
 80030f4:	e021      	b.n	800313a <PID_Calculation+0xf2>
	    case MOTOR_3:
			actual_val=update_motor_values(target_val_3, actual_val, pre_actual_val_3, err_last_3, err_next_3);
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <PID_Calculation+0x128>)
 80030f8:	ed93 7b00 	vldr	d7, [r3]
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <PID_Calculation+0x12c>)
 80030fe:	ed93 6b00 	vldr	d6, [r3]
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <PID_Calculation+0x130>)
 8003104:	ed93 5b00 	vldr	d5, [r3]
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <PID_Calculation+0x134>)
 800310a:	ed93 4b00 	vldr	d4, [r3]
 800310e:	eeb0 3a45 	vmov.f32	s6, s10
 8003112:	eef0 3a65 	vmov.f32	s7, s11
 8003116:	eeb0 2a46 	vmov.f32	s4, s12
 800311a:	eef0 2a66 	vmov.f32	s5, s13
 800311e:	ed97 1b00 	vldr	d1, [r7]
 8003122:	eeb0 0a47 	vmov.f32	s0, s14
 8003126:	eef0 0a67 	vmov.f32	s1, s15
 800312a:	f7ff fe61 	bl	8002df0 <update_motor_values>
 800312e:	ed87 0b00 	vstr	d0, [r7]
			save_Err(MOTOR_3);
 8003132:	2003      	movs	r0, #3
 8003134:	f7ff ff20 	bl	8002f78 <save_Err>

	        break;
 8003138:	bf00      	nop
	}
	return actual_val;
 800313a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800313e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003142:	eeb0 0a47 	vmov.f32	s0, s14
 8003146:	eef0 0a67 	vmov.f32	s1, s15
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000548 	.word	0x20000548
 8003154:	200005b0 	.word	0x200005b0
 8003158:	20000568 	.word	0x20000568
 800315c:	20000588 	.word	0x20000588
 8003160:	20000550 	.word	0x20000550
 8003164:	200005b8 	.word	0x200005b8
 8003168:	20000570 	.word	0x20000570
 800316c:	20000590 	.word	0x20000590
 8003170:	20000558 	.word	0x20000558
 8003174:	200005c0 	.word	0x200005c0
 8003178:	20000578 	.word	0x20000578
 800317c:	20000598 	.word	0x20000598

08003180 <PID>:

void PID(void){
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0

	rpm_1=get_rpm(MOTOR_1);
 8003184:	2001      	movs	r0, #1
 8003186:	f7fd ff33 	bl	8000ff0 <get_rpm>
 800318a:	eeb0 7a40 	vmov.f32	s14, s0
 800318e:	eef0 7a60 	vmov.f32	s15, s1
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <PID+0x114>)
 8003194:	ed83 7b00 	vstr	d7, [r3]
	rpm_2=get_rpm(MOTOR_2);
 8003198:	2002      	movs	r0, #2
 800319a:	f7fd ff29 	bl	8000ff0 <get_rpm>
 800319e:	eeb0 7a40 	vmov.f32	s14, s0
 80031a2:	eef0 7a60 	vmov.f32	s15, s1
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <PID+0x118>)
 80031a8:	ed83 7b00 	vstr	d7, [r3]
	rpm_3=get_rpm(MOTOR_3);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f7fd ff1f 	bl	8000ff0 <get_rpm>
 80031b2:	eeb0 7a40 	vmov.f32	s14, s0
 80031b6:	eef0 7a60 	vmov.f32	s15, s1
 80031ba:	4b38      	ldr	r3, [pc, #224]	; (800329c <PID+0x11c>)
 80031bc:	ed83 7b00 	vstr	d7, [r3]

	out_1=PID_Calculation(MOTOR_1, rpm_1);
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <PID+0x114>)
 80031c2:	ed93 7b00 	vldr	d7, [r3]
 80031c6:	eeb0 0a47 	vmov.f32	s0, s14
 80031ca:	eef0 0a67 	vmov.f32	s1, s15
 80031ce:	2001      	movs	r0, #1
 80031d0:	f7ff ff3a 	bl	8003048 <PID_Calculation>
 80031d4:	eeb0 7a40 	vmov.f32	s14, s0
 80031d8:	eef0 7a60 	vmov.f32	s15, s1
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <PID+0x120>)
 80031de:	ed83 7b00 	vstr	d7, [r3]
	out_2=PID_Calculation(MOTOR_2, rpm_2);
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <PID+0x118>)
 80031e4:	ed93 7b00 	vldr	d7, [r3]
 80031e8:	eeb0 0a47 	vmov.f32	s0, s14
 80031ec:	eef0 0a67 	vmov.f32	s1, s15
 80031f0:	2002      	movs	r0, #2
 80031f2:	f7ff ff29 	bl	8003048 <PID_Calculation>
 80031f6:	eeb0 7a40 	vmov.f32	s14, s0
 80031fa:	eef0 7a60 	vmov.f32	s15, s1
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <PID+0x124>)
 8003200:	ed83 7b00 	vstr	d7, [r3]
	out_3=PID_Calculation(MOTOR_3, rpm_3);
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <PID+0x11c>)
 8003206:	ed93 7b00 	vldr	d7, [r3]
 800320a:	eeb0 0a47 	vmov.f32	s0, s14
 800320e:	eef0 0a67 	vmov.f32	s1, s15
 8003212:	2003      	movs	r0, #3
 8003214:	f7ff ff18 	bl	8003048 <PID_Calculation>
 8003218:	eeb0 7a40 	vmov.f32	s14, s0
 800321c:	eef0 7a60 	vmov.f32	s15, s1
 8003220:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <PID+0x128>)
 8003222:	ed83 7b00 	vstr	d7, [r3]
//
	set_duty_cycle(MOTOR_1, out_1);
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <PID+0x120>)
 8003228:	ed93 7b00 	vldr	d7, [r3]
 800322c:	eeb0 0a47 	vmov.f32	s0, s14
 8003230:	eef0 0a67 	vmov.f32	s1, s15
 8003234:	2001      	movs	r0, #1
 8003236:	f7ff fa13 	bl	8002660 <set_duty_cycle>
	set_duty_cycle(MOTOR_2, out_2);
 800323a:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <PID+0x124>)
 800323c:	ed93 7b00 	vldr	d7, [r3]
 8003240:	eeb0 0a47 	vmov.f32	s0, s14
 8003244:	eef0 0a67 	vmov.f32	s1, s15
 8003248:	2002      	movs	r0, #2
 800324a:	f7ff fa09 	bl	8002660 <set_duty_cycle>
	set_duty_cycle(MOTOR_3, out_3);
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <PID+0x128>)
 8003250:	ed93 7b00 	vldr	d7, [r3]
 8003254:	eeb0 0a47 	vmov.f32	s0, s14
 8003258:	eef0 0a67 	vmov.f32	s1, s15
 800325c:	2003      	movs	r0, #3
 800325e:	f7ff f9ff 	bl	8002660 <set_duty_cycle>

	Run_Now(prev_duty_1, prev_duty_2, prev_duty_3);
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <PID+0x12c>)
 8003264:	ed93 7b00 	vldr	d7, [r3]
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <PID+0x130>)
 800326a:	ed93 6b00 	vldr	d6, [r3]
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <PID+0x134>)
 8003270:	ed93 5b00 	vldr	d5, [r3]
 8003274:	eeb0 2a45 	vmov.f32	s4, s10
 8003278:	eef0 2a65 	vmov.f32	s5, s11
 800327c:	eeb0 1a46 	vmov.f32	s2, s12
 8003280:	eef0 1a66 	vmov.f32	s3, s13
 8003284:	eeb0 0a47 	vmov.f32	s0, s14
 8003288:	eef0 0a67 	vmov.f32	s1, s15
 800328c:	f7ff fa9c 	bl	80027c8 <Run_Now>
//	UARTprintf("SET_POINT >>>>> V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n \t out_1: %f \t out_2: %f \t out_3: %f \r\n \t rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r\n\n", V1,V2,V3,out_1,out_2,out_3, rpm_1, rpm_2, rpm_3);
//	UARTprintf("V1: %d \t V2: %d \t V3: %d \r\n",(uint32_t)V1,(uint32_t)V2,(uint32_t)V3);
//	UARTprintf("out_1: %d \t out_2: %d \t out_3: %d \r \n",(int32_t)out_1,(int32_t)out_2,(int32_t)out_3);
//	UARTprintf("rpm_1: %d \t rpm_2: %d \t rpm_3: %d \r \n \r\n", (int32_t)rpm_1, (int32_t)rpm_2, (int32_t)rpm_3);
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200004e0 	.word	0x200004e0
 8003298:	200004e8 	.word	0x200004e8
 800329c:	200004f0 	.word	0x200004f0
 80032a0:	200004c8 	.word	0x200004c8
 80032a4:	200004d0 	.word	0x200004d0
 80032a8:	200004d8 	.word	0x200004d8
 80032ac:	20000008 	.word	0x20000008
 80032b0:	20000010 	.word	0x20000010
 80032b4:	20000018 	.word	0x20000018

080032b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_MspInit+0x54>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a11      	ldr	r2, [pc, #68]	; (800330c <HAL_MspInit+0x54>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_MspInit+0x54>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_MspInit+0x54>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_MspInit+0x54>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_MspInit+0x54>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	210f      	movs	r1, #15
 80032fa:	f06f 0001 	mvn.w	r0, #1
 80032fe:	f000 fd03 	bl	8003d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_I2C_MspInit+0x84>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d12b      	bne.n	800338a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_I2C_MspInit+0x88>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_I2C_MspInit+0x88>)
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <HAL_I2C_MspInit+0x88>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003352:	2312      	movs	r3, #18
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800335e:	2304      	movs	r3, #4
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <HAL_I2C_MspInit+0x8c>)
 800336a:	f000 fcf7 	bl	8003d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_I2C_MspInit+0x88>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_I2C_MspInit+0x88>)
 8003378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_I2C_MspInit+0x88>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800338a:	bf00      	nop
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40005400 	.word	0x40005400
 8003398:	40023800 	.word	0x40023800
 800339c:	40020400 	.word	0x40020400

080033a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a28      	ldr	r2, [pc, #160]	; (8003460 <HAL_SPI_MspInit+0xc0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d14a      	bne.n	8003458 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 80033cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_SPI_MspInit+0xc4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003416:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800341a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003428:	2306      	movs	r3, #6
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	480d      	ldr	r0, [pc, #52]	; (8003468 <HAL_SPI_MspInit+0xc8>)
 8003434:	f000 fc92 	bl	8003d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003438:	2320      	movs	r3, #32
 800343a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003448:	2306      	movs	r3, #6
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4619      	mov	r1, r3
 8003452:	4806      	ldr	r0, [pc, #24]	; (800346c <HAL_SPI_MspInit+0xcc>)
 8003454:	f000 fc82 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003458:	bf00      	nop
 800345a:	3728      	adds	r7, #40	; 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40003c00 	.word	0x40003c00
 8003464:	40023800 	.word	0x40023800
 8003468:	40020800 	.word	0x40020800
 800346c:	40020400 	.word	0x40020400

08003470 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a50      	ldr	r2, [pc, #320]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x160>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d135      	bne.n	80034fe <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4a4e      	ldr	r2, [pc, #312]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6453      	str	r3, [r2, #68]	; 0x44
 80034a2:	4b4c      	ldr	r3, [pc, #304]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	4b48      	ldr	r3, [pc, #288]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a47      	ldr	r2, [pc, #284]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 80034b8:	f043 0310 	orr.w	r3, r3, #16
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b45      	ldr	r3, [pc, #276]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80034ca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034dc:	2301      	movs	r3, #1
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	483c      	ldr	r0, [pc, #240]	; (80035d8 <HAL_TIM_Encoder_MspInit+0x168>)
 80034e8:	f000 fc38 	bl	8003d5c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	210f      	movs	r1, #15
 80034f0:	2019      	movs	r0, #25
 80034f2:	f000 fc09 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034f6:	2019      	movs	r0, #25
 80034f8:	f000 fc22 	bl	8003d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034fc:	e063      	b.n	80035c6 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a36      	ldr	r2, [pc, #216]	; (80035dc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d12c      	bne.n	8003562 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003512:	f043 0302 	orr.w	r3, r3, #2
 8003516:	6413      	str	r3, [r2, #64]	; 0x40
 8003518:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6313      	str	r3, [r2, #48]	; 0x30
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003540:	23c0      	movs	r3, #192	; 0xc0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003550:	2302      	movs	r3, #2
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003558:	4619      	mov	r1, r3
 800355a:	4821      	ldr	r0, [pc, #132]	; (80035e0 <HAL_TIM_Encoder_MspInit+0x170>)
 800355c:	f000 fbfe 	bl	8003d5c <HAL_GPIO_Init>
}
 8003560:	e031      	b.n	80035c6 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM4)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_TIM_Encoder_MspInit+0x174>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d12c      	bne.n	80035c6 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6413      	str	r3, [r2, #64]	; 0x40
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	6313      	str	r3, [r2, #48]	; 0x30
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x164>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80035a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035b6:	2302      	movs	r3, #2
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	4619      	mov	r1, r3
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x178>)
 80035c2:	f000 fbcb 	bl	8003d5c <HAL_GPIO_Init>
}
 80035c6:	bf00      	nop
 80035c8:	3738      	adds	r7, #56	; 0x38
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40020c00 	.word	0x40020c00

080035ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800361a:	e026      	b.n	800366a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <HAL_TIM_Base_MspInit+0x90>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a12      	ldr	r2, [pc, #72]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]
}
 8003642:	e012      	b.n	800366a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM9)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_TIM_Base_MspInit+0x94>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10d      	bne.n	800366a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_TIM_Base_MspInit+0x8c>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40014000 	.word	0x40014000

08003684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d11f      	bne.n	80036e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a33      	ldr	r2, [pc, #204]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036d4:	2301      	movs	r3, #1
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4828      	ldr	r0, [pc, #160]	; (8003780 <HAL_TIM_MspPostInit+0xfc>)
 80036e0:	f000 fb3c 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80036e4:	e046      	b.n	8003774 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a26      	ldr	r2, [pc, #152]	; (8003784 <HAL_TIM_MspPostInit+0x100>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d11e      	bne.n	800372e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a20      	ldr	r2, [pc, #128]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800370c:	230c      	movs	r3, #12
 800370e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800371c:	2302      	movs	r3, #2
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	4818      	ldr	r0, [pc, #96]	; (8003788 <HAL_TIM_MspPostInit+0x104>)
 8003728:	f000 fb18 	bl	8003d5c <HAL_GPIO_Init>
}
 800372c:	e022      	b.n	8003774 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM9)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a16      	ldr	r2, [pc, #88]	; (800378c <HAL_TIM_MspPostInit+0x108>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d11d      	bne.n	8003774 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003738:	2300      	movs	r3, #0
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 8003742:	f043 0310 	orr.w	r3, r3, #16
 8003746:	6313      	str	r3, [r2, #48]	; 0x30
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_TIM_MspPostInit+0xf8>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003754:	2360      	movs	r3, #96	; 0x60
 8003756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003764:	2303      	movs	r3, #3
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4619      	mov	r1, r3
 800376e:	4808      	ldr	r0, [pc, #32]	; (8003790 <HAL_TIM_MspPostInit+0x10c>)
 8003770:	f000 faf4 	bl	8003d5c <HAL_GPIO_Init>
}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	40020400 	.word	0x40020400
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40020000 	.word	0x40020000
 800378c:	40014000 	.word	0x40014000
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	; 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_InitTick+0xd0>)
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <HAL_InitTick+0xd0>)
 80037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b2:	6453      	str	r3, [r2, #68]	; 0x44
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_InitTick+0xd0>)
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037c0:	f107 020c 	add.w	r2, r7, #12
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f002 fa78 	bl	8005cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80037d0:	f002 fa62 	bl	8005c98 <HAL_RCC_GetPCLK2Freq>
 80037d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <HAL_InitTick+0xd4>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9b      	lsrs	r3, r3, #18
 80037e0:	3b01      	subs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_InitTick+0xd8>)
 80037e6:	4a22      	ldr	r2, [pc, #136]	; (8003870 <HAL_InitTick+0xdc>)
 80037e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_InitTick+0xd8>)
 80037ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037f0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_InitTick+0xd8>)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_InitTick+0xd8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fe:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_InitTick+0xd8>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_InitTick+0xd8>)
 8003806:	2200      	movs	r2, #0
 8003808:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800380a:	4818      	ldr	r0, [pc, #96]	; (800386c <HAL_InitTick+0xd8>)
 800380c:	f002 fda0 	bl	8006350 <HAL_TIM_Base_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11b      	bne.n	8003856 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800381e:	4813      	ldr	r0, [pc, #76]	; (800386c <HAL_InitTick+0xd8>)
 8003820:	f002 fde6 	bl	80063f0 <HAL_TIM_Base_Start_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800382a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800382e:	2b00      	cmp	r3, #0
 8003830:	d111      	bne.n	8003856 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003832:	2019      	movs	r0, #25
 8003834:	f000 fa84 	bl	8003d40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	d808      	bhi.n	8003850 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800383e:	2200      	movs	r2, #0
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	2019      	movs	r0, #25
 8003844:	f000 fa60 	bl	8003d08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <HAL_InitTick+0xe0>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e002      	b.n	8003856 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800385a:	4618      	mov	r0, r3
 800385c:	3730      	adds	r7, #48	; 0x30
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800
 8003868:	431bde83 	.word	0x431bde83
 800386c:	200005c8 	.word	0x200005c8
 8003870:	40014400 	.word	0x40014400
 8003874:	20000024 	.word	0x20000024

08003878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800387c:	e7fe      	b.n	800387c <NMI_Handler+0x4>

0800387e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003882:	e7fe      	b.n	8003882 <HardFault_Handler+0x4>

08003884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003888:	e7fe      	b.n	8003888 <MemManage_Handler+0x4>

0800388a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <BusFault_Handler+0x4>

08003890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003894:	e7fe      	b.n	8003894 <UsageFault_Handler+0x4>

08003896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80038aa:	f003 f867 	bl	800697c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80038ae:	4803      	ldr	r0, [pc, #12]	; (80038bc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80038b0:	f003 f864 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200002d8 	.word	0x200002d8
 80038bc:	200005c8 	.word	0x200005c8

080038c0 <ITM_SendChar>:
//ITM Register Address
#define ITM_STIMULUS_PORT0		*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN			*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
	// Enable TRCENA
	DEMCR |= (1<<24);
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <ITM_SendChar+0x48>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <ITM_SendChar+0x48>)
 80038d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d4:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <ITM_SendChar+0x4c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <ITM_SendChar+0x4c>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80038e2:	bf00      	nop
 80038e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f8      	beq.n	80038e4 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 80038f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000edfc 	.word	0xe000edfc
 800390c:	e0000e00 	.word	0xe0000e00

08003910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return 1;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <_kill>:

int _kill(int pid, int sig)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800392a:	f007 fbf5 	bl	800b118 <__errno>
 800392e:	4603      	mov	r3, r0
 8003930:	2216      	movs	r2, #22
 8003932:	601a      	str	r2, [r3, #0]
  return -1;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_exit>:

void _exit (int status)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003948:	f04f 31ff 	mov.w	r1, #4294967295
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ffe7 	bl	8003920 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003952:	e7fe      	b.n	8003952 <_exit+0x12>

08003954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e00a      	b.n	800397c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003966:	f3af 8000 	nop.w
 800396a:	4601      	mov	r1, r0
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	60ba      	str	r2, [r7, #8]
 8003972:	b2ca      	uxtb	r2, r1
 8003974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	dbf0      	blt.n	8003966 <_read+0x12>
  }

  return len;
 8003984:	687b      	ldr	r3, [r7, #4]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e009      	b.n	80039b4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	60ba      	str	r2, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ff89 	bl	80038c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dbf1      	blt.n	80039a0 <_write+0x12>
  }
  return len;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_close>:

int _close(int file)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ee:	605a      	str	r2, [r3, #4]
  return 0;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_isatty>:

int _isatty(int file)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <_sbrk+0x5c>)
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <_sbrk+0x60>)
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_sbrk+0x64>)
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <_sbrk+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d207      	bcs.n	8003a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a60:	f007 fb5a 	bl	800b118 <__errno>
 8003a64:	4603      	mov	r3, r0
 8003a66:	220c      	movs	r2, #12
 8003a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	e009      	b.n	8003a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <_sbrk+0x64>)
 8003a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20020000 	.word	0x20020000
 8003a90:	00000400 	.word	0x00000400
 8003a94:	20000610 	.word	0x20000610
 8003a98:	200050b8 	.word	0x200050b8

08003a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x20>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <SystemInit+0x20>)
 8003aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ac4:	f7ff ffea 	bl	8003a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ac8:	480c      	ldr	r0, [pc, #48]	; (8003afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aca:	490d      	ldr	r1, [pc, #52]	; (8003b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003acc:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad0:	e002      	b.n	8003ad8 <LoopCopyDataInit>

08003ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad6:	3304      	adds	r3, #4

08003ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003adc:	d3f9      	bcc.n	8003ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	; (8003b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae4:	e001      	b.n	8003aea <LoopFillZerobss>

08003ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae8:	3204      	adds	r2, #4

08003aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aec:	d3fb      	bcc.n	8003ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aee:	f007 fb19 	bl	800b124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fd fbf9 	bl	80012e8 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8003af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003b04:	08010448 	.word	0x08010448
  ldr r2, =_sbss
 8003b08:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b0c:	200050b4 	.word	0x200050b4

08003b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_Init+0x40>)
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_Init+0x40>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_Init+0x40>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f000 f8d8 	bl	8003cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	200f      	movs	r0, #15
 8003b44:	f7ff fe26 	bl	8003794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fbb6 	bl	80032b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_IncTick+0x20>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_IncTick+0x24>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_IncTick+0x24>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000028 	.word	0x20000028
 8003b7c:	20000614 	.word	0x20000614

08003b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return uwTick;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_GetTick+0x14>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000614 	.word	0x20000614

08003b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	; (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	; (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	; (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	bf28      	it	cs
 8003caa:	2304      	movcs	r3, #4
 8003cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d902      	bls.n	8003cbc <NVIC_EncodePriority+0x30>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3b03      	subs	r3, #3
 8003cba:	e000      	b.n	8003cbe <NVIC_EncodePriority+0x32>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	401a      	ands	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	43d9      	mvns	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	4313      	orrs	r3, r2
         );
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff4c 	bl	8003b98 <__NVIC_SetPriorityGrouping>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d1a:	f7ff ff61 	bl	8003be0 <__NVIC_GetPriorityGrouping>
 8003d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	6978      	ldr	r0, [r7, #20]
 8003d26:	f7ff ffb1 	bl	8003c8c <NVIC_EncodePriority>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ff80 	bl	8003c38 <__NVIC_SetPriority>
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff54 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e16b      	b.n	8004050 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f040 815a 	bne.w	800404a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d005      	beq.n	8003dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d130      	bne.n	8003e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 0201 	and.w	r2, r3, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d017      	beq.n	8003e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2203      	movs	r2, #3
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d123      	bne.n	8003ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	08da      	lsrs	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3208      	adds	r2, #8
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	220f      	movs	r2, #15
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	08da      	lsrs	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3208      	adds	r2, #8
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80b4 	beq.w	800404a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b60      	ldr	r3, [pc, #384]	; (8004068 <HAL_GPIO_Init+0x30c>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	4a5f      	ldr	r2, [pc, #380]	; (8004068 <HAL_GPIO_Init+0x30c>)
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <HAL_GPIO_Init+0x30c>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003efe:	4a5b      	ldr	r2, [pc, #364]	; (800406c <HAL_GPIO_Init+0x310>)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a52      	ldr	r2, [pc, #328]	; (8004070 <HAL_GPIO_Init+0x314>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <HAL_GPIO_Init+0x226>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a51      	ldr	r2, [pc, #324]	; (8004074 <HAL_GPIO_Init+0x318>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d025      	beq.n	8003f7e <HAL_GPIO_Init+0x222>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a50      	ldr	r2, [pc, #320]	; (8004078 <HAL_GPIO_Init+0x31c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <HAL_GPIO_Init+0x21e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a4f      	ldr	r2, [pc, #316]	; (800407c <HAL_GPIO_Init+0x320>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x21a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4e      	ldr	r2, [pc, #312]	; (8004080 <HAL_GPIO_Init+0x324>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x216>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4d      	ldr	r2, [pc, #308]	; (8004084 <HAL_GPIO_Init+0x328>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x212>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a4c      	ldr	r2, [pc, #304]	; (8004088 <HAL_GPIO_Init+0x32c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x20e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4b      	ldr	r2, [pc, #300]	; (800408c <HAL_GPIO_Init+0x330>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x20a>
 8003f62:	2307      	movs	r3, #7
 8003f64:	e00e      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f66:	2308      	movs	r3, #8
 8003f68:	e00c      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f6a:	2306      	movs	r3, #6
 8003f6c:	e00a      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f6e:	2305      	movs	r3, #5
 8003f70:	e008      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f72:	2304      	movs	r3, #4
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f76:	2303      	movs	r3, #3
 8003f78:	e004      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_GPIO_Init+0x228>
 8003f82:	2300      	movs	r3, #0
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	f002 0203 	and.w	r2, r2, #3
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	4093      	lsls	r3, r2
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f94:	4935      	ldr	r1, [pc, #212]	; (800406c <HAL_GPIO_Init+0x310>)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_GPIO_Init+0x334>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc6:	4a32      	ldr	r2, [pc, #200]	; (8004090 <HAL_GPIO_Init+0x334>)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fcc:	4b30      	ldr	r3, [pc, #192]	; (8004090 <HAL_GPIO_Init+0x334>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_GPIO_Init+0x334>)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <HAL_GPIO_Init+0x334>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_GPIO_Init+0x334>)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_GPIO_Init+0x334>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HAL_GPIO_Init+0x334>)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3301      	adds	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	f67f ae90 	bls.w	8003d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3724      	adds	r7, #36	; 0x24
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	40013800 	.word	0x40013800
 8004070:	40020000 	.word	0x40020000
 8004074:	40020400 	.word	0x40020400
 8004078:	40020800 	.word	0x40020800
 800407c:	40020c00 	.word	0x40020c00
 8004080:	40021000 	.word	0x40021000
 8004084:	40021400 	.word	0x40021400
 8004088:	40021800 	.word	0x40021800
 800408c:	40021c00 	.word	0x40021c00
 8004090:	40013c00 	.word	0x40013c00

08004094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
 80040a0:	4613      	mov	r3, r2
 80040a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a4:	787b      	ldrb	r3, [r7, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040b0:	e003      	b.n	80040ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	041a      	lsls	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	619a      	str	r2, [r3, #24]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e12b      	b.n	8004332 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff f90e 	bl	8003310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800411a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800412a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800412c:	f001 fda0 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8004130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4a81      	ldr	r2, [pc, #516]	; (800433c <HAL_I2C_Init+0x274>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d807      	bhi.n	800414c <HAL_I2C_Init+0x84>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_I2C_Init+0x278>)
 8004140:	4293      	cmp	r3, r2
 8004142:	bf94      	ite	ls
 8004144:	2301      	movls	r3, #1
 8004146:	2300      	movhi	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e006      	b.n	800415a <HAL_I2C_Init+0x92>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a7d      	ldr	r2, [pc, #500]	; (8004344 <HAL_I2C_Init+0x27c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	bf94      	ite	ls
 8004154:	2301      	movls	r3, #1
 8004156:	2300      	movhi	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0e7      	b.n	8004332 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a78      	ldr	r2, [pc, #480]	; (8004348 <HAL_I2C_Init+0x280>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	0c9b      	lsrs	r3, r3, #18
 800416c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a6a      	ldr	r2, [pc, #424]	; (800433c <HAL_I2C_Init+0x274>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d802      	bhi.n	800419c <HAL_I2C_Init+0xd4>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3301      	adds	r3, #1
 800419a:	e009      	b.n	80041b0 <HAL_I2C_Init+0xe8>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	4a69      	ldr	r2, [pc, #420]	; (800434c <HAL_I2C_Init+0x284>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	3301      	adds	r3, #1
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	495c      	ldr	r1, [pc, #368]	; (800433c <HAL_I2C_Init+0x274>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d819      	bhi.n	8004204 <HAL_I2C_Init+0x13c>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1e59      	subs	r1, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	fbb1 f3f3 	udiv	r3, r1, r3
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041e4:	400b      	ands	r3, r1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_I2C_Init+0x138>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1e59      	subs	r1, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fe:	e051      	b.n	80042a4 <HAL_I2C_Init+0x1dc>
 8004200:	2304      	movs	r3, #4
 8004202:	e04f      	b.n	80042a4 <HAL_I2C_Init+0x1dc>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d111      	bne.n	8004230 <HAL_I2C_Init+0x168>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1e58      	subs	r0, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	440b      	add	r3, r1
 800421a:	fbb0 f3f3 	udiv	r3, r0, r3
 800421e:	3301      	adds	r3, #1
 8004220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e012      	b.n	8004256 <HAL_I2C_Init+0x18e>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1e58      	subs	r0, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	0099      	lsls	r1, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	fbb0 f3f3 	udiv	r3, r0, r3
 8004246:	3301      	adds	r3, #1
 8004248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Init+0x196>
 800425a:	2301      	movs	r3, #1
 800425c:	e022      	b.n	80042a4 <HAL_I2C_Init+0x1dc>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10e      	bne.n	8004284 <HAL_I2C_Init+0x1bc>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1e58      	subs	r0, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	440b      	add	r3, r1
 8004274:	fbb0 f3f3 	udiv	r3, r0, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004282:	e00f      	b.n	80042a4 <HAL_I2C_Init+0x1dc>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1e58      	subs	r0, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	0099      	lsls	r1, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	fbb0 f3f3 	udiv	r3, r0, r3
 800429a:	3301      	adds	r3, #1
 800429c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	6809      	ldr	r1, [r1, #0]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6911      	ldr	r1, [r2, #16]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68d2      	ldr	r2, [r2, #12]
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	000186a0 	.word	0x000186a0
 8004340:	001e847f 	.word	0x001e847f
 8004344:	003d08ff 	.word	0x003d08ff
 8004348:	431bde83 	.word	0x431bde83
 800434c:	10624dd3 	.word	0x10624dd3

08004350 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	461a      	mov	r2, r3
 800435c:	460b      	mov	r3, r1
 800435e:	817b      	strh	r3, [r7, #10]
 8004360:	4613      	mov	r3, r2
 8004362:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff fc0c 	bl	8003b80 <HAL_GetTick>
 8004368:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	f040 80e0 	bne.w	8004538 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2319      	movs	r3, #25
 800437e:	2201      	movs	r2, #1
 8004380:	4970      	ldr	r1, [pc, #448]	; (8004544 <HAL_I2C_Master_Transmit+0x1f4>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fe0e 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e0d3      	b.n	800453a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_Master_Transmit+0x50>
 800439c:	2302      	movs	r3, #2
 800439e:	e0cc      	b.n	800453a <HAL_I2C_Master_Transmit+0x1ea>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d007      	beq.n	80043c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2221      	movs	r2, #33	; 0x21
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2210      	movs	r2, #16
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	893a      	ldrh	r2, [r7, #8]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a50      	ldr	r2, [pc, #320]	; (8004548 <HAL_I2C_Master_Transmit+0x1f8>)
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004408:	8979      	ldrh	r1, [r7, #10]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fbc8 	bl	8004ba4 <I2C_MasterRequestWrite>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e08d      	b.n	800453a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441e:	2300      	movs	r3, #0
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004434:	e066      	b.n	8004504 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	6a39      	ldr	r1, [r7, #32]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fecc 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	2b04      	cmp	r3, #4
 800444c:	d107      	bne.n	800445e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06b      	b.n	800453a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d11b      	bne.n	80044d8 <HAL_I2C_Master_Transmit+0x188>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d017      	beq.n	80044d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	6a39      	ldr	r1, [r7, #32]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fec3 	bl	8005268 <I2C_WaitOnBTFFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d107      	bne.n	8004500 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e01a      	b.n	800453a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d194      	bne.n	8004436 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	00100002 	.word	0x00100002
 8004548:	ffff0000 	.word	0xffff0000

0800454c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004566:	f7ff fb0b 	bl	8003b80 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b20      	cmp	r3, #32
 8004576:	f040 80d9 	bne.w	800472c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2319      	movs	r3, #25
 8004580:	2201      	movs	r2, #1
 8004582:	496d      	ldr	r1, [pc, #436]	; (8004738 <HAL_I2C_Mem_Write+0x1ec>)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fd0d 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	e0cc      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_Mem_Write+0x56>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0c5      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d007      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2221      	movs	r2, #33	; 0x21
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2240      	movs	r2, #64	; 0x40
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a4d      	ldr	r2, [pc, #308]	; (800473c <HAL_I2C_Mem_Write+0x1f0>)
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800460a:	88f8      	ldrh	r0, [r7, #6]
 800460c:	893a      	ldrh	r2, [r7, #8]
 800460e:	8979      	ldrh	r1, [r7, #10]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fb44 	bl	8004ca8 <I2C_RequestMemoryWrite>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d052      	beq.n	80046cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e081      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fdd2 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d107      	bne.n	8004652 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06b      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d11b      	bne.n	80046cc <HAL_I2C_Mem_Write+0x180>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d017      	beq.n	80046cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1aa      	bne.n	800462a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fdc5 	bl	8005268 <I2C_WaitOnBTFFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e016      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	00100002 	.word	0x00100002
 800473c:	ffff0000 	.word	0xffff0000

08004740 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	4608      	mov	r0, r1
 800474a:	4611      	mov	r1, r2
 800474c:	461a      	mov	r2, r3
 800474e:	4603      	mov	r3, r0
 8004750:	817b      	strh	r3, [r7, #10]
 8004752:	460b      	mov	r3, r1
 8004754:	813b      	strh	r3, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800475a:	f7ff fa11 	bl	8003b80 <HAL_GetTick>
 800475e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b20      	cmp	r3, #32
 800476a:	f040 8214 	bne.w	8004b96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2319      	movs	r3, #25
 8004774:	2201      	movs	r2, #1
 8004776:	497b      	ldr	r1, [pc, #492]	; (8004964 <HAL_I2C_Mem_Read+0x224>)
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fc13 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
 8004786:	e207      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_I2C_Mem_Read+0x56>
 8004792:	2302      	movs	r3, #2
 8004794:	e200      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d007      	beq.n	80047bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2222      	movs	r2, #34	; 0x22
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a5b      	ldr	r2, [pc, #364]	; (8004968 <HAL_I2C_Mem_Read+0x228>)
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047fe:	88f8      	ldrh	r0, [r7, #6]
 8004800:	893a      	ldrh	r2, [r7, #8]
 8004802:	8979      	ldrh	r1, [r7, #10]
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4603      	mov	r3, r0
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fae0 	bl	8004dd4 <I2C_RequestMemoryRead>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1bc      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e190      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b01      	cmp	r3, #1
 8004854:	d11b      	bne.n	800488e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e170      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	2b02      	cmp	r3, #2
 8004894:	d11b      	bne.n	80048ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	e150      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048e4:	e144      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	f200 80f1 	bhi.w	8004ad2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d123      	bne.n	8004940 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fcfb 	bl	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e145      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800493e:	e117      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b02      	cmp	r3, #2
 8004946:	d14e      	bne.n	80049e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2200      	movs	r2, #0
 8004950:	4906      	ldr	r1, [pc, #24]	; (800496c <HAL_I2C_Mem_Read+0x22c>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fb26 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e11a      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
 8004962:	bf00      	nop
 8004964:	00100002 	.word	0x00100002
 8004968:	ffff0000 	.word	0xffff0000
 800496c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049e4:	e0c4      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	496c      	ldr	r1, [pc, #432]	; (8004ba0 <HAL_I2C_Mem_Read+0x460>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fad7 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0cb      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4955      	ldr	r1, [pc, #340]	; (8004ba0 <HAL_I2C_Mem_Read+0x460>)
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 faa9 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e09d      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad0:	e04e      	b.n	8004b70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fc0e 	bl	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e058      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d124      	bne.n	8004b70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f aeb6 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3728      	adds	r7, #40	; 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	00010004 	.word	0x00010004

08004ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d006      	beq.n	8004bce <I2C_MasterRequestWrite+0x2a>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d003      	beq.n	8004bce <I2C_MasterRequestWrite+0x2a>
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bcc:	d108      	bne.n	8004be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e00b      	b.n	8004bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d107      	bne.n	8004bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f9cd 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d103      	bne.n	8004c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e035      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c34:	d108      	bne.n	8004c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c36:	897b      	ldrh	r3, [r7, #10]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c44:	611a      	str	r2, [r3, #16]
 8004c46:	e01b      	b.n	8004c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c48:	897b      	ldrh	r3, [r7, #10]
 8004c4a:	11db      	asrs	r3, r3, #7
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0306 	and.w	r3, r3, #6
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f063 030f 	orn	r3, r3, #15
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	490e      	ldr	r1, [pc, #56]	; (8004ca0 <I2C_MasterRequestWrite+0xfc>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa16 	bl	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e010      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4907      	ldr	r1, [pc, #28]	; (8004ca4 <I2C_MasterRequestWrite+0x100>)
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa06 	bl	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	00010008 	.word	0x00010008
 8004ca4:	00010002 	.word	0x00010002

08004ca8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	817b      	strh	r3, [r7, #10]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	813b      	strh	r3, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f960 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d103      	bne.n	8004d02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e05f      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <I2C_RequestMemoryWrite+0x128>)
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f9bb 	bl	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04c      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fa46 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d107      	bne.n	8004d6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e02b      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d74:	893b      	ldrh	r3, [r7, #8]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	e021      	b.n	8004dc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	6a39      	ldr	r1, [r7, #32]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fa20 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d107      	bne.n	8004db6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e005      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dba:	893b      	ldrh	r3, [r7, #8]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	00010002 	.word	0x00010002

08004dd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	817b      	strh	r3, [r7, #10]
 8004de6:	460b      	mov	r3, r1
 8004de8:	813b      	strh	r3, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f8c2 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e34:	d103      	bne.n	8004e3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0aa      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e42:	897b      	ldrh	r3, [r7, #10]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	6a3a      	ldr	r2, [r7, #32]
 8004e56:	4952      	ldr	r1, [pc, #328]	; (8004fa0 <I2C_RequestMemoryRead+0x1cc>)
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f91d 	bl	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e097      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	6a39      	ldr	r1, [r7, #32]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f9a8 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d107      	bne.n	8004ea6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e076      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d105      	bne.n	8004ebc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb0:	893b      	ldrh	r3, [r7, #8]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]
 8004eba:	e021      	b.n	8004f00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ebc:	893b      	ldrh	r3, [r7, #8]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f982 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e050      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef6:	893b      	ldrh	r3, [r7, #8]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	6a39      	ldr	r1, [r7, #32]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f967 	bl	80051d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00d      	beq.n	8004f2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d107      	bne.n	8004f28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e035      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f82b 	bl	8004fa4 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f62:	d103      	bne.n	8004f6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e013      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f70:	897b      	ldrh	r3, [r7, #10]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	4906      	ldr	r1, [pc, #24]	; (8004fa0 <I2C_RequestMemoryRead+0x1cc>)
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f886 	bl	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	00010002 	.word	0x00010002

08004fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb4:	e048      	b.n	8005048 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d044      	beq.n	8005048 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fe fddf 	bl	8003b80 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d139      	bne.n	8005048 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10d      	bne.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	43da      	mvns	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	e00c      	b.n	8005014 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	43da      	mvns	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	429a      	cmp	r2, r3
 8005018:	d116      	bne.n	8005048 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e023      	b.n	8005090 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10d      	bne.n	800506e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	e00c      	b.n	8005088 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	43da      	mvns	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	429a      	cmp	r2, r3
 800508c:	d093      	beq.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a6:	e071      	b.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d123      	bne.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f043 0204 	orr.w	r2, r3, #4
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e067      	b.n	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d041      	beq.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005108:	f7fe fd3a 	bl	8003b80 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d302      	bcc.n	800511e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d136      	bne.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10c      	bne.n	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	43da      	mvns	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e00b      	b.n	800515a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	43da      	mvns	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4013      	ands	r3, r2
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e021      	b.n	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10c      	bne.n	80051b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	43da      	mvns	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4013      	ands	r3, r2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e00b      	b.n	80051c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf14      	ite	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	2300      	moveq	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f47f af6d 	bne.w	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e4:	e034      	b.n	8005250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f8e3 	bl	80053b2 <I2C_IsAcknowledgeFailed>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e034      	b.n	8005260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d028      	beq.n	8005250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fe fcbf 	bl	8003b80 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d11d      	bne.n	8005250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b80      	cmp	r3, #128	; 0x80
 8005220:	d016      	beq.n	8005250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e007      	b.n	8005260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d1c3      	bne.n	80051e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005274:	e034      	b.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f89b 	bl	80053b2 <I2C_IsAcknowledgeFailed>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e034      	b.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d028      	beq.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe fc77 	bl	8003b80 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11d      	bne.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d016      	beq.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	f043 0220 	orr.w	r2, r3, #32
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e007      	b.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d1c3      	bne.n	8005276 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005304:	e049      	b.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d119      	bne.n	8005348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0210 	mvn.w	r2, #16
 800531c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e030      	b.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005348:	f7fe fc1a 	bl	8003b80 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d016      	beq.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e007      	b.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d1ae      	bne.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d11b      	bne.n	8005402 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e267      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d075      	beq.n	800551a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800542e:	4b88      	ldr	r3, [pc, #544]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b04      	cmp	r3, #4
 8005438:	d00c      	beq.n	8005454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543a:	4b85      	ldr	r3, [pc, #532]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005442:	2b08      	cmp	r3, #8
 8005444:	d112      	bne.n	800546c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005446:	4b82      	ldr	r3, [pc, #520]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005452:	d10b      	bne.n	800546c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005454:	4b7e      	ldr	r3, [pc, #504]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05b      	beq.n	8005518 <HAL_RCC_OscConfig+0x108>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d157      	bne.n	8005518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e242      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d106      	bne.n	8005484 <HAL_RCC_OscConfig+0x74>
 8005476:	4b76      	ldr	r3, [pc, #472]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a75      	ldr	r2, [pc, #468]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 800547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e01d      	b.n	80054c0 <HAL_RCC_OscConfig+0xb0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x98>
 800548e:	4b70      	ldr	r3, [pc, #448]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6f      	ldr	r2, [pc, #444]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b6d      	ldr	r3, [pc, #436]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6c      	ldr	r2, [pc, #432]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0xb0>
 80054a8:	4b69      	ldr	r3, [pc, #420]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a68      	ldr	r2, [pc, #416]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b66      	ldr	r3, [pc, #408]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a65      	ldr	r2, [pc, #404]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80054ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fe fb5a 	bl	8003b80 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d0:	f7fe fb56 	bl	8003b80 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	; 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e207      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	4b5b      	ldr	r3, [pc, #364]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0xc0>
 80054ee:	e014      	b.n	800551a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7fe fb46 	bl	8003b80 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f8:	f7fe fb42 	bl	8003b80 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e1f3      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	4b51      	ldr	r3, [pc, #324]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0xe8>
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d063      	beq.n	80055ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800553a:	2b08      	cmp	r3, #8
 800553c:	d11c      	bne.n	8005578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553e:	4b44      	ldr	r3, [pc, #272]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d116      	bne.n	8005578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554a:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_RCC_OscConfig+0x152>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d001      	beq.n	8005562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e1c7      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005562:	4b3b      	ldr	r3, [pc, #236]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4937      	ldr	r1, [pc, #220]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	e03a      	b.n	80055ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d020      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005580:	4b34      	ldr	r3, [pc, #208]	; (8005654 <HAL_RCC_OscConfig+0x244>)
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fe fafb 	bl	8003b80 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558e:	f7fe faf7 	bl	8003b80 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e1a8      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a0:	4b2b      	ldr	r3, [pc, #172]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ac:	4b28      	ldr	r3, [pc, #160]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4925      	ldr	r1, [pc, #148]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]
 80055c0:	e015      	b.n	80055ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c2:	4b24      	ldr	r3, [pc, #144]	; (8005654 <HAL_RCC_OscConfig+0x244>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fe fada 	bl	8003b80 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d0:	f7fe fad6 	bl	8003b80 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e187      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e2:	4b1b      	ldr	r3, [pc, #108]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d036      	beq.n	8005668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <HAL_RCC_OscConfig+0x248>)
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fe faba 	bl	8003b80 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005610:	f7fe fab6 	bl	8003b80 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e167      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_OscConfig+0x240>)
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x200>
 800562e:	e01b      	b.n	8005668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_RCC_OscConfig+0x248>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005636:	f7fe faa3 	bl	8003b80 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	e00e      	b.n	800565c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563e:	f7fe fa9f 	bl	8003b80 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d907      	bls.n	800565c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e150      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
 8005650:	40023800 	.word	0x40023800
 8005654:	42470000 	.word	0x42470000
 8005658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565c:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1ea      	bne.n	800563e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8097 	beq.w	80057a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567a:	4b81      	ldr	r3, [pc, #516]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	4b7d      	ldr	r3, [pc, #500]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	4a7c      	ldr	r2, [pc, #496]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005694:	6413      	str	r3, [r2, #64]	; 0x40
 8005696:	4b7a      	ldr	r3, [pc, #488]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b77      	ldr	r3, [pc, #476]	; (8005884 <HAL_RCC_OscConfig+0x474>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d118      	bne.n	80056e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b2:	4b74      	ldr	r3, [pc, #464]	; (8005884 <HAL_RCC_OscConfig+0x474>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a73      	ldr	r2, [pc, #460]	; (8005884 <HAL_RCC_OscConfig+0x474>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056be:	f7fe fa5f 	bl	8003b80 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7fe fa5b 	bl	8003b80 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e10c      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	4b6a      	ldr	r3, [pc, #424]	; (8005884 <HAL_RCC_OscConfig+0x474>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d106      	bne.n	80056fa <HAL_RCC_OscConfig+0x2ea>
 80056ec:	4b64      	ldr	r3, [pc, #400]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a63      	ldr	r2, [pc, #396]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
 80056f8:	e01c      	b.n	8005734 <HAL_RCC_OscConfig+0x324>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x30c>
 8005702:	4b5f      	ldr	r3, [pc, #380]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	4a5e      	ldr	r2, [pc, #376]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005708:	f043 0304 	orr.w	r3, r3, #4
 800570c:	6713      	str	r3, [r2, #112]	; 0x70
 800570e:	4b5c      	ldr	r3, [pc, #368]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	4a5b      	ldr	r2, [pc, #364]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6713      	str	r3, [r2, #112]	; 0x70
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0x324>
 800571c:	4b58      	ldr	r3, [pc, #352]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a57      	ldr	r2, [pc, #348]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
 8005728:	4b55      	ldr	r3, [pc, #340]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a54      	ldr	r2, [pc, #336]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800572e:	f023 0304 	bic.w	r3, r3, #4
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fe fa20 	bl	8003b80 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005742:	e00a      	b.n	800575a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005744:	f7fe fa1c 	bl	8003b80 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e0cb      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575a:	4b49      	ldr	r3, [pc, #292]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ee      	beq.n	8005744 <HAL_RCC_OscConfig+0x334>
 8005766:	e014      	b.n	8005792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005768:	f7fe fa0a 	bl	8003b80 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fe fa06 	bl	8003b80 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0b5      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005786:	4b3e      	ldr	r3, [pc, #248]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ee      	bne.n	8005770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d105      	bne.n	80057a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005798:	4b39      	ldr	r3, [pc, #228]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	4a38      	ldr	r2, [pc, #224]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80a1 	beq.w	80058f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ae:	4b34      	ldr	r3, [pc, #208]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d05c      	beq.n	8005874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d141      	bne.n	8005846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCC_OscConfig+0x478>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fe f9da 	bl	8003b80 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fe f9d6 	bl	8003b80 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e087      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e2:	4b27      	ldr	r3, [pc, #156]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	019b      	lsls	r3, r3, #6
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	3b01      	subs	r3, #1
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	061b      	lsls	r3, r3, #24
 8005812:	491b      	ldr	r1, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_RCC_OscConfig+0x478>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581e:	f7fe f9af 	bl	8003b80 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005826:	f7fe f9ab 	bl	8003b80 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e05c      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x416>
 8005844:	e054      	b.n	80058f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_RCC_OscConfig+0x478>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fe f998 	bl	8003b80 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005854:	f7fe f994 	bl	8003b80 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e045      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_OscConfig+0x470>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x444>
 8005872:	e03d      	b.n	80058f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d107      	bne.n	800588c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e038      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
 8005880:	40023800 	.word	0x40023800
 8005884:	40007000 	.word	0x40007000
 8005888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x4ec>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d028      	beq.n	80058ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d121      	bne.n	80058ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d11a      	bne.n	80058ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058bc:	4013      	ands	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d111      	bne.n	80058ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d107      	bne.n	80058ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40023800 	.word	0x40023800

08005900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0cc      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005914:	4b68      	ldr	r3, [pc, #416]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d90c      	bls.n	800593c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b65      	ldr	r3, [pc, #404]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592a:	4b63      	ldr	r3, [pc, #396]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d001      	beq.n	800593c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0b8      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005954:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	4a58      	ldr	r2, [pc, #352]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800595e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800596c:	4b53      	ldr	r3, [pc, #332]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4a52      	ldr	r2, [pc, #328]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005978:	4b50      	ldr	r3, [pc, #320]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	494d      	ldr	r1, [pc, #308]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d044      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d107      	bne.n	80059ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599e:	4b47      	ldr	r3, [pc, #284]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d119      	bne.n	80059de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e07f      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d003      	beq.n	80059be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d107      	bne.n	80059ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059be:	4b3f      	ldr	r3, [pc, #252]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e06f      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ce:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e067      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059de:	4b37      	ldr	r3, [pc, #220]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f023 0203 	bic.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4934      	ldr	r1, [pc, #208]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f0:	f7fe f8c6 	bl	8003b80 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f6:	e00a      	b.n	8005a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f8:	f7fe f8c2 	bl	8003b80 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e04f      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	4b2b      	ldr	r3, [pc, #172]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 020c 	and.w	r2, r3, #12
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d1eb      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a20:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d20c      	bcs.n	8005a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2e:	4b22      	ldr	r3, [pc, #136]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e032      	b.n	8005aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a54:	4b19      	ldr	r3, [pc, #100]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4916      	ldr	r1, [pc, #88]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	490e      	ldr	r1, [pc, #56]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a86:	f000 f821 	bl	8005acc <HAL_RCC_GetSysClockFreq>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	490a      	ldr	r1, [pc, #40]	; (8005ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a98:	5ccb      	ldrb	r3, [r1, r3]
 8005a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fe74 	bl	8003794 <HAL_InitTick>

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40023c00 	.word	0x40023c00
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	0800fddc 	.word	0x0800fddc
 8005ac4:	20000020 	.word	0x20000020
 8005ac8:	20000024 	.word	0x20000024

08005acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad0:	b090      	sub	sp, #64	; 0x40
 8005ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005adc:	2300      	movs	r3, #0
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae4:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 030c 	and.w	r3, r3, #12
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d00d      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x40>
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	f200 80a1 	bhi.w	8005c38 <HAL_RCC_GetSysClockFreq+0x16c>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x34>
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d003      	beq.n	8005b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005afe:	e09b      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b00:	4b53      	ldr	r3, [pc, #332]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b02:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005b04:	e09b      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b06:	4b53      	ldr	r3, [pc, #332]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b0a:	e098      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b0c:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b16:	4b4d      	ldr	r3, [pc, #308]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d028      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b22:	4b4a      	ldr	r3, [pc, #296]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	2200      	movs	r2, #0
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b34:	2100      	movs	r1, #0
 8005b36:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b38:	fb03 f201 	mul.w	r2, r3, r1
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	fb00 f303 	mul.w	r3, r0, r3
 8005b42:	4413      	add	r3, r2
 8005b44:	4a43      	ldr	r2, [pc, #268]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b46:	fba0 1202 	umull	r1, r2, r0, r2
 8005b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b52:	4413      	add	r3, r2
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	2200      	movs	r2, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	61fa      	str	r2, [r7, #28]
 8005b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b66:	f7fb f88f 	bl	8000c88 <__aeabi_uldivmod>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4613      	mov	r3, r2
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b72:	e053      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b74:	4b35      	ldr	r3, [pc, #212]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	099b      	lsrs	r3, r3, #6
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	617a      	str	r2, [r7, #20]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b86:	f04f 0b00 	mov.w	fp, #0
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	f04f 0000 	mov.w	r0, #0
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	0159      	lsls	r1, r3, #5
 8005b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9c:	0150      	lsls	r0, r2, #5
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ba6:	eb63 090b 	sbc.w	r9, r3, fp
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005bb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005bba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bbe:	ebb2 0408 	subs.w	r4, r2, r8
 8005bc2:	eb63 0509 	sbc.w	r5, r3, r9
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	00eb      	lsls	r3, r5, #3
 8005bd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd4:	00e2      	lsls	r2, r4, #3
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	461d      	mov	r5, r3
 8005bda:	eb14 030a 	adds.w	r3, r4, sl
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	eb45 030b 	adc.w	r3, r5, fp
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	028b      	lsls	r3, r1, #10
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	028a      	lsls	r2, r1, #10
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c06:	2200      	movs	r2, #0
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	60fa      	str	r2, [r7, #12]
 8005c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c10:	f7fb f83a 	bl	8000c88 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	3301      	adds	r3, #1
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c36:	e002      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3740      	adds	r7, #64	; 0x40
 8005c44:	46bd      	mov	sp, r7
 8005c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	017d7840 	.word	0x017d7840

08005c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000020 	.word	0x20000020

08005c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c74:	f7ff fff0 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	0a9b      	lsrs	r3, r3, #10
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	4903      	ldr	r1, [pc, #12]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40023800 	.word	0x40023800
 8005c94:	0800fdec 	.word	0x0800fdec

08005c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c9c:	f7ff ffdc 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	0b5b      	lsrs	r3, r3, #13
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4903      	ldr	r1, [pc, #12]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	0800fdec 	.word	0x0800fdec

08005cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	220f      	movs	r2, #15
 8005cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_RCC_GetClockConfig+0x5c>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0203 	and.w	r2, r3, #3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <HAL_RCC_GetClockConfig+0x5c>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <HAL_RCC_GetClockConfig+0x5c>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCC_GetClockConfig+0x5c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	08db      	lsrs	r3, r3, #3
 8005cfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <HAL_RCC_GetClockConfig+0x60>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0207 	and.w	r2, r3, #7
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	601a      	str	r2, [r3, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40023c00 	.word	0x40023c00

08005d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e07b      	b.n	8005e2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d009      	beq.n	8005d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fd fb12 	bl	80033a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de0:	ea42 0103 	orr.w	r1, r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	f003 0104 	and.w	r1, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0210 	and.w	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08c      	sub	sp, #48	; 0x30
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e44:	2301      	movs	r3, #1
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x26>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e198      	b.n	800618e <HAL_SPI_TransmitReceive+0x358>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e64:	f7fd fe8c 	bl	8003b80 <HAL_GetTick>
 8005e68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e7a:	887b      	ldrh	r3, [r7, #2]
 8005e7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d00f      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x70>
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8c:	d107      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x68>
 8005e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d003      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ea4:	e16d      	b.n	8006182 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_SPI_TransmitReceive+0x82>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_SPI_TransmitReceive+0x82>
 8005eb2:	887b      	ldrh	r3, [r7, #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ebe:	e160      	b.n	8006182 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d003      	beq.n	8005ed4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2205      	movs	r2, #5
 8005ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	887a      	ldrh	r2, [r7, #2]
 8005eea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	887a      	ldrh	r2, [r7, #2]
 8005ef6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d007      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f30:	d17c      	bne.n	800602c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x10a>
 8005f3a:	8b7b      	ldrh	r3, [r7, #26]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d16a      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	881a      	ldrh	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f64:	e057      	b.n	8006016 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d11b      	bne.n	8005fac <HAL_SPI_TransmitReceive+0x176>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <HAL_SPI_TransmitReceive+0x176>
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d113      	bne.n	8005fac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d119      	bne.n	8005fee <HAL_SPI_TransmitReceive+0x1b8>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d014      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	b292      	uxth	r2, r2
 8005fd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	1c9a      	adds	r2, r3, #2
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fea:	2301      	movs	r3, #1
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fee:	f7fd fdc7 	bl	8003b80 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d80b      	bhi.n	8006016 <HAL_SPI_TransmitReceive+0x1e0>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d007      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006014:	e0b5      	b.n	8006182 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1a2      	bne.n	8005f66 <HAL_SPI_TransmitReceive+0x130>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d19d      	bne.n	8005f66 <HAL_SPI_TransmitReceive+0x130>
 800602a:	e080      	b.n	800612e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_SPI_TransmitReceive+0x204>
 8006034:	8b7b      	ldrh	r3, [r7, #26]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d16f      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006060:	e05b      	b.n	800611a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	d11c      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x274>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d017      	beq.n	80060aa <HAL_SPI_TransmitReceive+0x274>
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d114      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	7812      	ldrb	r2, [r2, #0]
 800608c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d119      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x2b6>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d014      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060e8:	2301      	movs	r3, #1
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060ec:	f7fd fd48 	bl	8003b80 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d803      	bhi.n	8006104 <HAL_SPI_TransmitReceive+0x2ce>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d102      	bne.n	800610a <HAL_SPI_TransmitReceive+0x2d4>
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006118:	e033      	b.n	8006182 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d19e      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x22c>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d199      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f8b8 	bl	80062a8 <SPI_EndRxTxTransaction>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800614a:	e01a      	b.n	8006182 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006178:	e003      	b.n	8006182 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800618a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800618e:	4618      	mov	r0, r3
 8006190:	3730      	adds	r7, #48	; 0x30
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a8:	f7fd fcea 	bl	8003b80 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b8:	f7fd fce2 	bl	8003b80 <HAL_GetTick>
 80061bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061be:	4b39      	ldr	r3, [pc, #228]	; (80062a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	015b      	lsls	r3, r3, #5
 80061c4:	0d1b      	lsrs	r3, r3, #20
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ce:	e054      	b.n	800627a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d050      	beq.n	800627a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d8:	f7fd fcd2 	bl	8003b80 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d902      	bls.n	80061ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d13d      	bne.n	800626a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006206:	d111      	bne.n	800622c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006210:	d004      	beq.n	800621c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621a:	d107      	bne.n	800622c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006234:	d10f      	bne.n	8006256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e017      	b.n	800629a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3b01      	subs	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	429a      	cmp	r2, r3
 8006296:	d19b      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000020 	.word	0x20000020

080062a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2201      	movs	r2, #1
 80062bc:	2102      	movs	r1, #2
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff ff6a 	bl	8006198 <SPI_WaitFlagStateUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e032      	b.n	8006340 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062da:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <SPI_EndRxTxTransaction+0xa0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1b      	ldr	r2, [pc, #108]	; (800634c <SPI_EndRxTxTransaction+0xa4>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	0d5b      	lsrs	r3, r3, #21
 80062e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f8:	d112      	bne.n	8006320 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	2180      	movs	r1, #128	; 0x80
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff ff47 	bl	8006198 <SPI_WaitFlagStateUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d016      	beq.n	800633e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006314:	f043 0220 	orr.w	r2, r3, #32
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e00f      	b.n	8006340 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	3b01      	subs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006336:	2b80      	cmp	r3, #128	; 0x80
 8006338:	d0f2      	beq.n	8006320 <SPI_EndRxTxTransaction+0x78>
 800633a:	e000      	b.n	800633e <SPI_EndRxTxTransaction+0x96>
        break;
 800633c:	bf00      	nop
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000020 	.word	0x20000020
 800634c:	165e9f81 	.word	0x165e9f81

08006350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e041      	b.n	80063e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fd f938 	bl	80035ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f000 fd96 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	d001      	beq.n	8006408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e04e      	b.n	80064a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a23      	ldr	r2, [pc, #140]	; (80064b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006432:	d01d      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x80>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a18      	ldr	r2, [pc, #96]	; (80064cc <HAL_TIM_Base_Start_IT+0xdc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d111      	bne.n	8006494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b06      	cmp	r3, #6
 8006480:	d010      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006492:	e007      	b.n	80064a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40001800 	.word	0x40001800

080064d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f839 	bl	800656e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 fcd6 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_TIM_PWM_Start+0x24>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	bf14      	ite	ne
 80065a0:	2301      	movne	r3, #1
 80065a2:	2300      	moveq	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e022      	b.n	80065ee <HAL_TIM_PWM_Start+0x6a>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d109      	bne.n	80065c2 <HAL_TIM_PWM_Start+0x3e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e015      	b.n	80065ee <HAL_TIM_PWM_Start+0x6a>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start+0x58>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e008      	b.n	80065ee <HAL_TIM_PWM_Start+0x6a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e07c      	b.n	80066f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_TIM_PWM_Start+0x82>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006604:	e013      	b.n	800662e <HAL_TIM_PWM_Start+0xaa>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d104      	bne.n	8006616 <HAL_TIM_PWM_Start+0x92>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006614:	e00b      	b.n	800662e <HAL_TIM_PWM_Start+0xaa>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d104      	bne.n	8006626 <HAL_TIM_PWM_Start+0xa2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006624:	e003      	b.n	800662e <HAL_TIM_PWM_Start+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 ff38 	bl	80074ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2d      	ldr	r2, [pc, #180]	; (80066f8 <HAL_TIM_PWM_Start+0x174>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIM_PWM_Start+0xcc>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <HAL_TIM_PWM_Start+0x178>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <HAL_TIM_PWM_Start+0xd0>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_TIM_PWM_Start+0xd2>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <HAL_TIM_PWM_Start+0x174>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d022      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667c:	d01d      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <HAL_TIM_PWM_Start+0x17c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_TIM_PWM_Start+0x180>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d013      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1c      	ldr	r2, [pc, #112]	; (8006708 <HAL_TIM_PWM_Start+0x184>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00e      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <HAL_TIM_PWM_Start+0x178>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a18      	ldr	r2, [pc, #96]	; (800670c <HAL_TIM_PWM_Start+0x188>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_TIM_PWM_Start+0x136>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <HAL_TIM_PWM_Start+0x18c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d111      	bne.n	80066de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	d010      	beq.n	80066ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	e007      	b.n	80066ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40010400 	.word	0x40010400
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40014000 	.word	0x40014000
 8006710:	40001800 	.word	0x40001800

08006714 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e097      	b.n	8006858 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7fc fe97 	bl	8003470 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006758:	f023 0307 	bic.w	r3, r3, #7
 800675c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3304      	adds	r3, #4
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f000 fba9 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	4313      	orrs	r3, r2
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067b4:	f023 030c 	bic.w	r3, r3, #12
 80067b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	4313      	orrs	r3, r2
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	011a      	lsls	r2, r3, #4
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	031b      	lsls	r3, r3, #12
 80067e4:	4313      	orrs	r3, r2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4313      	orrs	r3, r2
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006870:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006878:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006880:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006888:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d110      	bne.n	80068b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d102      	bne.n	800689c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006896:	7b7b      	ldrb	r3, [r7, #13]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d001      	beq.n	80068a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e069      	b.n	8006974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b0:	e031      	b.n	8006916 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d110      	bne.n	80068da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d102      	bne.n	80068c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068be:	7b3b      	ldrb	r3, [r7, #12]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d001      	beq.n	80068c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e055      	b.n	8006974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d8:	e01d      	b.n	8006916 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d108      	bne.n	80068f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d105      	bne.n	80068f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068e6:	7b7b      	ldrb	r3, [r7, #13]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d102      	bne.n	80068f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ec:	7b3b      	ldrb	r3, [r7, #12]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d001      	beq.n	80068f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e03e      	b.n	8006974 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_TIM_Encoder_Start+0xc4>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b04      	cmp	r3, #4
 8006920:	d008      	beq.n	8006934 <HAL_TIM_Encoder_Start+0xd4>
 8006922:	e00f      	b.n	8006944 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2201      	movs	r2, #1
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fdbd 	bl	80074ac <TIM_CCxChannelCmd>
      break;
 8006932:	e016      	b.n	8006962 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	2104      	movs	r1, #4
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fdb5 	bl	80074ac <TIM_CCxChannelCmd>
      break;
 8006942:	e00e      	b.n	8006962 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2201      	movs	r2, #1
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fdad 	bl	80074ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2201      	movs	r2, #1
 8006958:	2104      	movs	r1, #4
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fda6 	bl	80074ac <TIM_CCxChannelCmd>
      break;
 8006960:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d020      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01b      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0202 	mvn.w	r2, #2
 80069b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa5b 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa4d 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fa5e 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01b      	beq.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0204 	mvn.w	r2, #4
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa35 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa27 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa38 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d020      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0208 	mvn.w	r2, #8
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa0f 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa01 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa12 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d020      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01b      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0210 	mvn.w	r2, #16
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9e9 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9db 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9ec 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0201 	mvn.w	r2, #1
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fb fb60 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fd7c 	bl	8007604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9bd 	bl	8006eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00c      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f06f 0220 	mvn.w	r2, #32
 8006b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fd4e 	bl	80075f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e0ae      	b.n	8006cd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b0c      	cmp	r3, #12
 8006b86:	f200 809f 	bhi.w	8006cc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006bc5 	.word	0x08006bc5
 8006b94:	08006cc9 	.word	0x08006cc9
 8006b98:	08006cc9 	.word	0x08006cc9
 8006b9c:	08006cc9 	.word	0x08006cc9
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006cc9 	.word	0x08006cc9
 8006ba8:	08006cc9 	.word	0x08006cc9
 8006bac:	08006cc9 	.word	0x08006cc9
 8006bb0:	08006c47 	.word	0x08006c47
 8006bb4:	08006cc9 	.word	0x08006cc9
 8006bb8:	08006cc9 	.word	0x08006cc9
 8006bbc:	08006cc9 	.word	0x08006cc9
 8006bc0:	08006c87 	.word	0x08006c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fa24 	bl	8007018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0208 	orr.w	r2, r2, #8
 8006bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0204 	bic.w	r2, r2, #4
 8006bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6999      	ldr	r1, [r3, #24]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	619a      	str	r2, [r3, #24]
      break;
 8006c02:	e064      	b.n	8006cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fa74 	bl	80070f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6999      	ldr	r1, [r3, #24]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	021a      	lsls	r2, r3, #8
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	619a      	str	r2, [r3, #24]
      break;
 8006c44:	e043      	b.n	8006cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fac9 	bl	80071e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0208 	orr.w	r2, r2, #8
 8006c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0204 	bic.w	r2, r2, #4
 8006c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69d9      	ldr	r1, [r3, #28]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	61da      	str	r2, [r3, #28]
      break;
 8006c84:	e023      	b.n	8006cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fb1d 	bl	80072cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	021a      	lsls	r2, r3, #8
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	61da      	str	r2, [r3, #28]
      break;
 8006cc6:	e002      	b.n	8006cce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ccc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIM_ConfigClockSource+0x1c>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e0b4      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x186>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d34:	d03e      	beq.n	8006db4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	f200 8087 	bhi.w	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d42:	f000 8086 	beq.w	8006e52 <HAL_TIM_ConfigClockSource+0x172>
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	d87f      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d4c:	2b70      	cmp	r3, #112	; 0x70
 8006d4e:	d01a      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0xa6>
 8006d50:	2b70      	cmp	r3, #112	; 0x70
 8006d52:	d87b      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d54:	2b60      	cmp	r3, #96	; 0x60
 8006d56:	d050      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x11a>
 8006d58:	2b60      	cmp	r3, #96	; 0x60
 8006d5a:	d877      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d5c:	2b50      	cmp	r3, #80	; 0x50
 8006d5e:	d03c      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0xfa>
 8006d60:	2b50      	cmp	r3, #80	; 0x50
 8006d62:	d873      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d058      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x13a>
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d86f      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d6c:	2b30      	cmp	r3, #48	; 0x30
 8006d6e:	d064      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x15a>
 8006d70:	2b30      	cmp	r3, #48	; 0x30
 8006d72:	d86b      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d060      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x15a>
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d867      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d05c      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x15a>
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d05a      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x15a>
 8006d84:	e062      	b.n	8006e4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d96:	f000 fb69 	bl	800746c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	609a      	str	r2, [r3, #8]
      break;
 8006db2:	e04f      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dc4:	f000 fb52 	bl	800746c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dd6:	609a      	str	r2, [r3, #8]
      break;
 8006dd8:	e03c      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de6:	461a      	mov	r2, r3
 8006de8:	f000 fac6 	bl	8007378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2150      	movs	r1, #80	; 0x50
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fb1f 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006df8:	e02c      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e06:	461a      	mov	r2, r3
 8006e08:	f000 fae5 	bl	80073d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2160      	movs	r1, #96	; 0x60
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fb0f 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006e18:	e01c      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e26:	461a      	mov	r2, r3
 8006e28:	f000 faa6 	bl	8007378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2140      	movs	r1, #64	; 0x40
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 faff 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006e38:	e00c      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f000 faf6 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006e4a:	e003      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e50:	e000      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a46      	ldr	r2, [pc, #280]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a43      	ldr	r2, [pc, #268]	; (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a42      	ldr	r2, [pc, #264]	; (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a41      	ldr	r2, [pc, #260]	; (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a40      	ldr	r2, [pc, #256]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a35      	ldr	r2, [pc, #212]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f20:	d027      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a32      	ldr	r2, [pc, #200]	; (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d023      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2f      	ldr	r2, [pc, #188]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d017      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2e      	ldr	r2, [pc, #184]	; (8007000 <TIM_Base_SetConfig+0x140>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <TIM_Base_SetConfig+0x144>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <TIM_Base_SetConfig+0x148>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a2b      	ldr	r2, [pc, #172]	; (800700c <TIM_Base_SetConfig+0x14c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a2a      	ldr	r2, [pc, #168]	; (8007010 <TIM_Base_SetConfig+0x150>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a29      	ldr	r2, [pc, #164]	; (8007014 <TIM_Base_SetConfig+0x154>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a10      	ldr	r2, [pc, #64]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d105      	bne.n	8006fde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f023 0201 	bic.w	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	611a      	str	r2, [r3, #16]
  }
}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800
 8006ff8:	40000c00 	.word	0x40000c00
 8006ffc:	40010400 	.word	0x40010400
 8007000:	40014000 	.word	0x40014000
 8007004:	40014400 	.word	0x40014400
 8007008:	40014800 	.word	0x40014800
 800700c:	40001800 	.word	0x40001800
 8007010:	40001c00 	.word	0x40001c00
 8007014:	40002000 	.word	0x40002000

08007018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f023 0201 	bic.w	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f023 0302 	bic.w	r3, r3, #2
 8007060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a20      	ldr	r2, [pc, #128]	; (80070f0 <TIM_OC1_SetConfig+0xd8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC1_SetConfig+0x64>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <TIM_OC1_SetConfig+0xdc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d10c      	bne.n	8007096 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f023 0308 	bic.w	r3, r3, #8
 8007082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f023 0304 	bic.w	r3, r3, #4
 8007094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a15      	ldr	r2, [pc, #84]	; (80070f0 <TIM_OC1_SetConfig+0xd8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC1_SetConfig+0x8e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <TIM_OC1_SetConfig+0xdc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d111      	bne.n	80070ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40010000 	.word	0x40010000
 80070f4:	40010400 	.word	0x40010400

080070f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f023 0210 	bic.w	r2, r3, #16
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f023 0320 	bic.w	r3, r3, #32
 8007142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a22      	ldr	r2, [pc, #136]	; (80071dc <TIM_OC2_SetConfig+0xe4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_OC2_SetConfig+0x68>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a21      	ldr	r2, [pc, #132]	; (80071e0 <TIM_OC2_SetConfig+0xe8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d10d      	bne.n	800717c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a17      	ldr	r2, [pc, #92]	; (80071dc <TIM_OC2_SetConfig+0xe4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_OC2_SetConfig+0x94>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a16      	ldr	r2, [pc, #88]	; (80071e0 <TIM_OC2_SetConfig+0xe8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d113      	bne.n	80071b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800719a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400

080071e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800722c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a21      	ldr	r2, [pc, #132]	; (80072c4 <TIM_OC3_SetConfig+0xe0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_OC3_SetConfig+0x66>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <TIM_OC3_SetConfig+0xe4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d10d      	bne.n	8007266 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <TIM_OC3_SetConfig+0xe0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d003      	beq.n	8007276 <TIM_OC3_SetConfig+0x92>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <TIM_OC3_SetConfig+0xe4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d113      	bne.n	800729e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800727c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	621a      	str	r2, [r3, #32]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40010000 	.word	0x40010000
 80072c8:	40010400 	.word	0x40010400

080072cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	031b      	lsls	r3, r3, #12
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <TIM_OC4_SetConfig+0xa4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_OC4_SetConfig+0x68>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a11      	ldr	r2, [pc, #68]	; (8007374 <TIM_OC4_SetConfig+0xa8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d109      	bne.n	8007348 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400

08007378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0201 	bic.w	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f023 030a 	bic.w	r3, r3, #10
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	621a      	str	r2, [r3, #32]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b087      	sub	sp, #28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0210 	bic.w	r2, r3, #16
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	031b      	lsls	r3, r3, #12
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007412:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	f043 0307 	orr.w	r3, r3, #7
 8007458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	431a      	orrs	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4313      	orrs	r3, r2
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	401a      	ands	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1a      	ldr	r2, [r3, #32]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e05a      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d01d      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40010400 	.word	0x40010400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40001800 	.word	0x40001800

080075f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <__NVIC_SetPriority>:
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	6039      	str	r1, [r7, #0]
 8007622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007628:	2b00      	cmp	r3, #0
 800762a:	db0a      	blt.n	8007642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	b2da      	uxtb	r2, r3
 8007630:	490c      	ldr	r1, [pc, #48]	; (8007664 <__NVIC_SetPriority+0x4c>)
 8007632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007636:	0112      	lsls	r2, r2, #4
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	440b      	add	r3, r1
 800763c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007640:	e00a      	b.n	8007658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	b2da      	uxtb	r2, r3
 8007646:	4908      	ldr	r1, [pc, #32]	; (8007668 <__NVIC_SetPriority+0x50>)
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	3b04      	subs	r3, #4
 8007650:	0112      	lsls	r2, r2, #4
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	440b      	add	r3, r1
 8007656:	761a      	strb	r2, [r3, #24]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	e000e100 	.word	0xe000e100
 8007668:	e000ed00 	.word	0xe000ed00

0800766c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <SysTick_Handler+0x1c>)
 8007672:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007674:	f001 fcfe 	bl	8009074 <xTaskGetSchedulerState>
 8007678:	4603      	mov	r3, r0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d001      	beq.n	8007682 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800767e:	f002 fae3 	bl	8009c48 <xPortSysTickHandler>
  }
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	e000e010 	.word	0xe000e010

0800768c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007690:	2100      	movs	r1, #0
 8007692:	f06f 0004 	mvn.w	r0, #4
 8007696:	f7ff ffbf 	bl	8007618 <__NVIC_SetPriority>
#endif
}
 800769a:	bf00      	nop
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a6:	f3ef 8305 	mrs	r3, IPSR
 80076aa:	603b      	str	r3, [r7, #0]
  return(result);
 80076ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076b2:	f06f 0305 	mvn.w	r3, #5
 80076b6:	607b      	str	r3, [r7, #4]
 80076b8:	e00c      	b.n	80076d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <osKernelInitialize+0x44>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d105      	bne.n	80076ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <osKernelInitialize+0x44>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	e002      	b.n	80076d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076d4:	687b      	ldr	r3, [r7, #4]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000618 	.word	0x20000618

080076e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ee:	f3ef 8305 	mrs	r3, IPSR
 80076f2:	603b      	str	r3, [r7, #0]
  return(result);
 80076f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076fa:	f06f 0305 	mvn.w	r3, #5
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	e010      	b.n	8007724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <osKernelStart+0x48>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d109      	bne.n	800771e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800770a:	f7ff ffbf 	bl	800768c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800770e:	4b08      	ldr	r3, [pc, #32]	; (8007730 <osKernelStart+0x48>)
 8007710:	2202      	movs	r2, #2
 8007712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007714:	f001 f866 	bl	80087e4 <vTaskStartScheduler>
      stat = osOK;
 8007718:	2300      	movs	r3, #0
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	e002      	b.n	8007724 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007724:	687b      	ldr	r3, [r7, #4]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000618 	.word	0x20000618

08007734 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b08e      	sub	sp, #56	; 0x38
 8007738:	af04      	add	r7, sp, #16
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007744:	f3ef 8305 	mrs	r3, IPSR
 8007748:	617b      	str	r3, [r7, #20]
  return(result);
 800774a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800774c:	2b00      	cmp	r3, #0
 800774e:	d17e      	bne.n	800784e <osThreadNew+0x11a>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d07b      	beq.n	800784e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007756:	2380      	movs	r3, #128	; 0x80
 8007758:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800775a:	2318      	movs	r3, #24
 800775c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007762:	f04f 33ff 	mov.w	r3, #4294967295
 8007766:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d045      	beq.n	80077fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <osThreadNew+0x48>
        name = attr->name;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <osThreadNew+0x6e>
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2b38      	cmp	r3, #56	; 0x38
 8007794:	d805      	bhi.n	80077a2 <osThreadNew+0x6e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <osThreadNew+0x72>
        return (NULL);
 80077a2:	2300      	movs	r3, #0
 80077a4:	e054      	b.n	8007850 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <osThreadNew+0xa8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b5b      	cmp	r3, #91	; 0x5b
 80077c4:	d90a      	bls.n	80077dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <osThreadNew+0xa8>
        mem = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	e010      	b.n	80077fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <osThreadNew+0xca>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d108      	bne.n	80077fe <osThreadNew+0xca>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <osThreadNew+0xca>
          mem = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	e001      	b.n	80077fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d110      	bne.n	8007826 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800780c:	9202      	str	r2, [sp, #8]
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fe0c 	bl	8008438 <xTaskCreateStatic>
 8007820:	4603      	mov	r3, r0
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	e013      	b.n	800784e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d110      	bne.n	800784e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	b29a      	uxth	r2, r3
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fe57 	bl	80084f2 <xTaskCreate>
 8007844:	4603      	mov	r3, r0
 8007846:	2b01      	cmp	r3, #1
 8007848:	d001      	beq.n	800784e <osThreadNew+0x11a>
            hTask = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800784e:	693b      	ldr	r3, [r7, #16]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3728      	adds	r7, #40	; 0x28
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007860:	f3ef 8305 	mrs	r3, IPSR
 8007864:	60bb      	str	r3, [r7, #8]
  return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <osDelay+0x1c>
    stat = osErrorISR;
 800786c:	f06f 0305 	mvn.w	r3, #5
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e007      	b.n	8007884 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <osDelay+0x2c>
      vTaskDelay(ticks);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 ff7c 	bl	800877c <vTaskDelay>
    }
  }

  return (stat);
 8007884:	68fb      	ldr	r3, [r7, #12]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a07      	ldr	r2, [pc, #28]	; (80078bc <vApplicationGetIdleTaskMemory+0x2c>)
 80078a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a06      	ldr	r2, [pc, #24]	; (80078c0 <vApplicationGetIdleTaskMemory+0x30>)
 80078a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2280      	movs	r2, #128	; 0x80
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	2000061c 	.word	0x2000061c
 80078c0:	20000678 	.word	0x20000678

080078c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a07      	ldr	r2, [pc, #28]	; (80078f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80078d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a06      	ldr	r2, [pc, #24]	; (80078f4 <vApplicationGetTimerTaskMemory+0x30>)
 80078da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	20000878 	.word	0x20000878
 80078f4:	200008d4 	.word	0x200008d4

080078f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f103 0208 	add.w	r2, r3, #8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f103 0208 	add.w	r2, r3, #8
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0208 	add.w	r2, r3, #8
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b0:	d103      	bne.n	80079ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e00c      	b.n	80079d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3308      	adds	r3, #8
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e002      	b.n	80079c8 <vListInsert+0x2e>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d2f6      	bcs.n	80079c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6892      	ldr	r2, [r2, #8]
 8007a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6852      	ldr	r2, [r2, #4]
 8007a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d103      	bne.n	8007a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a8a:	f002 f84b 	bl	8009b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	441a      	add	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aba:	3b01      	subs	r3, #1
 8007abc:	68f9      	ldr	r1, [r7, #12]
 8007abe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	441a      	add	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	22ff      	movs	r2, #255	; 0xff
 8007ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	22ff      	movs	r2, #255	; 0xff
 8007ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d114      	bne.n	8007b0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01a      	beq.n	8007b1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3310      	adds	r3, #16
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f903 	bl	8008cf8 <xTaskRemoveFromEventList>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d012      	beq.n	8007b1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <xQueueGenericReset+0xcc>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	e009      	b.n	8007b1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fef2 	bl	80078f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3324      	adds	r3, #36	; 0x24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff feed 	bl	80078f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b1e:	f002 f831 	bl	8009b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b22:	2301      	movs	r3, #1
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08e      	sub	sp, #56	; 0x38
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <xQueueGenericCreateStatic+0x52>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <xQueueGenericCreateStatic+0x56>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <xQueueGenericCreateStatic+0x58>
 8007b86:	2300      	movs	r3, #0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	623b      	str	r3, [r7, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <xQueueGenericCreateStatic+0x7e>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <xQueueGenericCreateStatic+0x82>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueGenericCreateStatic+0x84>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	61fb      	str	r3, [r7, #28]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bce:	2350      	movs	r3, #80	; 0x50
 8007bd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b50      	cmp	r3, #80	; 0x50
 8007bd6:	d00a      	beq.n	8007bee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61bb      	str	r3, [r7, #24]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00d      	beq.n	8007c16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f805 	bl	8007c20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3730      	adds	r7, #48	; 0x30
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d103      	bne.n	8007c3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c4e:	2101      	movs	r1, #1
 8007c50:	69b8      	ldr	r0, [r7, #24]
 8007c52:	f7ff ff05 	bl	8007a60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08e      	sub	sp, #56	; 0x38
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c76:	2300      	movs	r3, #0
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xQueueGenericSend+0x32>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <xQueueGenericSend+0x40>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <xQueueGenericSend+0x44>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e000      	b.n	8007cae <xQueueGenericSend+0x46>
 8007cac:	2300      	movs	r3, #0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <xQueueGenericSend+0x60>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d103      	bne.n	8007cd6 <xQueueGenericSend+0x6e>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <xQueueGenericSend+0x72>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueGenericSend+0x74>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	623b      	str	r3, [r7, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cf6:	f001 f9bd 	bl	8009074 <xTaskGetSchedulerState>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <xQueueGenericSend+0x9e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <xQueueGenericSend+0xa2>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueGenericSend+0xa4>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	61fb      	str	r3, [r7, #28]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d26:	f001 fefd 	bl	8009b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <xQueueGenericSend+0xd4>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d129      	bne.n	8007d90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d42:	f000 fa0b 	bl	800815c <prvCopyDataToQueue>
 8007d46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d010      	beq.n	8007d72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	3324      	adds	r3, #36	; 0x24
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 ffcf 	bl	8008cf8 <xTaskRemoveFromEventList>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d013      	beq.n	8007d88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d60:	4b3f      	ldr	r3, [pc, #252]	; (8007e60 <xQueueGenericSend+0x1f8>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	e00a      	b.n	8007d88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d78:	4b39      	ldr	r3, [pc, #228]	; (8007e60 <xQueueGenericSend+0x1f8>)
 8007d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d88:	f001 fefc 	bl	8009b84 <vPortExitCritical>
				return pdPASS;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e063      	b.n	8007e58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d103      	bne.n	8007d9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d96:	f001 fef5 	bl	8009b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e05c      	b.n	8007e58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 f809 	bl	8008dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dae:	2301      	movs	r3, #1
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007db2:	f001 fee7 	bl	8009b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007db6:	f000 fd7b 	bl	80088b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dba:	f001 feb3 	bl	8009b24 <vPortEnterCritical>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dc4:	b25b      	sxtb	r3, r3
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dca:	d103      	bne.n	8007dd4 <xQueueGenericSend+0x16c>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dda:	b25b      	sxtb	r3, r3
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d103      	bne.n	8007dea <xQueueGenericSend+0x182>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dea:	f001 fecb 	bl	8009b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dee:	1d3a      	adds	r2, r7, #4
 8007df0:	f107 0314 	add.w	r3, r7, #20
 8007df4:	4611      	mov	r1, r2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fff8 	bl	8008dec <xTaskCheckForTimeOut>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d124      	bne.n	8007e4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e04:	f000 faa2 	bl	800834c <prvIsQueueFull>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d018      	beq.n	8007e40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	3310      	adds	r3, #16
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 ff1e 	bl	8008c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e1e:	f000 fa2d 	bl	800827c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e22:	f000 fd53 	bl	80088cc <xTaskResumeAll>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f47f af7c 	bne.w	8007d26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <xQueueGenericSend+0x1f8>)
 8007e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	e772      	b.n	8007d26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e42:	f000 fa1b 	bl	800827c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e46:	f000 fd41 	bl	80088cc <xTaskResumeAll>
 8007e4a:	e76c      	b.n	8007d26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e4e:	f000 fa15 	bl	800827c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e52:	f000 fd3b 	bl	80088cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3738      	adds	r7, #56	; 0x38
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	e000ed04 	.word	0xe000ed04

08007e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b090      	sub	sp, #64	; 0x40
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <xQueueGenericSendFromISR+0x3c>
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <xQueueGenericSendFromISR+0x40>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <xQueueGenericSendFromISR+0x42>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d103      	bne.n	8007ece <xQueueGenericSendFromISR+0x6a>
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSendFromISR+0x6e>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSendFromISR+0x70>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eee:	f001 fefb 	bl	8009ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ef2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	61fa      	str	r2, [r7, #28]
 8007f08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d302      	bcc.n	8007f20 <xQueueGenericSendFromISR+0xbc>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d12f      	bne.n	8007f80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f36:	f000 f911 	bl	800815c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d112      	bne.n	8007f6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d016      	beq.n	8007f7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	3324      	adds	r3, #36	; 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fed1 	bl	8008cf8 <xTaskRemoveFromEventList>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00e      	beq.n	8007f7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e007      	b.n	8007f7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f6e:	3301      	adds	r3, #1
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	b25a      	sxtb	r2, r3
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f7e:	e001      	b.n	8007f84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3740      	adds	r7, #64	; 0x40
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08c      	sub	sp, #48	; 0x30
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <xQueueReceive+0x30>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	623b      	str	r3, [r7, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <xQueueReceive+0x3e>
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <xQueueReceive+0x42>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <xQueueReceive+0x44>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <xQueueReceive+0x5e>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	61fb      	str	r3, [r7, #28]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ffa:	f001 f83b 	bl	8009074 <xTaskGetSchedulerState>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <xQueueReceive+0x6e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <xQueueReceive+0x72>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <xQueueReceive+0x74>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueReceive+0x8e>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61bb      	str	r3, [r7, #24]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800802a:	f001 fd7b 	bl	8009b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01f      	beq.n	800807a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803e:	f000 f8f7 	bl	8008230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	1e5a      	subs	r2, r3, #1
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00f      	beq.n	8008072 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	3310      	adds	r3, #16
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fe4e 	bl	8008cf8 <xTaskRemoveFromEventList>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008062:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <xQueueReceive+0x1bc>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008072:	f001 fd87 	bl	8009b84 <vPortExitCritical>
				return pdPASS;
 8008076:	2301      	movs	r3, #1
 8008078:	e069      	b.n	800814e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d103      	bne.n	8008088 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008080:	f001 fd80 	bl	8009b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008084:	2300      	movs	r3, #0
 8008086:	e062      	b.n	800814e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800808e:	f107 0310 	add.w	r3, r7, #16
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fe94 	bl	8008dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800809c:	f001 fd72 	bl	8009b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080a0:	f000 fc06 	bl	80088b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080a4:	f001 fd3e 	bl	8009b24 <vPortEnterCritical>
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d103      	bne.n	80080be <xQueueReceive+0x122>
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d103      	bne.n	80080d4 <xQueueReceive+0x138>
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d4:	f001 fd56 	bl	8009b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080d8:	1d3a      	adds	r2, r7, #4
 80080da:	f107 0310 	add.w	r3, r7, #16
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fe83 	bl	8008dec <xTaskCheckForTimeOut>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d123      	bne.n	8008134 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ee:	f000 f917 	bl	8008320 <prvIsQueueEmpty>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d017      	beq.n	8008128 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	4611      	mov	r1, r2
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fda9 	bl	8008c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008108:	f000 f8b8 	bl	800827c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800810c:	f000 fbde 	bl	80088cc <xTaskResumeAll>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d189      	bne.n	800802a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008116:	4b10      	ldr	r3, [pc, #64]	; (8008158 <xQueueReceive+0x1bc>)
 8008118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	e780      	b.n	800802a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f000 f8a7 	bl	800827c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800812e:	f000 fbcd 	bl	80088cc <xTaskResumeAll>
 8008132:	e77a      	b.n	800802a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008136:	f000 f8a1 	bl	800827c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800813a:	f000 fbc7 	bl	80088cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800813e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008140:	f000 f8ee 	bl	8008320 <prvIsQueueEmpty>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	f43f af6f 	beq.w	800802a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800814c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800814e:	4618      	mov	r0, r3
 8008150:	3730      	adds	r7, #48	; 0x30
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10d      	bne.n	8008196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d14d      	bne.n	800821e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 ff92 	bl	80090b0 <xTaskPriorityDisinherit>
 800818c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	609a      	str	r2, [r3, #8]
 8008194:	e043      	b.n	800821e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d119      	bne.n	80081d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6858      	ldr	r0, [r3, #4]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	461a      	mov	r2, r3
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	f002 ffe3 	bl	800b172 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	441a      	add	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d32b      	bcc.n	800821e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	e026      	b.n	800821e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68d8      	ldr	r0, [r3, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	461a      	mov	r2, r3
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	f002 ffc9 	bl	800b172 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	425b      	negs	r3, r3
 80081ea:	441a      	add	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d207      	bcs.n	800820c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	425b      	negs	r3, r3
 8008206:	441a      	add	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d105      	bne.n	800821e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3b01      	subs	r3, #1
 800821c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d018      	beq.n	8008274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	441a      	add	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	429a      	cmp	r2, r3
 800825a:	d303      	bcc.n	8008264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68d9      	ldr	r1, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	461a      	mov	r2, r3
 800826e:	6838      	ldr	r0, [r7, #0]
 8008270:	f002 ff7f 	bl	800b172 <memcpy>
	}
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008284:	f001 fc4e 	bl	8009b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800828e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008290:	e011      	b.n	80082b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d012      	beq.n	80082c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3324      	adds	r3, #36	; 0x24
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fd2a 	bl	8008cf8 <xTaskRemoveFromEventList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082aa:	f000 fe01 	bl	8008eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dce9      	bgt.n	8008292 <prvUnlockQueue+0x16>
 80082be:	e000      	b.n	80082c2 <prvUnlockQueue+0x46>
					break;
 80082c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	22ff      	movs	r2, #255	; 0xff
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082ca:	f001 fc5b 	bl	8009b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082ce:	f001 fc29 	bl	8009b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082da:	e011      	b.n	8008300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d012      	beq.n	800830a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3310      	adds	r3, #16
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fd05 	bl	8008cf8 <xTaskRemoveFromEventList>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082f4:	f000 fddc 	bl	8008eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dce9      	bgt.n	80082dc <prvUnlockQueue+0x60>
 8008308:	e000      	b.n	800830c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800830a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	22ff      	movs	r2, #255	; 0xff
 8008310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008314:	f001 fc36 	bl	8009b84 <vPortExitCritical>
}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008328:	f001 fbfc 	bl	8009b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e001      	b.n	800833e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800833e:	f001 fc21 	bl	8009b84 <vPortExitCritical>

	return xReturn;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008354:	f001 fbe6 	bl	8009b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008360:	429a      	cmp	r2, r3
 8008362:	d102      	bne.n	800836a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e001      	b.n	800836e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f001 fc09 	bl	8009b84 <vPortExitCritical>

	return xReturn;
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	e014      	b.n	80083b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800838c:	4a0f      	ldr	r2, [pc, #60]	; (80083cc <vQueueAddToRegistry+0x50>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008398:	490c      	ldr	r1, [pc, #48]	; (80083cc <vQueueAddToRegistry+0x50>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083a2:	4a0a      	ldr	r2, [pc, #40]	; (80083cc <vQueueAddToRegistry+0x50>)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ae:	e006      	b.n	80083be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b07      	cmp	r3, #7
 80083ba:	d9e7      	bls.n	800838c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000cd4 	.word	0x20000cd4

080083d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083e0:	f001 fba0 	bl	8009b24 <vPortEnterCritical>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ea:	b25b      	sxtb	r3, r3
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f0:	d103      	bne.n	80083fa <vQueueWaitForMessageRestricted+0x2a>
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008400:	b25b      	sxtb	r3, r3
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d103      	bne.n	8008410 <vQueueWaitForMessageRestricted+0x40>
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008410:	f001 fbb8 	bl	8009b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	3324      	adds	r3, #36	; 0x24
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fc3b 	bl	8008ca0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800842a:	6978      	ldr	r0, [r7, #20]
 800842c:	f7ff ff26 	bl	800827c <prvUnlockQueue>
	}
 8008430:	bf00      	nop
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08e      	sub	sp, #56	; 0x38
 800843c:	af04      	add	r7, sp, #16
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xTaskCreateStatic+0x2a>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	623b      	str	r3, [r7, #32]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xTaskCreateStatic+0x46>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61fb      	str	r3, [r7, #28]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800847e:	235c      	movs	r3, #92	; 0x5c
 8008480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b5c      	cmp	r3, #92	; 0x5c
 8008486:	d00a      	beq.n	800849e <xTaskCreateStatic+0x66>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	61bb      	str	r3, [r7, #24]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800849e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01e      	beq.n	80084e4 <xTaskCreateStatic+0xac>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01b      	beq.n	80084e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084be:	2300      	movs	r3, #0
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 f850 	bl	800857c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084de:	f000 f8dd 	bl	800869c <prvAddNewTaskToReadyList>
 80084e2:	e001      	b.n	80084e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084e8:	697b      	ldr	r3, [r7, #20]
	}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3728      	adds	r7, #40	; 0x28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b08c      	sub	sp, #48	; 0x30
 80084f6:	af04      	add	r7, sp, #16
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fc2e 	bl	8009d68 <pvPortMalloc>
 800850c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008514:	205c      	movs	r0, #92	; 0x5c
 8008516:	f001 fc27 	bl	8009d68 <pvPortMalloc>
 800851a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
 8008528:	e005      	b.n	8008536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f001 fce8 	bl	8009f00 <vPortFree>
 8008530:	e001      	b.n	8008536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	2300      	movs	r3, #0
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f80e 	bl	800857c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008560:	69f8      	ldr	r0, [r7, #28]
 8008562:	f000 f89b 	bl	800869c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008566:	2301      	movs	r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	e002      	b.n	8008572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800856c:	f04f 33ff 	mov.w	r3, #4294967295
 8008570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008572:	69bb      	ldr	r3, [r7, #24]
	}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	461a      	mov	r2, r3
 8008594:	21a5      	movs	r1, #165	; 0xa5
 8008596:	f002 fd6c 	bl	800b072 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085a4:	3b01      	subs	r3, #1
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	617b      	str	r3, [r7, #20]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d01f      	beq.n	800861a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	e012      	b.n	8008606 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	7819      	ldrb	r1, [r3, #0]
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	3334      	adds	r3, #52	; 0x34
 80085f0:	460a      	mov	r2, r1
 80085f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	3301      	adds	r3, #1
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	2b0f      	cmp	r3, #15
 800860a:	d9e9      	bls.n	80085e0 <prvInitialiseNewTask+0x64>
 800860c:	e000      	b.n	8008610 <prvInitialiseNewTask+0x94>
			{
				break;
 800860e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008618:	e003      	b.n	8008622 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	2b37      	cmp	r3, #55	; 0x37
 8008626:	d901      	bls.n	800862c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008628:	2337      	movs	r3, #55	; 0x37
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2200      	movs	r2, #0
 800863c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff f978 	bl	8007938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	3318      	adds	r3, #24
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff f973 	bl	8007938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2200      	movs	r2, #0
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	69b8      	ldr	r0, [r7, #24]
 800867c:	f001 f928 	bl	80098d0 <pxPortInitialiseStack>
 8008680:	4602      	mov	r2, r0
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008692:	bf00      	nop
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086a4:	f001 fa3e 	bl	8009b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086a8:	4b2d      	ldr	r3, [pc, #180]	; (8008760 <prvAddNewTaskToReadyList+0xc4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3301      	adds	r3, #1
 80086ae:	4a2c      	ldr	r2, [pc, #176]	; (8008760 <prvAddNewTaskToReadyList+0xc4>)
 80086b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086b2:	4b2c      	ldr	r3, [pc, #176]	; (8008764 <prvAddNewTaskToReadyList+0xc8>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d109      	bne.n	80086ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086ba:	4a2a      	ldr	r2, [pc, #168]	; (8008764 <prvAddNewTaskToReadyList+0xc8>)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086c0:	4b27      	ldr	r3, [pc, #156]	; (8008760 <prvAddNewTaskToReadyList+0xc4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d110      	bne.n	80086ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086c8:	f000 fc16 	bl	8008ef8 <prvInitialiseTaskLists>
 80086cc:	e00d      	b.n	80086ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086ce:	4b26      	ldr	r3, [pc, #152]	; (8008768 <prvAddNewTaskToReadyList+0xcc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086d6:	4b23      	ldr	r3, [pc, #140]	; (8008764 <prvAddNewTaskToReadyList+0xc8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d802      	bhi.n	80086ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086e4:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <prvAddNewTaskToReadyList+0xc8>)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ea:	4b20      	ldr	r3, [pc, #128]	; (800876c <prvAddNewTaskToReadyList+0xd0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	4a1e      	ldr	r2, [pc, #120]	; (800876c <prvAddNewTaskToReadyList+0xd0>)
 80086f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086f4:	4b1d      	ldr	r3, [pc, #116]	; (800876c <prvAddNewTaskToReadyList+0xd0>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <prvAddNewTaskToReadyList+0xd4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <prvAddNewTaskToReadyList+0x74>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	4a18      	ldr	r2, [pc, #96]	; (8008770 <prvAddNewTaskToReadyList+0xd4>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <prvAddNewTaskToReadyList+0xd8>)
 800871e:	441a      	add	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7ff f913 	bl	8007952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800872c:	f001 fa2a 	bl	8009b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008730:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <prvAddNewTaskToReadyList+0xcc>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00e      	beq.n	8008756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <prvAddNewTaskToReadyList+0xc8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	429a      	cmp	r2, r3
 8008744:	d207      	bcs.n	8008756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvAddNewTaskToReadyList+0xdc>)
 8008748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200011e8 	.word	0x200011e8
 8008764:	20000d14 	.word	0x20000d14
 8008768:	200011f4 	.word	0x200011f4
 800876c:	20001204 	.word	0x20001204
 8008770:	200011f0 	.word	0x200011f0
 8008774:	20000d18 	.word	0x20000d18
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d017      	beq.n	80087be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <vTaskDelay+0x60>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <vTaskDelay+0x30>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	60bb      	str	r3, [r7, #8]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087ac:	f000 f880 	bl	80088b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087b0:	2100      	movs	r1, #0
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fcea 	bl	800918c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087b8:	f000 f888 	bl	80088cc <xTaskResumeAll>
 80087bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d107      	bne.n	80087d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087c4:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <vTaskDelay+0x64>)
 80087c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20001210 	.word	0x20001210
 80087e0:	e000ed04 	.word	0xe000ed04

080087e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08a      	sub	sp, #40	; 0x28
 80087e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087f2:	463a      	mov	r2, r7
 80087f4:	1d39      	adds	r1, r7, #4
 80087f6:	f107 0308 	add.w	r3, r7, #8
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f848 	bl	8007890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	9202      	str	r2, [sp, #8]
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	2300      	movs	r3, #0
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	460a      	mov	r2, r1
 8008812:	4921      	ldr	r1, [pc, #132]	; (8008898 <vTaskStartScheduler+0xb4>)
 8008814:	4821      	ldr	r0, [pc, #132]	; (800889c <vTaskStartScheduler+0xb8>)
 8008816:	f7ff fe0f 	bl	8008438 <xTaskCreateStatic>
 800881a:	4603      	mov	r3, r0
 800881c:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <vTaskStartScheduler+0xbc>)
 800881e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008820:	4b1f      	ldr	r3, [pc, #124]	; (80088a0 <vTaskStartScheduler+0xbc>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e001      	b.n	8008832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d102      	bne.n	800883e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008838:	f000 fcfc 	bl	8009234 <xTimerCreateTimerTask>
 800883c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d116      	bne.n	8008872 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	613b      	str	r3, [r7, #16]
}
 8008856:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008858:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <vTaskStartScheduler+0xc0>)
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008860:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <vTaskStartScheduler+0xc4>)
 8008862:	2201      	movs	r2, #1
 8008864:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008866:	4b11      	ldr	r3, [pc, #68]	; (80088ac <vTaskStartScheduler+0xc8>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800886c:	f001 f8b8 	bl	80099e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008870:	e00e      	b.n	8008890 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d10a      	bne.n	8008890 <vTaskStartScheduler+0xac>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	60fb      	str	r3, [r7, #12]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <vTaskStartScheduler+0xaa>
}
 8008890:	bf00      	nop
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	0800fd7c 	.word	0x0800fd7c
 800889c:	08008ec9 	.word	0x08008ec9
 80088a0:	2000120c 	.word	0x2000120c
 80088a4:	20001208 	.word	0x20001208
 80088a8:	200011f4 	.word	0x200011f4
 80088ac:	200011ec 	.word	0x200011ec

080088b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <vTaskSuspendAll+0x18>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3301      	adds	r3, #1
 80088ba:	4a03      	ldr	r2, [pc, #12]	; (80088c8 <vTaskSuspendAll+0x18>)
 80088bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088be:	bf00      	nop
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	20001210 	.word	0x20001210

080088cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088da:	4b42      	ldr	r3, [pc, #264]	; (80089e4 <xTaskResumeAll+0x118>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	603b      	str	r3, [r7, #0]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088f8:	f001 f914 	bl	8009b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088fc:	4b39      	ldr	r3, [pc, #228]	; (80089e4 <xTaskResumeAll+0x118>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3b01      	subs	r3, #1
 8008902:	4a38      	ldr	r2, [pc, #224]	; (80089e4 <xTaskResumeAll+0x118>)
 8008904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008906:	4b37      	ldr	r3, [pc, #220]	; (80089e4 <xTaskResumeAll+0x118>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d162      	bne.n	80089d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <xTaskResumeAll+0x11c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d05e      	beq.n	80089d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008916:	e02f      	b.n	8008978 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008918:	4b34      	ldr	r3, [pc, #208]	; (80089ec <xTaskResumeAll+0x120>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3318      	adds	r3, #24
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff f871 	bl	8007a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3304      	adds	r3, #4
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f86c 	bl	8007a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008938:	4b2d      	ldr	r3, [pc, #180]	; (80089f0 <xTaskResumeAll+0x124>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	429a      	cmp	r2, r3
 800893e:	d903      	bls.n	8008948 <xTaskResumeAll+0x7c>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	4a2a      	ldr	r2, [pc, #168]	; (80089f0 <xTaskResumeAll+0x124>)
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4a27      	ldr	r2, [pc, #156]	; (80089f4 <xTaskResumeAll+0x128>)
 8008956:	441a      	add	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3304      	adds	r3, #4
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f7fe fff7 	bl	8007952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	4b23      	ldr	r3, [pc, #140]	; (80089f8 <xTaskResumeAll+0x12c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	429a      	cmp	r2, r3
 8008970:	d302      	bcc.n	8008978 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008972:	4b22      	ldr	r3, [pc, #136]	; (80089fc <xTaskResumeAll+0x130>)
 8008974:	2201      	movs	r2, #1
 8008976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <xTaskResumeAll+0x120>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1cb      	bne.n	8008918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008986:	f000 fb55 	bl	8009034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800898a:	4b1d      	ldr	r3, [pc, #116]	; (8008a00 <xTaskResumeAll+0x134>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d010      	beq.n	80089b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008996:	f000 f847 	bl	8008a28 <xTaskIncrementTick>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089a0:	4b16      	ldr	r3, [pc, #88]	; (80089fc <xTaskResumeAll+0x130>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f1      	bne.n	8008996 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089b2:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <xTaskResumeAll+0x134>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089b8:	4b10      	ldr	r3, [pc, #64]	; (80089fc <xTaskResumeAll+0x130>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089c0:	2301      	movs	r3, #1
 80089c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089c4:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <xTaskResumeAll+0x138>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089d4:	f001 f8d6 	bl	8009b84 <vPortExitCritical>

	return xAlreadyYielded;
 80089d8:	68bb      	ldr	r3, [r7, #8]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20001210 	.word	0x20001210
 80089e8:	200011e8 	.word	0x200011e8
 80089ec:	200011a8 	.word	0x200011a8
 80089f0:	200011f0 	.word	0x200011f0
 80089f4:	20000d18 	.word	0x20000d18
 80089f8:	20000d14 	.word	0x20000d14
 80089fc:	200011fc 	.word	0x200011fc
 8008a00:	200011f8 	.word	0x200011f8
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <xTaskGetTickCount+0x1c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a14:	687b      	ldr	r3, [r7, #4]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	200011ec 	.word	0x200011ec

08008a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a32:	4b4f      	ldr	r3, [pc, #316]	; (8008b70 <xTaskIncrementTick+0x148>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 808f 	bne.w	8008b5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a3c:	4b4d      	ldr	r3, [pc, #308]	; (8008b74 <xTaskIncrementTick+0x14c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3301      	adds	r3, #1
 8008a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a44:	4a4b      	ldr	r2, [pc, #300]	; (8008b74 <xTaskIncrementTick+0x14c>)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d120      	bne.n	8008a92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a50:	4b49      	ldr	r3, [pc, #292]	; (8008b78 <xTaskIncrementTick+0x150>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	603b      	str	r3, [r7, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <xTaskIncrementTick+0x46>
 8008a70:	4b41      	ldr	r3, [pc, #260]	; (8008b78 <xTaskIncrementTick+0x150>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	4b41      	ldr	r3, [pc, #260]	; (8008b7c <xTaskIncrementTick+0x154>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a3f      	ldr	r2, [pc, #252]	; (8008b78 <xTaskIncrementTick+0x150>)
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	4a3f      	ldr	r2, [pc, #252]	; (8008b7c <xTaskIncrementTick+0x154>)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <xTaskIncrementTick+0x158>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	4a3d      	ldr	r2, [pc, #244]	; (8008b80 <xTaskIncrementTick+0x158>)
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	f000 fad1 	bl	8009034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a92:	4b3c      	ldr	r3, [pc, #240]	; (8008b84 <xTaskIncrementTick+0x15c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d349      	bcc.n	8008b30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a9c:	4b36      	ldr	r3, [pc, #216]	; (8008b78 <xTaskIncrementTick+0x150>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d104      	bne.n	8008ab0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa6:	4b37      	ldr	r3, [pc, #220]	; (8008b84 <xTaskIncrementTick+0x15c>)
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aac:	601a      	str	r2, [r3, #0]
					break;
 8008aae:	e03f      	b.n	8008b30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab0:	4b31      	ldr	r3, [pc, #196]	; (8008b78 <xTaskIncrementTick+0x150>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d203      	bcs.n	8008ad0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ac8:	4a2e      	ldr	r2, [pc, #184]	; (8008b84 <xTaskIncrementTick+0x15c>)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ace:	e02f      	b.n	8008b30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe ff99 	bl	8007a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	3318      	adds	r3, #24
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe ff90 	bl	8007a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <xTaskIncrementTick+0x160>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d903      	bls.n	8008b00 <xTaskIncrementTick+0xd8>
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	4a22      	ldr	r2, [pc, #136]	; (8008b88 <xTaskIncrementTick+0x160>)
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4a1f      	ldr	r2, [pc, #124]	; (8008b8c <xTaskIncrementTick+0x164>)
 8008b0e:	441a      	add	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f7fe ff1b 	bl	8007952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <xTaskIncrementTick+0x168>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d3b8      	bcc.n	8008a9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2e:	e7b5      	b.n	8008a9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b30:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <xTaskIncrementTick+0x168>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b36:	4915      	ldr	r1, [pc, #84]	; (8008b8c <xTaskIncrementTick+0x164>)
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d901      	bls.n	8008b4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <xTaskIncrementTick+0x16c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d007      	beq.n	8008b64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e004      	b.n	8008b64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b5a:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <xTaskIncrementTick+0x170>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	4a0d      	ldr	r2, [pc, #52]	; (8008b98 <xTaskIncrementTick+0x170>)
 8008b62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b64:	697b      	ldr	r3, [r7, #20]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20001210 	.word	0x20001210
 8008b74:	200011ec 	.word	0x200011ec
 8008b78:	200011a0 	.word	0x200011a0
 8008b7c:	200011a4 	.word	0x200011a4
 8008b80:	20001200 	.word	0x20001200
 8008b84:	20001208 	.word	0x20001208
 8008b88:	200011f0 	.word	0x200011f0
 8008b8c:	20000d18 	.word	0x20000d18
 8008b90:	20000d14 	.word	0x20000d14
 8008b94:	200011fc 	.word	0x200011fc
 8008b98:	200011f8 	.word	0x200011f8

08008b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ba2:	4b28      	ldr	r3, [pc, #160]	; (8008c44 <vTaskSwitchContext+0xa8>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008baa:	4b27      	ldr	r3, [pc, #156]	; (8008c48 <vTaskSwitchContext+0xac>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bb0:	e041      	b.n	8008c36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008bb2:	4b25      	ldr	r3, [pc, #148]	; (8008c48 <vTaskSwitchContext+0xac>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb8:	4b24      	ldr	r3, [pc, #144]	; (8008c4c <vTaskSwitchContext+0xb0>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	e010      	b.n	8008be2 <vTaskSwitchContext+0x46>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <vTaskSwitchContext+0x40>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	607b      	str	r3, [r7, #4]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <vTaskSwitchContext+0x3e>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	491b      	ldr	r1, [pc, #108]	; (8008c50 <vTaskSwitchContext+0xb4>)
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0e4      	beq.n	8008bc0 <vTaskSwitchContext+0x24>
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <vTaskSwitchContext+0xb4>)
 8008c02:	4413      	add	r3, r2
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	605a      	str	r2, [r3, #4]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	3308      	adds	r3, #8
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d104      	bne.n	8008c26 <vTaskSwitchContext+0x8a>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	605a      	str	r2, [r3, #4]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <vTaskSwitchContext+0xb8>)
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	4a06      	ldr	r2, [pc, #24]	; (8008c4c <vTaskSwitchContext+0xb0>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6013      	str	r3, [r2, #0]
}
 8008c36:	bf00      	nop
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20001210 	.word	0x20001210
 8008c48:	200011fc 	.word	0x200011fc
 8008c4c:	200011f0 	.word	0x200011f0
 8008c50:	20000d18 	.word	0x20000d18
 8008c54:	20000d14 	.word	0x20000d14

08008c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60fb      	str	r3, [r7, #12]
}
 8008c7a:	bf00      	nop
 8008c7c:	e7fe      	b.n	8008c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c7e:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <vTaskPlaceOnEventList+0x44>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3318      	adds	r3, #24
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7fe fe87 	bl	800799a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	6838      	ldr	r0, [r7, #0]
 8008c90:	f000 fa7c 	bl	800918c <prvAddCurrentTaskToDelayedList>
}
 8008c94:	bf00      	nop
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000d14 	.word	0x20000d14

08008ca0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	617b      	str	r3, [r7, #20]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3318      	adds	r3, #24
 8008cce:	4619      	mov	r1, r3
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7fe fe3e 	bl	8007952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	68b8      	ldr	r0, [r7, #8]
 8008ce6:	f000 fa51 	bl	800918c <prvAddCurrentTaskToDelayedList>
	}
 8008cea:	bf00      	nop
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000d14 	.word	0x20000d14

08008cf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10a      	bne.n	8008d24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	60fb      	str	r3, [r7, #12]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3318      	adds	r3, #24
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fe fe6f 	bl	8007a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2e:	4b1e      	ldr	r3, [pc, #120]	; (8008da8 <xTaskRemoveFromEventList+0xb0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d11d      	bne.n	8008d72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fe66 	bl	8007a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <xTaskRemoveFromEventList+0xb4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d903      	bls.n	8008d54 <xTaskRemoveFromEventList+0x5c>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4a16      	ldr	r2, [pc, #88]	; (8008dac <xTaskRemoveFromEventList+0xb4>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4a13      	ldr	r2, [pc, #76]	; (8008db0 <xTaskRemoveFromEventList+0xb8>)
 8008d62:	441a      	add	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f7fe fdf1 	bl	8007952 <vListInsertEnd>
 8008d70:	e005      	b.n	8008d7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	3318      	adds	r3, #24
 8008d76:	4619      	mov	r1, r3
 8008d78:	480e      	ldr	r0, [pc, #56]	; (8008db4 <xTaskRemoveFromEventList+0xbc>)
 8008d7a:	f7fe fdea 	bl	8007952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d82:	4b0d      	ldr	r3, [pc, #52]	; (8008db8 <xTaskRemoveFromEventList+0xc0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d905      	bls.n	8008d98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <xTaskRemoveFromEventList+0xc4>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	e001      	b.n	8008d9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d9c:	697b      	ldr	r3, [r7, #20]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20001210 	.word	0x20001210
 8008dac:	200011f0 	.word	0x200011f0
 8008db0:	20000d18 	.word	0x20000d18
 8008db4:	200011a8 	.word	0x200011a8
 8008db8:	20000d14 	.word	0x20000d14
 8008dbc:	200011fc 	.word	0x200011fc

08008dc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <vTaskInternalSetTimeOutState+0x24>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <vTaskInternalSetTimeOutState+0x28>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	605a      	str	r2, [r3, #4]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	20001200 	.word	0x20001200
 8008de8:	200011ec 	.word	0x200011ec

08008dec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	613b      	str	r3, [r7, #16]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	60fb      	str	r3, [r7, #12]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e2e:	f000 fe79 	bl	8009b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e32:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <xTaskCheckForTimeOut+0xbc>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d102      	bne.n	8008e52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]
 8008e50:	e023      	b.n	8008e9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	4b15      	ldr	r3, [pc, #84]	; (8008eac <xTaskCheckForTimeOut+0xc0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d007      	beq.n	8008e6e <xTaskCheckForTimeOut+0x82>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e015      	b.n	8008e9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d20b      	bcs.n	8008e90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff ff9b 	bl	8008dc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	e004      	b.n	8008e9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e9a:	f000 fe73 	bl	8009b84 <vPortExitCritical>

	return xReturn;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200011ec 	.word	0x200011ec
 8008eac:	20001200 	.word	0x20001200

08008eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008eb4:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <vTaskMissedYield+0x14>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
}
 8008eba:	bf00      	nop
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	200011fc 	.word	0x200011fc

08008ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ed0:	f000 f852 	bl	8008f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ed4:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <prvIdleTask+0x28>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d9f9      	bls.n	8008ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <prvIdleTask+0x2c>)
 8008ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eec:	e7f0      	b.n	8008ed0 <prvIdleTask+0x8>
 8008eee:	bf00      	nop
 8008ef0:	20000d18 	.word	0x20000d18
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	e00c      	b.n	8008f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4a12      	ldr	r2, [pc, #72]	; (8008f58 <prvInitialiseTaskLists+0x60>)
 8008f10:	4413      	add	r3, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe fcf0 	bl	80078f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	607b      	str	r3, [r7, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b37      	cmp	r3, #55	; 0x37
 8008f22:	d9ef      	bls.n	8008f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f24:	480d      	ldr	r0, [pc, #52]	; (8008f5c <prvInitialiseTaskLists+0x64>)
 8008f26:	f7fe fce7 	bl	80078f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f2a:	480d      	ldr	r0, [pc, #52]	; (8008f60 <prvInitialiseTaskLists+0x68>)
 8008f2c:	f7fe fce4 	bl	80078f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f30:	480c      	ldr	r0, [pc, #48]	; (8008f64 <prvInitialiseTaskLists+0x6c>)
 8008f32:	f7fe fce1 	bl	80078f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f36:	480c      	ldr	r0, [pc, #48]	; (8008f68 <prvInitialiseTaskLists+0x70>)
 8008f38:	f7fe fcde 	bl	80078f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f3c:	480b      	ldr	r0, [pc, #44]	; (8008f6c <prvInitialiseTaskLists+0x74>)
 8008f3e:	f7fe fcdb 	bl	80078f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <prvInitialiseTaskLists+0x78>)
 8008f44:	4a05      	ldr	r2, [pc, #20]	; (8008f5c <prvInitialiseTaskLists+0x64>)
 8008f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvInitialiseTaskLists+0x7c>)
 8008f4a:	4a05      	ldr	r2, [pc, #20]	; (8008f60 <prvInitialiseTaskLists+0x68>)
 8008f4c:	601a      	str	r2, [r3, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000d18 	.word	0x20000d18
 8008f5c:	20001178 	.word	0x20001178
 8008f60:	2000118c 	.word	0x2000118c
 8008f64:	200011a8 	.word	0x200011a8
 8008f68:	200011bc 	.word	0x200011bc
 8008f6c:	200011d4 	.word	0x200011d4
 8008f70:	200011a0 	.word	0x200011a0
 8008f74:	200011a4 	.word	0x200011a4

08008f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f7e:	e019      	b.n	8008fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f80:	f000 fdd0 	bl	8009b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f84:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <prvCheckTasksWaitingTermination+0x50>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fd3b 	bl	8007a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f96:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <prvCheckTasksWaitingTermination+0x54>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	4a0b      	ldr	r2, [pc, #44]	; (8008fcc <prvCheckTasksWaitingTermination+0x54>)
 8008f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	; (8008fd0 <prvCheckTasksWaitingTermination+0x58>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	4a0a      	ldr	r2, [pc, #40]	; (8008fd0 <prvCheckTasksWaitingTermination+0x58>)
 8008fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008faa:	f000 fdeb 	bl	8009b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f810 	bl	8008fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fb4:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <prvCheckTasksWaitingTermination+0x58>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e1      	bne.n	8008f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200011bc 	.word	0x200011bc
 8008fcc:	200011e8 	.word	0x200011e8
 8008fd0:	200011d0 	.word	0x200011d0

08008fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d108      	bne.n	8008ff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 ff88 	bl	8009f00 <vPortFree>
				vPortFree( pxTCB );
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 ff85 	bl	8009f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ff6:	e018      	b.n	800902a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d103      	bne.n	800900a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 ff7c 	bl	8009f00 <vPortFree>
	}
 8009008:	e00f      	b.n	800902a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009010:	2b02      	cmp	r3, #2
 8009012:	d00a      	beq.n	800902a <prvDeleteTCB+0x56>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60fb      	str	r3, [r7, #12]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <prvDeleteTCB+0x54>
	}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800903a:	4b0c      	ldr	r3, [pc, #48]	; (800906c <prvResetNextTaskUnblockTime+0x38>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <prvResetNextTaskUnblockTime+0x3c>)
 8009046:	f04f 32ff 	mov.w	r2, #4294967295
 800904a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800904c:	e008      	b.n	8009060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <prvResetNextTaskUnblockTime+0x38>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	4a04      	ldr	r2, [pc, #16]	; (8009070 <prvResetNextTaskUnblockTime+0x3c>)
 800905e:	6013      	str	r3, [r2, #0]
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	200011a0 	.word	0x200011a0
 8009070:	20001208 	.word	0x20001208

08009074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <xTaskGetSchedulerState+0x34>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009082:	2301      	movs	r3, #1
 8009084:	607b      	str	r3, [r7, #4]
 8009086:	e008      	b.n	800909a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009088:	4b08      	ldr	r3, [pc, #32]	; (80090ac <xTaskGetSchedulerState+0x38>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009090:	2302      	movs	r3, #2
 8009092:	607b      	str	r3, [r7, #4]
 8009094:	e001      	b.n	800909a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800909a:	687b      	ldr	r3, [r7, #4]
	}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	200011f4 	.word	0x200011f4
 80090ac:	20001210 	.word	0x20001210

080090b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d056      	beq.n	8009174 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090c6:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <xTaskPriorityDisinherit+0xd0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d00a      	beq.n	80090e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	60bb      	str	r3, [r7, #8]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009108:	1e5a      	subs	r2, r3, #1
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009116:	429a      	cmp	r2, r3
 8009118:	d02c      	beq.n	8009174 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800911e:	2b00      	cmp	r3, #0
 8009120:	d128      	bne.n	8009174 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3304      	adds	r3, #4
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fc70 	bl	8007a0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <xTaskPriorityDisinherit+0xd4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d903      	bls.n	8009154 <xTaskPriorityDisinherit+0xa4>
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <xTaskPriorityDisinherit+0xd4>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4a09      	ldr	r2, [pc, #36]	; (8009188 <xTaskPriorityDisinherit+0xd8>)
 8009162:	441a      	add	r2, r3
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fbf1 	bl	8007952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009174:	697b      	ldr	r3, [r7, #20]
	}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000d14 	.word	0x20000d14
 8009184:	200011f0 	.word	0x200011f0
 8009188:	20000d18 	.word	0x20000d18

0800918c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <prvAddCurrentTaskToDelayedList+0x90>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800919c:	4b20      	ldr	r3, [pc, #128]	; (8009220 <prvAddCurrentTaskToDelayedList+0x94>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fc32 	bl	8007a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ae:	d10a      	bne.n	80091c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091b6:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4819      	ldr	r0, [pc, #100]	; (8009224 <prvAddCurrentTaskToDelayedList+0x98>)
 80091c0:	f7fe fbc7 	bl	8007952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091c4:	e026      	b.n	8009214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4413      	add	r3, r2
 80091cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091ce:	4b14      	ldr	r3, [pc, #80]	; (8009220 <prvAddCurrentTaskToDelayedList+0x94>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d209      	bcs.n	80091f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091de:	4b12      	ldr	r3, [pc, #72]	; (8009228 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <prvAddCurrentTaskToDelayedList+0x94>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4610      	mov	r0, r2
 80091ec:	f7fe fbd5 	bl	800799a <vListInsert>
}
 80091f0:	e010      	b.n	8009214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f2:	4b0e      	ldr	r3, [pc, #56]	; (800922c <prvAddCurrentTaskToDelayedList+0xa0>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <prvAddCurrentTaskToDelayedList+0x94>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f7fe fbcb 	bl	800799a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009204:	4b0a      	ldr	r3, [pc, #40]	; (8009230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	429a      	cmp	r2, r3
 800920c:	d202      	bcs.n	8009214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800920e:	4a08      	ldr	r2, [pc, #32]	; (8009230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	6013      	str	r3, [r2, #0]
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	200011ec 	.word	0x200011ec
 8009220:	20000d14 	.word	0x20000d14
 8009224:	200011d4 	.word	0x200011d4
 8009228:	200011a4 	.word	0x200011a4
 800922c:	200011a0 	.word	0x200011a0
 8009230:	20001208 	.word	0x20001208

08009234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	; 0x28
 8009238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800923e:	f000 fb07 	bl	8009850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009242:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <xTimerCreateTimerTask+0x80>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d021      	beq.n	800928e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009252:	1d3a      	adds	r2, r7, #4
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe fb31 	bl	80078c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	9202      	str	r2, [sp, #8]
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	2302      	movs	r3, #2
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	460a      	mov	r2, r1
 8009274:	4910      	ldr	r1, [pc, #64]	; (80092b8 <xTimerCreateTimerTask+0x84>)
 8009276:	4811      	ldr	r0, [pc, #68]	; (80092bc <xTimerCreateTimerTask+0x88>)
 8009278:	f7ff f8de 	bl	8008438 <xTaskCreateStatic>
 800927c:	4603      	mov	r3, r0
 800927e:	4a10      	ldr	r2, [pc, #64]	; (80092c0 <xTimerCreateTimerTask+0x8c>)
 8009280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009282:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <xTimerCreateTimerTask+0x8c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800928a:	2301      	movs	r3, #1
 800928c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	613b      	str	r3, [r7, #16]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092aa:	697b      	ldr	r3, [r7, #20]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20001244 	.word	0x20001244
 80092b8:	0800fd84 	.word	0x0800fd84
 80092bc:	080093f9 	.word	0x080093f9
 80092c0:	20001248 	.word	0x20001248

080092c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	623b      	str	r3, [r7, #32]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092f2:	4b1a      	ldr	r3, [pc, #104]	; (800935c <xTimerGenericCommand+0x98>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d02a      	beq.n	8009350 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b05      	cmp	r3, #5
 800930a:	dc18      	bgt.n	800933e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800930c:	f7ff feb2 	bl	8009074 <xTaskGetSchedulerState>
 8009310:	4603      	mov	r3, r0
 8009312:	2b02      	cmp	r3, #2
 8009314:	d109      	bne.n	800932a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009316:	4b11      	ldr	r3, [pc, #68]	; (800935c <xTimerGenericCommand+0x98>)
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	f107 0110 	add.w	r1, r7, #16
 800931e:	2300      	movs	r3, #0
 8009320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009322:	f7fe fca1 	bl	8007c68 <xQueueGenericSend>
 8009326:	6278      	str	r0, [r7, #36]	; 0x24
 8009328:	e012      	b.n	8009350 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800932a:	4b0c      	ldr	r3, [pc, #48]	; (800935c <xTimerGenericCommand+0x98>)
 800932c:	6818      	ldr	r0, [r3, #0]
 800932e:	f107 0110 	add.w	r1, r7, #16
 8009332:	2300      	movs	r3, #0
 8009334:	2200      	movs	r2, #0
 8009336:	f7fe fc97 	bl	8007c68 <xQueueGenericSend>
 800933a:	6278      	str	r0, [r7, #36]	; 0x24
 800933c:	e008      	b.n	8009350 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <xTimerGenericCommand+0x98>)
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f107 0110 	add.w	r1, r7, #16
 8009346:	2300      	movs	r3, #0
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	f7fe fd8b 	bl	8007e64 <xQueueGenericSendFromISR>
 800934e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009352:	4618      	mov	r0, r3
 8009354:	3728      	adds	r7, #40	; 0x28
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20001244 	.word	0x20001244

08009360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af02      	add	r7, sp, #8
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936a:	4b22      	ldr	r3, [pc, #136]	; (80093f4 <prvProcessExpiredTimer+0x94>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fb47 	bl	8007a0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b00      	cmp	r3, #0
 800938a:	d022      	beq.n	80093d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	699a      	ldr	r2, [r3, #24]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	18d1      	adds	r1, r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	6978      	ldr	r0, [r7, #20]
 800939a:	f000 f8d1 	bl	8009540 <prvInsertTimerInActiveList>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01f      	beq.n	80093e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	2100      	movs	r1, #0
 80093ae:	6978      	ldr	r0, [r7, #20]
 80093b0:	f7ff ff88 	bl	80092c4 <xTimerGenericCommand>
 80093b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d113      	bne.n	80093e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	60fb      	str	r3, [r7, #12]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	6978      	ldr	r0, [r7, #20]
 80093ea:	4798      	blx	r3
}
 80093ec:	bf00      	nop
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	2000123c 	.word	0x2000123c

080093f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009400:	f107 0308 	add.w	r3, r7, #8
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f857 	bl	80094b8 <prvGetNextExpireTime>
 800940a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4619      	mov	r1, r3
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f803 	bl	800941c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009416:	f000 f8d5 	bl	80095c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800941a:	e7f1      	b.n	8009400 <prvTimerTask+0x8>

0800941c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009426:	f7ff fa43 	bl	80088b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942a:	f107 0308 	add.w	r3, r7, #8
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f866 	bl	8009500 <prvSampleTimeNow>
 8009434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d130      	bne.n	800949e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <prvProcessTimerOrBlockTask+0x3c>
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	429a      	cmp	r2, r3
 8009448:	d806      	bhi.n	8009458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800944a:	f7ff fa3f 	bl	80088cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ff85 	bl	8009360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009456:	e024      	b.n	80094a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d008      	beq.n	8009470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <prvProcessTimerOrBlockTask+0x90>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <prvProcessTimerOrBlockTask+0x50>
 8009468:	2301      	movs	r3, #1
 800946a:	e000      	b.n	800946e <prvProcessTimerOrBlockTask+0x52>
 800946c:	2300      	movs	r3, #0
 800946e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009470:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <prvProcessTimerOrBlockTask+0x94>)
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4619      	mov	r1, r3
 800947e:	f7fe ffa7 	bl	80083d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009482:	f7ff fa23 	bl	80088cc <xTaskResumeAll>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800948c:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <prvProcessTimerOrBlockTask+0x98>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	f3bf 8f6f 	isb	sy
}
 800949c:	e001      	b.n	80094a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800949e:	f7ff fa15 	bl	80088cc <xTaskResumeAll>
}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001240 	.word	0x20001240
 80094b0:	20001244 	.word	0x20001244
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094c0:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <prvGetNextExpireTime+0x44>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <prvGetNextExpireTime+0x16>
 80094ca:	2201      	movs	r2, #1
 80094cc:	e000      	b.n	80094d0 <prvGetNextExpireTime+0x18>
 80094ce:	2200      	movs	r2, #0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d105      	bne.n	80094e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <prvGetNextExpireTime+0x44>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
 80094e6:	e001      	b.n	80094ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094ec:	68fb      	ldr	r3, [r7, #12]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	2000123c 	.word	0x2000123c

08009500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009508:	f7ff fa7e 	bl	8008a08 <xTaskGetTickCount>
 800950c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800950e:	4b0b      	ldr	r3, [pc, #44]	; (800953c <prvSampleTimeNow+0x3c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	429a      	cmp	r2, r3
 8009516:	d205      	bcs.n	8009524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009518:	f000 f936 	bl	8009788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e002      	b.n	800952a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800952a:	4a04      	ldr	r2, [pc, #16]	; (800953c <prvSampleTimeNow+0x3c>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009530:	68fb      	ldr	r3, [r7, #12]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000124c 	.word	0x2000124c

08009540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d812      	bhi.n	800958c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	429a      	cmp	r2, r3
 8009572:	d302      	bcc.n	800957a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e01b      	b.n	80095b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800957a:	4b10      	ldr	r3, [pc, #64]	; (80095bc <prvInsertTimerInActiveList+0x7c>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7fe fa08 	bl	800799a <vListInsert>
 800958a:	e012      	b.n	80095b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d206      	bcs.n	80095a2 <prvInsertTimerInActiveList+0x62>
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d302      	bcc.n	80095a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e007      	b.n	80095b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095a2:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <prvInsertTimerInActiveList+0x80>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f7fe f9f4 	bl	800799a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095b2:	697b      	ldr	r3, [r7, #20]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20001240 	.word	0x20001240
 80095c0:	2000123c 	.word	0x2000123c

080095c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ca:	e0ca      	b.n	8009762 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	da18      	bge.n	8009604 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095d2:	1d3b      	adds	r3, r7, #4
 80095d4:	3304      	adds	r3, #4
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	61fb      	str	r3, [r7, #28]
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fa:	6850      	ldr	r0, [r2, #4]
 80095fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fe:	6892      	ldr	r2, [r2, #8]
 8009600:	4611      	mov	r1, r2
 8009602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f2c0 80ab 	blt.w	8009762 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	3304      	adds	r3, #4
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe f9f5 	bl	8007a0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009622:	463b      	mov	r3, r7
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ff6b 	bl	8009500 <prvSampleTimeNow>
 800962a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b09      	cmp	r3, #9
 8009630:	f200 8096 	bhi.w	8009760 <prvProcessReceivedCommands+0x19c>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <prvProcessReceivedCommands+0x78>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009665 	.word	0x08009665
 8009640:	08009665 	.word	0x08009665
 8009644:	08009665 	.word	0x08009665
 8009648:	080096d9 	.word	0x080096d9
 800964c:	080096ed 	.word	0x080096ed
 8009650:	08009737 	.word	0x08009737
 8009654:	08009665 	.word	0x08009665
 8009658:	08009665 	.word	0x08009665
 800965c:	080096d9 	.word	0x080096d9
 8009660:	080096ed 	.word	0x080096ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800966a:	f043 0301 	orr.w	r3, r3, #1
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	18d1      	adds	r1, r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009684:	f7ff ff5c 	bl	8009540 <prvInsertTimerInActiveList>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d069      	beq.n	8009762 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d05e      	beq.n	8009762 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	441a      	add	r2, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2300      	movs	r3, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b6:	f7ff fe05 	bl	80092c4 <xTimerGenericCommand>
 80096ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d14f      	bne.n	8009762 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	61bb      	str	r3, [r7, #24]
}
 80096d4:	bf00      	nop
 80096d6:	e7fe      	b.n	80096d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096de:	f023 0301 	bic.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096ea:	e03a      	b.n	8009762 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f2:	f043 0301 	orr.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	617b      	str	r3, [r7, #20]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	699a      	ldr	r2, [r3, #24]
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	18d1      	adds	r1, r2, r3
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009730:	f7ff ff06 	bl	8009540 <prvInsertTimerInActiveList>
					break;
 8009734:	e015      	b.n	8009762 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d103      	bne.n	800974c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009746:	f000 fbdb 	bl	8009f00 <vPortFree>
 800974a:	e00a      	b.n	8009762 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009752:	f023 0301 	bic.w	r3, r3, #1
 8009756:	b2da      	uxtb	r2, r3
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800975e:	e000      	b.n	8009762 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009760:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <prvProcessReceivedCommands+0x1c0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	1d39      	adds	r1, r7, #4
 8009768:	2200      	movs	r2, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fc16 	bl	8007f9c <xQueueReceive>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	f47f af2a 	bne.w	80095cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	3730      	adds	r7, #48	; 0x30
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20001244 	.word	0x20001244

08009788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800978e:	e048      	b.n	8009822 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009790:	4b2d      	ldr	r3, [pc, #180]	; (8009848 <prvSwitchTimerLists+0xc0>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800979a:	4b2b      	ldr	r3, [pc, #172]	; (8009848 <prvSwitchTimerLists+0xc0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	3304      	adds	r3, #4
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe f92f 	bl	8007a0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d02e      	beq.n	8009822 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4413      	add	r3, r2
 80097cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d90e      	bls.n	80097f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097e2:	4b19      	ldr	r3, [pc, #100]	; (8009848 <prvSwitchTimerLists+0xc0>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7fe f8d4 	bl	800799a <vListInsert>
 80097f2:	e016      	b.n	8009822 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f4:	2300      	movs	r3, #0
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	2300      	movs	r3, #0
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff fd60 	bl	80092c4 <xTimerGenericCommand>
 8009804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	603b      	str	r3, [r7, #0]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009822:	4b09      	ldr	r3, [pc, #36]	; (8009848 <prvSwitchTimerLists+0xc0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1b1      	bne.n	8009790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <prvSwitchTimerLists+0xc0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009832:	4b06      	ldr	r3, [pc, #24]	; (800984c <prvSwitchTimerLists+0xc4>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a04      	ldr	r2, [pc, #16]	; (8009848 <prvSwitchTimerLists+0xc0>)
 8009838:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <prvSwitchTimerLists+0xc4>)
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	6013      	str	r3, [r2, #0]
}
 8009840:	bf00      	nop
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	2000123c 	.word	0x2000123c
 800984c:	20001240 	.word	0x20001240

08009850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009856:	f000 f965 	bl	8009b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800985a:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <prvCheckForValidListAndQueue+0x60>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d120      	bne.n	80098a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009862:	4814      	ldr	r0, [pc, #80]	; (80098b4 <prvCheckForValidListAndQueue+0x64>)
 8009864:	f7fe f848 	bl	80078f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009868:	4813      	ldr	r0, [pc, #76]	; (80098b8 <prvCheckForValidListAndQueue+0x68>)
 800986a:	f7fe f845 	bl	80078f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <prvCheckForValidListAndQueue+0x6c>)
 8009870:	4a10      	ldr	r2, [pc, #64]	; (80098b4 <prvCheckForValidListAndQueue+0x64>)
 8009872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009874:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <prvCheckForValidListAndQueue+0x70>)
 8009876:	4a10      	ldr	r2, [pc, #64]	; (80098b8 <prvCheckForValidListAndQueue+0x68>)
 8009878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800987a:	2300      	movs	r3, #0
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <prvCheckForValidListAndQueue+0x74>)
 8009880:	4a11      	ldr	r2, [pc, #68]	; (80098c8 <prvCheckForValidListAndQueue+0x78>)
 8009882:	2110      	movs	r1, #16
 8009884:	200a      	movs	r0, #10
 8009886:	f7fe f953 	bl	8007b30 <xQueueGenericCreateStatic>
 800988a:	4603      	mov	r3, r0
 800988c:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <prvCheckForValidListAndQueue+0x60>)
 800988e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <prvCheckForValidListAndQueue+0x60>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <prvCheckForValidListAndQueue+0x60>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	490b      	ldr	r1, [pc, #44]	; (80098cc <prvCheckForValidListAndQueue+0x7c>)
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fd6c 	bl	800837c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098a4:	f000 f96e 	bl	8009b84 <vPortExitCritical>
}
 80098a8:	bf00      	nop
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20001244 	.word	0x20001244
 80098b4:	20001214 	.word	0x20001214
 80098b8:	20001228 	.word	0x20001228
 80098bc:	2000123c 	.word	0x2000123c
 80098c0:	20001240 	.word	0x20001240
 80098c4:	200012f0 	.word	0x200012f0
 80098c8:	20001250 	.word	0x20001250
 80098cc:	0800fd8c 	.word	0x0800fd8c

080098d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3b04      	subs	r3, #4
 80098e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3b04      	subs	r3, #4
 80098ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f023 0201 	bic.w	r2, r3, #1
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3b04      	subs	r3, #4
 80098fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009900:	4a0c      	ldr	r2, [pc, #48]	; (8009934 <pxPortInitialiseStack+0x64>)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3b14      	subs	r3, #20
 800990a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3b04      	subs	r3, #4
 8009916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f06f 0202 	mvn.w	r2, #2
 800991e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3b20      	subs	r3, #32
 8009924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009926:	68fb      	ldr	r3, [r7, #12]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	08009939 	.word	0x08009939

08009938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009942:	4b12      	ldr	r3, [pc, #72]	; (800998c <prvTaskExitError+0x54>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d00a      	beq.n	8009962 <prvTaskExitError+0x2a>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	60fb      	str	r3, [r7, #12]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <prvTaskExitError+0x28>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60bb      	str	r3, [r7, #8]
}
 8009974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009976:	bf00      	nop
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0fc      	beq.n	8009978 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800997e:	bf00      	nop
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	2000002c 	.word	0x2000002c

08009990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <pxCurrentTCBConst2>)
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	6808      	ldr	r0, [r1, #0]
 8009996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	f380 8809 	msr	PSP, r0
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8811 	msr	BASEPRI, r0
 80099aa:	4770      	bx	lr
 80099ac:	f3af 8000 	nop.w

080099b0 <pxCurrentTCBConst2>:
 80099b0:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop

080099b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099b8:	4808      	ldr	r0, [pc, #32]	; (80099dc <prvPortStartFirstTask+0x24>)
 80099ba:	6800      	ldr	r0, [r0, #0]
 80099bc:	6800      	ldr	r0, [r0, #0]
 80099be:	f380 8808 	msr	MSP, r0
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8814 	msr	CONTROL, r0
 80099ca:	b662      	cpsie	i
 80099cc:	b661      	cpsie	f
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	df00      	svc	0
 80099d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099da:	bf00      	nop
 80099dc:	e000ed08 	.word	0xe000ed08

080099e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099e6:	4b46      	ldr	r3, [pc, #280]	; (8009b00 <xPortStartScheduler+0x120>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a46      	ldr	r2, [pc, #280]	; (8009b04 <xPortStartScheduler+0x124>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10a      	bne.n	8009a06 <xPortStartScheduler+0x26>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	613b      	str	r3, [r7, #16]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a06:	4b3e      	ldr	r3, [pc, #248]	; (8009b00 <xPortStartScheduler+0x120>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a3f      	ldr	r2, [pc, #252]	; (8009b08 <xPortStartScheduler+0x128>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d10a      	bne.n	8009a26 <xPortStartScheduler+0x46>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	60fb      	str	r3, [r7, #12]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a26:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	22ff      	movs	r2, #255	; 0xff
 8009a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	4b31      	ldr	r3, [pc, #196]	; (8009b10 <xPortStartScheduler+0x130>)
 8009a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a4e:	4b31      	ldr	r3, [pc, #196]	; (8009b14 <xPortStartScheduler+0x134>)
 8009a50:	2207      	movs	r2, #7
 8009a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a54:	e009      	b.n	8009a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a56:	4b2f      	ldr	r3, [pc, #188]	; (8009b14 <xPortStartScheduler+0x134>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	4a2d      	ldr	r2, [pc, #180]	; (8009b14 <xPortStartScheduler+0x134>)
 8009a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b80      	cmp	r3, #128	; 0x80
 8009a74:	d0ef      	beq.n	8009a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a76:	4b27      	ldr	r3, [pc, #156]	; (8009b14 <xPortStartScheduler+0x134>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f1c3 0307 	rsb	r3, r3, #7
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d00a      	beq.n	8009a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60bb      	str	r3, [r7, #8]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a98:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <xPortStartScheduler+0x134>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	021b      	lsls	r3, r3, #8
 8009a9e:	4a1d      	ldr	r2, [pc, #116]	; (8009b14 <xPortStartScheduler+0x134>)
 8009aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009aa2:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <xPortStartScheduler+0x134>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aaa:	4a1a      	ldr	r2, [pc, #104]	; (8009b14 <xPortStartScheduler+0x134>)
 8009aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ab6:	4b18      	ldr	r3, [pc, #96]	; (8009b18 <xPortStartScheduler+0x138>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a17      	ldr	r2, [pc, #92]	; (8009b18 <xPortStartScheduler+0x138>)
 8009abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <xPortStartScheduler+0x138>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a14      	ldr	r2, [pc, #80]	; (8009b18 <xPortStartScheduler+0x138>)
 8009ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ace:	f000 f8dd 	bl	8009c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <xPortStartScheduler+0x13c>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ad8:	f000 f8fc 	bl	8009cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009adc:	4b10      	ldr	r3, [pc, #64]	; (8009b20 <xPortStartScheduler+0x140>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a0f      	ldr	r2, [pc, #60]	; (8009b20 <xPortStartScheduler+0x140>)
 8009ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ae8:	f7ff ff66 	bl	80099b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009aec:	f7ff f856 	bl	8008b9c <vTaskSwitchContext>
	prvTaskExitError();
 8009af0:	f7ff ff22 	bl	8009938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	e000ed00 	.word	0xe000ed00
 8009b04:	410fc271 	.word	0x410fc271
 8009b08:	410fc270 	.word	0x410fc270
 8009b0c:	e000e400 	.word	0xe000e400
 8009b10:	20001340 	.word	0x20001340
 8009b14:	20001344 	.word	0x20001344
 8009b18:	e000ed20 	.word	0xe000ed20
 8009b1c:	2000002c 	.word	0x2000002c
 8009b20:	e000ef34 	.word	0xe000ef34

08009b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	607b      	str	r3, [r7, #4]
}
 8009b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b3e:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <vPortEnterCritical+0x58>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	4a0d      	ldr	r2, [pc, #52]	; (8009b7c <vPortEnterCritical+0x58>)
 8009b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <vPortEnterCritical+0x58>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d10f      	bne.n	8009b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <vPortEnterCritical+0x5c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	603b      	str	r3, [r7, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <vPortEnterCritical+0x4a>
	}
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	2000002c 	.word	0x2000002c
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <vPortExitCritical+0x50>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <vPortExitCritical+0x24>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	607b      	str	r3, [r7, #4]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <vPortExitCritical+0x50>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <vPortExitCritical+0x50>)
 8009bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bb2:	4b08      	ldr	r3, [pc, #32]	; (8009bd4 <vPortExitCritical+0x50>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <vPortExitCritical+0x42>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	f383 8811 	msr	BASEPRI, r3
}
 8009bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	2000002c 	.word	0x2000002c
	...

08009be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009be0:	f3ef 8009 	mrs	r0, PSP
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <pxCurrentTCBConst>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	f01e 0f10 	tst.w	lr, #16
 8009bf0:	bf08      	it	eq
 8009bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c04:	f380 8811 	msr	BASEPRI, r0
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f7fe ffc4 	bl	8008b9c <vTaskSwitchContext>
 8009c14:	f04f 0000 	mov.w	r0, #0
 8009c18:	f380 8811 	msr	BASEPRI, r0
 8009c1c:	bc09      	pop	{r0, r3}
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	6808      	ldr	r0, [r1, #0]
 8009c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c26:	f01e 0f10 	tst.w	lr, #16
 8009c2a:	bf08      	it	eq
 8009c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c30:	f380 8809 	msr	PSP, r0
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w

08009c40 <pxCurrentTCBConst>:
 8009c40:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	607b      	str	r3, [r7, #4]
}
 8009c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c62:	f7fe fee1 	bl	8008a28 <xTaskIncrementTick>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <xPortSysTickHandler+0x40>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	2300      	movs	r3, #0
 8009c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	f383 8811 	msr	BASEPRI, r3
}
 8009c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c90:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <vPortSetupTimerInterrupt+0x34>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c96:	4b0b      	ldr	r3, [pc, #44]	; (8009cc4 <vPortSetupTimerInterrupt+0x38>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <vPortSetupTimerInterrupt+0x3c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <vPortSetupTimerInterrupt+0x40>)
 8009ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca6:	099b      	lsrs	r3, r3, #6
 8009ca8:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <vPortSetupTimerInterrupt+0x44>)
 8009caa:	3b01      	subs	r3, #1
 8009cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cae:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <vPortSetupTimerInterrupt+0x34>)
 8009cb0:	2207      	movs	r2, #7
 8009cb2:	601a      	str	r2, [r3, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	e000e010 	.word	0xe000e010
 8009cc4:	e000e018 	.word	0xe000e018
 8009cc8:	20000020 	.word	0x20000020
 8009ccc:	10624dd3 	.word	0x10624dd3
 8009cd0:	e000e014 	.word	0xe000e014

08009cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ce4 <vPortEnableVFP+0x10>
 8009cd8:	6801      	ldr	r1, [r0, #0]
 8009cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cde:	6001      	str	r1, [r0, #0]
 8009ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ce2:	bf00      	nop
 8009ce4:	e000ed88 	.word	0xe000ed88

08009ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cee:	f3ef 8305 	mrs	r3, IPSR
 8009cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b0f      	cmp	r3, #15
 8009cf8:	d914      	bls.n	8009d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cfa:	4a17      	ldr	r2, [pc, #92]	; (8009d58 <vPortValidateInterruptPriority+0x70>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4413      	add	r3, r2
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d04:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <vPortValidateInterruptPriority+0x74>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	7afa      	ldrb	r2, [r7, #11]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d20a      	bcs.n	8009d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d24:	4b0e      	ldr	r3, [pc, #56]	; (8009d60 <vPortValidateInterruptPriority+0x78>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <vPortValidateInterruptPriority+0x7c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d90a      	bls.n	8009d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	603b      	str	r3, [r7, #0]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <vPortValidateInterruptPriority+0x60>
	}
 8009d4a:	bf00      	nop
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	e000e3f0 	.word	0xe000e3f0
 8009d5c:	20001340 	.word	0x20001340
 8009d60:	e000ed0c 	.word	0xe000ed0c
 8009d64:	20001344 	.word	0x20001344

08009d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08a      	sub	sp, #40	; 0x28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d74:	f7fe fd9c 	bl	80088b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d78:	4b5b      	ldr	r3, [pc, #364]	; (8009ee8 <pvPortMalloc+0x180>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d80:	f000 f920 	bl	8009fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d84:	4b59      	ldr	r3, [pc, #356]	; (8009eec <pvPortMalloc+0x184>)
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 8093 	bne.w	8009eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01d      	beq.n	8009dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d98:	2208      	movs	r2, #8
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d014      	beq.n	8009dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f023 0307 	bic.w	r3, r3, #7
 8009db0:	3308      	adds	r3, #8
 8009db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	617b      	str	r3, [r7, #20]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d06e      	beq.n	8009eb8 <pvPortMalloc+0x150>
 8009dda:	4b45      	ldr	r3, [pc, #276]	; (8009ef0 <pvPortMalloc+0x188>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d869      	bhi.n	8009eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009de4:	4b43      	ldr	r3, [pc, #268]	; (8009ef4 <pvPortMalloc+0x18c>)
 8009de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009de8:	4b42      	ldr	r3, [pc, #264]	; (8009ef4 <pvPortMalloc+0x18c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dee:	e004      	b.n	8009dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d903      	bls.n	8009e0c <pvPortMalloc+0xa4>
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1f1      	bne.n	8009df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e0c:	4b36      	ldr	r3, [pc, #216]	; (8009ee8 <pvPortMalloc+0x180>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d050      	beq.n	8009eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2208      	movs	r2, #8
 8009e1c:	4413      	add	r3, r2
 8009e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	1ad2      	subs	r2, r2, r3
 8009e30:	2308      	movs	r3, #8
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d91f      	bls.n	8009e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <pvPortMalloc+0xf8>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	613b      	str	r3, [r7, #16]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	1ad2      	subs	r2, r2, r3
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e72:	69b8      	ldr	r0, [r7, #24]
 8009e74:	f000 f908 	bl	800a088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e78:	4b1d      	ldr	r3, [pc, #116]	; (8009ef0 <pvPortMalloc+0x188>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	4a1b      	ldr	r2, [pc, #108]	; (8009ef0 <pvPortMalloc+0x188>)
 8009e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <pvPortMalloc+0x188>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ef8 <pvPortMalloc+0x190>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d203      	bcs.n	8009e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e92:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <pvPortMalloc+0x188>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a18      	ldr	r2, [pc, #96]	; (8009ef8 <pvPortMalloc+0x190>)
 8009e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	4b13      	ldr	r3, [pc, #76]	; (8009eec <pvPortMalloc+0x184>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <pvPortMalloc+0x194>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	4a11      	ldr	r2, [pc, #68]	; (8009efc <pvPortMalloc+0x194>)
 8009eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eb8:	f7fe fd08 	bl	80088cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <pvPortMalloc+0x174>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <pvPortMalloc+0x172>
	return pvReturn;
 8009edc:	69fb      	ldr	r3, [r7, #28]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3728      	adds	r7, #40	; 0x28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20004f50 	.word	0x20004f50
 8009eec:	20004f64 	.word	0x20004f64
 8009ef0:	20004f54 	.word	0x20004f54
 8009ef4:	20004f48 	.word	0x20004f48
 8009ef8:	20004f58 	.word	0x20004f58
 8009efc:	20004f5c 	.word	0x20004f5c

08009f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d04d      	beq.n	8009fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f12:	2308      	movs	r3, #8
 8009f14:	425b      	negs	r3, r3
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	4413      	add	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	4b24      	ldr	r3, [pc, #144]	; (8009fb8 <vPortFree+0xb8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10a      	bne.n	8009f44 <vPortFree+0x44>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	60fb      	str	r3, [r7, #12]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <vPortFree+0x62>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	60bb      	str	r3, [r7, #8]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <vPortFree+0xb8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01e      	beq.n	8009fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11a      	bne.n	8009fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <vPortFree+0xb8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	43db      	mvns	r3, r3
 8009f82:	401a      	ands	r2, r3
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f88:	f7fe fc92 	bl	80088b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <vPortFree+0xbc>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4413      	add	r3, r2
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <vPortFree+0xbc>)
 8009f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f9a:	6938      	ldr	r0, [r7, #16]
 8009f9c:	f000 f874 	bl	800a088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fa0:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <vPortFree+0xc0>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	4a06      	ldr	r2, [pc, #24]	; (8009fc0 <vPortFree+0xc0>)
 8009fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009faa:	f7fe fc8f 	bl	80088cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fae:	bf00      	nop
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20004f64 	.word	0x20004f64
 8009fbc:	20004f54 	.word	0x20004f54
 8009fc0:	20004f60 	.word	0x20004f60

08009fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fd0:	4b27      	ldr	r3, [pc, #156]	; (800a070 <prvHeapInit+0xac>)
 8009fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00c      	beq.n	8009ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3307      	adds	r3, #7
 8009fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0307 	bic.w	r3, r3, #7
 8009fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	4a1f      	ldr	r2, [pc, #124]	; (800a070 <prvHeapInit+0xac>)
 8009ff4:	4413      	add	r3, r2
 8009ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ffc:	4a1d      	ldr	r2, [pc, #116]	; (800a074 <prvHeapInit+0xb0>)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a002:	4b1c      	ldr	r3, [pc, #112]	; (800a074 <prvHeapInit+0xb0>)
 800a004:	2200      	movs	r2, #0
 800a006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	4413      	add	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a010:	2208      	movs	r2, #8
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0307 	bic.w	r3, r3, #7
 800a01e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a15      	ldr	r2, [pc, #84]	; (800a078 <prvHeapInit+0xb4>)
 800a024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a026:	4b14      	ldr	r3, [pc, #80]	; (800a078 <prvHeapInit+0xb4>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2200      	movs	r2, #0
 800a02c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <prvHeapInit+0xb4>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	1ad2      	subs	r2, r2, r3
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a044:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <prvHeapInit+0xb4>)
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <prvHeapInit+0xb8>)
 800a052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	4a09      	ldr	r2, [pc, #36]	; (800a080 <prvHeapInit+0xbc>)
 800a05a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a05c:	4b09      	ldr	r3, [pc, #36]	; (800a084 <prvHeapInit+0xc0>)
 800a05e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	20001348 	.word	0x20001348
 800a074:	20004f48 	.word	0x20004f48
 800a078:	20004f50 	.word	0x20004f50
 800a07c:	20004f58 	.word	0x20004f58
 800a080:	20004f54 	.word	0x20004f54
 800a084:	20004f64 	.word	0x20004f64

0800a088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a090:	4b28      	ldr	r3, [pc, #160]	; (800a134 <prvInsertBlockIntoFreeList+0xac>)
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	e002      	b.n	800a09c <prvInsertBlockIntoFreeList+0x14>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d8f7      	bhi.n	800a096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d108      	bne.n	800a0ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d118      	bne.n	800a110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <prvInsertBlockIntoFreeList+0xb0>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d00d      	beq.n	800a106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	441a      	add	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e008      	b.n	800a118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a106:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <prvInsertBlockIntoFreeList+0xb0>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	e003      	b.n	800a118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d002      	beq.n	800a126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a126:	bf00      	nop
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20004f48 	.word	0x20004f48
 800a138:	20004f50 	.word	0x20004f50

0800a13c <__cvt>:
 800a13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	ec55 4b10 	vmov	r4, r5, d0
 800a144:	2d00      	cmp	r5, #0
 800a146:	460e      	mov	r6, r1
 800a148:	4619      	mov	r1, r3
 800a14a:	462b      	mov	r3, r5
 800a14c:	bfbb      	ittet	lt
 800a14e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a152:	461d      	movlt	r5, r3
 800a154:	2300      	movge	r3, #0
 800a156:	232d      	movlt	r3, #45	; 0x2d
 800a158:	700b      	strb	r3, [r1, #0]
 800a15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a160:	4691      	mov	r9, r2
 800a162:	f023 0820 	bic.w	r8, r3, #32
 800a166:	bfbc      	itt	lt
 800a168:	4622      	movlt	r2, r4
 800a16a:	4614      	movlt	r4, r2
 800a16c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a170:	d005      	beq.n	800a17e <__cvt+0x42>
 800a172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a176:	d100      	bne.n	800a17a <__cvt+0x3e>
 800a178:	3601      	adds	r6, #1
 800a17a:	2102      	movs	r1, #2
 800a17c:	e000      	b.n	800a180 <__cvt+0x44>
 800a17e:	2103      	movs	r1, #3
 800a180:	ab03      	add	r3, sp, #12
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	ab02      	add	r3, sp, #8
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	ec45 4b10 	vmov	d0, r4, r5
 800a18c:	4653      	mov	r3, sl
 800a18e:	4632      	mov	r2, r6
 800a190:	f001 f88e 	bl	800b2b0 <_dtoa_r>
 800a194:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a198:	4607      	mov	r7, r0
 800a19a:	d102      	bne.n	800a1a2 <__cvt+0x66>
 800a19c:	f019 0f01 	tst.w	r9, #1
 800a1a0:	d022      	beq.n	800a1e8 <__cvt+0xac>
 800a1a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1a6:	eb07 0906 	add.w	r9, r7, r6
 800a1aa:	d110      	bne.n	800a1ce <__cvt+0x92>
 800a1ac:	783b      	ldrb	r3, [r7, #0]
 800a1ae:	2b30      	cmp	r3, #48	; 0x30
 800a1b0:	d10a      	bne.n	800a1c8 <__cvt+0x8c>
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1be:	b918      	cbnz	r0, 800a1c8 <__cvt+0x8c>
 800a1c0:	f1c6 0601 	rsb	r6, r6, #1
 800a1c4:	f8ca 6000 	str.w	r6, [sl]
 800a1c8:	f8da 3000 	ldr.w	r3, [sl]
 800a1cc:	4499      	add	r9, r3
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7f6 fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1da:	b108      	cbz	r0, 800a1e0 <__cvt+0xa4>
 800a1dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1e0:	2230      	movs	r2, #48	; 0x30
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	454b      	cmp	r3, r9
 800a1e6:	d307      	bcc.n	800a1f8 <__cvt+0xbc>
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ec:	1bdb      	subs	r3, r3, r7
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	b004      	add	sp, #16
 800a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f8:	1c59      	adds	r1, r3, #1
 800a1fa:	9103      	str	r1, [sp, #12]
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	e7f0      	b.n	800a1e2 <__cvt+0xa6>

0800a200 <__exponent>:
 800a200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a202:	4603      	mov	r3, r0
 800a204:	2900      	cmp	r1, #0
 800a206:	bfb8      	it	lt
 800a208:	4249      	neglt	r1, r1
 800a20a:	f803 2b02 	strb.w	r2, [r3], #2
 800a20e:	bfb4      	ite	lt
 800a210:	222d      	movlt	r2, #45	; 0x2d
 800a212:	222b      	movge	r2, #43	; 0x2b
 800a214:	2909      	cmp	r1, #9
 800a216:	7042      	strb	r2, [r0, #1]
 800a218:	dd2a      	ble.n	800a270 <__exponent+0x70>
 800a21a:	f10d 0207 	add.w	r2, sp, #7
 800a21e:	4617      	mov	r7, r2
 800a220:	260a      	movs	r6, #10
 800a222:	4694      	mov	ip, r2
 800a224:	fb91 f5f6 	sdiv	r5, r1, r6
 800a228:	fb06 1415 	mls	r4, r6, r5, r1
 800a22c:	3430      	adds	r4, #48	; 0x30
 800a22e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a232:	460c      	mov	r4, r1
 800a234:	2c63      	cmp	r4, #99	; 0x63
 800a236:	f102 32ff 	add.w	r2, r2, #4294967295
 800a23a:	4629      	mov	r1, r5
 800a23c:	dcf1      	bgt.n	800a222 <__exponent+0x22>
 800a23e:	3130      	adds	r1, #48	; 0x30
 800a240:	f1ac 0402 	sub.w	r4, ip, #2
 800a244:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a248:	1c41      	adds	r1, r0, #1
 800a24a:	4622      	mov	r2, r4
 800a24c:	42ba      	cmp	r2, r7
 800a24e:	d30a      	bcc.n	800a266 <__exponent+0x66>
 800a250:	f10d 0209 	add.w	r2, sp, #9
 800a254:	eba2 020c 	sub.w	r2, r2, ip
 800a258:	42bc      	cmp	r4, r7
 800a25a:	bf88      	it	hi
 800a25c:	2200      	movhi	r2, #0
 800a25e:	4413      	add	r3, r2
 800a260:	1a18      	subs	r0, r3, r0
 800a262:	b003      	add	sp, #12
 800a264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a266:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a26a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a26e:	e7ed      	b.n	800a24c <__exponent+0x4c>
 800a270:	2330      	movs	r3, #48	; 0x30
 800a272:	3130      	adds	r1, #48	; 0x30
 800a274:	7083      	strb	r3, [r0, #2]
 800a276:	70c1      	strb	r1, [r0, #3]
 800a278:	1d03      	adds	r3, r0, #4
 800a27a:	e7f1      	b.n	800a260 <__exponent+0x60>

0800a27c <_printf_float>:
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	ed2d 8b02 	vpush	{d8}
 800a284:	b08d      	sub	sp, #52	; 0x34
 800a286:	460c      	mov	r4, r1
 800a288:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a28c:	4616      	mov	r6, r2
 800a28e:	461f      	mov	r7, r3
 800a290:	4605      	mov	r5, r0
 800a292:	f000 fef7 	bl	800b084 <_localeconv_r>
 800a296:	f8d0 a000 	ldr.w	sl, [r0]
 800a29a:	4650      	mov	r0, sl
 800a29c:	f7f5 ffe8 	bl	8000270 <strlen>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	9305      	str	r3, [sp, #20]
 800a2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a2b0:	3307      	adds	r3, #7
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	f103 0208 	add.w	r2, r3, #8
 800a2ba:	f8c8 2000 	str.w	r2, [r8]
 800a2be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2c6:	9307      	str	r3, [sp, #28]
 800a2c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2cc:	ee08 0a10 	vmov	s16, r0
 800a2d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a2d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2d8:	4b9e      	ldr	r3, [pc, #632]	; (800a554 <_printf_float+0x2d8>)
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	f7f6 fc25 	bl	8000b2c <__aeabi_dcmpun>
 800a2e2:	bb88      	cbnz	r0, 800a348 <_printf_float+0xcc>
 800a2e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e8:	4b9a      	ldr	r3, [pc, #616]	; (800a554 <_printf_float+0x2d8>)
 800a2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ee:	f7f6 fbff 	bl	8000af0 <__aeabi_dcmple>
 800a2f2:	bb48      	cbnz	r0, 800a348 <_printf_float+0xcc>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f7f6 fbee 	bl	8000adc <__aeabi_dcmplt>
 800a300:	b110      	cbz	r0, 800a308 <_printf_float+0x8c>
 800a302:	232d      	movs	r3, #45	; 0x2d
 800a304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a308:	4a93      	ldr	r2, [pc, #588]	; (800a558 <_printf_float+0x2dc>)
 800a30a:	4b94      	ldr	r3, [pc, #592]	; (800a55c <_printf_float+0x2e0>)
 800a30c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a310:	bf94      	ite	ls
 800a312:	4690      	movls	r8, r2
 800a314:	4698      	movhi	r8, r3
 800a316:	2303      	movs	r3, #3
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	9b05      	ldr	r3, [sp, #20]
 800a31c:	f023 0304 	bic.w	r3, r3, #4
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	f04f 0900 	mov.w	r9, #0
 800a326:	9700      	str	r7, [sp, #0]
 800a328:	4633      	mov	r3, r6
 800a32a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a32c:	4621      	mov	r1, r4
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f9da 	bl	800a6e8 <_printf_common>
 800a334:	3001      	adds	r0, #1
 800a336:	f040 8090 	bne.w	800a45a <_printf_float+0x1de>
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295
 800a33e:	b00d      	add	sp, #52	; 0x34
 800a340:	ecbd 8b02 	vpop	{d8}
 800a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	4642      	mov	r2, r8
 800a34a:	464b      	mov	r3, r9
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f6 fbec 	bl	8000b2c <__aeabi_dcmpun>
 800a354:	b140      	cbz	r0, 800a368 <_printf_float+0xec>
 800a356:	464b      	mov	r3, r9
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bfbc      	itt	lt
 800a35c:	232d      	movlt	r3, #45	; 0x2d
 800a35e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a362:	4a7f      	ldr	r2, [pc, #508]	; (800a560 <_printf_float+0x2e4>)
 800a364:	4b7f      	ldr	r3, [pc, #508]	; (800a564 <_printf_float+0x2e8>)
 800a366:	e7d1      	b.n	800a30c <_printf_float+0x90>
 800a368:	6863      	ldr	r3, [r4, #4]
 800a36a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a36e:	9206      	str	r2, [sp, #24]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	d13f      	bne.n	800a3f4 <_printf_float+0x178>
 800a374:	2306      	movs	r3, #6
 800a376:	6063      	str	r3, [r4, #4]
 800a378:	9b05      	ldr	r3, [sp, #20]
 800a37a:	6861      	ldr	r1, [r4, #4]
 800a37c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a380:	2300      	movs	r3, #0
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	ab0a      	add	r3, sp, #40	; 0x28
 800a386:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a38a:	ab09      	add	r3, sp, #36	; 0x24
 800a38c:	ec49 8b10 	vmov	d0, r8, r9
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	6022      	str	r2, [r4, #0]
 800a394:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a398:	4628      	mov	r0, r5
 800a39a:	f7ff fecf 	bl	800a13c <__cvt>
 800a39e:	9b06      	ldr	r3, [sp, #24]
 800a3a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3a2:	2b47      	cmp	r3, #71	; 0x47
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	d108      	bne.n	800a3ba <_printf_float+0x13e>
 800a3a8:	1cc8      	adds	r0, r1, #3
 800a3aa:	db02      	blt.n	800a3b2 <_printf_float+0x136>
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	dd41      	ble.n	800a436 <_printf_float+0x1ba>
 800a3b2:	f1ab 0302 	sub.w	r3, fp, #2
 800a3b6:	fa5f fb83 	uxtb.w	fp, r3
 800a3ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3be:	d820      	bhi.n	800a402 <_printf_float+0x186>
 800a3c0:	3901      	subs	r1, #1
 800a3c2:	465a      	mov	r2, fp
 800a3c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a3ca:	f7ff ff19 	bl	800a200 <__exponent>
 800a3ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3d0:	1813      	adds	r3, r2, r0
 800a3d2:	2a01      	cmp	r2, #1
 800a3d4:	4681      	mov	r9, r0
 800a3d6:	6123      	str	r3, [r4, #16]
 800a3d8:	dc02      	bgt.n	800a3e0 <_printf_float+0x164>
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	07d2      	lsls	r2, r2, #31
 800a3de:	d501      	bpl.n	800a3e4 <_printf_float+0x168>
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	6123      	str	r3, [r4, #16]
 800a3e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d09c      	beq.n	800a326 <_printf_float+0xaa>
 800a3ec:	232d      	movs	r3, #45	; 0x2d
 800a3ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f2:	e798      	b.n	800a326 <_printf_float+0xaa>
 800a3f4:	9a06      	ldr	r2, [sp, #24]
 800a3f6:	2a47      	cmp	r2, #71	; 0x47
 800a3f8:	d1be      	bne.n	800a378 <_printf_float+0xfc>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1bc      	bne.n	800a378 <_printf_float+0xfc>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e7b9      	b.n	800a376 <_printf_float+0xfa>
 800a402:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a406:	d118      	bne.n	800a43a <_printf_float+0x1be>
 800a408:	2900      	cmp	r1, #0
 800a40a:	6863      	ldr	r3, [r4, #4]
 800a40c:	dd0b      	ble.n	800a426 <_printf_float+0x1aa>
 800a40e:	6121      	str	r1, [r4, #16]
 800a410:	b913      	cbnz	r3, 800a418 <_printf_float+0x19c>
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	07d0      	lsls	r0, r2, #31
 800a416:	d502      	bpl.n	800a41e <_printf_float+0x1a2>
 800a418:	3301      	adds	r3, #1
 800a41a:	440b      	add	r3, r1
 800a41c:	6123      	str	r3, [r4, #16]
 800a41e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a420:	f04f 0900 	mov.w	r9, #0
 800a424:	e7de      	b.n	800a3e4 <_printf_float+0x168>
 800a426:	b913      	cbnz	r3, 800a42e <_printf_float+0x1b2>
 800a428:	6822      	ldr	r2, [r4, #0]
 800a42a:	07d2      	lsls	r2, r2, #31
 800a42c:	d501      	bpl.n	800a432 <_printf_float+0x1b6>
 800a42e:	3302      	adds	r3, #2
 800a430:	e7f4      	b.n	800a41c <_printf_float+0x1a0>
 800a432:	2301      	movs	r3, #1
 800a434:	e7f2      	b.n	800a41c <_printf_float+0x1a0>
 800a436:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43c:	4299      	cmp	r1, r3
 800a43e:	db05      	blt.n	800a44c <_printf_float+0x1d0>
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	6121      	str	r1, [r4, #16]
 800a444:	07d8      	lsls	r0, r3, #31
 800a446:	d5ea      	bpl.n	800a41e <_printf_float+0x1a2>
 800a448:	1c4b      	adds	r3, r1, #1
 800a44a:	e7e7      	b.n	800a41c <_printf_float+0x1a0>
 800a44c:	2900      	cmp	r1, #0
 800a44e:	bfd4      	ite	le
 800a450:	f1c1 0202 	rsble	r2, r1, #2
 800a454:	2201      	movgt	r2, #1
 800a456:	4413      	add	r3, r2
 800a458:	e7e0      	b.n	800a41c <_printf_float+0x1a0>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	055a      	lsls	r2, r3, #21
 800a45e:	d407      	bmi.n	800a470 <_printf_float+0x1f4>
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	4642      	mov	r2, r8
 800a464:	4631      	mov	r1, r6
 800a466:	4628      	mov	r0, r5
 800a468:	47b8      	blx	r7
 800a46a:	3001      	adds	r0, #1
 800a46c:	d12c      	bne.n	800a4c8 <_printf_float+0x24c>
 800a46e:	e764      	b.n	800a33a <_printf_float+0xbe>
 800a470:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a474:	f240 80e0 	bls.w	800a638 <_printf_float+0x3bc>
 800a478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a47c:	2200      	movs	r2, #0
 800a47e:	2300      	movs	r3, #0
 800a480:	f7f6 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a484:	2800      	cmp	r0, #0
 800a486:	d034      	beq.n	800a4f2 <_printf_float+0x276>
 800a488:	4a37      	ldr	r2, [pc, #220]	; (800a568 <_printf_float+0x2ec>)
 800a48a:	2301      	movs	r3, #1
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f af51 	beq.w	800a33a <_printf_float+0xbe>
 800a498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a49c:	429a      	cmp	r2, r3
 800a49e:	db02      	blt.n	800a4a6 <_printf_float+0x22a>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	07d8      	lsls	r0, r3, #31
 800a4a4:	d510      	bpl.n	800a4c8 <_printf_float+0x24c>
 800a4a6:	ee18 3a10 	vmov	r3, s16
 800a4aa:	4652      	mov	r2, sl
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	47b8      	blx	r7
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	f43f af41 	beq.w	800a33a <_printf_float+0xbe>
 800a4b8:	f04f 0800 	mov.w	r8, #0
 800a4bc:	f104 091a 	add.w	r9, r4, #26
 800a4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	4543      	cmp	r3, r8
 800a4c6:	dc09      	bgt.n	800a4dc <_printf_float+0x260>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	079b      	lsls	r3, r3, #30
 800a4cc:	f100 8107 	bmi.w	800a6de <_printf_float+0x462>
 800a4d0:	68e0      	ldr	r0, [r4, #12]
 800a4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4d4:	4298      	cmp	r0, r3
 800a4d6:	bfb8      	it	lt
 800a4d8:	4618      	movlt	r0, r3
 800a4da:	e730      	b.n	800a33e <_printf_float+0xc2>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	464a      	mov	r2, r9
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	47b8      	blx	r7
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f43f af27 	beq.w	800a33a <_printf_float+0xbe>
 800a4ec:	f108 0801 	add.w	r8, r8, #1
 800a4f0:	e7e6      	b.n	800a4c0 <_printf_float+0x244>
 800a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dc39      	bgt.n	800a56c <_printf_float+0x2f0>
 800a4f8:	4a1b      	ldr	r2, [pc, #108]	; (800a568 <_printf_float+0x2ec>)
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	f43f af19 	beq.w	800a33a <_printf_float+0xbe>
 800a508:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a50c:	4313      	orrs	r3, r2
 800a50e:	d102      	bne.n	800a516 <_printf_float+0x29a>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	07d9      	lsls	r1, r3, #31
 800a514:	d5d8      	bpl.n	800a4c8 <_printf_float+0x24c>
 800a516:	ee18 3a10 	vmov	r3, s16
 800a51a:	4652      	mov	r2, sl
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f af09 	beq.w	800a33a <_printf_float+0xbe>
 800a528:	f04f 0900 	mov.w	r9, #0
 800a52c:	f104 0a1a 	add.w	sl, r4, #26
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	425b      	negs	r3, r3
 800a534:	454b      	cmp	r3, r9
 800a536:	dc01      	bgt.n	800a53c <_printf_float+0x2c0>
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	e792      	b.n	800a462 <_printf_float+0x1e6>
 800a53c:	2301      	movs	r3, #1
 800a53e:	4652      	mov	r2, sl
 800a540:	4631      	mov	r1, r6
 800a542:	4628      	mov	r0, r5
 800a544:	47b8      	blx	r7
 800a546:	3001      	adds	r0, #1
 800a548:	f43f aef7 	beq.w	800a33a <_printf_float+0xbe>
 800a54c:	f109 0901 	add.w	r9, r9, #1
 800a550:	e7ee      	b.n	800a530 <_printf_float+0x2b4>
 800a552:	bf00      	nop
 800a554:	7fefffff 	.word	0x7fefffff
 800a558:	0800fdf4 	.word	0x0800fdf4
 800a55c:	0800fdf8 	.word	0x0800fdf8
 800a560:	0800fdfc 	.word	0x0800fdfc
 800a564:	0800fe00 	.word	0x0800fe00
 800a568:	0800fe04 	.word	0x0800fe04
 800a56c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a56e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a570:	429a      	cmp	r2, r3
 800a572:	bfa8      	it	ge
 800a574:	461a      	movge	r2, r3
 800a576:	2a00      	cmp	r2, #0
 800a578:	4691      	mov	r9, r2
 800a57a:	dc37      	bgt.n	800a5ec <_printf_float+0x370>
 800a57c:	f04f 0b00 	mov.w	fp, #0
 800a580:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a584:	f104 021a 	add.w	r2, r4, #26
 800a588:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	eba3 0309 	sub.w	r3, r3, r9
 800a590:	455b      	cmp	r3, fp
 800a592:	dc33      	bgt.n	800a5fc <_printf_float+0x380>
 800a594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a598:	429a      	cmp	r2, r3
 800a59a:	db3b      	blt.n	800a614 <_printf_float+0x398>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	07da      	lsls	r2, r3, #31
 800a5a0:	d438      	bmi.n	800a614 <_printf_float+0x398>
 800a5a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a5a6:	eba2 0903 	sub.w	r9, r2, r3
 800a5aa:	9b05      	ldr	r3, [sp, #20]
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	4591      	cmp	r9, r2
 800a5b0:	bfa8      	it	ge
 800a5b2:	4691      	movge	r9, r2
 800a5b4:	f1b9 0f00 	cmp.w	r9, #0
 800a5b8:	dc35      	bgt.n	800a626 <_printf_float+0x3aa>
 800a5ba:	f04f 0800 	mov.w	r8, #0
 800a5be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5c2:	f104 0a1a 	add.w	sl, r4, #26
 800a5c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	eba3 0309 	sub.w	r3, r3, r9
 800a5d0:	4543      	cmp	r3, r8
 800a5d2:	f77f af79 	ble.w	800a4c8 <_printf_float+0x24c>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4652      	mov	r2, sl
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4628      	mov	r0, r5
 800a5de:	47b8      	blx	r7
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	f43f aeaa 	beq.w	800a33a <_printf_float+0xbe>
 800a5e6:	f108 0801 	add.w	r8, r8, #1
 800a5ea:	e7ec      	b.n	800a5c6 <_printf_float+0x34a>
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	47b8      	blx	r7
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d1c0      	bne.n	800a57c <_printf_float+0x300>
 800a5fa:	e69e      	b.n	800a33a <_printf_float+0xbe>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	4631      	mov	r1, r6
 800a600:	4628      	mov	r0, r5
 800a602:	9205      	str	r2, [sp, #20]
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f ae97 	beq.w	800a33a <_printf_float+0xbe>
 800a60c:	9a05      	ldr	r2, [sp, #20]
 800a60e:	f10b 0b01 	add.w	fp, fp, #1
 800a612:	e7b9      	b.n	800a588 <_printf_float+0x30c>
 800a614:	ee18 3a10 	vmov	r3, s16
 800a618:	4652      	mov	r2, sl
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	d1be      	bne.n	800a5a2 <_printf_float+0x326>
 800a624:	e689      	b.n	800a33a <_printf_float+0xbe>
 800a626:	9a05      	ldr	r2, [sp, #20]
 800a628:	464b      	mov	r3, r9
 800a62a:	4442      	add	r2, r8
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	d1c1      	bne.n	800a5ba <_printf_float+0x33e>
 800a636:	e680      	b.n	800a33a <_printf_float+0xbe>
 800a638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a63a:	2a01      	cmp	r2, #1
 800a63c:	dc01      	bgt.n	800a642 <_printf_float+0x3c6>
 800a63e:	07db      	lsls	r3, r3, #31
 800a640:	d53a      	bpl.n	800a6b8 <_printf_float+0x43c>
 800a642:	2301      	movs	r3, #1
 800a644:	4642      	mov	r2, r8
 800a646:	4631      	mov	r1, r6
 800a648:	4628      	mov	r0, r5
 800a64a:	47b8      	blx	r7
 800a64c:	3001      	adds	r0, #1
 800a64e:	f43f ae74 	beq.w	800a33a <_printf_float+0xbe>
 800a652:	ee18 3a10 	vmov	r3, s16
 800a656:	4652      	mov	r2, sl
 800a658:	4631      	mov	r1, r6
 800a65a:	4628      	mov	r0, r5
 800a65c:	47b8      	blx	r7
 800a65e:	3001      	adds	r0, #1
 800a660:	f43f ae6b 	beq.w	800a33a <_printf_float+0xbe>
 800a664:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a668:	2200      	movs	r2, #0
 800a66a:	2300      	movs	r3, #0
 800a66c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a670:	f7f6 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a674:	b9d8      	cbnz	r0, 800a6ae <_printf_float+0x432>
 800a676:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a67a:	f108 0201 	add.w	r2, r8, #1
 800a67e:	4631      	mov	r1, r6
 800a680:	4628      	mov	r0, r5
 800a682:	47b8      	blx	r7
 800a684:	3001      	adds	r0, #1
 800a686:	d10e      	bne.n	800a6a6 <_printf_float+0x42a>
 800a688:	e657      	b.n	800a33a <_printf_float+0xbe>
 800a68a:	2301      	movs	r3, #1
 800a68c:	4652      	mov	r2, sl
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	47b8      	blx	r7
 800a694:	3001      	adds	r0, #1
 800a696:	f43f ae50 	beq.w	800a33a <_printf_float+0xbe>
 800a69a:	f108 0801 	add.w	r8, r8, #1
 800a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	4543      	cmp	r3, r8
 800a6a4:	dcf1      	bgt.n	800a68a <_printf_float+0x40e>
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6ac:	e6da      	b.n	800a464 <_printf_float+0x1e8>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f104 0a1a 	add.w	sl, r4, #26
 800a6b6:	e7f2      	b.n	800a69e <_printf_float+0x422>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4642      	mov	r2, r8
 800a6bc:	e7df      	b.n	800a67e <_printf_float+0x402>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	464a      	mov	r2, r9
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b8      	blx	r7
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	f43f ae36 	beq.w	800a33a <_printf_float+0xbe>
 800a6ce:	f108 0801 	add.w	r8, r8, #1
 800a6d2:	68e3      	ldr	r3, [r4, #12]
 800a6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6d6:	1a5b      	subs	r3, r3, r1
 800a6d8:	4543      	cmp	r3, r8
 800a6da:	dcf0      	bgt.n	800a6be <_printf_float+0x442>
 800a6dc:	e6f8      	b.n	800a4d0 <_printf_float+0x254>
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	f104 0919 	add.w	r9, r4, #25
 800a6e6:	e7f4      	b.n	800a6d2 <_printf_float+0x456>

0800a6e8 <_printf_common>:
 800a6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	4699      	mov	r9, r3
 800a6f0:	688a      	ldr	r2, [r1, #8]
 800a6f2:	690b      	ldr	r3, [r1, #16]
 800a6f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	bfb8      	it	lt
 800a6fc:	4613      	movlt	r3, r2
 800a6fe:	6033      	str	r3, [r6, #0]
 800a700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a704:	4607      	mov	r7, r0
 800a706:	460c      	mov	r4, r1
 800a708:	b10a      	cbz	r2, 800a70e <_printf_common+0x26>
 800a70a:	3301      	adds	r3, #1
 800a70c:	6033      	str	r3, [r6, #0]
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	0699      	lsls	r1, r3, #26
 800a712:	bf42      	ittt	mi
 800a714:	6833      	ldrmi	r3, [r6, #0]
 800a716:	3302      	addmi	r3, #2
 800a718:	6033      	strmi	r3, [r6, #0]
 800a71a:	6825      	ldr	r5, [r4, #0]
 800a71c:	f015 0506 	ands.w	r5, r5, #6
 800a720:	d106      	bne.n	800a730 <_printf_common+0x48>
 800a722:	f104 0a19 	add.w	sl, r4, #25
 800a726:	68e3      	ldr	r3, [r4, #12]
 800a728:	6832      	ldr	r2, [r6, #0]
 800a72a:	1a9b      	subs	r3, r3, r2
 800a72c:	42ab      	cmp	r3, r5
 800a72e:	dc26      	bgt.n	800a77e <_printf_common+0x96>
 800a730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a734:	1e13      	subs	r3, r2, #0
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	bf18      	it	ne
 800a73a:	2301      	movne	r3, #1
 800a73c:	0692      	lsls	r2, r2, #26
 800a73e:	d42b      	bmi.n	800a798 <_printf_common+0xb0>
 800a740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a744:	4649      	mov	r1, r9
 800a746:	4638      	mov	r0, r7
 800a748:	47c0      	blx	r8
 800a74a:	3001      	adds	r0, #1
 800a74c:	d01e      	beq.n	800a78c <_printf_common+0xa4>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	6922      	ldr	r2, [r4, #16]
 800a752:	f003 0306 	and.w	r3, r3, #6
 800a756:	2b04      	cmp	r3, #4
 800a758:	bf02      	ittt	eq
 800a75a:	68e5      	ldreq	r5, [r4, #12]
 800a75c:	6833      	ldreq	r3, [r6, #0]
 800a75e:	1aed      	subeq	r5, r5, r3
 800a760:	68a3      	ldr	r3, [r4, #8]
 800a762:	bf0c      	ite	eq
 800a764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a768:	2500      	movne	r5, #0
 800a76a:	4293      	cmp	r3, r2
 800a76c:	bfc4      	itt	gt
 800a76e:	1a9b      	subgt	r3, r3, r2
 800a770:	18ed      	addgt	r5, r5, r3
 800a772:	2600      	movs	r6, #0
 800a774:	341a      	adds	r4, #26
 800a776:	42b5      	cmp	r5, r6
 800a778:	d11a      	bne.n	800a7b0 <_printf_common+0xc8>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e008      	b.n	800a790 <_printf_common+0xa8>
 800a77e:	2301      	movs	r3, #1
 800a780:	4652      	mov	r2, sl
 800a782:	4649      	mov	r1, r9
 800a784:	4638      	mov	r0, r7
 800a786:	47c0      	blx	r8
 800a788:	3001      	adds	r0, #1
 800a78a:	d103      	bne.n	800a794 <_printf_common+0xac>
 800a78c:	f04f 30ff 	mov.w	r0, #4294967295
 800a790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a794:	3501      	adds	r5, #1
 800a796:	e7c6      	b.n	800a726 <_printf_common+0x3e>
 800a798:	18e1      	adds	r1, r4, r3
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	2030      	movs	r0, #48	; 0x30
 800a79e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7a2:	4422      	add	r2, r4
 800a7a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7ac:	3302      	adds	r3, #2
 800a7ae:	e7c7      	b.n	800a740 <_printf_common+0x58>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	47c0      	blx	r8
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d0e6      	beq.n	800a78c <_printf_common+0xa4>
 800a7be:	3601      	adds	r6, #1
 800a7c0:	e7d9      	b.n	800a776 <_printf_common+0x8e>
	...

0800a7c4 <_printf_i>:
 800a7c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c8:	7e0f      	ldrb	r7, [r1, #24]
 800a7ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7cc:	2f78      	cmp	r7, #120	; 0x78
 800a7ce:	4691      	mov	r9, r2
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	469a      	mov	sl, r3
 800a7d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7da:	d807      	bhi.n	800a7ec <_printf_i+0x28>
 800a7dc:	2f62      	cmp	r7, #98	; 0x62
 800a7de:	d80a      	bhi.n	800a7f6 <_printf_i+0x32>
 800a7e0:	2f00      	cmp	r7, #0
 800a7e2:	f000 80d4 	beq.w	800a98e <_printf_i+0x1ca>
 800a7e6:	2f58      	cmp	r7, #88	; 0x58
 800a7e8:	f000 80c0 	beq.w	800a96c <_printf_i+0x1a8>
 800a7ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7f4:	e03a      	b.n	800a86c <_printf_i+0xa8>
 800a7f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7fa:	2b15      	cmp	r3, #21
 800a7fc:	d8f6      	bhi.n	800a7ec <_printf_i+0x28>
 800a7fe:	a101      	add	r1, pc, #4	; (adr r1, 800a804 <_printf_i+0x40>)
 800a800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a804:	0800a85d 	.word	0x0800a85d
 800a808:	0800a871 	.word	0x0800a871
 800a80c:	0800a7ed 	.word	0x0800a7ed
 800a810:	0800a7ed 	.word	0x0800a7ed
 800a814:	0800a7ed 	.word	0x0800a7ed
 800a818:	0800a7ed 	.word	0x0800a7ed
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a7ed 	.word	0x0800a7ed
 800a824:	0800a7ed 	.word	0x0800a7ed
 800a828:	0800a7ed 	.word	0x0800a7ed
 800a82c:	0800a7ed 	.word	0x0800a7ed
 800a830:	0800a975 	.word	0x0800a975
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a92f 	.word	0x0800a92f
 800a83c:	0800a7ed 	.word	0x0800a7ed
 800a840:	0800a7ed 	.word	0x0800a7ed
 800a844:	0800a997 	.word	0x0800a997
 800a848:	0800a7ed 	.word	0x0800a7ed
 800a84c:	0800a89d 	.word	0x0800a89d
 800a850:	0800a7ed 	.word	0x0800a7ed
 800a854:	0800a7ed 	.word	0x0800a7ed
 800a858:	0800a937 	.word	0x0800a937
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	1d1a      	adds	r2, r3, #4
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	602a      	str	r2, [r5, #0]
 800a864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a86c:	2301      	movs	r3, #1
 800a86e:	e09f      	b.n	800a9b0 <_printf_i+0x1ec>
 800a870:	6820      	ldr	r0, [r4, #0]
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	0607      	lsls	r7, r0, #24
 800a876:	f103 0104 	add.w	r1, r3, #4
 800a87a:	6029      	str	r1, [r5, #0]
 800a87c:	d501      	bpl.n	800a882 <_printf_i+0xbe>
 800a87e:	681e      	ldr	r6, [r3, #0]
 800a880:	e003      	b.n	800a88a <_printf_i+0xc6>
 800a882:	0646      	lsls	r6, r0, #25
 800a884:	d5fb      	bpl.n	800a87e <_printf_i+0xba>
 800a886:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	da03      	bge.n	800a896 <_printf_i+0xd2>
 800a88e:	232d      	movs	r3, #45	; 0x2d
 800a890:	4276      	negs	r6, r6
 800a892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a896:	485a      	ldr	r0, [pc, #360]	; (800aa00 <_printf_i+0x23c>)
 800a898:	230a      	movs	r3, #10
 800a89a:	e012      	b.n	800a8c2 <_printf_i+0xfe>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	6820      	ldr	r0, [r4, #0]
 800a8a0:	1d19      	adds	r1, r3, #4
 800a8a2:	6029      	str	r1, [r5, #0]
 800a8a4:	0605      	lsls	r5, r0, #24
 800a8a6:	d501      	bpl.n	800a8ac <_printf_i+0xe8>
 800a8a8:	681e      	ldr	r6, [r3, #0]
 800a8aa:	e002      	b.n	800a8b2 <_printf_i+0xee>
 800a8ac:	0641      	lsls	r1, r0, #25
 800a8ae:	d5fb      	bpl.n	800a8a8 <_printf_i+0xe4>
 800a8b0:	881e      	ldrh	r6, [r3, #0]
 800a8b2:	4853      	ldr	r0, [pc, #332]	; (800aa00 <_printf_i+0x23c>)
 800a8b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a8b6:	bf0c      	ite	eq
 800a8b8:	2308      	moveq	r3, #8
 800a8ba:	230a      	movne	r3, #10
 800a8bc:	2100      	movs	r1, #0
 800a8be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8c2:	6865      	ldr	r5, [r4, #4]
 800a8c4:	60a5      	str	r5, [r4, #8]
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	bfa2      	ittt	ge
 800a8ca:	6821      	ldrge	r1, [r4, #0]
 800a8cc:	f021 0104 	bicge.w	r1, r1, #4
 800a8d0:	6021      	strge	r1, [r4, #0]
 800a8d2:	b90e      	cbnz	r6, 800a8d8 <_printf_i+0x114>
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	d04b      	beq.n	800a970 <_printf_i+0x1ac>
 800a8d8:	4615      	mov	r5, r2
 800a8da:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8de:	fb03 6711 	mls	r7, r3, r1, r6
 800a8e2:	5dc7      	ldrb	r7, [r0, r7]
 800a8e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8e8:	4637      	mov	r7, r6
 800a8ea:	42bb      	cmp	r3, r7
 800a8ec:	460e      	mov	r6, r1
 800a8ee:	d9f4      	bls.n	800a8da <_printf_i+0x116>
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d10b      	bne.n	800a90c <_printf_i+0x148>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	07de      	lsls	r6, r3, #31
 800a8f8:	d508      	bpl.n	800a90c <_printf_i+0x148>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	6861      	ldr	r1, [r4, #4]
 800a8fe:	4299      	cmp	r1, r3
 800a900:	bfde      	ittt	le
 800a902:	2330      	movle	r3, #48	; 0x30
 800a904:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a908:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a90c:	1b52      	subs	r2, r2, r5
 800a90e:	6122      	str	r2, [r4, #16]
 800a910:	f8cd a000 	str.w	sl, [sp]
 800a914:	464b      	mov	r3, r9
 800a916:	aa03      	add	r2, sp, #12
 800a918:	4621      	mov	r1, r4
 800a91a:	4640      	mov	r0, r8
 800a91c:	f7ff fee4 	bl	800a6e8 <_printf_common>
 800a920:	3001      	adds	r0, #1
 800a922:	d14a      	bne.n	800a9ba <_printf_i+0x1f6>
 800a924:	f04f 30ff 	mov.w	r0, #4294967295
 800a928:	b004      	add	sp, #16
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	4833      	ldr	r0, [pc, #204]	; (800aa04 <_printf_i+0x240>)
 800a938:	2778      	movs	r7, #120	; 0x78
 800a93a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	6829      	ldr	r1, [r5, #0]
 800a942:	061f      	lsls	r7, r3, #24
 800a944:	f851 6b04 	ldr.w	r6, [r1], #4
 800a948:	d402      	bmi.n	800a950 <_printf_i+0x18c>
 800a94a:	065f      	lsls	r7, r3, #25
 800a94c:	bf48      	it	mi
 800a94e:	b2b6      	uxthmi	r6, r6
 800a950:	07df      	lsls	r7, r3, #31
 800a952:	bf48      	it	mi
 800a954:	f043 0320 	orrmi.w	r3, r3, #32
 800a958:	6029      	str	r1, [r5, #0]
 800a95a:	bf48      	it	mi
 800a95c:	6023      	strmi	r3, [r4, #0]
 800a95e:	b91e      	cbnz	r6, 800a968 <_printf_i+0x1a4>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	f023 0320 	bic.w	r3, r3, #32
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	2310      	movs	r3, #16
 800a96a:	e7a7      	b.n	800a8bc <_printf_i+0xf8>
 800a96c:	4824      	ldr	r0, [pc, #144]	; (800aa00 <_printf_i+0x23c>)
 800a96e:	e7e4      	b.n	800a93a <_printf_i+0x176>
 800a970:	4615      	mov	r5, r2
 800a972:	e7bd      	b.n	800a8f0 <_printf_i+0x12c>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	6826      	ldr	r6, [r4, #0]
 800a978:	6961      	ldr	r1, [r4, #20]
 800a97a:	1d18      	adds	r0, r3, #4
 800a97c:	6028      	str	r0, [r5, #0]
 800a97e:	0635      	lsls	r5, r6, #24
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	d501      	bpl.n	800a988 <_printf_i+0x1c4>
 800a984:	6019      	str	r1, [r3, #0]
 800a986:	e002      	b.n	800a98e <_printf_i+0x1ca>
 800a988:	0670      	lsls	r0, r6, #25
 800a98a:	d5fb      	bpl.n	800a984 <_printf_i+0x1c0>
 800a98c:	8019      	strh	r1, [r3, #0]
 800a98e:	2300      	movs	r3, #0
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	4615      	mov	r5, r2
 800a994:	e7bc      	b.n	800a910 <_printf_i+0x14c>
 800a996:	682b      	ldr	r3, [r5, #0]
 800a998:	1d1a      	adds	r2, r3, #4
 800a99a:	602a      	str	r2, [r5, #0]
 800a99c:	681d      	ldr	r5, [r3, #0]
 800a99e:	6862      	ldr	r2, [r4, #4]
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f7f5 fc14 	bl	80001d0 <memchr>
 800a9a8:	b108      	cbz	r0, 800a9ae <_printf_i+0x1ea>
 800a9aa:	1b40      	subs	r0, r0, r5
 800a9ac:	6060      	str	r0, [r4, #4]
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	6123      	str	r3, [r4, #16]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b8:	e7aa      	b.n	800a910 <_printf_i+0x14c>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4649      	mov	r1, r9
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	47d0      	blx	sl
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d0ad      	beq.n	800a924 <_printf_i+0x160>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	079b      	lsls	r3, r3, #30
 800a9cc:	d413      	bmi.n	800a9f6 <_printf_i+0x232>
 800a9ce:	68e0      	ldr	r0, [r4, #12]
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	4298      	cmp	r0, r3
 800a9d4:	bfb8      	it	lt
 800a9d6:	4618      	movlt	r0, r3
 800a9d8:	e7a6      	b.n	800a928 <_printf_i+0x164>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4632      	mov	r2, r6
 800a9de:	4649      	mov	r1, r9
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	47d0      	blx	sl
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d09d      	beq.n	800a924 <_printf_i+0x160>
 800a9e8:	3501      	adds	r5, #1
 800a9ea:	68e3      	ldr	r3, [r4, #12]
 800a9ec:	9903      	ldr	r1, [sp, #12]
 800a9ee:	1a5b      	subs	r3, r3, r1
 800a9f0:	42ab      	cmp	r3, r5
 800a9f2:	dcf2      	bgt.n	800a9da <_printf_i+0x216>
 800a9f4:	e7eb      	b.n	800a9ce <_printf_i+0x20a>
 800a9f6:	2500      	movs	r5, #0
 800a9f8:	f104 0619 	add.w	r6, r4, #25
 800a9fc:	e7f5      	b.n	800a9ea <_printf_i+0x226>
 800a9fe:	bf00      	nop
 800aa00:	0800fe06 	.word	0x0800fe06
 800aa04:	0800fe17 	.word	0x0800fe17

0800aa08 <_scanf_float>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	b087      	sub	sp, #28
 800aa0e:	4617      	mov	r7, r2
 800aa10:	9303      	str	r3, [sp, #12]
 800aa12:	688b      	ldr	r3, [r1, #8]
 800aa14:	1e5a      	subs	r2, r3, #1
 800aa16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa1a:	bf83      	ittte	hi
 800aa1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa20:	195b      	addhi	r3, r3, r5
 800aa22:	9302      	strhi	r3, [sp, #8]
 800aa24:	2300      	movls	r3, #0
 800aa26:	bf86      	itte	hi
 800aa28:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa2c:	608b      	strhi	r3, [r1, #8]
 800aa2e:	9302      	strls	r3, [sp, #8]
 800aa30:	680b      	ldr	r3, [r1, #0]
 800aa32:	468b      	mov	fp, r1
 800aa34:	2500      	movs	r5, #0
 800aa36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa3a:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa42:	4680      	mov	r8, r0
 800aa44:	460c      	mov	r4, r1
 800aa46:	465e      	mov	r6, fp
 800aa48:	46aa      	mov	sl, r5
 800aa4a:	46a9      	mov	r9, r5
 800aa4c:	9501      	str	r5, [sp, #4]
 800aa4e:	68a2      	ldr	r2, [r4, #8]
 800aa50:	b152      	cbz	r2, 800aa68 <_scanf_float+0x60>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	2b4e      	cmp	r3, #78	; 0x4e
 800aa58:	d864      	bhi.n	800ab24 <_scanf_float+0x11c>
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d83c      	bhi.n	800aad8 <_scanf_float+0xd0>
 800aa5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa62:	b2c8      	uxtb	r0, r1
 800aa64:	280e      	cmp	r0, #14
 800aa66:	d93a      	bls.n	800aade <_scanf_float+0xd6>
 800aa68:	f1b9 0f00 	cmp.w	r9, #0
 800aa6c:	d003      	beq.n	800aa76 <_scanf_float+0x6e>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa7a:	f1ba 0f01 	cmp.w	sl, #1
 800aa7e:	f200 8113 	bhi.w	800aca8 <_scanf_float+0x2a0>
 800aa82:	455e      	cmp	r6, fp
 800aa84:	f200 8105 	bhi.w	800ac92 <_scanf_float+0x28a>
 800aa88:	2501      	movs	r5, #1
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	b007      	add	sp, #28
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aa96:	2a0d      	cmp	r2, #13
 800aa98:	d8e6      	bhi.n	800aa68 <_scanf_float+0x60>
 800aa9a:	a101      	add	r1, pc, #4	; (adr r1, 800aaa0 <_scanf_float+0x98>)
 800aa9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aaa0:	0800abdf 	.word	0x0800abdf
 800aaa4:	0800aa69 	.word	0x0800aa69
 800aaa8:	0800aa69 	.word	0x0800aa69
 800aaac:	0800aa69 	.word	0x0800aa69
 800aab0:	0800ac3f 	.word	0x0800ac3f
 800aab4:	0800ac17 	.word	0x0800ac17
 800aab8:	0800aa69 	.word	0x0800aa69
 800aabc:	0800aa69 	.word	0x0800aa69
 800aac0:	0800abed 	.word	0x0800abed
 800aac4:	0800aa69 	.word	0x0800aa69
 800aac8:	0800aa69 	.word	0x0800aa69
 800aacc:	0800aa69 	.word	0x0800aa69
 800aad0:	0800aa69 	.word	0x0800aa69
 800aad4:	0800aba5 	.word	0x0800aba5
 800aad8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aadc:	e7db      	b.n	800aa96 <_scanf_float+0x8e>
 800aade:	290e      	cmp	r1, #14
 800aae0:	d8c2      	bhi.n	800aa68 <_scanf_float+0x60>
 800aae2:	a001      	add	r0, pc, #4	; (adr r0, 800aae8 <_scanf_float+0xe0>)
 800aae4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aae8:	0800ab97 	.word	0x0800ab97
 800aaec:	0800aa69 	.word	0x0800aa69
 800aaf0:	0800ab97 	.word	0x0800ab97
 800aaf4:	0800ac2b 	.word	0x0800ac2b
 800aaf8:	0800aa69 	.word	0x0800aa69
 800aafc:	0800ab45 	.word	0x0800ab45
 800ab00:	0800ab81 	.word	0x0800ab81
 800ab04:	0800ab81 	.word	0x0800ab81
 800ab08:	0800ab81 	.word	0x0800ab81
 800ab0c:	0800ab81 	.word	0x0800ab81
 800ab10:	0800ab81 	.word	0x0800ab81
 800ab14:	0800ab81 	.word	0x0800ab81
 800ab18:	0800ab81 	.word	0x0800ab81
 800ab1c:	0800ab81 	.word	0x0800ab81
 800ab20:	0800ab81 	.word	0x0800ab81
 800ab24:	2b6e      	cmp	r3, #110	; 0x6e
 800ab26:	d809      	bhi.n	800ab3c <_scanf_float+0x134>
 800ab28:	2b60      	cmp	r3, #96	; 0x60
 800ab2a:	d8b2      	bhi.n	800aa92 <_scanf_float+0x8a>
 800ab2c:	2b54      	cmp	r3, #84	; 0x54
 800ab2e:	d077      	beq.n	800ac20 <_scanf_float+0x218>
 800ab30:	2b59      	cmp	r3, #89	; 0x59
 800ab32:	d199      	bne.n	800aa68 <_scanf_float+0x60>
 800ab34:	2d07      	cmp	r5, #7
 800ab36:	d197      	bne.n	800aa68 <_scanf_float+0x60>
 800ab38:	2508      	movs	r5, #8
 800ab3a:	e029      	b.n	800ab90 <_scanf_float+0x188>
 800ab3c:	2b74      	cmp	r3, #116	; 0x74
 800ab3e:	d06f      	beq.n	800ac20 <_scanf_float+0x218>
 800ab40:	2b79      	cmp	r3, #121	; 0x79
 800ab42:	e7f6      	b.n	800ab32 <_scanf_float+0x12a>
 800ab44:	6821      	ldr	r1, [r4, #0]
 800ab46:	05c8      	lsls	r0, r1, #23
 800ab48:	d51a      	bpl.n	800ab80 <_scanf_float+0x178>
 800ab4a:	9b02      	ldr	r3, [sp, #8]
 800ab4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab50:	6021      	str	r1, [r4, #0]
 800ab52:	f109 0901 	add.w	r9, r9, #1
 800ab56:	b11b      	cbz	r3, 800ab60 <_scanf_float+0x158>
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	9302      	str	r3, [sp, #8]
 800ab5e:	60a2      	str	r2, [r4, #8]
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	60a3      	str	r3, [r4, #8]
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	6123      	str	r3, [r4, #16]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	607b      	str	r3, [r7, #4]
 800ab74:	f340 8084 	ble.w	800ac80 <_scanf_float+0x278>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	e766      	b.n	800aa4e <_scanf_float+0x46>
 800ab80:	eb1a 0f05 	cmn.w	sl, r5
 800ab84:	f47f af70 	bne.w	800aa68 <_scanf_float+0x60>
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ab8e:	6022      	str	r2, [r4, #0]
 800ab90:	f806 3b01 	strb.w	r3, [r6], #1
 800ab94:	e7e4      	b.n	800ab60 <_scanf_float+0x158>
 800ab96:	6822      	ldr	r2, [r4, #0]
 800ab98:	0610      	lsls	r0, r2, #24
 800ab9a:	f57f af65 	bpl.w	800aa68 <_scanf_float+0x60>
 800ab9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aba2:	e7f4      	b.n	800ab8e <_scanf_float+0x186>
 800aba4:	f1ba 0f00 	cmp.w	sl, #0
 800aba8:	d10e      	bne.n	800abc8 <_scanf_float+0x1c0>
 800abaa:	f1b9 0f00 	cmp.w	r9, #0
 800abae:	d10e      	bne.n	800abce <_scanf_float+0x1c6>
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abba:	d108      	bne.n	800abce <_scanf_float+0x1c6>
 800abbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	f04f 0a01 	mov.w	sl, #1
 800abc6:	e7e3      	b.n	800ab90 <_scanf_float+0x188>
 800abc8:	f1ba 0f02 	cmp.w	sl, #2
 800abcc:	d055      	beq.n	800ac7a <_scanf_float+0x272>
 800abce:	2d01      	cmp	r5, #1
 800abd0:	d002      	beq.n	800abd8 <_scanf_float+0x1d0>
 800abd2:	2d04      	cmp	r5, #4
 800abd4:	f47f af48 	bne.w	800aa68 <_scanf_float+0x60>
 800abd8:	3501      	adds	r5, #1
 800abda:	b2ed      	uxtb	r5, r5
 800abdc:	e7d8      	b.n	800ab90 <_scanf_float+0x188>
 800abde:	f1ba 0f01 	cmp.w	sl, #1
 800abe2:	f47f af41 	bne.w	800aa68 <_scanf_float+0x60>
 800abe6:	f04f 0a02 	mov.w	sl, #2
 800abea:	e7d1      	b.n	800ab90 <_scanf_float+0x188>
 800abec:	b97d      	cbnz	r5, 800ac0e <_scanf_float+0x206>
 800abee:	f1b9 0f00 	cmp.w	r9, #0
 800abf2:	f47f af3c 	bne.w	800aa6e <_scanf_float+0x66>
 800abf6:	6822      	ldr	r2, [r4, #0]
 800abf8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abfc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac00:	f47f af39 	bne.w	800aa76 <_scanf_float+0x6e>
 800ac04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac08:	6022      	str	r2, [r4, #0]
 800ac0a:	2501      	movs	r5, #1
 800ac0c:	e7c0      	b.n	800ab90 <_scanf_float+0x188>
 800ac0e:	2d03      	cmp	r5, #3
 800ac10:	d0e2      	beq.n	800abd8 <_scanf_float+0x1d0>
 800ac12:	2d05      	cmp	r5, #5
 800ac14:	e7de      	b.n	800abd4 <_scanf_float+0x1cc>
 800ac16:	2d02      	cmp	r5, #2
 800ac18:	f47f af26 	bne.w	800aa68 <_scanf_float+0x60>
 800ac1c:	2503      	movs	r5, #3
 800ac1e:	e7b7      	b.n	800ab90 <_scanf_float+0x188>
 800ac20:	2d06      	cmp	r5, #6
 800ac22:	f47f af21 	bne.w	800aa68 <_scanf_float+0x60>
 800ac26:	2507      	movs	r5, #7
 800ac28:	e7b2      	b.n	800ab90 <_scanf_float+0x188>
 800ac2a:	6822      	ldr	r2, [r4, #0]
 800ac2c:	0591      	lsls	r1, r2, #22
 800ac2e:	f57f af1b 	bpl.w	800aa68 <_scanf_float+0x60>
 800ac32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac36:	6022      	str	r2, [r4, #0]
 800ac38:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac3c:	e7a8      	b.n	800ab90 <_scanf_float+0x188>
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac48:	d006      	beq.n	800ac58 <_scanf_float+0x250>
 800ac4a:	0550      	lsls	r0, r2, #21
 800ac4c:	f57f af0c 	bpl.w	800aa68 <_scanf_float+0x60>
 800ac50:	f1b9 0f00 	cmp.w	r9, #0
 800ac54:	f43f af0f 	beq.w	800aa76 <_scanf_float+0x6e>
 800ac58:	0591      	lsls	r1, r2, #22
 800ac5a:	bf58      	it	pl
 800ac5c:	9901      	ldrpl	r1, [sp, #4]
 800ac5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac62:	bf58      	it	pl
 800ac64:	eba9 0101 	subpl.w	r1, r9, r1
 800ac68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac6c:	bf58      	it	pl
 800ac6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac72:	6022      	str	r2, [r4, #0]
 800ac74:	f04f 0900 	mov.w	r9, #0
 800ac78:	e78a      	b.n	800ab90 <_scanf_float+0x188>
 800ac7a:	f04f 0a03 	mov.w	sl, #3
 800ac7e:	e787      	b.n	800ab90 <_scanf_float+0x188>
 800ac80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac84:	4639      	mov	r1, r7
 800ac86:	4640      	mov	r0, r8
 800ac88:	4798      	blx	r3
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f43f aedf 	beq.w	800aa4e <_scanf_float+0x46>
 800ac90:	e6ea      	b.n	800aa68 <_scanf_float+0x60>
 800ac92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac9a:	463a      	mov	r2, r7
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4798      	blx	r3
 800aca0:	6923      	ldr	r3, [r4, #16]
 800aca2:	3b01      	subs	r3, #1
 800aca4:	6123      	str	r3, [r4, #16]
 800aca6:	e6ec      	b.n	800aa82 <_scanf_float+0x7a>
 800aca8:	1e6b      	subs	r3, r5, #1
 800acaa:	2b06      	cmp	r3, #6
 800acac:	d825      	bhi.n	800acfa <_scanf_float+0x2f2>
 800acae:	2d02      	cmp	r5, #2
 800acb0:	d836      	bhi.n	800ad20 <_scanf_float+0x318>
 800acb2:	455e      	cmp	r6, fp
 800acb4:	f67f aee8 	bls.w	800aa88 <_scanf_float+0x80>
 800acb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acc0:	463a      	mov	r2, r7
 800acc2:	4640      	mov	r0, r8
 800acc4:	4798      	blx	r3
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	3b01      	subs	r3, #1
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	e7f1      	b.n	800acb2 <_scanf_float+0x2aa>
 800acce:	9802      	ldr	r0, [sp, #8]
 800acd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800acd8:	9002      	str	r0, [sp, #8]
 800acda:	463a      	mov	r2, r7
 800acdc:	4640      	mov	r0, r8
 800acde:	4798      	blx	r3
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	6123      	str	r3, [r4, #16]
 800ace6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acea:	fa5f fa8a 	uxtb.w	sl, sl
 800acee:	f1ba 0f02 	cmp.w	sl, #2
 800acf2:	d1ec      	bne.n	800acce <_scanf_float+0x2c6>
 800acf4:	3d03      	subs	r5, #3
 800acf6:	b2ed      	uxtb	r5, r5
 800acf8:	1b76      	subs	r6, r6, r5
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	05da      	lsls	r2, r3, #23
 800acfe:	d52f      	bpl.n	800ad60 <_scanf_float+0x358>
 800ad00:	055b      	lsls	r3, r3, #21
 800ad02:	d510      	bpl.n	800ad26 <_scanf_float+0x31e>
 800ad04:	455e      	cmp	r6, fp
 800ad06:	f67f aebf 	bls.w	800aa88 <_scanf_float+0x80>
 800ad0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad12:	463a      	mov	r2, r7
 800ad14:	4640      	mov	r0, r8
 800ad16:	4798      	blx	r3
 800ad18:	6923      	ldr	r3, [r4, #16]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	6123      	str	r3, [r4, #16]
 800ad1e:	e7f1      	b.n	800ad04 <_scanf_float+0x2fc>
 800ad20:	46aa      	mov	sl, r5
 800ad22:	9602      	str	r6, [sp, #8]
 800ad24:	e7df      	b.n	800ace6 <_scanf_float+0x2de>
 800ad26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	2965      	cmp	r1, #101	; 0x65
 800ad2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad32:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad36:	6123      	str	r3, [r4, #16]
 800ad38:	d00c      	beq.n	800ad54 <_scanf_float+0x34c>
 800ad3a:	2945      	cmp	r1, #69	; 0x45
 800ad3c:	d00a      	beq.n	800ad54 <_scanf_float+0x34c>
 800ad3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad42:	463a      	mov	r2, r7
 800ad44:	4640      	mov	r0, r8
 800ad46:	4798      	blx	r3
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	1eb5      	subs	r5, r6, #2
 800ad52:	6123      	str	r3, [r4, #16]
 800ad54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad58:	463a      	mov	r2, r7
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4798      	blx	r3
 800ad5e:	462e      	mov	r6, r5
 800ad60:	6825      	ldr	r5, [r4, #0]
 800ad62:	f015 0510 	ands.w	r5, r5, #16
 800ad66:	d158      	bne.n	800ae1a <_scanf_float+0x412>
 800ad68:	7035      	strb	r5, [r6, #0]
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad74:	d11c      	bne.n	800adb0 <_scanf_float+0x3a8>
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	454b      	cmp	r3, r9
 800ad7a:	eba3 0209 	sub.w	r2, r3, r9
 800ad7e:	d124      	bne.n	800adca <_scanf_float+0x3c2>
 800ad80:	2200      	movs	r2, #0
 800ad82:	4659      	mov	r1, fp
 800ad84:	4640      	mov	r0, r8
 800ad86:	f002 fc3f 	bl	800d608 <_strtod_r>
 800ad8a:	9b03      	ldr	r3, [sp, #12]
 800ad8c:	6821      	ldr	r1, [r4, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f011 0f02 	tst.w	r1, #2
 800ad94:	ec57 6b10 	vmov	r6, r7, d0
 800ad98:	f103 0204 	add.w	r2, r3, #4
 800ad9c:	d020      	beq.n	800ade0 <_scanf_float+0x3d8>
 800ad9e:	9903      	ldr	r1, [sp, #12]
 800ada0:	600a      	str	r2, [r1, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	e9c3 6700 	strd	r6, r7, [r3]
 800ada8:	68e3      	ldr	r3, [r4, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	60e3      	str	r3, [r4, #12]
 800adae:	e66c      	b.n	800aa8a <_scanf_float+0x82>
 800adb0:	9b04      	ldr	r3, [sp, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0e4      	beq.n	800ad80 <_scanf_float+0x378>
 800adb6:	9905      	ldr	r1, [sp, #20]
 800adb8:	230a      	movs	r3, #10
 800adba:	462a      	mov	r2, r5
 800adbc:	3101      	adds	r1, #1
 800adbe:	4640      	mov	r0, r8
 800adc0:	f002 fcaa 	bl	800d718 <_strtol_r>
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	9e05      	ldr	r6, [sp, #20]
 800adc8:	1ac2      	subs	r2, r0, r3
 800adca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800adce:	429e      	cmp	r6, r3
 800add0:	bf28      	it	cs
 800add2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800add6:	4912      	ldr	r1, [pc, #72]	; (800ae20 <_scanf_float+0x418>)
 800add8:	4630      	mov	r0, r6
 800adda:	f000 f8e7 	bl	800afac <siprintf>
 800adde:	e7cf      	b.n	800ad80 <_scanf_float+0x378>
 800ade0:	f011 0f04 	tst.w	r1, #4
 800ade4:	9903      	ldr	r1, [sp, #12]
 800ade6:	600a      	str	r2, [r1, #0]
 800ade8:	d1db      	bne.n	800ada2 <_scanf_float+0x39a>
 800adea:	f8d3 8000 	ldr.w	r8, [r3]
 800adee:	ee10 2a10 	vmov	r2, s0
 800adf2:	ee10 0a10 	vmov	r0, s0
 800adf6:	463b      	mov	r3, r7
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fe97 	bl	8000b2c <__aeabi_dcmpun>
 800adfe:	b128      	cbz	r0, 800ae0c <_scanf_float+0x404>
 800ae00:	4808      	ldr	r0, [pc, #32]	; (800ae24 <_scanf_float+0x41c>)
 800ae02:	f000 f9c5 	bl	800b190 <nanf>
 800ae06:	ed88 0a00 	vstr	s0, [r8]
 800ae0a:	e7cd      	b.n	800ada8 <_scanf_float+0x3a0>
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	4639      	mov	r1, r7
 800ae10:	f7f5 feea 	bl	8000be8 <__aeabi_d2f>
 800ae14:	f8c8 0000 	str.w	r0, [r8]
 800ae18:	e7c6      	b.n	800ada8 <_scanf_float+0x3a0>
 800ae1a:	2500      	movs	r5, #0
 800ae1c:	e635      	b.n	800aa8a <_scanf_float+0x82>
 800ae1e:	bf00      	nop
 800ae20:	0800fe28 	.word	0x0800fe28
 800ae24:	080101bd 	.word	0x080101bd

0800ae28 <std>:
 800ae28:	2300      	movs	r3, #0
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae36:	6083      	str	r3, [r0, #8]
 800ae38:	8181      	strh	r1, [r0, #12]
 800ae3a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae3c:	81c2      	strh	r2, [r0, #14]
 800ae3e:	6183      	str	r3, [r0, #24]
 800ae40:	4619      	mov	r1, r3
 800ae42:	2208      	movs	r2, #8
 800ae44:	305c      	adds	r0, #92	; 0x5c
 800ae46:	f000 f914 	bl	800b072 <memset>
 800ae4a:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <std+0x58>)
 800ae4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae4e:	4b0d      	ldr	r3, [pc, #52]	; (800ae84 <std+0x5c>)
 800ae50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae52:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <std+0x60>)
 800ae54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae56:	4b0d      	ldr	r3, [pc, #52]	; (800ae8c <std+0x64>)
 800ae58:	6323      	str	r3, [r4, #48]	; 0x30
 800ae5a:	4b0d      	ldr	r3, [pc, #52]	; (800ae90 <std+0x68>)
 800ae5c:	6224      	str	r4, [r4, #32]
 800ae5e:	429c      	cmp	r4, r3
 800ae60:	d006      	beq.n	800ae70 <std+0x48>
 800ae62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ae66:	4294      	cmp	r4, r2
 800ae68:	d002      	beq.n	800ae70 <std+0x48>
 800ae6a:	33d0      	adds	r3, #208	; 0xd0
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	d105      	bne.n	800ae7c <std+0x54>
 800ae70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae78:	f000 b978 	b.w	800b16c <__retarget_lock_init_recursive>
 800ae7c:	bd10      	pop	{r4, pc}
 800ae7e:	bf00      	nop
 800ae80:	0800afed 	.word	0x0800afed
 800ae84:	0800b00f 	.word	0x0800b00f
 800ae88:	0800b047 	.word	0x0800b047
 800ae8c:	0800b06b 	.word	0x0800b06b
 800ae90:	20004f68 	.word	0x20004f68

0800ae94 <stdio_exit_handler>:
 800ae94:	4a02      	ldr	r2, [pc, #8]	; (800aea0 <stdio_exit_handler+0xc>)
 800ae96:	4903      	ldr	r1, [pc, #12]	; (800aea4 <stdio_exit_handler+0x10>)
 800ae98:	4803      	ldr	r0, [pc, #12]	; (800aea8 <stdio_exit_handler+0x14>)
 800ae9a:	f000 b869 	b.w	800af70 <_fwalk_sglue>
 800ae9e:	bf00      	nop
 800aea0:	20000030 	.word	0x20000030
 800aea4:	0800dad9 	.word	0x0800dad9
 800aea8:	2000003c 	.word	0x2000003c

0800aeac <cleanup_stdio>:
 800aeac:	6841      	ldr	r1, [r0, #4]
 800aeae:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <cleanup_stdio+0x34>)
 800aeb0:	4299      	cmp	r1, r3
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	d001      	beq.n	800aebc <cleanup_stdio+0x10>
 800aeb8:	f002 fe0e 	bl	800dad8 <_fflush_r>
 800aebc:	68a1      	ldr	r1, [r4, #8]
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <cleanup_stdio+0x38>)
 800aec0:	4299      	cmp	r1, r3
 800aec2:	d002      	beq.n	800aeca <cleanup_stdio+0x1e>
 800aec4:	4620      	mov	r0, r4
 800aec6:	f002 fe07 	bl	800dad8 <_fflush_r>
 800aeca:	68e1      	ldr	r1, [r4, #12]
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <cleanup_stdio+0x3c>)
 800aece:	4299      	cmp	r1, r3
 800aed0:	d004      	beq.n	800aedc <cleanup_stdio+0x30>
 800aed2:	4620      	mov	r0, r4
 800aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed8:	f002 bdfe 	b.w	800dad8 <_fflush_r>
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	bf00      	nop
 800aee0:	20004f68 	.word	0x20004f68
 800aee4:	20004fd0 	.word	0x20004fd0
 800aee8:	20005038 	.word	0x20005038

0800aeec <global_stdio_init.part.0>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <global_stdio_init.part.0+0x30>)
 800aef0:	4c0b      	ldr	r4, [pc, #44]	; (800af20 <global_stdio_init.part.0+0x34>)
 800aef2:	4a0c      	ldr	r2, [pc, #48]	; (800af24 <global_stdio_init.part.0+0x38>)
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	4620      	mov	r0, r4
 800aef8:	2200      	movs	r2, #0
 800aefa:	2104      	movs	r1, #4
 800aefc:	f7ff ff94 	bl	800ae28 <std>
 800af00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800af04:	2201      	movs	r2, #1
 800af06:	2109      	movs	r1, #9
 800af08:	f7ff ff8e 	bl	800ae28 <std>
 800af0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800af10:	2202      	movs	r2, #2
 800af12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af16:	2112      	movs	r1, #18
 800af18:	f7ff bf86 	b.w	800ae28 <std>
 800af1c:	200050a0 	.word	0x200050a0
 800af20:	20004f68 	.word	0x20004f68
 800af24:	0800ae95 	.word	0x0800ae95

0800af28 <__sfp_lock_acquire>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__sfp_lock_acquire+0x8>)
 800af2a:	f000 b920 	b.w	800b16e <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	200050a9 	.word	0x200050a9

0800af34 <__sfp_lock_release>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__sfp_lock_release+0x8>)
 800af36:	f000 b91b 	b.w	800b170 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	200050a9 	.word	0x200050a9

0800af40 <__sinit>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4604      	mov	r4, r0
 800af44:	f7ff fff0 	bl	800af28 <__sfp_lock_acquire>
 800af48:	6a23      	ldr	r3, [r4, #32]
 800af4a:	b11b      	cbz	r3, 800af54 <__sinit+0x14>
 800af4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af50:	f7ff bff0 	b.w	800af34 <__sfp_lock_release>
 800af54:	4b04      	ldr	r3, [pc, #16]	; (800af68 <__sinit+0x28>)
 800af56:	6223      	str	r3, [r4, #32]
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <__sinit+0x2c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f5      	bne.n	800af4c <__sinit+0xc>
 800af60:	f7ff ffc4 	bl	800aeec <global_stdio_init.part.0>
 800af64:	e7f2      	b.n	800af4c <__sinit+0xc>
 800af66:	bf00      	nop
 800af68:	0800aead 	.word	0x0800aead
 800af6c:	200050a0 	.word	0x200050a0

0800af70 <_fwalk_sglue>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	4607      	mov	r7, r0
 800af76:	4688      	mov	r8, r1
 800af78:	4614      	mov	r4, r2
 800af7a:	2600      	movs	r6, #0
 800af7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af80:	f1b9 0901 	subs.w	r9, r9, #1
 800af84:	d505      	bpl.n	800af92 <_fwalk_sglue+0x22>
 800af86:	6824      	ldr	r4, [r4, #0]
 800af88:	2c00      	cmp	r4, #0
 800af8a:	d1f7      	bne.n	800af7c <_fwalk_sglue+0xc>
 800af8c:	4630      	mov	r0, r6
 800af8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d907      	bls.n	800afa8 <_fwalk_sglue+0x38>
 800af98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af9c:	3301      	adds	r3, #1
 800af9e:	d003      	beq.n	800afa8 <_fwalk_sglue+0x38>
 800afa0:	4629      	mov	r1, r5
 800afa2:	4638      	mov	r0, r7
 800afa4:	47c0      	blx	r8
 800afa6:	4306      	orrs	r6, r0
 800afa8:	3568      	adds	r5, #104	; 0x68
 800afaa:	e7e9      	b.n	800af80 <_fwalk_sglue+0x10>

0800afac <siprintf>:
 800afac:	b40e      	push	{r1, r2, r3}
 800afae:	b500      	push	{lr}
 800afb0:	b09c      	sub	sp, #112	; 0x70
 800afb2:	ab1d      	add	r3, sp, #116	; 0x74
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	9006      	str	r0, [sp, #24]
 800afb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afbc:	4809      	ldr	r0, [pc, #36]	; (800afe4 <siprintf+0x38>)
 800afbe:	9107      	str	r1, [sp, #28]
 800afc0:	9104      	str	r1, [sp, #16]
 800afc2:	4909      	ldr	r1, [pc, #36]	; (800afe8 <siprintf+0x3c>)
 800afc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc8:	9105      	str	r1, [sp, #20]
 800afca:	6800      	ldr	r0, [r0, #0]
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	a902      	add	r1, sp, #8
 800afd0:	f002 fbfe 	bl	800d7d0 <_svfiprintf_r>
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	b01c      	add	sp, #112	; 0x70
 800afdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe0:	b003      	add	sp, #12
 800afe2:	4770      	bx	lr
 800afe4:	20000088 	.word	0x20000088
 800afe8:	ffff0208 	.word	0xffff0208

0800afec <__sread>:
 800afec:	b510      	push	{r4, lr}
 800afee:	460c      	mov	r4, r1
 800aff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff4:	f000 f86c 	bl	800b0d0 <_read_r>
 800aff8:	2800      	cmp	r0, #0
 800affa:	bfab      	itete	ge
 800affc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800affe:	89a3      	ldrhlt	r3, [r4, #12]
 800b000:	181b      	addge	r3, r3, r0
 800b002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b006:	bfac      	ite	ge
 800b008:	6563      	strge	r3, [r4, #84]	; 0x54
 800b00a:	81a3      	strhlt	r3, [r4, #12]
 800b00c:	bd10      	pop	{r4, pc}

0800b00e <__swrite>:
 800b00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b012:	461f      	mov	r7, r3
 800b014:	898b      	ldrh	r3, [r1, #12]
 800b016:	05db      	lsls	r3, r3, #23
 800b018:	4605      	mov	r5, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	4616      	mov	r6, r2
 800b01e:	d505      	bpl.n	800b02c <__swrite+0x1e>
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	2302      	movs	r3, #2
 800b026:	2200      	movs	r2, #0
 800b028:	f000 f840 	bl	800b0ac <_lseek_r>
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	4632      	mov	r2, r6
 800b03a:	463b      	mov	r3, r7
 800b03c:	4628      	mov	r0, r5
 800b03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b042:	f000 b857 	b.w	800b0f4 <_write_r>

0800b046 <__sseek>:
 800b046:	b510      	push	{r4, lr}
 800b048:	460c      	mov	r4, r1
 800b04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04e:	f000 f82d 	bl	800b0ac <_lseek_r>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	bf15      	itete	ne
 800b058:	6560      	strne	r0, [r4, #84]	; 0x54
 800b05a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b05e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b062:	81a3      	strheq	r3, [r4, #12]
 800b064:	bf18      	it	ne
 800b066:	81a3      	strhne	r3, [r4, #12]
 800b068:	bd10      	pop	{r4, pc}

0800b06a <__sclose>:
 800b06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06e:	f000 b80d 	b.w	800b08c <_close_r>

0800b072 <memset>:
 800b072:	4402      	add	r2, r0
 800b074:	4603      	mov	r3, r0
 800b076:	4293      	cmp	r3, r2
 800b078:	d100      	bne.n	800b07c <memset+0xa>
 800b07a:	4770      	bx	lr
 800b07c:	f803 1b01 	strb.w	r1, [r3], #1
 800b080:	e7f9      	b.n	800b076 <memset+0x4>
	...

0800b084 <_localeconv_r>:
 800b084:	4800      	ldr	r0, [pc, #0]	; (800b088 <_localeconv_r+0x4>)
 800b086:	4770      	bx	lr
 800b088:	2000017c 	.word	0x2000017c

0800b08c <_close_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4d06      	ldr	r5, [pc, #24]	; (800b0a8 <_close_r+0x1c>)
 800b090:	2300      	movs	r3, #0
 800b092:	4604      	mov	r4, r0
 800b094:	4608      	mov	r0, r1
 800b096:	602b      	str	r3, [r5, #0]
 800b098:	f7f8 fc95 	bl	80039c6 <_close>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d102      	bne.n	800b0a6 <_close_r+0x1a>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	b103      	cbz	r3, 800b0a6 <_close_r+0x1a>
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	200050a4 	.word	0x200050a4

0800b0ac <_lseek_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d07      	ldr	r5, [pc, #28]	; (800b0cc <_lseek_r+0x20>)
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	4608      	mov	r0, r1
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	602a      	str	r2, [r5, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f7f8 fcaa 	bl	8003a14 <_lseek>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d102      	bne.n	800b0ca <_lseek_r+0x1e>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	b103      	cbz	r3, 800b0ca <_lseek_r+0x1e>
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	200050a4 	.word	0x200050a4

0800b0d0 <_read_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d07      	ldr	r5, [pc, #28]	; (800b0f0 <_read_r+0x20>)
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	4608      	mov	r0, r1
 800b0d8:	4611      	mov	r1, r2
 800b0da:	2200      	movs	r2, #0
 800b0dc:	602a      	str	r2, [r5, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	f7f8 fc38 	bl	8003954 <_read>
 800b0e4:	1c43      	adds	r3, r0, #1
 800b0e6:	d102      	bne.n	800b0ee <_read_r+0x1e>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	b103      	cbz	r3, 800b0ee <_read_r+0x1e>
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	200050a4 	.word	0x200050a4

0800b0f4 <_write_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4d07      	ldr	r5, [pc, #28]	; (800b114 <_write_r+0x20>)
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	4608      	mov	r0, r1
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	2200      	movs	r2, #0
 800b100:	602a      	str	r2, [r5, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	f7f8 fc43 	bl	800398e <_write>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_write_r+0x1e>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_write_r+0x1e>
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	200050a4 	.word	0x200050a4

0800b118 <__errno>:
 800b118:	4b01      	ldr	r3, [pc, #4]	; (800b120 <__errno+0x8>)
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20000088 	.word	0x20000088

0800b124 <__libc_init_array>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	4d0d      	ldr	r5, [pc, #52]	; (800b15c <__libc_init_array+0x38>)
 800b128:	4c0d      	ldr	r4, [pc, #52]	; (800b160 <__libc_init_array+0x3c>)
 800b12a:	1b64      	subs	r4, r4, r5
 800b12c:	10a4      	asrs	r4, r4, #2
 800b12e:	2600      	movs	r6, #0
 800b130:	42a6      	cmp	r6, r4
 800b132:	d109      	bne.n	800b148 <__libc_init_array+0x24>
 800b134:	4d0b      	ldr	r5, [pc, #44]	; (800b164 <__libc_init_array+0x40>)
 800b136:	4c0c      	ldr	r4, [pc, #48]	; (800b168 <__libc_init_array+0x44>)
 800b138:	f004 fe0c 	bl	800fd54 <_init>
 800b13c:	1b64      	subs	r4, r4, r5
 800b13e:	10a4      	asrs	r4, r4, #2
 800b140:	2600      	movs	r6, #0
 800b142:	42a6      	cmp	r6, r4
 800b144:	d105      	bne.n	800b152 <__libc_init_array+0x2e>
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	f855 3b04 	ldr.w	r3, [r5], #4
 800b14c:	4798      	blx	r3
 800b14e:	3601      	adds	r6, #1
 800b150:	e7ee      	b.n	800b130 <__libc_init_array+0xc>
 800b152:	f855 3b04 	ldr.w	r3, [r5], #4
 800b156:	4798      	blx	r3
 800b158:	3601      	adds	r6, #1
 800b15a:	e7f2      	b.n	800b142 <__libc_init_array+0x1e>
 800b15c:	08010440 	.word	0x08010440
 800b160:	08010440 	.word	0x08010440
 800b164:	08010440 	.word	0x08010440
 800b168:	08010444 	.word	0x08010444

0800b16c <__retarget_lock_init_recursive>:
 800b16c:	4770      	bx	lr

0800b16e <__retarget_lock_acquire_recursive>:
 800b16e:	4770      	bx	lr

0800b170 <__retarget_lock_release_recursive>:
 800b170:	4770      	bx	lr

0800b172 <memcpy>:
 800b172:	440a      	add	r2, r1
 800b174:	4291      	cmp	r1, r2
 800b176:	f100 33ff 	add.w	r3, r0, #4294967295
 800b17a:	d100      	bne.n	800b17e <memcpy+0xc>
 800b17c:	4770      	bx	lr
 800b17e:	b510      	push	{r4, lr}
 800b180:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b184:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b188:	4291      	cmp	r1, r2
 800b18a:	d1f9      	bne.n	800b180 <memcpy+0xe>
 800b18c:	bd10      	pop	{r4, pc}
	...

0800b190 <nanf>:
 800b190:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b198 <nanf+0x8>
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	7fc00000 	.word	0x7fc00000

0800b19c <quorem>:
 800b19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	6903      	ldr	r3, [r0, #16]
 800b1a2:	690c      	ldr	r4, [r1, #16]
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	db7e      	blt.n	800b2a8 <quorem+0x10c>
 800b1aa:	3c01      	subs	r4, #1
 800b1ac:	f101 0814 	add.w	r8, r1, #20
 800b1b0:	f100 0514 	add.w	r5, r0, #20
 800b1b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1d2:	d331      	bcc.n	800b238 <quorem+0x9c>
 800b1d4:	f04f 0e00 	mov.w	lr, #0
 800b1d8:	4640      	mov	r0, r8
 800b1da:	46ac      	mov	ip, r5
 800b1dc:	46f2      	mov	sl, lr
 800b1de:	f850 2b04 	ldr.w	r2, [r0], #4
 800b1e2:	b293      	uxth	r3, r2
 800b1e4:	fb06 e303 	mla	r3, r6, r3, lr
 800b1e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1ec:	0c1a      	lsrs	r2, r3, #16
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	ebaa 0303 	sub.w	r3, sl, r3
 800b1f4:	f8dc a000 	ldr.w	sl, [ip]
 800b1f8:	fa13 f38a 	uxtah	r3, r3, sl
 800b1fc:	fb06 220e 	mla	r2, r6, lr, r2
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b208:	b292      	uxth	r2, r2
 800b20a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b20e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b212:	f8bd 3000 	ldrh.w	r3, [sp]
 800b216:	4581      	cmp	r9, r0
 800b218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b21c:	f84c 3b04 	str.w	r3, [ip], #4
 800b220:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b224:	d2db      	bcs.n	800b1de <quorem+0x42>
 800b226:	f855 300b 	ldr.w	r3, [r5, fp]
 800b22a:	b92b      	cbnz	r3, 800b238 <quorem+0x9c>
 800b22c:	9b01      	ldr	r3, [sp, #4]
 800b22e:	3b04      	subs	r3, #4
 800b230:	429d      	cmp	r5, r3
 800b232:	461a      	mov	r2, r3
 800b234:	d32c      	bcc.n	800b290 <quorem+0xf4>
 800b236:	613c      	str	r4, [r7, #16]
 800b238:	4638      	mov	r0, r7
 800b23a:	f001 f9f1 	bl	800c620 <__mcmp>
 800b23e:	2800      	cmp	r0, #0
 800b240:	db22      	blt.n	800b288 <quorem+0xec>
 800b242:	3601      	adds	r6, #1
 800b244:	4629      	mov	r1, r5
 800b246:	2000      	movs	r0, #0
 800b248:	f858 2b04 	ldr.w	r2, [r8], #4
 800b24c:	f8d1 c000 	ldr.w	ip, [r1]
 800b250:	b293      	uxth	r3, r2
 800b252:	1ac3      	subs	r3, r0, r3
 800b254:	0c12      	lsrs	r2, r2, #16
 800b256:	fa13 f38c 	uxtah	r3, r3, ip
 800b25a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b25e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b262:	b29b      	uxth	r3, r3
 800b264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b268:	45c1      	cmp	r9, r8
 800b26a:	f841 3b04 	str.w	r3, [r1], #4
 800b26e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b272:	d2e9      	bcs.n	800b248 <quorem+0xac>
 800b274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b278:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b27c:	b922      	cbnz	r2, 800b288 <quorem+0xec>
 800b27e:	3b04      	subs	r3, #4
 800b280:	429d      	cmp	r5, r3
 800b282:	461a      	mov	r2, r3
 800b284:	d30a      	bcc.n	800b29c <quorem+0x100>
 800b286:	613c      	str	r4, [r7, #16]
 800b288:	4630      	mov	r0, r6
 800b28a:	b003      	add	sp, #12
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	3b04      	subs	r3, #4
 800b294:	2a00      	cmp	r2, #0
 800b296:	d1ce      	bne.n	800b236 <quorem+0x9a>
 800b298:	3c01      	subs	r4, #1
 800b29a:	e7c9      	b.n	800b230 <quorem+0x94>
 800b29c:	6812      	ldr	r2, [r2, #0]
 800b29e:	3b04      	subs	r3, #4
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d1f0      	bne.n	800b286 <quorem+0xea>
 800b2a4:	3c01      	subs	r4, #1
 800b2a6:	e7eb      	b.n	800b280 <quorem+0xe4>
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	e7ee      	b.n	800b28a <quorem+0xee>
 800b2ac:	0000      	movs	r0, r0
	...

0800b2b0 <_dtoa_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	ed2d 8b04 	vpush	{d8-d9}
 800b2b8:	69c5      	ldr	r5, [r0, #28]
 800b2ba:	b093      	sub	sp, #76	; 0x4c
 800b2bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b2c0:	ec57 6b10 	vmov	r6, r7, d0
 800b2c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b2c8:	9107      	str	r1, [sp, #28]
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b2d0:	b975      	cbnz	r5, 800b2f0 <_dtoa_r+0x40>
 800b2d2:	2010      	movs	r0, #16
 800b2d4:	f000 fe2a 	bl	800bf2c <malloc>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	61e0      	str	r0, [r4, #28]
 800b2dc:	b920      	cbnz	r0, 800b2e8 <_dtoa_r+0x38>
 800b2de:	4bae      	ldr	r3, [pc, #696]	; (800b598 <_dtoa_r+0x2e8>)
 800b2e0:	21ef      	movs	r1, #239	; 0xef
 800b2e2:	48ae      	ldr	r0, [pc, #696]	; (800b59c <_dtoa_r+0x2ec>)
 800b2e4:	f002 fc64 	bl	800dbb0 <__assert_func>
 800b2e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2ec:	6005      	str	r5, [r0, #0]
 800b2ee:	60c5      	str	r5, [r0, #12]
 800b2f0:	69e3      	ldr	r3, [r4, #28]
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	b151      	cbz	r1, 800b30c <_dtoa_r+0x5c>
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	604a      	str	r2, [r1, #4]
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4093      	lsls	r3, r2
 800b2fe:	608b      	str	r3, [r1, #8]
 800b300:	4620      	mov	r0, r4
 800b302:	f000 ff07 	bl	800c114 <_Bfree>
 800b306:	69e3      	ldr	r3, [r4, #28]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	1e3b      	subs	r3, r7, #0
 800b30e:	bfbb      	ittet	lt
 800b310:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b314:	9303      	strlt	r3, [sp, #12]
 800b316:	2300      	movge	r3, #0
 800b318:	2201      	movlt	r2, #1
 800b31a:	bfac      	ite	ge
 800b31c:	f8c8 3000 	strge.w	r3, [r8]
 800b320:	f8c8 2000 	strlt.w	r2, [r8]
 800b324:	4b9e      	ldr	r3, [pc, #632]	; (800b5a0 <_dtoa_r+0x2f0>)
 800b326:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b32a:	ea33 0308 	bics.w	r3, r3, r8
 800b32e:	d11b      	bne.n	800b368 <_dtoa_r+0xb8>
 800b330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b332:	f242 730f 	movw	r3, #9999	; 0x270f
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b33c:	4333      	orrs	r3, r6
 800b33e:	f000 8593 	beq.w	800be68 <_dtoa_r+0xbb8>
 800b342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b344:	b963      	cbnz	r3, 800b360 <_dtoa_r+0xb0>
 800b346:	4b97      	ldr	r3, [pc, #604]	; (800b5a4 <_dtoa_r+0x2f4>)
 800b348:	e027      	b.n	800b39a <_dtoa_r+0xea>
 800b34a:	4b97      	ldr	r3, [pc, #604]	; (800b5a8 <_dtoa_r+0x2f8>)
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	3308      	adds	r3, #8
 800b350:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	9800      	ldr	r0, [sp, #0]
 800b356:	b013      	add	sp, #76	; 0x4c
 800b358:	ecbd 8b04 	vpop	{d8-d9}
 800b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	4b90      	ldr	r3, [pc, #576]	; (800b5a4 <_dtoa_r+0x2f4>)
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	3303      	adds	r3, #3
 800b366:	e7f3      	b.n	800b350 <_dtoa_r+0xa0>
 800b368:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b36c:	2200      	movs	r2, #0
 800b36e:	ec51 0b17 	vmov	r0, r1, d7
 800b372:	eeb0 8a47 	vmov.f32	s16, s14
 800b376:	eef0 8a67 	vmov.f32	s17, s15
 800b37a:	2300      	movs	r3, #0
 800b37c:	f7f5 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b380:	4681      	mov	r9, r0
 800b382:	b160      	cbz	r0, 800b39e <_dtoa_r+0xee>
 800b384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b386:	2301      	movs	r3, #1
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8568 	beq.w	800be62 <_dtoa_r+0xbb2>
 800b392:	4b86      	ldr	r3, [pc, #536]	; (800b5ac <_dtoa_r+0x2fc>)
 800b394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	3b01      	subs	r3, #1
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	e7da      	b.n	800b354 <_dtoa_r+0xa4>
 800b39e:	aa10      	add	r2, sp, #64	; 0x40
 800b3a0:	a911      	add	r1, sp, #68	; 0x44
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b3a8:	eef0 0a68 	vmov.f32	s1, s17
 800b3ac:	f001 fa4e 	bl	800c84c <__d2b>
 800b3b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	d07f      	beq.n	800b4ba <_dtoa_r+0x20a>
 800b3ba:	ee18 3a90 	vmov	r3, s17
 800b3be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b3c6:	ec51 0b18 	vmov	r0, r1, d8
 800b3ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b3ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b3d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4b75      	ldr	r3, [pc, #468]	; (800b5b0 <_dtoa_r+0x300>)
 800b3dc:	f7f4 ff54 	bl	8000288 <__aeabi_dsub>
 800b3e0:	a367      	add	r3, pc, #412	; (adr r3, 800b580 <_dtoa_r+0x2d0>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f7f5 f907 	bl	80005f8 <__aeabi_dmul>
 800b3ea:	a367      	add	r3, pc, #412	; (adr r3, 800b588 <_dtoa_r+0x2d8>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff4c 	bl	800028c <__adddf3>
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	f7f5 f893 	bl	8000524 <__aeabi_i2d>
 800b3fe:	a364      	add	r3, pc, #400	; (adr r3, 800b590 <_dtoa_r+0x2e0>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f5 f8f8 	bl	80005f8 <__aeabi_dmul>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f4 ff3c 	bl	800028c <__adddf3>
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	f7f5 fb9e 	bl	8000b58 <__aeabi_d2iz>
 800b41c:	2200      	movs	r2, #0
 800b41e:	4683      	mov	fp, r0
 800b420:	2300      	movs	r3, #0
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f5 fb59 	bl	8000adc <__aeabi_dcmplt>
 800b42a:	b148      	cbz	r0, 800b440 <_dtoa_r+0x190>
 800b42c:	4658      	mov	r0, fp
 800b42e:	f7f5 f879 	bl	8000524 <__aeabi_i2d>
 800b432:	4632      	mov	r2, r6
 800b434:	463b      	mov	r3, r7
 800b436:	f7f5 fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800b43a:	b908      	cbnz	r0, 800b440 <_dtoa_r+0x190>
 800b43c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b440:	f1bb 0f16 	cmp.w	fp, #22
 800b444:	d857      	bhi.n	800b4f6 <_dtoa_r+0x246>
 800b446:	4b5b      	ldr	r3, [pc, #364]	; (800b5b4 <_dtoa_r+0x304>)
 800b448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	ec51 0b18 	vmov	r0, r1, d8
 800b454:	f7f5 fb42 	bl	8000adc <__aeabi_dcmplt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d04e      	beq.n	800b4fa <_dtoa_r+0x24a>
 800b45c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b460:	2300      	movs	r3, #0
 800b462:	930c      	str	r3, [sp, #48]	; 0x30
 800b464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b466:	1b5b      	subs	r3, r3, r5
 800b468:	1e5a      	subs	r2, r3, #1
 800b46a:	bf45      	ittet	mi
 800b46c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b470:	9305      	strmi	r3, [sp, #20]
 800b472:	2300      	movpl	r3, #0
 800b474:	2300      	movmi	r3, #0
 800b476:	9206      	str	r2, [sp, #24]
 800b478:	bf54      	ite	pl
 800b47a:	9305      	strpl	r3, [sp, #20]
 800b47c:	9306      	strmi	r3, [sp, #24]
 800b47e:	f1bb 0f00 	cmp.w	fp, #0
 800b482:	db3c      	blt.n	800b4fe <_dtoa_r+0x24e>
 800b484:	9b06      	ldr	r3, [sp, #24]
 800b486:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b48a:	445b      	add	r3, fp
 800b48c:	9306      	str	r3, [sp, #24]
 800b48e:	2300      	movs	r3, #0
 800b490:	9308      	str	r3, [sp, #32]
 800b492:	9b07      	ldr	r3, [sp, #28]
 800b494:	2b09      	cmp	r3, #9
 800b496:	d868      	bhi.n	800b56a <_dtoa_r+0x2ba>
 800b498:	2b05      	cmp	r3, #5
 800b49a:	bfc4      	itt	gt
 800b49c:	3b04      	subgt	r3, #4
 800b49e:	9307      	strgt	r3, [sp, #28]
 800b4a0:	9b07      	ldr	r3, [sp, #28]
 800b4a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b4a6:	bfcc      	ite	gt
 800b4a8:	2500      	movgt	r5, #0
 800b4aa:	2501      	movle	r5, #1
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	f200 8085 	bhi.w	800b5bc <_dtoa_r+0x30c>
 800b4b2:	e8df f003 	tbb	[pc, r3]
 800b4b6:	3b2e      	.short	0x3b2e
 800b4b8:	5839      	.short	0x5839
 800b4ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b4be:	441d      	add	r5, r3
 800b4c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	bfc1      	itttt	gt
 800b4c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b4cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800b4d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b4d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b4d8:	bfd6      	itet	le
 800b4da:	f1c3 0320 	rsble	r3, r3, #32
 800b4de:	ea48 0003 	orrgt.w	r0, r8, r3
 800b4e2:	fa06 f003 	lslle.w	r0, r6, r3
 800b4e6:	f7f5 f80d 	bl	8000504 <__aeabi_ui2d>
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b4f0:	3d01      	subs	r5, #1
 800b4f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b4f4:	e76f      	b.n	800b3d6 <_dtoa_r+0x126>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e7b3      	b.n	800b462 <_dtoa_r+0x1b2>
 800b4fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b4fc:	e7b2      	b.n	800b464 <_dtoa_r+0x1b4>
 800b4fe:	9b05      	ldr	r3, [sp, #20]
 800b500:	eba3 030b 	sub.w	r3, r3, fp
 800b504:	9305      	str	r3, [sp, #20]
 800b506:	f1cb 0300 	rsb	r3, fp, #0
 800b50a:	9308      	str	r3, [sp, #32]
 800b50c:	2300      	movs	r3, #0
 800b50e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b510:	e7bf      	b.n	800b492 <_dtoa_r+0x1e2>
 800b512:	2300      	movs	r3, #0
 800b514:	9309      	str	r3, [sp, #36]	; 0x24
 800b516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b518:	2b00      	cmp	r3, #0
 800b51a:	dc52      	bgt.n	800b5c2 <_dtoa_r+0x312>
 800b51c:	2301      	movs	r3, #1
 800b51e:	9301      	str	r3, [sp, #4]
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	461a      	mov	r2, r3
 800b524:	920a      	str	r2, [sp, #40]	; 0x28
 800b526:	e00b      	b.n	800b540 <_dtoa_r+0x290>
 800b528:	2301      	movs	r3, #1
 800b52a:	e7f3      	b.n	800b514 <_dtoa_r+0x264>
 800b52c:	2300      	movs	r3, #0
 800b52e:	9309      	str	r3, [sp, #36]	; 0x24
 800b530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b532:	445b      	add	r3, fp
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	3301      	adds	r3, #1
 800b538:	2b01      	cmp	r3, #1
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	bfb8      	it	lt
 800b53e:	2301      	movlt	r3, #1
 800b540:	69e0      	ldr	r0, [r4, #28]
 800b542:	2100      	movs	r1, #0
 800b544:	2204      	movs	r2, #4
 800b546:	f102 0614 	add.w	r6, r2, #20
 800b54a:	429e      	cmp	r6, r3
 800b54c:	d93d      	bls.n	800b5ca <_dtoa_r+0x31a>
 800b54e:	6041      	str	r1, [r0, #4]
 800b550:	4620      	mov	r0, r4
 800b552:	f000 fd9f 	bl	800c094 <_Balloc>
 800b556:	9000      	str	r0, [sp, #0]
 800b558:	2800      	cmp	r0, #0
 800b55a:	d139      	bne.n	800b5d0 <_dtoa_r+0x320>
 800b55c:	4b16      	ldr	r3, [pc, #88]	; (800b5b8 <_dtoa_r+0x308>)
 800b55e:	4602      	mov	r2, r0
 800b560:	f240 11af 	movw	r1, #431	; 0x1af
 800b564:	e6bd      	b.n	800b2e2 <_dtoa_r+0x32>
 800b566:	2301      	movs	r3, #1
 800b568:	e7e1      	b.n	800b52e <_dtoa_r+0x27e>
 800b56a:	2501      	movs	r5, #1
 800b56c:	2300      	movs	r3, #0
 800b56e:	9307      	str	r3, [sp, #28]
 800b570:	9509      	str	r5, [sp, #36]	; 0x24
 800b572:	f04f 33ff 	mov.w	r3, #4294967295
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	2200      	movs	r2, #0
 800b57c:	2312      	movs	r3, #18
 800b57e:	e7d1      	b.n	800b524 <_dtoa_r+0x274>
 800b580:	636f4361 	.word	0x636f4361
 800b584:	3fd287a7 	.word	0x3fd287a7
 800b588:	8b60c8b3 	.word	0x8b60c8b3
 800b58c:	3fc68a28 	.word	0x3fc68a28
 800b590:	509f79fb 	.word	0x509f79fb
 800b594:	3fd34413 	.word	0x3fd34413
 800b598:	0800fe3a 	.word	0x0800fe3a
 800b59c:	0800fe51 	.word	0x0800fe51
 800b5a0:	7ff00000 	.word	0x7ff00000
 800b5a4:	0800fe36 	.word	0x0800fe36
 800b5a8:	0800fe2d 	.word	0x0800fe2d
 800b5ac:	0800fe05 	.word	0x0800fe05
 800b5b0:	3ff80000 	.word	0x3ff80000
 800b5b4:	0800ff40 	.word	0x0800ff40
 800b5b8:	0800fea9 	.word	0x0800fea9
 800b5bc:	2301      	movs	r3, #1
 800b5be:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c0:	e7d7      	b.n	800b572 <_dtoa_r+0x2c2>
 800b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	e7ba      	b.n	800b540 <_dtoa_r+0x290>
 800b5ca:	3101      	adds	r1, #1
 800b5cc:	0052      	lsls	r2, r2, #1
 800b5ce:	e7ba      	b.n	800b546 <_dtoa_r+0x296>
 800b5d0:	69e3      	ldr	r3, [r4, #28]
 800b5d2:	9a00      	ldr	r2, [sp, #0]
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	9b04      	ldr	r3, [sp, #16]
 800b5d8:	2b0e      	cmp	r3, #14
 800b5da:	f200 80a8 	bhi.w	800b72e <_dtoa_r+0x47e>
 800b5de:	2d00      	cmp	r5, #0
 800b5e0:	f000 80a5 	beq.w	800b72e <_dtoa_r+0x47e>
 800b5e4:	f1bb 0f00 	cmp.w	fp, #0
 800b5e8:	dd38      	ble.n	800b65c <_dtoa_r+0x3ac>
 800b5ea:	4bc0      	ldr	r3, [pc, #768]	; (800b8ec <_dtoa_r+0x63c>)
 800b5ec:	f00b 020f 	and.w	r2, fp, #15
 800b5f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b5f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b5fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b600:	d019      	beq.n	800b636 <_dtoa_r+0x386>
 800b602:	4bbb      	ldr	r3, [pc, #748]	; (800b8f0 <_dtoa_r+0x640>)
 800b604:	ec51 0b18 	vmov	r0, r1, d8
 800b608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b60c:	f7f5 f91e 	bl	800084c <__aeabi_ddiv>
 800b610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b614:	f008 080f 	and.w	r8, r8, #15
 800b618:	2503      	movs	r5, #3
 800b61a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b8f0 <_dtoa_r+0x640>
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	d10a      	bne.n	800b63a <_dtoa_r+0x38a>
 800b624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b628:	4632      	mov	r2, r6
 800b62a:	463b      	mov	r3, r7
 800b62c:	f7f5 f90e 	bl	800084c <__aeabi_ddiv>
 800b630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b634:	e02b      	b.n	800b68e <_dtoa_r+0x3de>
 800b636:	2502      	movs	r5, #2
 800b638:	e7ef      	b.n	800b61a <_dtoa_r+0x36a>
 800b63a:	f018 0f01 	tst.w	r8, #1
 800b63e:	d008      	beq.n	800b652 <_dtoa_r+0x3a2>
 800b640:	4630      	mov	r0, r6
 800b642:	4639      	mov	r1, r7
 800b644:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b648:	f7f4 ffd6 	bl	80005f8 <__aeabi_dmul>
 800b64c:	3501      	adds	r5, #1
 800b64e:	4606      	mov	r6, r0
 800b650:	460f      	mov	r7, r1
 800b652:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b656:	f109 0908 	add.w	r9, r9, #8
 800b65a:	e7e0      	b.n	800b61e <_dtoa_r+0x36e>
 800b65c:	f000 809f 	beq.w	800b79e <_dtoa_r+0x4ee>
 800b660:	f1cb 0600 	rsb	r6, fp, #0
 800b664:	4ba1      	ldr	r3, [pc, #644]	; (800b8ec <_dtoa_r+0x63c>)
 800b666:	4fa2      	ldr	r7, [pc, #648]	; (800b8f0 <_dtoa_r+0x640>)
 800b668:	f006 020f 	and.w	r2, r6, #15
 800b66c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	ec51 0b18 	vmov	r0, r1, d8
 800b678:	f7f4 ffbe 	bl	80005f8 <__aeabi_dmul>
 800b67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b680:	1136      	asrs	r6, r6, #4
 800b682:	2300      	movs	r3, #0
 800b684:	2502      	movs	r5, #2
 800b686:	2e00      	cmp	r6, #0
 800b688:	d17e      	bne.n	800b788 <_dtoa_r+0x4d8>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1d0      	bne.n	800b630 <_dtoa_r+0x380>
 800b68e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b690:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 8084 	beq.w	800b7a2 <_dtoa_r+0x4f2>
 800b69a:	4b96      	ldr	r3, [pc, #600]	; (800b8f4 <_dtoa_r+0x644>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	4640      	mov	r0, r8
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	f7f5 fa1b 	bl	8000adc <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d07b      	beq.n	800b7a2 <_dtoa_r+0x4f2>
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d078      	beq.n	800b7a2 <_dtoa_r+0x4f2>
 800b6b0:	9b01      	ldr	r3, [sp, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	dd39      	ble.n	800b72a <_dtoa_r+0x47a>
 800b6b6:	4b90      	ldr	r3, [pc, #576]	; (800b8f8 <_dtoa_r+0x648>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	4649      	mov	r1, r9
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c6:	9e01      	ldr	r6, [sp, #4]
 800b6c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f7f4 ff26 	bl	8000524 <__aeabi_i2d>
 800b6d8:	4642      	mov	r2, r8
 800b6da:	464b      	mov	r3, r9
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	4b86      	ldr	r3, [pc, #536]	; (800b8fc <_dtoa_r+0x64c>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f7f4 fdd2 	bl	800028c <__adddf3>
 800b6e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6f0:	9303      	str	r3, [sp, #12]
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	d158      	bne.n	800b7a8 <_dtoa_r+0x4f8>
 800b6f6:	4b82      	ldr	r3, [pc, #520]	; (800b900 <_dtoa_r+0x650>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b706:	4680      	mov	r8, r0
 800b708:	4689      	mov	r9, r1
 800b70a:	f7f5 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	f040 8296 	bne.w	800bc40 <_dtoa_r+0x990>
 800b714:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b718:	4640      	mov	r0, r8
 800b71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f5 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800b724:	2800      	cmp	r0, #0
 800b726:	f040 8289 	bne.w	800bc3c <_dtoa_r+0x98c>
 800b72a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b72e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b730:	2b00      	cmp	r3, #0
 800b732:	f2c0 814e 	blt.w	800b9d2 <_dtoa_r+0x722>
 800b736:	f1bb 0f0e 	cmp.w	fp, #14
 800b73a:	f300 814a 	bgt.w	800b9d2 <_dtoa_r+0x722>
 800b73e:	4b6b      	ldr	r3, [pc, #428]	; (800b8ec <_dtoa_r+0x63c>)
 800b740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f280 80dc 	bge.w	800b908 <_dtoa_r+0x658>
 800b750:	9b04      	ldr	r3, [sp, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f300 80d8 	bgt.w	800b908 <_dtoa_r+0x658>
 800b758:	f040 826f 	bne.w	800bc3a <_dtoa_r+0x98a>
 800b75c:	4b68      	ldr	r3, [pc, #416]	; (800b900 <_dtoa_r+0x650>)
 800b75e:	2200      	movs	r2, #0
 800b760:	4640      	mov	r0, r8
 800b762:	4649      	mov	r1, r9
 800b764:	f7f4 ff48 	bl	80005f8 <__aeabi_dmul>
 800b768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b76c:	f7f5 f9ca 	bl	8000b04 <__aeabi_dcmpge>
 800b770:	9e04      	ldr	r6, [sp, #16]
 800b772:	4637      	mov	r7, r6
 800b774:	2800      	cmp	r0, #0
 800b776:	f040 8245 	bne.w	800bc04 <_dtoa_r+0x954>
 800b77a:	9d00      	ldr	r5, [sp, #0]
 800b77c:	2331      	movs	r3, #49	; 0x31
 800b77e:	f805 3b01 	strb.w	r3, [r5], #1
 800b782:	f10b 0b01 	add.w	fp, fp, #1
 800b786:	e241      	b.n	800bc0c <_dtoa_r+0x95c>
 800b788:	07f2      	lsls	r2, r6, #31
 800b78a:	d505      	bpl.n	800b798 <_dtoa_r+0x4e8>
 800b78c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	3501      	adds	r5, #1
 800b796:	2301      	movs	r3, #1
 800b798:	1076      	asrs	r6, r6, #1
 800b79a:	3708      	adds	r7, #8
 800b79c:	e773      	b.n	800b686 <_dtoa_r+0x3d6>
 800b79e:	2502      	movs	r5, #2
 800b7a0:	e775      	b.n	800b68e <_dtoa_r+0x3de>
 800b7a2:	9e04      	ldr	r6, [sp, #16]
 800b7a4:	465f      	mov	r7, fp
 800b7a6:	e792      	b.n	800b6ce <_dtoa_r+0x41e>
 800b7a8:	9900      	ldr	r1, [sp, #0]
 800b7aa:	4b50      	ldr	r3, [pc, #320]	; (800b8ec <_dtoa_r+0x63c>)
 800b7ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7b0:	4431      	add	r1, r6
 800b7b2:	9102      	str	r1, [sp, #8]
 800b7b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b6:	eeb0 9a47 	vmov.f32	s18, s14
 800b7ba:	eef0 9a67 	vmov.f32	s19, s15
 800b7be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7c6:	2900      	cmp	r1, #0
 800b7c8:	d044      	beq.n	800b854 <_dtoa_r+0x5a4>
 800b7ca:	494e      	ldr	r1, [pc, #312]	; (800b904 <_dtoa_r+0x654>)
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f7f5 f83d 	bl	800084c <__aeabi_ddiv>
 800b7d2:	ec53 2b19 	vmov	r2, r3, d9
 800b7d6:	f7f4 fd57 	bl	8000288 <__aeabi_dsub>
 800b7da:	9d00      	ldr	r5, [sp, #0]
 800b7dc:	ec41 0b19 	vmov	d9, r0, r1
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f7f5 f9b8 	bl	8000b58 <__aeabi_d2iz>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	f7f4 fe9b 	bl	8000524 <__aeabi_i2d>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	f7f4 fd47 	bl	8000288 <__aeabi_dsub>
 800b7fa:	3630      	adds	r6, #48	; 0x30
 800b7fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b800:	ec53 2b19 	vmov	r2, r3, d9
 800b804:	4680      	mov	r8, r0
 800b806:	4689      	mov	r9, r1
 800b808:	f7f5 f968 	bl	8000adc <__aeabi_dcmplt>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d164      	bne.n	800b8da <_dtoa_r+0x62a>
 800b810:	4642      	mov	r2, r8
 800b812:	464b      	mov	r3, r9
 800b814:	4937      	ldr	r1, [pc, #220]	; (800b8f4 <_dtoa_r+0x644>)
 800b816:	2000      	movs	r0, #0
 800b818:	f7f4 fd36 	bl	8000288 <__aeabi_dsub>
 800b81c:	ec53 2b19 	vmov	r2, r3, d9
 800b820:	f7f5 f95c 	bl	8000adc <__aeabi_dcmplt>
 800b824:	2800      	cmp	r0, #0
 800b826:	f040 80b6 	bne.w	800b996 <_dtoa_r+0x6e6>
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	429d      	cmp	r5, r3
 800b82e:	f43f af7c 	beq.w	800b72a <_dtoa_r+0x47a>
 800b832:	4b31      	ldr	r3, [pc, #196]	; (800b8f8 <_dtoa_r+0x648>)
 800b834:	ec51 0b19 	vmov	r0, r1, d9
 800b838:	2200      	movs	r2, #0
 800b83a:	f7f4 fedd 	bl	80005f8 <__aeabi_dmul>
 800b83e:	4b2e      	ldr	r3, [pc, #184]	; (800b8f8 <_dtoa_r+0x648>)
 800b840:	ec41 0b19 	vmov	d9, r0, r1
 800b844:	2200      	movs	r2, #0
 800b846:	4640      	mov	r0, r8
 800b848:	4649      	mov	r1, r9
 800b84a:	f7f4 fed5 	bl	80005f8 <__aeabi_dmul>
 800b84e:	4680      	mov	r8, r0
 800b850:	4689      	mov	r9, r1
 800b852:	e7c5      	b.n	800b7e0 <_dtoa_r+0x530>
 800b854:	ec51 0b17 	vmov	r0, r1, d7
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	9b02      	ldr	r3, [sp, #8]
 800b85e:	9d00      	ldr	r5, [sp, #0]
 800b860:	930f      	str	r3, [sp, #60]	; 0x3c
 800b862:	ec41 0b19 	vmov	d9, r0, r1
 800b866:	4649      	mov	r1, r9
 800b868:	4640      	mov	r0, r8
 800b86a:	f7f5 f975 	bl	8000b58 <__aeabi_d2iz>
 800b86e:	4606      	mov	r6, r0
 800b870:	f7f4 fe58 	bl	8000524 <__aeabi_i2d>
 800b874:	3630      	adds	r6, #48	; 0x30
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4640      	mov	r0, r8
 800b87c:	4649      	mov	r1, r9
 800b87e:	f7f4 fd03 	bl	8000288 <__aeabi_dsub>
 800b882:	f805 6b01 	strb.w	r6, [r5], #1
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	429d      	cmp	r5, r3
 800b88a:	4680      	mov	r8, r0
 800b88c:	4689      	mov	r9, r1
 800b88e:	f04f 0200 	mov.w	r2, #0
 800b892:	d124      	bne.n	800b8de <_dtoa_r+0x62e>
 800b894:	4b1b      	ldr	r3, [pc, #108]	; (800b904 <_dtoa_r+0x654>)
 800b896:	ec51 0b19 	vmov	r0, r1, d9
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	f7f5 f937 	bl	8000b18 <__aeabi_dcmpgt>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d173      	bne.n	800b996 <_dtoa_r+0x6e6>
 800b8ae:	ec53 2b19 	vmov	r2, r3, d9
 800b8b2:	4914      	ldr	r1, [pc, #80]	; (800b904 <_dtoa_r+0x654>)
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	f7f4 fce7 	bl	8000288 <__aeabi_dsub>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4640      	mov	r0, r8
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	f7f5 f90b 	bl	8000adc <__aeabi_dcmplt>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	f43f af2f 	beq.w	800b72a <_dtoa_r+0x47a>
 800b8cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b8ce:	1e6b      	subs	r3, r5, #1
 800b8d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8d6:	2b30      	cmp	r3, #48	; 0x30
 800b8d8:	d0f8      	beq.n	800b8cc <_dtoa_r+0x61c>
 800b8da:	46bb      	mov	fp, r7
 800b8dc:	e04a      	b.n	800b974 <_dtoa_r+0x6c4>
 800b8de:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <_dtoa_r+0x648>)
 800b8e0:	f7f4 fe8a 	bl	80005f8 <__aeabi_dmul>
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4689      	mov	r9, r1
 800b8e8:	e7bd      	b.n	800b866 <_dtoa_r+0x5b6>
 800b8ea:	bf00      	nop
 800b8ec:	0800ff40 	.word	0x0800ff40
 800b8f0:	0800ff18 	.word	0x0800ff18
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	40240000 	.word	0x40240000
 800b8fc:	401c0000 	.word	0x401c0000
 800b900:	40140000 	.word	0x40140000
 800b904:	3fe00000 	.word	0x3fe00000
 800b908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b90c:	9d00      	ldr	r5, [sp, #0]
 800b90e:	4642      	mov	r2, r8
 800b910:	464b      	mov	r3, r9
 800b912:	4630      	mov	r0, r6
 800b914:	4639      	mov	r1, r7
 800b916:	f7f4 ff99 	bl	800084c <__aeabi_ddiv>
 800b91a:	f7f5 f91d 	bl	8000b58 <__aeabi_d2iz>
 800b91e:	9001      	str	r0, [sp, #4]
 800b920:	f7f4 fe00 	bl	8000524 <__aeabi_i2d>
 800b924:	4642      	mov	r2, r8
 800b926:	464b      	mov	r3, r9
 800b928:	f7f4 fe66 	bl	80005f8 <__aeabi_dmul>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4630      	mov	r0, r6
 800b932:	4639      	mov	r1, r7
 800b934:	f7f4 fca8 	bl	8000288 <__aeabi_dsub>
 800b938:	9e01      	ldr	r6, [sp, #4]
 800b93a:	9f04      	ldr	r7, [sp, #16]
 800b93c:	3630      	adds	r6, #48	; 0x30
 800b93e:	f805 6b01 	strb.w	r6, [r5], #1
 800b942:	9e00      	ldr	r6, [sp, #0]
 800b944:	1bae      	subs	r6, r5, r6
 800b946:	42b7      	cmp	r7, r6
 800b948:	4602      	mov	r2, r0
 800b94a:	460b      	mov	r3, r1
 800b94c:	d134      	bne.n	800b9b8 <_dtoa_r+0x708>
 800b94e:	f7f4 fc9d 	bl	800028c <__adddf3>
 800b952:	4642      	mov	r2, r8
 800b954:	464b      	mov	r3, r9
 800b956:	4606      	mov	r6, r0
 800b958:	460f      	mov	r7, r1
 800b95a:	f7f5 f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800b95e:	b9c8      	cbnz	r0, 800b994 <_dtoa_r+0x6e4>
 800b960:	4642      	mov	r2, r8
 800b962:	464b      	mov	r3, r9
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f7f5 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b96c:	b110      	cbz	r0, 800b974 <_dtoa_r+0x6c4>
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	07db      	lsls	r3, r3, #31
 800b972:	d40f      	bmi.n	800b994 <_dtoa_r+0x6e4>
 800b974:	4651      	mov	r1, sl
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fbcc 	bl	800c114 <_Bfree>
 800b97c:	2300      	movs	r3, #0
 800b97e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b980:	702b      	strb	r3, [r5, #0]
 800b982:	f10b 0301 	add.w	r3, fp, #1
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f43f ace2 	beq.w	800b354 <_dtoa_r+0xa4>
 800b990:	601d      	str	r5, [r3, #0]
 800b992:	e4df      	b.n	800b354 <_dtoa_r+0xa4>
 800b994:	465f      	mov	r7, fp
 800b996:	462b      	mov	r3, r5
 800b998:	461d      	mov	r5, r3
 800b99a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b99e:	2a39      	cmp	r2, #57	; 0x39
 800b9a0:	d106      	bne.n	800b9b0 <_dtoa_r+0x700>
 800b9a2:	9a00      	ldr	r2, [sp, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d1f7      	bne.n	800b998 <_dtoa_r+0x6e8>
 800b9a8:	9900      	ldr	r1, [sp, #0]
 800b9aa:	2230      	movs	r2, #48	; 0x30
 800b9ac:	3701      	adds	r7, #1
 800b9ae:	700a      	strb	r2, [r1, #0]
 800b9b0:	781a      	ldrb	r2, [r3, #0]
 800b9b2:	3201      	adds	r2, #1
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	e790      	b.n	800b8da <_dtoa_r+0x62a>
 800b9b8:	4ba3      	ldr	r3, [pc, #652]	; (800bc48 <_dtoa_r+0x998>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f7f4 fe1c 	bl	80005f8 <__aeabi_dmul>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	460f      	mov	r7, r1
 800b9c8:	f7f5 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d09e      	beq.n	800b90e <_dtoa_r+0x65e>
 800b9d0:	e7d0      	b.n	800b974 <_dtoa_r+0x6c4>
 800b9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d4:	2a00      	cmp	r2, #0
 800b9d6:	f000 80ca 	beq.w	800bb6e <_dtoa_r+0x8be>
 800b9da:	9a07      	ldr	r2, [sp, #28]
 800b9dc:	2a01      	cmp	r2, #1
 800b9de:	f300 80ad 	bgt.w	800bb3c <_dtoa_r+0x88c>
 800b9e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9e4:	2a00      	cmp	r2, #0
 800b9e6:	f000 80a5 	beq.w	800bb34 <_dtoa_r+0x884>
 800b9ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9ee:	9e08      	ldr	r6, [sp, #32]
 800b9f0:	9d05      	ldr	r5, [sp, #20]
 800b9f2:	9a05      	ldr	r2, [sp, #20]
 800b9f4:	441a      	add	r2, r3
 800b9f6:	9205      	str	r2, [sp, #20]
 800b9f8:	9a06      	ldr	r2, [sp, #24]
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	441a      	add	r2, r3
 800b9fe:	4620      	mov	r0, r4
 800ba00:	9206      	str	r2, [sp, #24]
 800ba02:	f000 fc87 	bl	800c314 <__i2b>
 800ba06:	4607      	mov	r7, r0
 800ba08:	b165      	cbz	r5, 800ba24 <_dtoa_r+0x774>
 800ba0a:	9b06      	ldr	r3, [sp, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dd09      	ble.n	800ba24 <_dtoa_r+0x774>
 800ba10:	42ab      	cmp	r3, r5
 800ba12:	9a05      	ldr	r2, [sp, #20]
 800ba14:	bfa8      	it	ge
 800ba16:	462b      	movge	r3, r5
 800ba18:	1ad2      	subs	r2, r2, r3
 800ba1a:	9205      	str	r2, [sp, #20]
 800ba1c:	9a06      	ldr	r2, [sp, #24]
 800ba1e:	1aed      	subs	r5, r5, r3
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	9306      	str	r3, [sp, #24]
 800ba24:	9b08      	ldr	r3, [sp, #32]
 800ba26:	b1f3      	cbz	r3, 800ba66 <_dtoa_r+0x7b6>
 800ba28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 80a3 	beq.w	800bb76 <_dtoa_r+0x8c6>
 800ba30:	2e00      	cmp	r6, #0
 800ba32:	dd10      	ble.n	800ba56 <_dtoa_r+0x7a6>
 800ba34:	4639      	mov	r1, r7
 800ba36:	4632      	mov	r2, r6
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f000 fd2b 	bl	800c494 <__pow5mult>
 800ba3e:	4652      	mov	r2, sl
 800ba40:	4601      	mov	r1, r0
 800ba42:	4607      	mov	r7, r0
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fc7b 	bl	800c340 <__multiply>
 800ba4a:	4651      	mov	r1, sl
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 fb60 	bl	800c114 <_Bfree>
 800ba54:	46c2      	mov	sl, r8
 800ba56:	9b08      	ldr	r3, [sp, #32]
 800ba58:	1b9a      	subs	r2, r3, r6
 800ba5a:	d004      	beq.n	800ba66 <_dtoa_r+0x7b6>
 800ba5c:	4651      	mov	r1, sl
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fd18 	bl	800c494 <__pow5mult>
 800ba64:	4682      	mov	sl, r0
 800ba66:	2101      	movs	r1, #1
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f000 fc53 	bl	800c314 <__i2b>
 800ba6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	4606      	mov	r6, r0
 800ba74:	f340 8081 	ble.w	800bb7a <_dtoa_r+0x8ca>
 800ba78:	461a      	mov	r2, r3
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fd09 	bl	800c494 <__pow5mult>
 800ba82:	9b07      	ldr	r3, [sp, #28]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	4606      	mov	r6, r0
 800ba88:	dd7a      	ble.n	800bb80 <_dtoa_r+0x8d0>
 800ba8a:	f04f 0800 	mov.w	r8, #0
 800ba8e:	6933      	ldr	r3, [r6, #16]
 800ba90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba94:	6918      	ldr	r0, [r3, #16]
 800ba96:	f000 fbef 	bl	800c278 <__hi0bits>
 800ba9a:	f1c0 0020 	rsb	r0, r0, #32
 800ba9e:	9b06      	ldr	r3, [sp, #24]
 800baa0:	4418      	add	r0, r3
 800baa2:	f010 001f 	ands.w	r0, r0, #31
 800baa6:	f000 8094 	beq.w	800bbd2 <_dtoa_r+0x922>
 800baaa:	f1c0 0320 	rsb	r3, r0, #32
 800baae:	2b04      	cmp	r3, #4
 800bab0:	f340 8085 	ble.w	800bbbe <_dtoa_r+0x90e>
 800bab4:	9b05      	ldr	r3, [sp, #20]
 800bab6:	f1c0 001c 	rsb	r0, r0, #28
 800baba:	4403      	add	r3, r0
 800babc:	9305      	str	r3, [sp, #20]
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	4403      	add	r3, r0
 800bac2:	4405      	add	r5, r0
 800bac4:	9306      	str	r3, [sp, #24]
 800bac6:	9b05      	ldr	r3, [sp, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	dd05      	ble.n	800bad8 <_dtoa_r+0x828>
 800bacc:	4651      	mov	r1, sl
 800bace:	461a      	mov	r2, r3
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 fd39 	bl	800c548 <__lshift>
 800bad6:	4682      	mov	sl, r0
 800bad8:	9b06      	ldr	r3, [sp, #24]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dd05      	ble.n	800baea <_dtoa_r+0x83a>
 800bade:	4631      	mov	r1, r6
 800bae0:	461a      	mov	r2, r3
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 fd30 	bl	800c548 <__lshift>
 800bae8:	4606      	mov	r6, r0
 800baea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baec:	2b00      	cmp	r3, #0
 800baee:	d072      	beq.n	800bbd6 <_dtoa_r+0x926>
 800baf0:	4631      	mov	r1, r6
 800baf2:	4650      	mov	r0, sl
 800baf4:	f000 fd94 	bl	800c620 <__mcmp>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	da6c      	bge.n	800bbd6 <_dtoa_r+0x926>
 800bafc:	2300      	movs	r3, #0
 800bafe:	4651      	mov	r1, sl
 800bb00:	220a      	movs	r2, #10
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fb28 	bl	800c158 <__multadd>
 800bb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb0e:	4682      	mov	sl, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 81b0 	beq.w	800be76 <_dtoa_r+0xbc6>
 800bb16:	2300      	movs	r3, #0
 800bb18:	4639      	mov	r1, r7
 800bb1a:	220a      	movs	r2, #10
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fb1b 	bl	800c158 <__multadd>
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	4607      	mov	r7, r0
 800bb28:	f300 8096 	bgt.w	800bc58 <_dtoa_r+0x9a8>
 800bb2c:	9b07      	ldr	r3, [sp, #28]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dc59      	bgt.n	800bbe6 <_dtoa_r+0x936>
 800bb32:	e091      	b.n	800bc58 <_dtoa_r+0x9a8>
 800bb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb3a:	e758      	b.n	800b9ee <_dtoa_r+0x73e>
 800bb3c:	9b04      	ldr	r3, [sp, #16]
 800bb3e:	1e5e      	subs	r6, r3, #1
 800bb40:	9b08      	ldr	r3, [sp, #32]
 800bb42:	42b3      	cmp	r3, r6
 800bb44:	bfbf      	itttt	lt
 800bb46:	9b08      	ldrlt	r3, [sp, #32]
 800bb48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bb4a:	9608      	strlt	r6, [sp, #32]
 800bb4c:	1af3      	sublt	r3, r6, r3
 800bb4e:	bfb4      	ite	lt
 800bb50:	18d2      	addlt	r2, r2, r3
 800bb52:	1b9e      	subge	r6, r3, r6
 800bb54:	9b04      	ldr	r3, [sp, #16]
 800bb56:	bfbc      	itt	lt
 800bb58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bb5a:	2600      	movlt	r6, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bfb7      	itett	lt
 800bb60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bb64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bb68:	1a9d      	sublt	r5, r3, r2
 800bb6a:	2300      	movlt	r3, #0
 800bb6c:	e741      	b.n	800b9f2 <_dtoa_r+0x742>
 800bb6e:	9e08      	ldr	r6, [sp, #32]
 800bb70:	9d05      	ldr	r5, [sp, #20]
 800bb72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bb74:	e748      	b.n	800ba08 <_dtoa_r+0x758>
 800bb76:	9a08      	ldr	r2, [sp, #32]
 800bb78:	e770      	b.n	800ba5c <_dtoa_r+0x7ac>
 800bb7a:	9b07      	ldr	r3, [sp, #28]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	dc19      	bgt.n	800bbb4 <_dtoa_r+0x904>
 800bb80:	9b02      	ldr	r3, [sp, #8]
 800bb82:	b9bb      	cbnz	r3, 800bbb4 <_dtoa_r+0x904>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb8a:	b99b      	cbnz	r3, 800bbb4 <_dtoa_r+0x904>
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb92:	0d1b      	lsrs	r3, r3, #20
 800bb94:	051b      	lsls	r3, r3, #20
 800bb96:	b183      	cbz	r3, 800bbba <_dtoa_r+0x90a>
 800bb98:	9b05      	ldr	r3, [sp, #20]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	9305      	str	r3, [sp, #20]
 800bb9e:	9b06      	ldr	r3, [sp, #24]
 800bba0:	3301      	adds	r3, #1
 800bba2:	9306      	str	r3, [sp, #24]
 800bba4:	f04f 0801 	mov.w	r8, #1
 800bba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f47f af6f 	bne.w	800ba8e <_dtoa_r+0x7de>
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	e774      	b.n	800ba9e <_dtoa_r+0x7ee>
 800bbb4:	f04f 0800 	mov.w	r8, #0
 800bbb8:	e7f6      	b.n	800bba8 <_dtoa_r+0x8f8>
 800bbba:	4698      	mov	r8, r3
 800bbbc:	e7f4      	b.n	800bba8 <_dtoa_r+0x8f8>
 800bbbe:	d082      	beq.n	800bac6 <_dtoa_r+0x816>
 800bbc0:	9a05      	ldr	r2, [sp, #20]
 800bbc2:	331c      	adds	r3, #28
 800bbc4:	441a      	add	r2, r3
 800bbc6:	9205      	str	r2, [sp, #20]
 800bbc8:	9a06      	ldr	r2, [sp, #24]
 800bbca:	441a      	add	r2, r3
 800bbcc:	441d      	add	r5, r3
 800bbce:	9206      	str	r2, [sp, #24]
 800bbd0:	e779      	b.n	800bac6 <_dtoa_r+0x816>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	e7f4      	b.n	800bbc0 <_dtoa_r+0x910>
 800bbd6:	9b04      	ldr	r3, [sp, #16]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc37      	bgt.n	800bc4c <_dtoa_r+0x99c>
 800bbdc:	9b07      	ldr	r3, [sp, #28]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	dd34      	ble.n	800bc4c <_dtoa_r+0x99c>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	b963      	cbnz	r3, 800bc04 <_dtoa_r+0x954>
 800bbea:	4631      	mov	r1, r6
 800bbec:	2205      	movs	r2, #5
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f000 fab2 	bl	800c158 <__multadd>
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	f000 fd11 	bl	800c620 <__mcmp>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f73f adbb 	bgt.w	800b77a <_dtoa_r+0x4ca>
 800bc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc06:	9d00      	ldr	r5, [sp, #0]
 800bc08:	ea6f 0b03 	mvn.w	fp, r3
 800bc0c:	f04f 0800 	mov.w	r8, #0
 800bc10:	4631      	mov	r1, r6
 800bc12:	4620      	mov	r0, r4
 800bc14:	f000 fa7e 	bl	800c114 <_Bfree>
 800bc18:	2f00      	cmp	r7, #0
 800bc1a:	f43f aeab 	beq.w	800b974 <_dtoa_r+0x6c4>
 800bc1e:	f1b8 0f00 	cmp.w	r8, #0
 800bc22:	d005      	beq.n	800bc30 <_dtoa_r+0x980>
 800bc24:	45b8      	cmp	r8, r7
 800bc26:	d003      	beq.n	800bc30 <_dtoa_r+0x980>
 800bc28:	4641      	mov	r1, r8
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fa72 	bl	800c114 <_Bfree>
 800bc30:	4639      	mov	r1, r7
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 fa6e 	bl	800c114 <_Bfree>
 800bc38:	e69c      	b.n	800b974 <_dtoa_r+0x6c4>
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	4637      	mov	r7, r6
 800bc3e:	e7e1      	b.n	800bc04 <_dtoa_r+0x954>
 800bc40:	46bb      	mov	fp, r7
 800bc42:	4637      	mov	r7, r6
 800bc44:	e599      	b.n	800b77a <_dtoa_r+0x4ca>
 800bc46:	bf00      	nop
 800bc48:	40240000 	.word	0x40240000
 800bc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80c8 	beq.w	800bde4 <_dtoa_r+0xb34>
 800bc54:	9b04      	ldr	r3, [sp, #16]
 800bc56:	9301      	str	r3, [sp, #4]
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	dd05      	ble.n	800bc68 <_dtoa_r+0x9b8>
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	462a      	mov	r2, r5
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 fc71 	bl	800c548 <__lshift>
 800bc66:	4607      	mov	r7, r0
 800bc68:	f1b8 0f00 	cmp.w	r8, #0
 800bc6c:	d05b      	beq.n	800bd26 <_dtoa_r+0xa76>
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 fa0f 	bl	800c094 <_Balloc>
 800bc76:	4605      	mov	r5, r0
 800bc78:	b928      	cbnz	r0, 800bc86 <_dtoa_r+0x9d6>
 800bc7a:	4b83      	ldr	r3, [pc, #524]	; (800be88 <_dtoa_r+0xbd8>)
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bc82:	f7ff bb2e 	b.w	800b2e2 <_dtoa_r+0x32>
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	3202      	adds	r2, #2
 800bc8a:	0092      	lsls	r2, r2, #2
 800bc8c:	f107 010c 	add.w	r1, r7, #12
 800bc90:	300c      	adds	r0, #12
 800bc92:	f7ff fa6e 	bl	800b172 <memcpy>
 800bc96:	2201      	movs	r2, #1
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 fc54 	bl	800c548 <__lshift>
 800bca0:	9b00      	ldr	r3, [sp, #0]
 800bca2:	3301      	adds	r3, #1
 800bca4:	9304      	str	r3, [sp, #16]
 800bca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcaa:	4413      	add	r3, r2
 800bcac:	9308      	str	r3, [sp, #32]
 800bcae:	9b02      	ldr	r3, [sp, #8]
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	46b8      	mov	r8, r7
 800bcb6:	9306      	str	r3, [sp, #24]
 800bcb8:	4607      	mov	r7, r0
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	4650      	mov	r0, sl
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	f7ff fa6a 	bl	800b19c <quorem>
 800bcc8:	4641      	mov	r1, r8
 800bcca:	9002      	str	r0, [sp, #8]
 800bccc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bcd0:	4650      	mov	r0, sl
 800bcd2:	f000 fca5 	bl	800c620 <__mcmp>
 800bcd6:	463a      	mov	r2, r7
 800bcd8:	9005      	str	r0, [sp, #20]
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fcbb 	bl	800c658 <__mdiff>
 800bce2:	68c2      	ldr	r2, [r0, #12]
 800bce4:	4605      	mov	r5, r0
 800bce6:	bb02      	cbnz	r2, 800bd2a <_dtoa_r+0xa7a>
 800bce8:	4601      	mov	r1, r0
 800bcea:	4650      	mov	r0, sl
 800bcec:	f000 fc98 	bl	800c620 <__mcmp>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	9209      	str	r2, [sp, #36]	; 0x24
 800bcf8:	f000 fa0c 	bl	800c114 <_Bfree>
 800bcfc:	9b07      	ldr	r3, [sp, #28]
 800bcfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd00:	9d04      	ldr	r5, [sp, #16]
 800bd02:	ea43 0102 	orr.w	r1, r3, r2
 800bd06:	9b06      	ldr	r3, [sp, #24]
 800bd08:	4319      	orrs	r1, r3
 800bd0a:	d110      	bne.n	800bd2e <_dtoa_r+0xa7e>
 800bd0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd10:	d029      	beq.n	800bd66 <_dtoa_r+0xab6>
 800bd12:	9b05      	ldr	r3, [sp, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd02      	ble.n	800bd1e <_dtoa_r+0xa6e>
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	f883 9000 	strb.w	r9, [r3]
 800bd24:	e774      	b.n	800bc10 <_dtoa_r+0x960>
 800bd26:	4638      	mov	r0, r7
 800bd28:	e7ba      	b.n	800bca0 <_dtoa_r+0x9f0>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	e7e1      	b.n	800bcf2 <_dtoa_r+0xa42>
 800bd2e:	9b05      	ldr	r3, [sp, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	db04      	blt.n	800bd3e <_dtoa_r+0xa8e>
 800bd34:	9907      	ldr	r1, [sp, #28]
 800bd36:	430b      	orrs	r3, r1
 800bd38:	9906      	ldr	r1, [sp, #24]
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	d120      	bne.n	800bd80 <_dtoa_r+0xad0>
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	dded      	ble.n	800bd1e <_dtoa_r+0xa6e>
 800bd42:	4651      	mov	r1, sl
 800bd44:	2201      	movs	r2, #1
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 fbfe 	bl	800c548 <__lshift>
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4682      	mov	sl, r0
 800bd50:	f000 fc66 	bl	800c620 <__mcmp>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	dc03      	bgt.n	800bd60 <_dtoa_r+0xab0>
 800bd58:	d1e1      	bne.n	800bd1e <_dtoa_r+0xa6e>
 800bd5a:	f019 0f01 	tst.w	r9, #1
 800bd5e:	d0de      	beq.n	800bd1e <_dtoa_r+0xa6e>
 800bd60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd64:	d1d8      	bne.n	800bd18 <_dtoa_r+0xa68>
 800bd66:	9a01      	ldr	r2, [sp, #4]
 800bd68:	2339      	movs	r3, #57	; 0x39
 800bd6a:	7013      	strb	r3, [r2, #0]
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	461d      	mov	r5, r3
 800bd70:	3b01      	subs	r3, #1
 800bd72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd76:	2a39      	cmp	r2, #57	; 0x39
 800bd78:	d06c      	beq.n	800be54 <_dtoa_r+0xba4>
 800bd7a:	3201      	adds	r2, #1
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	e747      	b.n	800bc10 <_dtoa_r+0x960>
 800bd80:	2a00      	cmp	r2, #0
 800bd82:	dd07      	ble.n	800bd94 <_dtoa_r+0xae4>
 800bd84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd88:	d0ed      	beq.n	800bd66 <_dtoa_r+0xab6>
 800bd8a:	9a01      	ldr	r2, [sp, #4]
 800bd8c:	f109 0301 	add.w	r3, r9, #1
 800bd90:	7013      	strb	r3, [r2, #0]
 800bd92:	e73d      	b.n	800bc10 <_dtoa_r+0x960>
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	9a08      	ldr	r2, [sp, #32]
 800bd98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d043      	beq.n	800be28 <_dtoa_r+0xb78>
 800bda0:	4651      	mov	r1, sl
 800bda2:	2300      	movs	r3, #0
 800bda4:	220a      	movs	r2, #10
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f9d6 	bl	800c158 <__multadd>
 800bdac:	45b8      	cmp	r8, r7
 800bdae:	4682      	mov	sl, r0
 800bdb0:	f04f 0300 	mov.w	r3, #0
 800bdb4:	f04f 020a 	mov.w	r2, #10
 800bdb8:	4641      	mov	r1, r8
 800bdba:	4620      	mov	r0, r4
 800bdbc:	d107      	bne.n	800bdce <_dtoa_r+0xb1e>
 800bdbe:	f000 f9cb 	bl	800c158 <__multadd>
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	9b04      	ldr	r3, [sp, #16]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	e775      	b.n	800bcba <_dtoa_r+0xa0a>
 800bdce:	f000 f9c3 	bl	800c158 <__multadd>
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	4680      	mov	r8, r0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	220a      	movs	r2, #10
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f9bc 	bl	800c158 <__multadd>
 800bde0:	4607      	mov	r7, r0
 800bde2:	e7f0      	b.n	800bdc6 <_dtoa_r+0xb16>
 800bde4:	9b04      	ldr	r3, [sp, #16]
 800bde6:	9301      	str	r3, [sp, #4]
 800bde8:	9d00      	ldr	r5, [sp, #0]
 800bdea:	4631      	mov	r1, r6
 800bdec:	4650      	mov	r0, sl
 800bdee:	f7ff f9d5 	bl	800b19c <quorem>
 800bdf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bdf6:	9b00      	ldr	r3, [sp, #0]
 800bdf8:	f805 9b01 	strb.w	r9, [r5], #1
 800bdfc:	1aea      	subs	r2, r5, r3
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	4293      	cmp	r3, r2
 800be02:	dd07      	ble.n	800be14 <_dtoa_r+0xb64>
 800be04:	4651      	mov	r1, sl
 800be06:	2300      	movs	r3, #0
 800be08:	220a      	movs	r2, #10
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f9a4 	bl	800c158 <__multadd>
 800be10:	4682      	mov	sl, r0
 800be12:	e7ea      	b.n	800bdea <_dtoa_r+0xb3a>
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfc8      	it	gt
 800be1a:	461d      	movgt	r5, r3
 800be1c:	9b00      	ldr	r3, [sp, #0]
 800be1e:	bfd8      	it	le
 800be20:	2501      	movle	r5, #1
 800be22:	441d      	add	r5, r3
 800be24:	f04f 0800 	mov.w	r8, #0
 800be28:	4651      	mov	r1, sl
 800be2a:	2201      	movs	r2, #1
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fb8b 	bl	800c548 <__lshift>
 800be32:	4631      	mov	r1, r6
 800be34:	4682      	mov	sl, r0
 800be36:	f000 fbf3 	bl	800c620 <__mcmp>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	dc96      	bgt.n	800bd6c <_dtoa_r+0xabc>
 800be3e:	d102      	bne.n	800be46 <_dtoa_r+0xb96>
 800be40:	f019 0f01 	tst.w	r9, #1
 800be44:	d192      	bne.n	800bd6c <_dtoa_r+0xabc>
 800be46:	462b      	mov	r3, r5
 800be48:	461d      	mov	r5, r3
 800be4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be4e:	2a30      	cmp	r2, #48	; 0x30
 800be50:	d0fa      	beq.n	800be48 <_dtoa_r+0xb98>
 800be52:	e6dd      	b.n	800bc10 <_dtoa_r+0x960>
 800be54:	9a00      	ldr	r2, [sp, #0]
 800be56:	429a      	cmp	r2, r3
 800be58:	d189      	bne.n	800bd6e <_dtoa_r+0xabe>
 800be5a:	f10b 0b01 	add.w	fp, fp, #1
 800be5e:	2331      	movs	r3, #49	; 0x31
 800be60:	e796      	b.n	800bd90 <_dtoa_r+0xae0>
 800be62:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <_dtoa_r+0xbdc>)
 800be64:	f7ff ba99 	b.w	800b39a <_dtoa_r+0xea>
 800be68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f47f aa6d 	bne.w	800b34a <_dtoa_r+0x9a>
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <_dtoa_r+0xbe0>)
 800be72:	f7ff ba92 	b.w	800b39a <_dtoa_r+0xea>
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dcb5      	bgt.n	800bde8 <_dtoa_r+0xb38>
 800be7c:	9b07      	ldr	r3, [sp, #28]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	f73f aeb1 	bgt.w	800bbe6 <_dtoa_r+0x936>
 800be84:	e7b0      	b.n	800bde8 <_dtoa_r+0xb38>
 800be86:	bf00      	nop
 800be88:	0800fea9 	.word	0x0800fea9
 800be8c:	0800fe04 	.word	0x0800fe04
 800be90:	0800fe2d 	.word	0x0800fe2d

0800be94 <_free_r>:
 800be94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be96:	2900      	cmp	r1, #0
 800be98:	d044      	beq.n	800bf24 <_free_r+0x90>
 800be9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be9e:	9001      	str	r0, [sp, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f1a1 0404 	sub.w	r4, r1, #4
 800bea6:	bfb8      	it	lt
 800bea8:	18e4      	addlt	r4, r4, r3
 800beaa:	f000 f8e7 	bl	800c07c <__malloc_lock>
 800beae:	4a1e      	ldr	r2, [pc, #120]	; (800bf28 <_free_r+0x94>)
 800beb0:	9801      	ldr	r0, [sp, #4]
 800beb2:	6813      	ldr	r3, [r2, #0]
 800beb4:	b933      	cbnz	r3, 800bec4 <_free_r+0x30>
 800beb6:	6063      	str	r3, [r4, #4]
 800beb8:	6014      	str	r4, [r2, #0]
 800beba:	b003      	add	sp, #12
 800bebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bec0:	f000 b8e2 	b.w	800c088 <__malloc_unlock>
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	d908      	bls.n	800beda <_free_r+0x46>
 800bec8:	6825      	ldr	r5, [r4, #0]
 800beca:	1961      	adds	r1, r4, r5
 800becc:	428b      	cmp	r3, r1
 800bece:	bf01      	itttt	eq
 800bed0:	6819      	ldreq	r1, [r3, #0]
 800bed2:	685b      	ldreq	r3, [r3, #4]
 800bed4:	1949      	addeq	r1, r1, r5
 800bed6:	6021      	streq	r1, [r4, #0]
 800bed8:	e7ed      	b.n	800beb6 <_free_r+0x22>
 800beda:	461a      	mov	r2, r3
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	b10b      	cbz	r3, 800bee4 <_free_r+0x50>
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	d9fa      	bls.n	800beda <_free_r+0x46>
 800bee4:	6811      	ldr	r1, [r2, #0]
 800bee6:	1855      	adds	r5, r2, r1
 800bee8:	42a5      	cmp	r5, r4
 800beea:	d10b      	bne.n	800bf04 <_free_r+0x70>
 800beec:	6824      	ldr	r4, [r4, #0]
 800beee:	4421      	add	r1, r4
 800bef0:	1854      	adds	r4, r2, r1
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	6011      	str	r1, [r2, #0]
 800bef6:	d1e0      	bne.n	800beba <_free_r+0x26>
 800bef8:	681c      	ldr	r4, [r3, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	6053      	str	r3, [r2, #4]
 800befe:	440c      	add	r4, r1
 800bf00:	6014      	str	r4, [r2, #0]
 800bf02:	e7da      	b.n	800beba <_free_r+0x26>
 800bf04:	d902      	bls.n	800bf0c <_free_r+0x78>
 800bf06:	230c      	movs	r3, #12
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	e7d6      	b.n	800beba <_free_r+0x26>
 800bf0c:	6825      	ldr	r5, [r4, #0]
 800bf0e:	1961      	adds	r1, r4, r5
 800bf10:	428b      	cmp	r3, r1
 800bf12:	bf04      	itt	eq
 800bf14:	6819      	ldreq	r1, [r3, #0]
 800bf16:	685b      	ldreq	r3, [r3, #4]
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	bf04      	itt	eq
 800bf1c:	1949      	addeq	r1, r1, r5
 800bf1e:	6021      	streq	r1, [r4, #0]
 800bf20:	6054      	str	r4, [r2, #4]
 800bf22:	e7ca      	b.n	800beba <_free_r+0x26>
 800bf24:	b003      	add	sp, #12
 800bf26:	bd30      	pop	{r4, r5, pc}
 800bf28:	200050ac 	.word	0x200050ac

0800bf2c <malloc>:
 800bf2c:	4b02      	ldr	r3, [pc, #8]	; (800bf38 <malloc+0xc>)
 800bf2e:	4601      	mov	r1, r0
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	f000 b823 	b.w	800bf7c <_malloc_r>
 800bf36:	bf00      	nop
 800bf38:	20000088 	.word	0x20000088

0800bf3c <sbrk_aligned>:
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	4e0e      	ldr	r6, [pc, #56]	; (800bf78 <sbrk_aligned+0x3c>)
 800bf40:	460c      	mov	r4, r1
 800bf42:	6831      	ldr	r1, [r6, #0]
 800bf44:	4605      	mov	r5, r0
 800bf46:	b911      	cbnz	r1, 800bf4e <sbrk_aligned+0x12>
 800bf48:	f001 fe1a 	bl	800db80 <_sbrk_r>
 800bf4c:	6030      	str	r0, [r6, #0]
 800bf4e:	4621      	mov	r1, r4
 800bf50:	4628      	mov	r0, r5
 800bf52:	f001 fe15 	bl	800db80 <_sbrk_r>
 800bf56:	1c43      	adds	r3, r0, #1
 800bf58:	d00a      	beq.n	800bf70 <sbrk_aligned+0x34>
 800bf5a:	1cc4      	adds	r4, r0, #3
 800bf5c:	f024 0403 	bic.w	r4, r4, #3
 800bf60:	42a0      	cmp	r0, r4
 800bf62:	d007      	beq.n	800bf74 <sbrk_aligned+0x38>
 800bf64:	1a21      	subs	r1, r4, r0
 800bf66:	4628      	mov	r0, r5
 800bf68:	f001 fe0a 	bl	800db80 <_sbrk_r>
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	d101      	bne.n	800bf74 <sbrk_aligned+0x38>
 800bf70:	f04f 34ff 	mov.w	r4, #4294967295
 800bf74:	4620      	mov	r0, r4
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	200050b0 	.word	0x200050b0

0800bf7c <_malloc_r>:
 800bf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf80:	1ccd      	adds	r5, r1, #3
 800bf82:	f025 0503 	bic.w	r5, r5, #3
 800bf86:	3508      	adds	r5, #8
 800bf88:	2d0c      	cmp	r5, #12
 800bf8a:	bf38      	it	cc
 800bf8c:	250c      	movcc	r5, #12
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	4607      	mov	r7, r0
 800bf92:	db01      	blt.n	800bf98 <_malloc_r+0x1c>
 800bf94:	42a9      	cmp	r1, r5
 800bf96:	d905      	bls.n	800bfa4 <_malloc_r+0x28>
 800bf98:	230c      	movs	r3, #12
 800bf9a:	603b      	str	r3, [r7, #0]
 800bf9c:	2600      	movs	r6, #0
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c078 <_malloc_r+0xfc>
 800bfa8:	f000 f868 	bl	800c07c <__malloc_lock>
 800bfac:	f8d8 3000 	ldr.w	r3, [r8]
 800bfb0:	461c      	mov	r4, r3
 800bfb2:	bb5c      	cbnz	r4, 800c00c <_malloc_r+0x90>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	f7ff ffc0 	bl	800bf3c <sbrk_aligned>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	d155      	bne.n	800c06e <_malloc_r+0xf2>
 800bfc2:	f8d8 4000 	ldr.w	r4, [r8]
 800bfc6:	4626      	mov	r6, r4
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	d145      	bne.n	800c058 <_malloc_r+0xdc>
 800bfcc:	2c00      	cmp	r4, #0
 800bfce:	d048      	beq.n	800c062 <_malloc_r+0xe6>
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	eb04 0903 	add.w	r9, r4, r3
 800bfda:	f001 fdd1 	bl	800db80 <_sbrk_r>
 800bfde:	4581      	cmp	r9, r0
 800bfe0:	d13f      	bne.n	800c062 <_malloc_r+0xe6>
 800bfe2:	6821      	ldr	r1, [r4, #0]
 800bfe4:	1a6d      	subs	r5, r5, r1
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	4638      	mov	r0, r7
 800bfea:	f7ff ffa7 	bl	800bf3c <sbrk_aligned>
 800bfee:	3001      	adds	r0, #1
 800bff0:	d037      	beq.n	800c062 <_malloc_r+0xe6>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	442b      	add	r3, r5
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	f8d8 3000 	ldr.w	r3, [r8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d038      	beq.n	800c072 <_malloc_r+0xf6>
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	42a2      	cmp	r2, r4
 800c004:	d12b      	bne.n	800c05e <_malloc_r+0xe2>
 800c006:	2200      	movs	r2, #0
 800c008:	605a      	str	r2, [r3, #4]
 800c00a:	e00f      	b.n	800c02c <_malloc_r+0xb0>
 800c00c:	6822      	ldr	r2, [r4, #0]
 800c00e:	1b52      	subs	r2, r2, r5
 800c010:	d41f      	bmi.n	800c052 <_malloc_r+0xd6>
 800c012:	2a0b      	cmp	r2, #11
 800c014:	d917      	bls.n	800c046 <_malloc_r+0xca>
 800c016:	1961      	adds	r1, r4, r5
 800c018:	42a3      	cmp	r3, r4
 800c01a:	6025      	str	r5, [r4, #0]
 800c01c:	bf18      	it	ne
 800c01e:	6059      	strne	r1, [r3, #4]
 800c020:	6863      	ldr	r3, [r4, #4]
 800c022:	bf08      	it	eq
 800c024:	f8c8 1000 	streq.w	r1, [r8]
 800c028:	5162      	str	r2, [r4, r5]
 800c02a:	604b      	str	r3, [r1, #4]
 800c02c:	4638      	mov	r0, r7
 800c02e:	f104 060b 	add.w	r6, r4, #11
 800c032:	f000 f829 	bl	800c088 <__malloc_unlock>
 800c036:	f026 0607 	bic.w	r6, r6, #7
 800c03a:	1d23      	adds	r3, r4, #4
 800c03c:	1af2      	subs	r2, r6, r3
 800c03e:	d0ae      	beq.n	800bf9e <_malloc_r+0x22>
 800c040:	1b9b      	subs	r3, r3, r6
 800c042:	50a3      	str	r3, [r4, r2]
 800c044:	e7ab      	b.n	800bf9e <_malloc_r+0x22>
 800c046:	42a3      	cmp	r3, r4
 800c048:	6862      	ldr	r2, [r4, #4]
 800c04a:	d1dd      	bne.n	800c008 <_malloc_r+0x8c>
 800c04c:	f8c8 2000 	str.w	r2, [r8]
 800c050:	e7ec      	b.n	800c02c <_malloc_r+0xb0>
 800c052:	4623      	mov	r3, r4
 800c054:	6864      	ldr	r4, [r4, #4]
 800c056:	e7ac      	b.n	800bfb2 <_malloc_r+0x36>
 800c058:	4634      	mov	r4, r6
 800c05a:	6876      	ldr	r6, [r6, #4]
 800c05c:	e7b4      	b.n	800bfc8 <_malloc_r+0x4c>
 800c05e:	4613      	mov	r3, r2
 800c060:	e7cc      	b.n	800bffc <_malloc_r+0x80>
 800c062:	230c      	movs	r3, #12
 800c064:	603b      	str	r3, [r7, #0]
 800c066:	4638      	mov	r0, r7
 800c068:	f000 f80e 	bl	800c088 <__malloc_unlock>
 800c06c:	e797      	b.n	800bf9e <_malloc_r+0x22>
 800c06e:	6025      	str	r5, [r4, #0]
 800c070:	e7dc      	b.n	800c02c <_malloc_r+0xb0>
 800c072:	605b      	str	r3, [r3, #4]
 800c074:	deff      	udf	#255	; 0xff
 800c076:	bf00      	nop
 800c078:	200050ac 	.word	0x200050ac

0800c07c <__malloc_lock>:
 800c07c:	4801      	ldr	r0, [pc, #4]	; (800c084 <__malloc_lock+0x8>)
 800c07e:	f7ff b876 	b.w	800b16e <__retarget_lock_acquire_recursive>
 800c082:	bf00      	nop
 800c084:	200050a8 	.word	0x200050a8

0800c088 <__malloc_unlock>:
 800c088:	4801      	ldr	r0, [pc, #4]	; (800c090 <__malloc_unlock+0x8>)
 800c08a:	f7ff b871 	b.w	800b170 <__retarget_lock_release_recursive>
 800c08e:	bf00      	nop
 800c090:	200050a8 	.word	0x200050a8

0800c094 <_Balloc>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	69c6      	ldr	r6, [r0, #28]
 800c098:	4604      	mov	r4, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	b976      	cbnz	r6, 800c0bc <_Balloc+0x28>
 800c09e:	2010      	movs	r0, #16
 800c0a0:	f7ff ff44 	bl	800bf2c <malloc>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	61e0      	str	r0, [r4, #28]
 800c0a8:	b920      	cbnz	r0, 800c0b4 <_Balloc+0x20>
 800c0aa:	4b18      	ldr	r3, [pc, #96]	; (800c10c <_Balloc+0x78>)
 800c0ac:	4818      	ldr	r0, [pc, #96]	; (800c110 <_Balloc+0x7c>)
 800c0ae:	216b      	movs	r1, #107	; 0x6b
 800c0b0:	f001 fd7e 	bl	800dbb0 <__assert_func>
 800c0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b8:	6006      	str	r6, [r0, #0]
 800c0ba:	60c6      	str	r6, [r0, #12]
 800c0bc:	69e6      	ldr	r6, [r4, #28]
 800c0be:	68f3      	ldr	r3, [r6, #12]
 800c0c0:	b183      	cbz	r3, 800c0e4 <_Balloc+0x50>
 800c0c2:	69e3      	ldr	r3, [r4, #28]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ca:	b9b8      	cbnz	r0, 800c0fc <_Balloc+0x68>
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	fa01 f605 	lsl.w	r6, r1, r5
 800c0d2:	1d72      	adds	r2, r6, #5
 800c0d4:	0092      	lsls	r2, r2, #2
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f001 fd88 	bl	800dbec <_calloc_r>
 800c0dc:	b160      	cbz	r0, 800c0f8 <_Balloc+0x64>
 800c0de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0e2:	e00e      	b.n	800c102 <_Balloc+0x6e>
 800c0e4:	2221      	movs	r2, #33	; 0x21
 800c0e6:	2104      	movs	r1, #4
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f001 fd7f 	bl	800dbec <_calloc_r>
 800c0ee:	69e3      	ldr	r3, [r4, #28]
 800c0f0:	60f0      	str	r0, [r6, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1e4      	bne.n	800c0c2 <_Balloc+0x2e>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	6802      	ldr	r2, [r0, #0]
 800c0fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c102:	2300      	movs	r3, #0
 800c104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c108:	e7f7      	b.n	800c0fa <_Balloc+0x66>
 800c10a:	bf00      	nop
 800c10c:	0800fe3a 	.word	0x0800fe3a
 800c110:	0800feba 	.word	0x0800feba

0800c114 <_Bfree>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	69c6      	ldr	r6, [r0, #28]
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	b976      	cbnz	r6, 800c13c <_Bfree+0x28>
 800c11e:	2010      	movs	r0, #16
 800c120:	f7ff ff04 	bl	800bf2c <malloc>
 800c124:	4602      	mov	r2, r0
 800c126:	61e8      	str	r0, [r5, #28]
 800c128:	b920      	cbnz	r0, 800c134 <_Bfree+0x20>
 800c12a:	4b09      	ldr	r3, [pc, #36]	; (800c150 <_Bfree+0x3c>)
 800c12c:	4809      	ldr	r0, [pc, #36]	; (800c154 <_Bfree+0x40>)
 800c12e:	218f      	movs	r1, #143	; 0x8f
 800c130:	f001 fd3e 	bl	800dbb0 <__assert_func>
 800c134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c138:	6006      	str	r6, [r0, #0]
 800c13a:	60c6      	str	r6, [r0, #12]
 800c13c:	b13c      	cbz	r4, 800c14e <_Bfree+0x3a>
 800c13e:	69eb      	ldr	r3, [r5, #28]
 800c140:	6862      	ldr	r2, [r4, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c148:	6021      	str	r1, [r4, #0]
 800c14a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	0800fe3a 	.word	0x0800fe3a
 800c154:	0800feba 	.word	0x0800feba

0800c158 <__multadd>:
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	690d      	ldr	r5, [r1, #16]
 800c15e:	4607      	mov	r7, r0
 800c160:	460c      	mov	r4, r1
 800c162:	461e      	mov	r6, r3
 800c164:	f101 0c14 	add.w	ip, r1, #20
 800c168:	2000      	movs	r0, #0
 800c16a:	f8dc 3000 	ldr.w	r3, [ip]
 800c16e:	b299      	uxth	r1, r3
 800c170:	fb02 6101 	mla	r1, r2, r1, r6
 800c174:	0c1e      	lsrs	r6, r3, #16
 800c176:	0c0b      	lsrs	r3, r1, #16
 800c178:	fb02 3306 	mla	r3, r2, r6, r3
 800c17c:	b289      	uxth	r1, r1
 800c17e:	3001      	adds	r0, #1
 800c180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c184:	4285      	cmp	r5, r0
 800c186:	f84c 1b04 	str.w	r1, [ip], #4
 800c18a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c18e:	dcec      	bgt.n	800c16a <__multadd+0x12>
 800c190:	b30e      	cbz	r6, 800c1d6 <__multadd+0x7e>
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	42ab      	cmp	r3, r5
 800c196:	dc19      	bgt.n	800c1cc <__multadd+0x74>
 800c198:	6861      	ldr	r1, [r4, #4]
 800c19a:	4638      	mov	r0, r7
 800c19c:	3101      	adds	r1, #1
 800c19e:	f7ff ff79 	bl	800c094 <_Balloc>
 800c1a2:	4680      	mov	r8, r0
 800c1a4:	b928      	cbnz	r0, 800c1b2 <__multadd+0x5a>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <__multadd+0x84>)
 800c1aa:	480d      	ldr	r0, [pc, #52]	; (800c1e0 <__multadd+0x88>)
 800c1ac:	21ba      	movs	r1, #186	; 0xba
 800c1ae:	f001 fcff 	bl	800dbb0 <__assert_func>
 800c1b2:	6922      	ldr	r2, [r4, #16]
 800c1b4:	3202      	adds	r2, #2
 800c1b6:	f104 010c 	add.w	r1, r4, #12
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	300c      	adds	r0, #12
 800c1be:	f7fe ffd8 	bl	800b172 <memcpy>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f7ff ffa5 	bl	800c114 <_Bfree>
 800c1ca:	4644      	mov	r4, r8
 800c1cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1d0:	3501      	adds	r5, #1
 800c1d2:	615e      	str	r6, [r3, #20]
 800c1d4:	6125      	str	r5, [r4, #16]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1dc:	0800fea9 	.word	0x0800fea9
 800c1e0:	0800feba 	.word	0x0800feba

0800c1e4 <__s2b>:
 800c1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	4615      	mov	r5, r2
 800c1ec:	461f      	mov	r7, r3
 800c1ee:	2209      	movs	r2, #9
 800c1f0:	3308      	adds	r3, #8
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	db09      	blt.n	800c214 <__s2b+0x30>
 800c200:	4630      	mov	r0, r6
 800c202:	f7ff ff47 	bl	800c094 <_Balloc>
 800c206:	b940      	cbnz	r0, 800c21a <__s2b+0x36>
 800c208:	4602      	mov	r2, r0
 800c20a:	4b19      	ldr	r3, [pc, #100]	; (800c270 <__s2b+0x8c>)
 800c20c:	4819      	ldr	r0, [pc, #100]	; (800c274 <__s2b+0x90>)
 800c20e:	21d3      	movs	r1, #211	; 0xd3
 800c210:	f001 fcce 	bl	800dbb0 <__assert_func>
 800c214:	0052      	lsls	r2, r2, #1
 800c216:	3101      	adds	r1, #1
 800c218:	e7f0      	b.n	800c1fc <__s2b+0x18>
 800c21a:	9b08      	ldr	r3, [sp, #32]
 800c21c:	6143      	str	r3, [r0, #20]
 800c21e:	2d09      	cmp	r5, #9
 800c220:	f04f 0301 	mov.w	r3, #1
 800c224:	6103      	str	r3, [r0, #16]
 800c226:	dd16      	ble.n	800c256 <__s2b+0x72>
 800c228:	f104 0909 	add.w	r9, r4, #9
 800c22c:	46c8      	mov	r8, r9
 800c22e:	442c      	add	r4, r5
 800c230:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c234:	4601      	mov	r1, r0
 800c236:	3b30      	subs	r3, #48	; 0x30
 800c238:	220a      	movs	r2, #10
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ff8c 	bl	800c158 <__multadd>
 800c240:	45a0      	cmp	r8, r4
 800c242:	d1f5      	bne.n	800c230 <__s2b+0x4c>
 800c244:	f1a5 0408 	sub.w	r4, r5, #8
 800c248:	444c      	add	r4, r9
 800c24a:	1b2d      	subs	r5, r5, r4
 800c24c:	1963      	adds	r3, r4, r5
 800c24e:	42bb      	cmp	r3, r7
 800c250:	db04      	blt.n	800c25c <__s2b+0x78>
 800c252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c256:	340a      	adds	r4, #10
 800c258:	2509      	movs	r5, #9
 800c25a:	e7f6      	b.n	800c24a <__s2b+0x66>
 800c25c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c260:	4601      	mov	r1, r0
 800c262:	3b30      	subs	r3, #48	; 0x30
 800c264:	220a      	movs	r2, #10
 800c266:	4630      	mov	r0, r6
 800c268:	f7ff ff76 	bl	800c158 <__multadd>
 800c26c:	e7ee      	b.n	800c24c <__s2b+0x68>
 800c26e:	bf00      	nop
 800c270:	0800fea9 	.word	0x0800fea9
 800c274:	0800feba 	.word	0x0800feba

0800c278 <__hi0bits>:
 800c278:	0c03      	lsrs	r3, r0, #16
 800c27a:	041b      	lsls	r3, r3, #16
 800c27c:	b9d3      	cbnz	r3, 800c2b4 <__hi0bits+0x3c>
 800c27e:	0400      	lsls	r0, r0, #16
 800c280:	2310      	movs	r3, #16
 800c282:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c286:	bf04      	itt	eq
 800c288:	0200      	lsleq	r0, r0, #8
 800c28a:	3308      	addeq	r3, #8
 800c28c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c290:	bf04      	itt	eq
 800c292:	0100      	lsleq	r0, r0, #4
 800c294:	3304      	addeq	r3, #4
 800c296:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c29a:	bf04      	itt	eq
 800c29c:	0080      	lsleq	r0, r0, #2
 800c29e:	3302      	addeq	r3, #2
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	db05      	blt.n	800c2b0 <__hi0bits+0x38>
 800c2a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c2a8:	f103 0301 	add.w	r3, r3, #1
 800c2ac:	bf08      	it	eq
 800c2ae:	2320      	moveq	r3, #32
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	4770      	bx	lr
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	e7e4      	b.n	800c282 <__hi0bits+0xa>

0800c2b8 <__lo0bits>:
 800c2b8:	6803      	ldr	r3, [r0, #0]
 800c2ba:	f013 0207 	ands.w	r2, r3, #7
 800c2be:	d00c      	beq.n	800c2da <__lo0bits+0x22>
 800c2c0:	07d9      	lsls	r1, r3, #31
 800c2c2:	d422      	bmi.n	800c30a <__lo0bits+0x52>
 800c2c4:	079a      	lsls	r2, r3, #30
 800c2c6:	bf49      	itett	mi
 800c2c8:	085b      	lsrmi	r3, r3, #1
 800c2ca:	089b      	lsrpl	r3, r3, #2
 800c2cc:	6003      	strmi	r3, [r0, #0]
 800c2ce:	2201      	movmi	r2, #1
 800c2d0:	bf5c      	itt	pl
 800c2d2:	6003      	strpl	r3, [r0, #0]
 800c2d4:	2202      	movpl	r2, #2
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	4770      	bx	lr
 800c2da:	b299      	uxth	r1, r3
 800c2dc:	b909      	cbnz	r1, 800c2e2 <__lo0bits+0x2a>
 800c2de:	0c1b      	lsrs	r3, r3, #16
 800c2e0:	2210      	movs	r2, #16
 800c2e2:	b2d9      	uxtb	r1, r3
 800c2e4:	b909      	cbnz	r1, 800c2ea <__lo0bits+0x32>
 800c2e6:	3208      	adds	r2, #8
 800c2e8:	0a1b      	lsrs	r3, r3, #8
 800c2ea:	0719      	lsls	r1, r3, #28
 800c2ec:	bf04      	itt	eq
 800c2ee:	091b      	lsreq	r3, r3, #4
 800c2f0:	3204      	addeq	r2, #4
 800c2f2:	0799      	lsls	r1, r3, #30
 800c2f4:	bf04      	itt	eq
 800c2f6:	089b      	lsreq	r3, r3, #2
 800c2f8:	3202      	addeq	r2, #2
 800c2fa:	07d9      	lsls	r1, r3, #31
 800c2fc:	d403      	bmi.n	800c306 <__lo0bits+0x4e>
 800c2fe:	085b      	lsrs	r3, r3, #1
 800c300:	f102 0201 	add.w	r2, r2, #1
 800c304:	d003      	beq.n	800c30e <__lo0bits+0x56>
 800c306:	6003      	str	r3, [r0, #0]
 800c308:	e7e5      	b.n	800c2d6 <__lo0bits+0x1e>
 800c30a:	2200      	movs	r2, #0
 800c30c:	e7e3      	b.n	800c2d6 <__lo0bits+0x1e>
 800c30e:	2220      	movs	r2, #32
 800c310:	e7e1      	b.n	800c2d6 <__lo0bits+0x1e>
	...

0800c314 <__i2b>:
 800c314:	b510      	push	{r4, lr}
 800c316:	460c      	mov	r4, r1
 800c318:	2101      	movs	r1, #1
 800c31a:	f7ff febb 	bl	800c094 <_Balloc>
 800c31e:	4602      	mov	r2, r0
 800c320:	b928      	cbnz	r0, 800c32e <__i2b+0x1a>
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <__i2b+0x24>)
 800c324:	4805      	ldr	r0, [pc, #20]	; (800c33c <__i2b+0x28>)
 800c326:	f240 1145 	movw	r1, #325	; 0x145
 800c32a:	f001 fc41 	bl	800dbb0 <__assert_func>
 800c32e:	2301      	movs	r3, #1
 800c330:	6144      	str	r4, [r0, #20]
 800c332:	6103      	str	r3, [r0, #16]
 800c334:	bd10      	pop	{r4, pc}
 800c336:	bf00      	nop
 800c338:	0800fea9 	.word	0x0800fea9
 800c33c:	0800feba 	.word	0x0800feba

0800c340 <__multiply>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	4691      	mov	r9, r2
 800c346:	690a      	ldr	r2, [r1, #16]
 800c348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	bfb8      	it	lt
 800c350:	460b      	movlt	r3, r1
 800c352:	460c      	mov	r4, r1
 800c354:	bfbc      	itt	lt
 800c356:	464c      	movlt	r4, r9
 800c358:	4699      	movlt	r9, r3
 800c35a:	6927      	ldr	r7, [r4, #16]
 800c35c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	6861      	ldr	r1, [r4, #4]
 800c364:	eb07 060a 	add.w	r6, r7, sl
 800c368:	42b3      	cmp	r3, r6
 800c36a:	b085      	sub	sp, #20
 800c36c:	bfb8      	it	lt
 800c36e:	3101      	addlt	r1, #1
 800c370:	f7ff fe90 	bl	800c094 <_Balloc>
 800c374:	b930      	cbnz	r0, 800c384 <__multiply+0x44>
 800c376:	4602      	mov	r2, r0
 800c378:	4b44      	ldr	r3, [pc, #272]	; (800c48c <__multiply+0x14c>)
 800c37a:	4845      	ldr	r0, [pc, #276]	; (800c490 <__multiply+0x150>)
 800c37c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c380:	f001 fc16 	bl	800dbb0 <__assert_func>
 800c384:	f100 0514 	add.w	r5, r0, #20
 800c388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c38c:	462b      	mov	r3, r5
 800c38e:	2200      	movs	r2, #0
 800c390:	4543      	cmp	r3, r8
 800c392:	d321      	bcc.n	800c3d8 <__multiply+0x98>
 800c394:	f104 0314 	add.w	r3, r4, #20
 800c398:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c39c:	f109 0314 	add.w	r3, r9, #20
 800c3a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	1b3a      	subs	r2, r7, r4
 800c3a8:	3a15      	subs	r2, #21
 800c3aa:	f022 0203 	bic.w	r2, r2, #3
 800c3ae:	3204      	adds	r2, #4
 800c3b0:	f104 0115 	add.w	r1, r4, #21
 800c3b4:	428f      	cmp	r7, r1
 800c3b6:	bf38      	it	cc
 800c3b8:	2204      	movcc	r2, #4
 800c3ba:	9201      	str	r2, [sp, #4]
 800c3bc:	9a02      	ldr	r2, [sp, #8]
 800c3be:	9303      	str	r3, [sp, #12]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d80c      	bhi.n	800c3de <__multiply+0x9e>
 800c3c4:	2e00      	cmp	r6, #0
 800c3c6:	dd03      	ble.n	800c3d0 <__multiply+0x90>
 800c3c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d05b      	beq.n	800c488 <__multiply+0x148>
 800c3d0:	6106      	str	r6, [r0, #16]
 800c3d2:	b005      	add	sp, #20
 800c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d8:	f843 2b04 	str.w	r2, [r3], #4
 800c3dc:	e7d8      	b.n	800c390 <__multiply+0x50>
 800c3de:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3e2:	f1ba 0f00 	cmp.w	sl, #0
 800c3e6:	d024      	beq.n	800c432 <__multiply+0xf2>
 800c3e8:	f104 0e14 	add.w	lr, r4, #20
 800c3ec:	46a9      	mov	r9, r5
 800c3ee:	f04f 0c00 	mov.w	ip, #0
 800c3f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3f6:	f8d9 1000 	ldr.w	r1, [r9]
 800c3fa:	fa1f fb82 	uxth.w	fp, r2
 800c3fe:	b289      	uxth	r1, r1
 800c400:	fb0a 110b 	mla	r1, sl, fp, r1
 800c404:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c408:	f8d9 2000 	ldr.w	r2, [r9]
 800c40c:	4461      	add	r1, ip
 800c40e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c412:	fb0a c20b 	mla	r2, sl, fp, ip
 800c416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c41a:	b289      	uxth	r1, r1
 800c41c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c420:	4577      	cmp	r7, lr
 800c422:	f849 1b04 	str.w	r1, [r9], #4
 800c426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c42a:	d8e2      	bhi.n	800c3f2 <__multiply+0xb2>
 800c42c:	9a01      	ldr	r2, [sp, #4]
 800c42e:	f845 c002 	str.w	ip, [r5, r2]
 800c432:	9a03      	ldr	r2, [sp, #12]
 800c434:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c438:	3304      	adds	r3, #4
 800c43a:	f1b9 0f00 	cmp.w	r9, #0
 800c43e:	d021      	beq.n	800c484 <__multiply+0x144>
 800c440:	6829      	ldr	r1, [r5, #0]
 800c442:	f104 0c14 	add.w	ip, r4, #20
 800c446:	46ae      	mov	lr, r5
 800c448:	f04f 0a00 	mov.w	sl, #0
 800c44c:	f8bc b000 	ldrh.w	fp, [ip]
 800c450:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c454:	fb09 220b 	mla	r2, r9, fp, r2
 800c458:	4452      	add	r2, sl
 800c45a:	b289      	uxth	r1, r1
 800c45c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c460:	f84e 1b04 	str.w	r1, [lr], #4
 800c464:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c468:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c46c:	f8be 1000 	ldrh.w	r1, [lr]
 800c470:	fb09 110a 	mla	r1, r9, sl, r1
 800c474:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c478:	4567      	cmp	r7, ip
 800c47a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c47e:	d8e5      	bhi.n	800c44c <__multiply+0x10c>
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	50a9      	str	r1, [r5, r2]
 800c484:	3504      	adds	r5, #4
 800c486:	e799      	b.n	800c3bc <__multiply+0x7c>
 800c488:	3e01      	subs	r6, #1
 800c48a:	e79b      	b.n	800c3c4 <__multiply+0x84>
 800c48c:	0800fea9 	.word	0x0800fea9
 800c490:	0800feba 	.word	0x0800feba

0800c494 <__pow5mult>:
 800c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c498:	4615      	mov	r5, r2
 800c49a:	f012 0203 	ands.w	r2, r2, #3
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460f      	mov	r7, r1
 800c4a2:	d007      	beq.n	800c4b4 <__pow5mult+0x20>
 800c4a4:	4c25      	ldr	r4, [pc, #148]	; (800c53c <__pow5mult+0xa8>)
 800c4a6:	3a01      	subs	r2, #1
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ae:	f7ff fe53 	bl	800c158 <__multadd>
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	10ad      	asrs	r5, r5, #2
 800c4b6:	d03d      	beq.n	800c534 <__pow5mult+0xa0>
 800c4b8:	69f4      	ldr	r4, [r6, #28]
 800c4ba:	b97c      	cbnz	r4, 800c4dc <__pow5mult+0x48>
 800c4bc:	2010      	movs	r0, #16
 800c4be:	f7ff fd35 	bl	800bf2c <malloc>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	61f0      	str	r0, [r6, #28]
 800c4c6:	b928      	cbnz	r0, 800c4d4 <__pow5mult+0x40>
 800c4c8:	4b1d      	ldr	r3, [pc, #116]	; (800c540 <__pow5mult+0xac>)
 800c4ca:	481e      	ldr	r0, [pc, #120]	; (800c544 <__pow5mult+0xb0>)
 800c4cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c4d0:	f001 fb6e 	bl	800dbb0 <__assert_func>
 800c4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4d8:	6004      	str	r4, [r0, #0]
 800c4da:	60c4      	str	r4, [r0, #12]
 800c4dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4e4:	b94c      	cbnz	r4, 800c4fa <__pow5mult+0x66>
 800c4e6:	f240 2171 	movw	r1, #625	; 0x271
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ff12 	bl	800c314 <__i2b>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	f04f 0900 	mov.w	r9, #0
 800c4fe:	07eb      	lsls	r3, r5, #31
 800c500:	d50a      	bpl.n	800c518 <__pow5mult+0x84>
 800c502:	4639      	mov	r1, r7
 800c504:	4622      	mov	r2, r4
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ff1a 	bl	800c340 <__multiply>
 800c50c:	4639      	mov	r1, r7
 800c50e:	4680      	mov	r8, r0
 800c510:	4630      	mov	r0, r6
 800c512:	f7ff fdff 	bl	800c114 <_Bfree>
 800c516:	4647      	mov	r7, r8
 800c518:	106d      	asrs	r5, r5, #1
 800c51a:	d00b      	beq.n	800c534 <__pow5mult+0xa0>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	b938      	cbnz	r0, 800c530 <__pow5mult+0x9c>
 800c520:	4622      	mov	r2, r4
 800c522:	4621      	mov	r1, r4
 800c524:	4630      	mov	r0, r6
 800c526:	f7ff ff0b 	bl	800c340 <__multiply>
 800c52a:	6020      	str	r0, [r4, #0]
 800c52c:	f8c0 9000 	str.w	r9, [r0]
 800c530:	4604      	mov	r4, r0
 800c532:	e7e4      	b.n	800c4fe <__pow5mult+0x6a>
 800c534:	4638      	mov	r0, r7
 800c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c53a:	bf00      	nop
 800c53c:	08010008 	.word	0x08010008
 800c540:	0800fe3a 	.word	0x0800fe3a
 800c544:	0800feba 	.word	0x0800feba

0800c548 <__lshift>:
 800c548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c54c:	460c      	mov	r4, r1
 800c54e:	6849      	ldr	r1, [r1, #4]
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	4607      	mov	r7, r0
 800c55a:	4691      	mov	r9, r2
 800c55c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c560:	f108 0601 	add.w	r6, r8, #1
 800c564:	42b3      	cmp	r3, r6
 800c566:	db0b      	blt.n	800c580 <__lshift+0x38>
 800c568:	4638      	mov	r0, r7
 800c56a:	f7ff fd93 	bl	800c094 <_Balloc>
 800c56e:	4605      	mov	r5, r0
 800c570:	b948      	cbnz	r0, 800c586 <__lshift+0x3e>
 800c572:	4602      	mov	r2, r0
 800c574:	4b28      	ldr	r3, [pc, #160]	; (800c618 <__lshift+0xd0>)
 800c576:	4829      	ldr	r0, [pc, #164]	; (800c61c <__lshift+0xd4>)
 800c578:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c57c:	f001 fb18 	bl	800dbb0 <__assert_func>
 800c580:	3101      	adds	r1, #1
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	e7ee      	b.n	800c564 <__lshift+0x1c>
 800c586:	2300      	movs	r3, #0
 800c588:	f100 0114 	add.w	r1, r0, #20
 800c58c:	f100 0210 	add.w	r2, r0, #16
 800c590:	4618      	mov	r0, r3
 800c592:	4553      	cmp	r3, sl
 800c594:	db33      	blt.n	800c5fe <__lshift+0xb6>
 800c596:	6920      	ldr	r0, [r4, #16]
 800c598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c59c:	f104 0314 	add.w	r3, r4, #20
 800c5a0:	f019 091f 	ands.w	r9, r9, #31
 800c5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5ac:	d02b      	beq.n	800c606 <__lshift+0xbe>
 800c5ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c5b2:	468a      	mov	sl, r1
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c5bc:	4310      	orrs	r0, r2
 800c5be:	f84a 0b04 	str.w	r0, [sl], #4
 800c5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c6:	459c      	cmp	ip, r3
 800c5c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5cc:	d8f3      	bhi.n	800c5b6 <__lshift+0x6e>
 800c5ce:	ebac 0304 	sub.w	r3, ip, r4
 800c5d2:	3b15      	subs	r3, #21
 800c5d4:	f023 0303 	bic.w	r3, r3, #3
 800c5d8:	3304      	adds	r3, #4
 800c5da:	f104 0015 	add.w	r0, r4, #21
 800c5de:	4584      	cmp	ip, r0
 800c5e0:	bf38      	it	cc
 800c5e2:	2304      	movcc	r3, #4
 800c5e4:	50ca      	str	r2, [r1, r3]
 800c5e6:	b10a      	cbz	r2, 800c5ec <__lshift+0xa4>
 800c5e8:	f108 0602 	add.w	r6, r8, #2
 800c5ec:	3e01      	subs	r6, #1
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	612e      	str	r6, [r5, #16]
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	f7ff fd8e 	bl	800c114 <_Bfree>
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c602:	3301      	adds	r3, #1
 800c604:	e7c5      	b.n	800c592 <__lshift+0x4a>
 800c606:	3904      	subs	r1, #4
 800c608:	f853 2b04 	ldr.w	r2, [r3], #4
 800c60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c610:	459c      	cmp	ip, r3
 800c612:	d8f9      	bhi.n	800c608 <__lshift+0xc0>
 800c614:	e7ea      	b.n	800c5ec <__lshift+0xa4>
 800c616:	bf00      	nop
 800c618:	0800fea9 	.word	0x0800fea9
 800c61c:	0800feba 	.word	0x0800feba

0800c620 <__mcmp>:
 800c620:	b530      	push	{r4, r5, lr}
 800c622:	6902      	ldr	r2, [r0, #16]
 800c624:	690c      	ldr	r4, [r1, #16]
 800c626:	1b12      	subs	r2, r2, r4
 800c628:	d10e      	bne.n	800c648 <__mcmp+0x28>
 800c62a:	f100 0314 	add.w	r3, r0, #20
 800c62e:	3114      	adds	r1, #20
 800c630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c63c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c640:	42a5      	cmp	r5, r4
 800c642:	d003      	beq.n	800c64c <__mcmp+0x2c>
 800c644:	d305      	bcc.n	800c652 <__mcmp+0x32>
 800c646:	2201      	movs	r2, #1
 800c648:	4610      	mov	r0, r2
 800c64a:	bd30      	pop	{r4, r5, pc}
 800c64c:	4283      	cmp	r3, r0
 800c64e:	d3f3      	bcc.n	800c638 <__mcmp+0x18>
 800c650:	e7fa      	b.n	800c648 <__mcmp+0x28>
 800c652:	f04f 32ff 	mov.w	r2, #4294967295
 800c656:	e7f7      	b.n	800c648 <__mcmp+0x28>

0800c658 <__mdiff>:
 800c658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	460c      	mov	r4, r1
 800c65e:	4606      	mov	r6, r0
 800c660:	4611      	mov	r1, r2
 800c662:	4620      	mov	r0, r4
 800c664:	4690      	mov	r8, r2
 800c666:	f7ff ffdb 	bl	800c620 <__mcmp>
 800c66a:	1e05      	subs	r5, r0, #0
 800c66c:	d110      	bne.n	800c690 <__mdiff+0x38>
 800c66e:	4629      	mov	r1, r5
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff fd0f 	bl	800c094 <_Balloc>
 800c676:	b930      	cbnz	r0, 800c686 <__mdiff+0x2e>
 800c678:	4b3a      	ldr	r3, [pc, #232]	; (800c764 <__mdiff+0x10c>)
 800c67a:	4602      	mov	r2, r0
 800c67c:	f240 2137 	movw	r1, #567	; 0x237
 800c680:	4839      	ldr	r0, [pc, #228]	; (800c768 <__mdiff+0x110>)
 800c682:	f001 fa95 	bl	800dbb0 <__assert_func>
 800c686:	2301      	movs	r3, #1
 800c688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c690:	bfa4      	itt	ge
 800c692:	4643      	movge	r3, r8
 800c694:	46a0      	movge	r8, r4
 800c696:	4630      	mov	r0, r6
 800c698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c69c:	bfa6      	itte	ge
 800c69e:	461c      	movge	r4, r3
 800c6a0:	2500      	movge	r5, #0
 800c6a2:	2501      	movlt	r5, #1
 800c6a4:	f7ff fcf6 	bl	800c094 <_Balloc>
 800c6a8:	b920      	cbnz	r0, 800c6b4 <__mdiff+0x5c>
 800c6aa:	4b2e      	ldr	r3, [pc, #184]	; (800c764 <__mdiff+0x10c>)
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	f240 2145 	movw	r1, #581	; 0x245
 800c6b2:	e7e5      	b.n	800c680 <__mdiff+0x28>
 800c6b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6b8:	6926      	ldr	r6, [r4, #16]
 800c6ba:	60c5      	str	r5, [r0, #12]
 800c6bc:	f104 0914 	add.w	r9, r4, #20
 800c6c0:	f108 0514 	add.w	r5, r8, #20
 800c6c4:	f100 0e14 	add.w	lr, r0, #20
 800c6c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6d0:	f108 0210 	add.w	r2, r8, #16
 800c6d4:	46f2      	mov	sl, lr
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6e0:	fa11 f88b 	uxtah	r8, r1, fp
 800c6e4:	b299      	uxth	r1, r3
 800c6e6:	0c1b      	lsrs	r3, r3, #16
 800c6e8:	eba8 0801 	sub.w	r8, r8, r1
 800c6ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6f4:	fa1f f888 	uxth.w	r8, r8
 800c6f8:	1419      	asrs	r1, r3, #16
 800c6fa:	454e      	cmp	r6, r9
 800c6fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c700:	f84a 3b04 	str.w	r3, [sl], #4
 800c704:	d8e8      	bhi.n	800c6d8 <__mdiff+0x80>
 800c706:	1b33      	subs	r3, r6, r4
 800c708:	3b15      	subs	r3, #21
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	3304      	adds	r3, #4
 800c710:	3415      	adds	r4, #21
 800c712:	42a6      	cmp	r6, r4
 800c714:	bf38      	it	cc
 800c716:	2304      	movcc	r3, #4
 800c718:	441d      	add	r5, r3
 800c71a:	4473      	add	r3, lr
 800c71c:	469e      	mov	lr, r3
 800c71e:	462e      	mov	r6, r5
 800c720:	4566      	cmp	r6, ip
 800c722:	d30e      	bcc.n	800c742 <__mdiff+0xea>
 800c724:	f10c 0203 	add.w	r2, ip, #3
 800c728:	1b52      	subs	r2, r2, r5
 800c72a:	f022 0203 	bic.w	r2, r2, #3
 800c72e:	3d03      	subs	r5, #3
 800c730:	45ac      	cmp	ip, r5
 800c732:	bf38      	it	cc
 800c734:	2200      	movcc	r2, #0
 800c736:	4413      	add	r3, r2
 800c738:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c73c:	b17a      	cbz	r2, 800c75e <__mdiff+0x106>
 800c73e:	6107      	str	r7, [r0, #16]
 800c740:	e7a4      	b.n	800c68c <__mdiff+0x34>
 800c742:	f856 8b04 	ldr.w	r8, [r6], #4
 800c746:	fa11 f288 	uxtah	r2, r1, r8
 800c74a:	1414      	asrs	r4, r2, #16
 800c74c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c750:	b292      	uxth	r2, r2
 800c752:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c756:	f84e 2b04 	str.w	r2, [lr], #4
 800c75a:	1421      	asrs	r1, r4, #16
 800c75c:	e7e0      	b.n	800c720 <__mdiff+0xc8>
 800c75e:	3f01      	subs	r7, #1
 800c760:	e7ea      	b.n	800c738 <__mdiff+0xe0>
 800c762:	bf00      	nop
 800c764:	0800fea9 	.word	0x0800fea9
 800c768:	0800feba 	.word	0x0800feba

0800c76c <__ulp>:
 800c76c:	b082      	sub	sp, #8
 800c76e:	ed8d 0b00 	vstr	d0, [sp]
 800c772:	9a01      	ldr	r2, [sp, #4]
 800c774:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <__ulp+0x48>)
 800c776:	4013      	ands	r3, r2
 800c778:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dc08      	bgt.n	800c792 <__ulp+0x26>
 800c780:	425b      	negs	r3, r3
 800c782:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c786:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c78a:	da04      	bge.n	800c796 <__ulp+0x2a>
 800c78c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c790:	4113      	asrs	r3, r2
 800c792:	2200      	movs	r2, #0
 800c794:	e008      	b.n	800c7a8 <__ulp+0x3c>
 800c796:	f1a2 0314 	sub.w	r3, r2, #20
 800c79a:	2b1e      	cmp	r3, #30
 800c79c:	bfda      	itte	le
 800c79e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c7a2:	40da      	lsrle	r2, r3
 800c7a4:	2201      	movgt	r2, #1
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	ec41 0b10 	vmov	d0, r0, r1
 800c7b0:	b002      	add	sp, #8
 800c7b2:	4770      	bx	lr
 800c7b4:	7ff00000 	.word	0x7ff00000

0800c7b8 <__b2d>:
 800c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	6906      	ldr	r6, [r0, #16]
 800c7be:	f100 0814 	add.w	r8, r0, #20
 800c7c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7c6:	1f37      	subs	r7, r6, #4
 800c7c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7ff fd53 	bl	800c278 <__hi0bits>
 800c7d2:	f1c0 0320 	rsb	r3, r0, #32
 800c7d6:	280a      	cmp	r0, #10
 800c7d8:	600b      	str	r3, [r1, #0]
 800c7da:	491b      	ldr	r1, [pc, #108]	; (800c848 <__b2d+0x90>)
 800c7dc:	dc15      	bgt.n	800c80a <__b2d+0x52>
 800c7de:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7e6:	45b8      	cmp	r8, r7
 800c7e8:	ea43 0501 	orr.w	r5, r3, r1
 800c7ec:	bf34      	ite	cc
 800c7ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7f2:	2300      	movcs	r3, #0
 800c7f4:	3015      	adds	r0, #21
 800c7f6:	fa02 f000 	lsl.w	r0, r2, r0
 800c7fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800c7fe:	4303      	orrs	r3, r0
 800c800:	461c      	mov	r4, r3
 800c802:	ec45 4b10 	vmov	d0, r4, r5
 800c806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80a:	45b8      	cmp	r8, r7
 800c80c:	bf3a      	itte	cc
 800c80e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c812:	f1a6 0708 	subcc.w	r7, r6, #8
 800c816:	2300      	movcs	r3, #0
 800c818:	380b      	subs	r0, #11
 800c81a:	d012      	beq.n	800c842 <__b2d+0x8a>
 800c81c:	f1c0 0120 	rsb	r1, r0, #32
 800c820:	fa23 f401 	lsr.w	r4, r3, r1
 800c824:	4082      	lsls	r2, r0
 800c826:	4322      	orrs	r2, r4
 800c828:	4547      	cmp	r7, r8
 800c82a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c82e:	bf8c      	ite	hi
 800c830:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c834:	2200      	movls	r2, #0
 800c836:	4083      	lsls	r3, r0
 800c838:	40ca      	lsrs	r2, r1
 800c83a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c83e:	4313      	orrs	r3, r2
 800c840:	e7de      	b.n	800c800 <__b2d+0x48>
 800c842:	ea42 0501 	orr.w	r5, r2, r1
 800c846:	e7db      	b.n	800c800 <__b2d+0x48>
 800c848:	3ff00000 	.word	0x3ff00000

0800c84c <__d2b>:
 800c84c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c850:	460f      	mov	r7, r1
 800c852:	2101      	movs	r1, #1
 800c854:	ec59 8b10 	vmov	r8, r9, d0
 800c858:	4616      	mov	r6, r2
 800c85a:	f7ff fc1b 	bl	800c094 <_Balloc>
 800c85e:	4604      	mov	r4, r0
 800c860:	b930      	cbnz	r0, 800c870 <__d2b+0x24>
 800c862:	4602      	mov	r2, r0
 800c864:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <__d2b+0xac>)
 800c866:	4825      	ldr	r0, [pc, #148]	; (800c8fc <__d2b+0xb0>)
 800c868:	f240 310f 	movw	r1, #783	; 0x30f
 800c86c:	f001 f9a0 	bl	800dbb0 <__assert_func>
 800c870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c878:	bb2d      	cbnz	r5, 800c8c6 <__d2b+0x7a>
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	f1b8 0300 	subs.w	r3, r8, #0
 800c880:	d026      	beq.n	800c8d0 <__d2b+0x84>
 800c882:	4668      	mov	r0, sp
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	f7ff fd17 	bl	800c2b8 <__lo0bits>
 800c88a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c88e:	b1e8      	cbz	r0, 800c8cc <__d2b+0x80>
 800c890:	f1c0 0320 	rsb	r3, r0, #32
 800c894:	fa02 f303 	lsl.w	r3, r2, r3
 800c898:	430b      	orrs	r3, r1
 800c89a:	40c2      	lsrs	r2, r0
 800c89c:	6163      	str	r3, [r4, #20]
 800c89e:	9201      	str	r2, [sp, #4]
 800c8a0:	9b01      	ldr	r3, [sp, #4]
 800c8a2:	61a3      	str	r3, [r4, #24]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	bf14      	ite	ne
 800c8a8:	2202      	movne	r2, #2
 800c8aa:	2201      	moveq	r2, #1
 800c8ac:	6122      	str	r2, [r4, #16]
 800c8ae:	b1bd      	cbz	r5, 800c8e0 <__d2b+0x94>
 800c8b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c8b4:	4405      	add	r5, r0
 800c8b6:	603d      	str	r5, [r7, #0]
 800c8b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8bc:	6030      	str	r0, [r6, #0]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	b003      	add	sp, #12
 800c8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8ca:	e7d6      	b.n	800c87a <__d2b+0x2e>
 800c8cc:	6161      	str	r1, [r4, #20]
 800c8ce:	e7e7      	b.n	800c8a0 <__d2b+0x54>
 800c8d0:	a801      	add	r0, sp, #4
 800c8d2:	f7ff fcf1 	bl	800c2b8 <__lo0bits>
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	6163      	str	r3, [r4, #20]
 800c8da:	3020      	adds	r0, #32
 800c8dc:	2201      	movs	r2, #1
 800c8de:	e7e5      	b.n	800c8ac <__d2b+0x60>
 800c8e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8e8:	6038      	str	r0, [r7, #0]
 800c8ea:	6918      	ldr	r0, [r3, #16]
 800c8ec:	f7ff fcc4 	bl	800c278 <__hi0bits>
 800c8f0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8f4:	e7e2      	b.n	800c8bc <__d2b+0x70>
 800c8f6:	bf00      	nop
 800c8f8:	0800fea9 	.word	0x0800fea9
 800c8fc:	0800feba 	.word	0x0800feba

0800c900 <__ratio>:
 800c900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	4688      	mov	r8, r1
 800c906:	4669      	mov	r1, sp
 800c908:	4681      	mov	r9, r0
 800c90a:	f7ff ff55 	bl	800c7b8 <__b2d>
 800c90e:	a901      	add	r1, sp, #4
 800c910:	4640      	mov	r0, r8
 800c912:	ec55 4b10 	vmov	r4, r5, d0
 800c916:	f7ff ff4f 	bl	800c7b8 <__b2d>
 800c91a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c91e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c922:	eba3 0c02 	sub.w	ip, r3, r2
 800c926:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c92a:	1a9b      	subs	r3, r3, r2
 800c92c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c930:	ec51 0b10 	vmov	r0, r1, d0
 800c934:	2b00      	cmp	r3, #0
 800c936:	bfd6      	itet	le
 800c938:	460a      	movle	r2, r1
 800c93a:	462a      	movgt	r2, r5
 800c93c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c940:	468b      	mov	fp, r1
 800c942:	462f      	mov	r7, r5
 800c944:	bfd4      	ite	le
 800c946:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c94a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c94e:	4620      	mov	r0, r4
 800c950:	ee10 2a10 	vmov	r2, s0
 800c954:	465b      	mov	r3, fp
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 ff78 	bl	800084c <__aeabi_ddiv>
 800c95c:	ec41 0b10 	vmov	d0, r0, r1
 800c960:	b003      	add	sp, #12
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c966 <__copybits>:
 800c966:	3901      	subs	r1, #1
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	1149      	asrs	r1, r1, #5
 800c96c:	6914      	ldr	r4, [r2, #16]
 800c96e:	3101      	adds	r1, #1
 800c970:	f102 0314 	add.w	r3, r2, #20
 800c974:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c978:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c97c:	1f05      	subs	r5, r0, #4
 800c97e:	42a3      	cmp	r3, r4
 800c980:	d30c      	bcc.n	800c99c <__copybits+0x36>
 800c982:	1aa3      	subs	r3, r4, r2
 800c984:	3b11      	subs	r3, #17
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	3211      	adds	r2, #17
 800c98c:	42a2      	cmp	r2, r4
 800c98e:	bf88      	it	hi
 800c990:	2300      	movhi	r3, #0
 800c992:	4418      	add	r0, r3
 800c994:	2300      	movs	r3, #0
 800c996:	4288      	cmp	r0, r1
 800c998:	d305      	bcc.n	800c9a6 <__copybits+0x40>
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9a4:	e7eb      	b.n	800c97e <__copybits+0x18>
 800c9a6:	f840 3b04 	str.w	r3, [r0], #4
 800c9aa:	e7f4      	b.n	800c996 <__copybits+0x30>

0800c9ac <__any_on>:
 800c9ac:	f100 0214 	add.w	r2, r0, #20
 800c9b0:	6900      	ldr	r0, [r0, #16]
 800c9b2:	114b      	asrs	r3, r1, #5
 800c9b4:	4298      	cmp	r0, r3
 800c9b6:	b510      	push	{r4, lr}
 800c9b8:	db11      	blt.n	800c9de <__any_on+0x32>
 800c9ba:	dd0a      	ble.n	800c9d2 <__any_on+0x26>
 800c9bc:	f011 011f 	ands.w	r1, r1, #31
 800c9c0:	d007      	beq.n	800c9d2 <__any_on+0x26>
 800c9c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9c6:	fa24 f001 	lsr.w	r0, r4, r1
 800c9ca:	fa00 f101 	lsl.w	r1, r0, r1
 800c9ce:	428c      	cmp	r4, r1
 800c9d0:	d10b      	bne.n	800c9ea <__any_on+0x3e>
 800c9d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d803      	bhi.n	800c9e2 <__any_on+0x36>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	bd10      	pop	{r4, pc}
 800c9de:	4603      	mov	r3, r0
 800c9e0:	e7f7      	b.n	800c9d2 <__any_on+0x26>
 800c9e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9e6:	2900      	cmp	r1, #0
 800c9e8:	d0f5      	beq.n	800c9d6 <__any_on+0x2a>
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	e7f6      	b.n	800c9dc <__any_on+0x30>

0800c9ee <sulp>:
 800c9ee:	b570      	push	{r4, r5, r6, lr}
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	460d      	mov	r5, r1
 800c9f4:	ec45 4b10 	vmov	d0, r4, r5
 800c9f8:	4616      	mov	r6, r2
 800c9fa:	f7ff feb7 	bl	800c76c <__ulp>
 800c9fe:	ec51 0b10 	vmov	r0, r1, d0
 800ca02:	b17e      	cbz	r6, 800ca24 <sulp+0x36>
 800ca04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dd09      	ble.n	800ca24 <sulp+0x36>
 800ca10:	051b      	lsls	r3, r3, #20
 800ca12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ca16:	2400      	movs	r4, #0
 800ca18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	462b      	mov	r3, r5
 800ca20:	f7f3 fdea 	bl	80005f8 <__aeabi_dmul>
 800ca24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca28 <_strtod_l>:
 800ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	ed2d 8b02 	vpush	{d8}
 800ca30:	b09b      	sub	sp, #108	; 0x6c
 800ca32:	4604      	mov	r4, r0
 800ca34:	9213      	str	r2, [sp, #76]	; 0x4c
 800ca36:	2200      	movs	r2, #0
 800ca38:	9216      	str	r2, [sp, #88]	; 0x58
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	f04f 0800 	mov.w	r8, #0
 800ca40:	f04f 0900 	mov.w	r9, #0
 800ca44:	460a      	mov	r2, r1
 800ca46:	9215      	str	r2, [sp, #84]	; 0x54
 800ca48:	7811      	ldrb	r1, [r2, #0]
 800ca4a:	292b      	cmp	r1, #43	; 0x2b
 800ca4c:	d04c      	beq.n	800cae8 <_strtod_l+0xc0>
 800ca4e:	d83a      	bhi.n	800cac6 <_strtod_l+0x9e>
 800ca50:	290d      	cmp	r1, #13
 800ca52:	d834      	bhi.n	800cabe <_strtod_l+0x96>
 800ca54:	2908      	cmp	r1, #8
 800ca56:	d834      	bhi.n	800cac2 <_strtod_l+0x9a>
 800ca58:	2900      	cmp	r1, #0
 800ca5a:	d03d      	beq.n	800cad8 <_strtod_l+0xb0>
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	920a      	str	r2, [sp, #40]	; 0x28
 800ca60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ca62:	7832      	ldrb	r2, [r6, #0]
 800ca64:	2a30      	cmp	r2, #48	; 0x30
 800ca66:	f040 80b4 	bne.w	800cbd2 <_strtod_l+0x1aa>
 800ca6a:	7872      	ldrb	r2, [r6, #1]
 800ca6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ca70:	2a58      	cmp	r2, #88	; 0x58
 800ca72:	d170      	bne.n	800cb56 <_strtod_l+0x12e>
 800ca74:	9302      	str	r3, [sp, #8]
 800ca76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	ab16      	add	r3, sp, #88	; 0x58
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	4a8e      	ldr	r2, [pc, #568]	; (800ccb8 <_strtod_l+0x290>)
 800ca80:	ab17      	add	r3, sp, #92	; 0x5c
 800ca82:	a915      	add	r1, sp, #84	; 0x54
 800ca84:	4620      	mov	r0, r4
 800ca86:	f001 f92f 	bl	800dce8 <__gethex>
 800ca8a:	f010 070f 	ands.w	r7, r0, #15
 800ca8e:	4605      	mov	r5, r0
 800ca90:	d005      	beq.n	800ca9e <_strtod_l+0x76>
 800ca92:	2f06      	cmp	r7, #6
 800ca94:	d12a      	bne.n	800caec <_strtod_l+0xc4>
 800ca96:	3601      	adds	r6, #1
 800ca98:	2300      	movs	r3, #0
 800ca9a:	9615      	str	r6, [sp, #84]	; 0x54
 800ca9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ca9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 857f 	bne.w	800d5a4 <_strtod_l+0xb7c>
 800caa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa8:	b1db      	cbz	r3, 800cae2 <_strtod_l+0xba>
 800caaa:	4642      	mov	r2, r8
 800caac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cab0:	ec43 2b10 	vmov	d0, r2, r3
 800cab4:	b01b      	add	sp, #108	; 0x6c
 800cab6:	ecbd 8b02 	vpop	{d8}
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	2920      	cmp	r1, #32
 800cac0:	d1cc      	bne.n	800ca5c <_strtod_l+0x34>
 800cac2:	3201      	adds	r2, #1
 800cac4:	e7bf      	b.n	800ca46 <_strtod_l+0x1e>
 800cac6:	292d      	cmp	r1, #45	; 0x2d
 800cac8:	d1c8      	bne.n	800ca5c <_strtod_l+0x34>
 800caca:	2101      	movs	r1, #1
 800cacc:	910a      	str	r1, [sp, #40]	; 0x28
 800cace:	1c51      	adds	r1, r2, #1
 800cad0:	9115      	str	r1, [sp, #84]	; 0x54
 800cad2:	7852      	ldrb	r2, [r2, #1]
 800cad4:	2a00      	cmp	r2, #0
 800cad6:	d1c3      	bne.n	800ca60 <_strtod_l+0x38>
 800cad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cada:	9515      	str	r5, [sp, #84]	; 0x54
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 855f 	bne.w	800d5a0 <_strtod_l+0xb78>
 800cae2:	4642      	mov	r2, r8
 800cae4:	464b      	mov	r3, r9
 800cae6:	e7e3      	b.n	800cab0 <_strtod_l+0x88>
 800cae8:	2100      	movs	r1, #0
 800caea:	e7ef      	b.n	800cacc <_strtod_l+0xa4>
 800caec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800caee:	b13a      	cbz	r2, 800cb00 <_strtod_l+0xd8>
 800caf0:	2135      	movs	r1, #53	; 0x35
 800caf2:	a818      	add	r0, sp, #96	; 0x60
 800caf4:	f7ff ff37 	bl	800c966 <__copybits>
 800caf8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cafa:	4620      	mov	r0, r4
 800cafc:	f7ff fb0a 	bl	800c114 <_Bfree>
 800cb00:	3f01      	subs	r7, #1
 800cb02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb04:	2f04      	cmp	r7, #4
 800cb06:	d806      	bhi.n	800cb16 <_strtod_l+0xee>
 800cb08:	e8df f007 	tbb	[pc, r7]
 800cb0c:	201d0314 	.word	0x201d0314
 800cb10:	14          	.byte	0x14
 800cb11:	00          	.byte	0x00
 800cb12:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800cb16:	05e9      	lsls	r1, r5, #23
 800cb18:	bf48      	it	mi
 800cb1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cb1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb22:	0d1b      	lsrs	r3, r3, #20
 800cb24:	051b      	lsls	r3, r3, #20
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1b9      	bne.n	800ca9e <_strtod_l+0x76>
 800cb2a:	f7fe faf5 	bl	800b118 <__errno>
 800cb2e:	2322      	movs	r3, #34	; 0x22
 800cb30:	6003      	str	r3, [r0, #0]
 800cb32:	e7b4      	b.n	800ca9e <_strtod_l+0x76>
 800cb34:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cb38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cb40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cb44:	e7e7      	b.n	800cb16 <_strtod_l+0xee>
 800cb46:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ccc0 <_strtod_l+0x298>
 800cb4a:	e7e4      	b.n	800cb16 <_strtod_l+0xee>
 800cb4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cb50:	f04f 38ff 	mov.w	r8, #4294967295
 800cb54:	e7df      	b.n	800cb16 <_strtod_l+0xee>
 800cb56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	9215      	str	r2, [sp, #84]	; 0x54
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	2b30      	cmp	r3, #48	; 0x30
 800cb60:	d0f9      	beq.n	800cb56 <_strtod_l+0x12e>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d09b      	beq.n	800ca9e <_strtod_l+0x76>
 800cb66:	2301      	movs	r3, #1
 800cb68:	f04f 0a00 	mov.w	sl, #0
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb70:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb72:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cb76:	46d3      	mov	fp, sl
 800cb78:	220a      	movs	r2, #10
 800cb7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cb7c:	7806      	ldrb	r6, [r0, #0]
 800cb7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cb82:	b2d9      	uxtb	r1, r3
 800cb84:	2909      	cmp	r1, #9
 800cb86:	d926      	bls.n	800cbd6 <_strtod_l+0x1ae>
 800cb88:	494c      	ldr	r1, [pc, #304]	; (800ccbc <_strtod_l+0x294>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f000 ffe6 	bl	800db5c <strncmp>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d030      	beq.n	800cbf6 <_strtod_l+0x1ce>
 800cb94:	2000      	movs	r0, #0
 800cb96:	4632      	mov	r2, r6
 800cb98:	9005      	str	r0, [sp, #20]
 800cb9a:	465e      	mov	r6, fp
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2a65      	cmp	r2, #101	; 0x65
 800cba0:	d001      	beq.n	800cba6 <_strtod_l+0x17e>
 800cba2:	2a45      	cmp	r2, #69	; 0x45
 800cba4:	d113      	bne.n	800cbce <_strtod_l+0x1a6>
 800cba6:	b91e      	cbnz	r6, 800cbb0 <_strtod_l+0x188>
 800cba8:	9a04      	ldr	r2, [sp, #16]
 800cbaa:	4302      	orrs	r2, r0
 800cbac:	d094      	beq.n	800cad8 <_strtod_l+0xb0>
 800cbae:	2600      	movs	r6, #0
 800cbb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cbb2:	1c6a      	adds	r2, r5, #1
 800cbb4:	9215      	str	r2, [sp, #84]	; 0x54
 800cbb6:	786a      	ldrb	r2, [r5, #1]
 800cbb8:	2a2b      	cmp	r2, #43	; 0x2b
 800cbba:	d074      	beq.n	800cca6 <_strtod_l+0x27e>
 800cbbc:	2a2d      	cmp	r2, #45	; 0x2d
 800cbbe:	d078      	beq.n	800ccb2 <_strtod_l+0x28a>
 800cbc0:	f04f 0c00 	mov.w	ip, #0
 800cbc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cbc8:	2909      	cmp	r1, #9
 800cbca:	d97f      	bls.n	800cccc <_strtod_l+0x2a4>
 800cbcc:	9515      	str	r5, [sp, #84]	; 0x54
 800cbce:	2700      	movs	r7, #0
 800cbd0:	e09e      	b.n	800cd10 <_strtod_l+0x2e8>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e7c8      	b.n	800cb68 <_strtod_l+0x140>
 800cbd6:	f1bb 0f08 	cmp.w	fp, #8
 800cbda:	bfd8      	it	le
 800cbdc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cbde:	f100 0001 	add.w	r0, r0, #1
 800cbe2:	bfda      	itte	le
 800cbe4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbe8:	9309      	strle	r3, [sp, #36]	; 0x24
 800cbea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cbee:	f10b 0b01 	add.w	fp, fp, #1
 800cbf2:	9015      	str	r0, [sp, #84]	; 0x54
 800cbf4:	e7c1      	b.n	800cb7a <_strtod_l+0x152>
 800cbf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	9215      	str	r2, [sp, #84]	; 0x54
 800cbfc:	785a      	ldrb	r2, [r3, #1]
 800cbfe:	f1bb 0f00 	cmp.w	fp, #0
 800cc02:	d037      	beq.n	800cc74 <_strtod_l+0x24c>
 800cc04:	9005      	str	r0, [sp, #20]
 800cc06:	465e      	mov	r6, fp
 800cc08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cc0c:	2b09      	cmp	r3, #9
 800cc0e:	d912      	bls.n	800cc36 <_strtod_l+0x20e>
 800cc10:	2301      	movs	r3, #1
 800cc12:	e7c4      	b.n	800cb9e <_strtod_l+0x176>
 800cc14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	9215      	str	r2, [sp, #84]	; 0x54
 800cc1a:	785a      	ldrb	r2, [r3, #1]
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	2a30      	cmp	r2, #48	; 0x30
 800cc20:	d0f8      	beq.n	800cc14 <_strtod_l+0x1ec>
 800cc22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	f200 84c1 	bhi.w	800d5ae <_strtod_l+0xb86>
 800cc2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc2e:	9005      	str	r0, [sp, #20]
 800cc30:	2000      	movs	r0, #0
 800cc32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc34:	4606      	mov	r6, r0
 800cc36:	3a30      	subs	r2, #48	; 0x30
 800cc38:	f100 0301 	add.w	r3, r0, #1
 800cc3c:	d014      	beq.n	800cc68 <_strtod_l+0x240>
 800cc3e:	9905      	ldr	r1, [sp, #20]
 800cc40:	4419      	add	r1, r3
 800cc42:	9105      	str	r1, [sp, #20]
 800cc44:	4633      	mov	r3, r6
 800cc46:	eb00 0c06 	add.w	ip, r0, r6
 800cc4a:	210a      	movs	r1, #10
 800cc4c:	4563      	cmp	r3, ip
 800cc4e:	d113      	bne.n	800cc78 <_strtod_l+0x250>
 800cc50:	1833      	adds	r3, r6, r0
 800cc52:	2b08      	cmp	r3, #8
 800cc54:	f106 0601 	add.w	r6, r6, #1
 800cc58:	4406      	add	r6, r0
 800cc5a:	dc1a      	bgt.n	800cc92 <_strtod_l+0x26a>
 800cc5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc5e:	230a      	movs	r3, #10
 800cc60:	fb03 2301 	mla	r3, r3, r1, r2
 800cc64:	9309      	str	r3, [sp, #36]	; 0x24
 800cc66:	2300      	movs	r3, #0
 800cc68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc6a:	1c51      	adds	r1, r2, #1
 800cc6c:	9115      	str	r1, [sp, #84]	; 0x54
 800cc6e:	7852      	ldrb	r2, [r2, #1]
 800cc70:	4618      	mov	r0, r3
 800cc72:	e7c9      	b.n	800cc08 <_strtod_l+0x1e0>
 800cc74:	4658      	mov	r0, fp
 800cc76:	e7d2      	b.n	800cc1e <_strtod_l+0x1f6>
 800cc78:	2b08      	cmp	r3, #8
 800cc7a:	f103 0301 	add.w	r3, r3, #1
 800cc7e:	dc03      	bgt.n	800cc88 <_strtod_l+0x260>
 800cc80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc82:	434f      	muls	r7, r1
 800cc84:	9709      	str	r7, [sp, #36]	; 0x24
 800cc86:	e7e1      	b.n	800cc4c <_strtod_l+0x224>
 800cc88:	2b10      	cmp	r3, #16
 800cc8a:	bfd8      	it	le
 800cc8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cc90:	e7dc      	b.n	800cc4c <_strtod_l+0x224>
 800cc92:	2e10      	cmp	r6, #16
 800cc94:	bfdc      	itt	le
 800cc96:	230a      	movle	r3, #10
 800cc98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800cc9c:	e7e3      	b.n	800cc66 <_strtod_l+0x23e>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9305      	str	r3, [sp, #20]
 800cca2:	2301      	movs	r3, #1
 800cca4:	e780      	b.n	800cba8 <_strtod_l+0x180>
 800cca6:	f04f 0c00 	mov.w	ip, #0
 800ccaa:	1caa      	adds	r2, r5, #2
 800ccac:	9215      	str	r2, [sp, #84]	; 0x54
 800ccae:	78aa      	ldrb	r2, [r5, #2]
 800ccb0:	e788      	b.n	800cbc4 <_strtod_l+0x19c>
 800ccb2:	f04f 0c01 	mov.w	ip, #1
 800ccb6:	e7f8      	b.n	800ccaa <_strtod_l+0x282>
 800ccb8:	08010018 	.word	0x08010018
 800ccbc:	08010014 	.word	0x08010014
 800ccc0:	7ff00000 	.word	0x7ff00000
 800ccc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ccc6:	1c51      	adds	r1, r2, #1
 800ccc8:	9115      	str	r1, [sp, #84]	; 0x54
 800ccca:	7852      	ldrb	r2, [r2, #1]
 800cccc:	2a30      	cmp	r2, #48	; 0x30
 800ccce:	d0f9      	beq.n	800ccc4 <_strtod_l+0x29c>
 800ccd0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ccd4:	2908      	cmp	r1, #8
 800ccd6:	f63f af7a 	bhi.w	800cbce <_strtod_l+0x1a6>
 800ccda:	3a30      	subs	r2, #48	; 0x30
 800ccdc:	9208      	str	r2, [sp, #32]
 800ccde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cce0:	920c      	str	r2, [sp, #48]	; 0x30
 800cce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cce4:	1c57      	adds	r7, r2, #1
 800cce6:	9715      	str	r7, [sp, #84]	; 0x54
 800cce8:	7852      	ldrb	r2, [r2, #1]
 800ccea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ccee:	f1be 0f09 	cmp.w	lr, #9
 800ccf2:	d938      	bls.n	800cd66 <_strtod_l+0x33e>
 800ccf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ccf6:	1a7f      	subs	r7, r7, r1
 800ccf8:	2f08      	cmp	r7, #8
 800ccfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ccfe:	dc03      	bgt.n	800cd08 <_strtod_l+0x2e0>
 800cd00:	9908      	ldr	r1, [sp, #32]
 800cd02:	428f      	cmp	r7, r1
 800cd04:	bfa8      	it	ge
 800cd06:	460f      	movge	r7, r1
 800cd08:	f1bc 0f00 	cmp.w	ip, #0
 800cd0c:	d000      	beq.n	800cd10 <_strtod_l+0x2e8>
 800cd0e:	427f      	negs	r7, r7
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	d14f      	bne.n	800cdb4 <_strtod_l+0x38c>
 800cd14:	9904      	ldr	r1, [sp, #16]
 800cd16:	4301      	orrs	r1, r0
 800cd18:	f47f aec1 	bne.w	800ca9e <_strtod_l+0x76>
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f47f aedb 	bne.w	800cad8 <_strtod_l+0xb0>
 800cd22:	2a69      	cmp	r2, #105	; 0x69
 800cd24:	d029      	beq.n	800cd7a <_strtod_l+0x352>
 800cd26:	dc26      	bgt.n	800cd76 <_strtod_l+0x34e>
 800cd28:	2a49      	cmp	r2, #73	; 0x49
 800cd2a:	d026      	beq.n	800cd7a <_strtod_l+0x352>
 800cd2c:	2a4e      	cmp	r2, #78	; 0x4e
 800cd2e:	f47f aed3 	bne.w	800cad8 <_strtod_l+0xb0>
 800cd32:	499b      	ldr	r1, [pc, #620]	; (800cfa0 <_strtod_l+0x578>)
 800cd34:	a815      	add	r0, sp, #84	; 0x54
 800cd36:	f001 fa17 	bl	800e168 <__match>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	f43f aecc 	beq.w	800cad8 <_strtod_l+0xb0>
 800cd40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b28      	cmp	r3, #40	; 0x28
 800cd46:	d12f      	bne.n	800cda8 <_strtod_l+0x380>
 800cd48:	4996      	ldr	r1, [pc, #600]	; (800cfa4 <_strtod_l+0x57c>)
 800cd4a:	aa18      	add	r2, sp, #96	; 0x60
 800cd4c:	a815      	add	r0, sp, #84	; 0x54
 800cd4e:	f001 fa1f 	bl	800e190 <__hexnan>
 800cd52:	2805      	cmp	r0, #5
 800cd54:	d128      	bne.n	800cda8 <_strtod_l+0x380>
 800cd56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cd5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cd60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cd64:	e69b      	b.n	800ca9e <_strtod_l+0x76>
 800cd66:	9f08      	ldr	r7, [sp, #32]
 800cd68:	210a      	movs	r1, #10
 800cd6a:	fb01 2107 	mla	r1, r1, r7, r2
 800cd6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cd72:	9208      	str	r2, [sp, #32]
 800cd74:	e7b5      	b.n	800cce2 <_strtod_l+0x2ba>
 800cd76:	2a6e      	cmp	r2, #110	; 0x6e
 800cd78:	e7d9      	b.n	800cd2e <_strtod_l+0x306>
 800cd7a:	498b      	ldr	r1, [pc, #556]	; (800cfa8 <_strtod_l+0x580>)
 800cd7c:	a815      	add	r0, sp, #84	; 0x54
 800cd7e:	f001 f9f3 	bl	800e168 <__match>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	f43f aea8 	beq.w	800cad8 <_strtod_l+0xb0>
 800cd88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd8a:	4988      	ldr	r1, [pc, #544]	; (800cfac <_strtod_l+0x584>)
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	a815      	add	r0, sp, #84	; 0x54
 800cd90:	9315      	str	r3, [sp, #84]	; 0x54
 800cd92:	f001 f9e9 	bl	800e168 <__match>
 800cd96:	b910      	cbnz	r0, 800cd9e <_strtod_l+0x376>
 800cd98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	9315      	str	r3, [sp, #84]	; 0x54
 800cd9e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cfbc <_strtod_l+0x594>
 800cda2:	f04f 0800 	mov.w	r8, #0
 800cda6:	e67a      	b.n	800ca9e <_strtod_l+0x76>
 800cda8:	4881      	ldr	r0, [pc, #516]	; (800cfb0 <_strtod_l+0x588>)
 800cdaa:	f000 fef9 	bl	800dba0 <nan>
 800cdae:	ec59 8b10 	vmov	r8, r9, d0
 800cdb2:	e674      	b.n	800ca9e <_strtod_l+0x76>
 800cdb4:	9b05      	ldr	r3, [sp, #20]
 800cdb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb8:	1afb      	subs	r3, r7, r3
 800cdba:	f1bb 0f00 	cmp.w	fp, #0
 800cdbe:	bf08      	it	eq
 800cdc0:	46b3      	moveq	fp, r6
 800cdc2:	2e10      	cmp	r6, #16
 800cdc4:	9308      	str	r3, [sp, #32]
 800cdc6:	4635      	mov	r5, r6
 800cdc8:	bfa8      	it	ge
 800cdca:	2510      	movge	r5, #16
 800cdcc:	f7f3 fb9a 	bl	8000504 <__aeabi_ui2d>
 800cdd0:	2e09      	cmp	r6, #9
 800cdd2:	4680      	mov	r8, r0
 800cdd4:	4689      	mov	r9, r1
 800cdd6:	dd13      	ble.n	800ce00 <_strtod_l+0x3d8>
 800cdd8:	4b76      	ldr	r3, [pc, #472]	; (800cfb4 <_strtod_l+0x58c>)
 800cdda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cdde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cde2:	f7f3 fc09 	bl	80005f8 <__aeabi_dmul>
 800cde6:	4680      	mov	r8, r0
 800cde8:	4650      	mov	r0, sl
 800cdea:	4689      	mov	r9, r1
 800cdec:	f7f3 fb8a 	bl	8000504 <__aeabi_ui2d>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	f7f3 fa48 	bl	800028c <__adddf3>
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4689      	mov	r9, r1
 800ce00:	2e0f      	cmp	r6, #15
 800ce02:	dc38      	bgt.n	800ce76 <_strtod_l+0x44e>
 800ce04:	9b08      	ldr	r3, [sp, #32]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f43f ae49 	beq.w	800ca9e <_strtod_l+0x76>
 800ce0c:	dd24      	ble.n	800ce58 <_strtod_l+0x430>
 800ce0e:	2b16      	cmp	r3, #22
 800ce10:	dc0b      	bgt.n	800ce2a <_strtod_l+0x402>
 800ce12:	4968      	ldr	r1, [pc, #416]	; (800cfb4 <_strtod_l+0x58c>)
 800ce14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1c:	4642      	mov	r2, r8
 800ce1e:	464b      	mov	r3, r9
 800ce20:	f7f3 fbea 	bl	80005f8 <__aeabi_dmul>
 800ce24:	4680      	mov	r8, r0
 800ce26:	4689      	mov	r9, r1
 800ce28:	e639      	b.n	800ca9e <_strtod_l+0x76>
 800ce2a:	9a08      	ldr	r2, [sp, #32]
 800ce2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ce30:	4293      	cmp	r3, r2
 800ce32:	db20      	blt.n	800ce76 <_strtod_l+0x44e>
 800ce34:	4c5f      	ldr	r4, [pc, #380]	; (800cfb4 <_strtod_l+0x58c>)
 800ce36:	f1c6 060f 	rsb	r6, r6, #15
 800ce3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ce3e:	4642      	mov	r2, r8
 800ce40:	464b      	mov	r3, r9
 800ce42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce46:	f7f3 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ce4a:	9b08      	ldr	r3, [sp, #32]
 800ce4c:	1b9e      	subs	r6, r3, r6
 800ce4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ce52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce56:	e7e3      	b.n	800ce20 <_strtod_l+0x3f8>
 800ce58:	9b08      	ldr	r3, [sp, #32]
 800ce5a:	3316      	adds	r3, #22
 800ce5c:	db0b      	blt.n	800ce76 <_strtod_l+0x44e>
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	1bdf      	subs	r7, r3, r7
 800ce62:	4b54      	ldr	r3, [pc, #336]	; (800cfb4 <_strtod_l+0x58c>)
 800ce64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ce68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce6c:	4640      	mov	r0, r8
 800ce6e:	4649      	mov	r1, r9
 800ce70:	f7f3 fcec 	bl	800084c <__aeabi_ddiv>
 800ce74:	e7d6      	b.n	800ce24 <_strtod_l+0x3fc>
 800ce76:	9b08      	ldr	r3, [sp, #32]
 800ce78:	1b75      	subs	r5, r6, r5
 800ce7a:	441d      	add	r5, r3
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	dd70      	ble.n	800cf62 <_strtod_l+0x53a>
 800ce80:	f015 030f 	ands.w	r3, r5, #15
 800ce84:	d00a      	beq.n	800ce9c <_strtod_l+0x474>
 800ce86:	494b      	ldr	r1, [pc, #300]	; (800cfb4 <_strtod_l+0x58c>)
 800ce88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce94:	f7f3 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ce98:	4680      	mov	r8, r0
 800ce9a:	4689      	mov	r9, r1
 800ce9c:	f035 050f 	bics.w	r5, r5, #15
 800cea0:	d04d      	beq.n	800cf3e <_strtod_l+0x516>
 800cea2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cea6:	dd22      	ble.n	800ceee <_strtod_l+0x4c6>
 800cea8:	2500      	movs	r5, #0
 800ceaa:	46ab      	mov	fp, r5
 800ceac:	9509      	str	r5, [sp, #36]	; 0x24
 800ceae:	9505      	str	r5, [sp, #20]
 800ceb0:	2322      	movs	r3, #34	; 0x22
 800ceb2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cfbc <_strtod_l+0x594>
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	f04f 0800 	mov.w	r8, #0
 800cebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f43f aded 	beq.w	800ca9e <_strtod_l+0x76>
 800cec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7ff f924 	bl	800c114 <_Bfree>
 800cecc:	9905      	ldr	r1, [sp, #20]
 800cece:	4620      	mov	r0, r4
 800ced0:	f7ff f920 	bl	800c114 <_Bfree>
 800ced4:	4659      	mov	r1, fp
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff f91c 	bl	800c114 <_Bfree>
 800cedc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cede:	4620      	mov	r0, r4
 800cee0:	f7ff f918 	bl	800c114 <_Bfree>
 800cee4:	4629      	mov	r1, r5
 800cee6:	4620      	mov	r0, r4
 800cee8:	f7ff f914 	bl	800c114 <_Bfree>
 800ceec:	e5d7      	b.n	800ca9e <_strtod_l+0x76>
 800ceee:	4b32      	ldr	r3, [pc, #200]	; (800cfb8 <_strtod_l+0x590>)
 800cef0:	9304      	str	r3, [sp, #16]
 800cef2:	2300      	movs	r3, #0
 800cef4:	112d      	asrs	r5, r5, #4
 800cef6:	4640      	mov	r0, r8
 800cef8:	4649      	mov	r1, r9
 800cefa:	469a      	mov	sl, r3
 800cefc:	2d01      	cmp	r5, #1
 800cefe:	dc21      	bgt.n	800cf44 <_strtod_l+0x51c>
 800cf00:	b10b      	cbz	r3, 800cf06 <_strtod_l+0x4de>
 800cf02:	4680      	mov	r8, r0
 800cf04:	4689      	mov	r9, r1
 800cf06:	492c      	ldr	r1, [pc, #176]	; (800cfb8 <_strtod_l+0x590>)
 800cf08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cf0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cf10:	4642      	mov	r2, r8
 800cf12:	464b      	mov	r3, r9
 800cf14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf18:	f7f3 fb6e 	bl	80005f8 <__aeabi_dmul>
 800cf1c:	4b27      	ldr	r3, [pc, #156]	; (800cfbc <_strtod_l+0x594>)
 800cf1e:	460a      	mov	r2, r1
 800cf20:	400b      	ands	r3, r1
 800cf22:	4927      	ldr	r1, [pc, #156]	; (800cfc0 <_strtod_l+0x598>)
 800cf24:	428b      	cmp	r3, r1
 800cf26:	4680      	mov	r8, r0
 800cf28:	d8be      	bhi.n	800cea8 <_strtod_l+0x480>
 800cf2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cf2e:	428b      	cmp	r3, r1
 800cf30:	bf86      	itte	hi
 800cf32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800cfc4 <_strtod_l+0x59c>
 800cf36:	f04f 38ff 	movhi.w	r8, #4294967295
 800cf3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	e07b      	b.n	800d03c <_strtod_l+0x614>
 800cf44:	07ea      	lsls	r2, r5, #31
 800cf46:	d505      	bpl.n	800cf54 <_strtod_l+0x52c>
 800cf48:	9b04      	ldr	r3, [sp, #16]
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	f7f3 fb53 	bl	80005f8 <__aeabi_dmul>
 800cf52:	2301      	movs	r3, #1
 800cf54:	9a04      	ldr	r2, [sp, #16]
 800cf56:	3208      	adds	r2, #8
 800cf58:	f10a 0a01 	add.w	sl, sl, #1
 800cf5c:	106d      	asrs	r5, r5, #1
 800cf5e:	9204      	str	r2, [sp, #16]
 800cf60:	e7cc      	b.n	800cefc <_strtod_l+0x4d4>
 800cf62:	d0ec      	beq.n	800cf3e <_strtod_l+0x516>
 800cf64:	426d      	negs	r5, r5
 800cf66:	f015 020f 	ands.w	r2, r5, #15
 800cf6a:	d00a      	beq.n	800cf82 <_strtod_l+0x55a>
 800cf6c:	4b11      	ldr	r3, [pc, #68]	; (800cfb4 <_strtod_l+0x58c>)
 800cf6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf72:	4640      	mov	r0, r8
 800cf74:	4649      	mov	r1, r9
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	f7f3 fc67 	bl	800084c <__aeabi_ddiv>
 800cf7e:	4680      	mov	r8, r0
 800cf80:	4689      	mov	r9, r1
 800cf82:	112d      	asrs	r5, r5, #4
 800cf84:	d0db      	beq.n	800cf3e <_strtod_l+0x516>
 800cf86:	2d1f      	cmp	r5, #31
 800cf88:	dd1e      	ble.n	800cfc8 <_strtod_l+0x5a0>
 800cf8a:	2500      	movs	r5, #0
 800cf8c:	46ab      	mov	fp, r5
 800cf8e:	9509      	str	r5, [sp, #36]	; 0x24
 800cf90:	9505      	str	r5, [sp, #20]
 800cf92:	2322      	movs	r3, #34	; 0x22
 800cf94:	f04f 0800 	mov.w	r8, #0
 800cf98:	f04f 0900 	mov.w	r9, #0
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	e78d      	b.n	800cebc <_strtod_l+0x494>
 800cfa0:	0800fe01 	.word	0x0800fe01
 800cfa4:	0801002c 	.word	0x0801002c
 800cfa8:	0800fdf9 	.word	0x0800fdf9
 800cfac:	0800fe30 	.word	0x0800fe30
 800cfb0:	080101bd 	.word	0x080101bd
 800cfb4:	0800ff40 	.word	0x0800ff40
 800cfb8:	0800ff18 	.word	0x0800ff18
 800cfbc:	7ff00000 	.word	0x7ff00000
 800cfc0:	7ca00000 	.word	0x7ca00000
 800cfc4:	7fefffff 	.word	0x7fefffff
 800cfc8:	f015 0310 	ands.w	r3, r5, #16
 800cfcc:	bf18      	it	ne
 800cfce:	236a      	movne	r3, #106	; 0x6a
 800cfd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d374 <_strtod_l+0x94c>
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	4640      	mov	r0, r8
 800cfd8:	4649      	mov	r1, r9
 800cfda:	2300      	movs	r3, #0
 800cfdc:	07ea      	lsls	r2, r5, #31
 800cfde:	d504      	bpl.n	800cfea <_strtod_l+0x5c2>
 800cfe0:	e9da 2300 	ldrd	r2, r3, [sl]
 800cfe4:	f7f3 fb08 	bl	80005f8 <__aeabi_dmul>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	106d      	asrs	r5, r5, #1
 800cfec:	f10a 0a08 	add.w	sl, sl, #8
 800cff0:	d1f4      	bne.n	800cfdc <_strtod_l+0x5b4>
 800cff2:	b10b      	cbz	r3, 800cff8 <_strtod_l+0x5d0>
 800cff4:	4680      	mov	r8, r0
 800cff6:	4689      	mov	r9, r1
 800cff8:	9b04      	ldr	r3, [sp, #16]
 800cffa:	b1bb      	cbz	r3, 800d02c <_strtod_l+0x604>
 800cffc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d000:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d004:	2b00      	cmp	r3, #0
 800d006:	4649      	mov	r1, r9
 800d008:	dd10      	ble.n	800d02c <_strtod_l+0x604>
 800d00a:	2b1f      	cmp	r3, #31
 800d00c:	f340 811e 	ble.w	800d24c <_strtod_l+0x824>
 800d010:	2b34      	cmp	r3, #52	; 0x34
 800d012:	bfde      	ittt	le
 800d014:	f04f 33ff 	movle.w	r3, #4294967295
 800d018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d01c:	4093      	lslle	r3, r2
 800d01e:	f04f 0800 	mov.w	r8, #0
 800d022:	bfcc      	ite	gt
 800d024:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d028:	ea03 0901 	andle.w	r9, r3, r1
 800d02c:	2200      	movs	r2, #0
 800d02e:	2300      	movs	r3, #0
 800d030:	4640      	mov	r0, r8
 800d032:	4649      	mov	r1, r9
 800d034:	f7f3 fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d1a6      	bne.n	800cf8a <_strtod_l+0x562>
 800d03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d042:	4633      	mov	r3, r6
 800d044:	465a      	mov	r2, fp
 800d046:	4620      	mov	r0, r4
 800d048:	f7ff f8cc 	bl	800c1e4 <__s2b>
 800d04c:	9009      	str	r0, [sp, #36]	; 0x24
 800d04e:	2800      	cmp	r0, #0
 800d050:	f43f af2a 	beq.w	800cea8 <_strtod_l+0x480>
 800d054:	9a08      	ldr	r2, [sp, #32]
 800d056:	9b05      	ldr	r3, [sp, #20]
 800d058:	2a00      	cmp	r2, #0
 800d05a:	eba3 0307 	sub.w	r3, r3, r7
 800d05e:	bfa8      	it	ge
 800d060:	2300      	movge	r3, #0
 800d062:	930c      	str	r3, [sp, #48]	; 0x30
 800d064:	2500      	movs	r5, #0
 800d066:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d06a:	9312      	str	r3, [sp, #72]	; 0x48
 800d06c:	46ab      	mov	fp, r5
 800d06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d070:	4620      	mov	r0, r4
 800d072:	6859      	ldr	r1, [r3, #4]
 800d074:	f7ff f80e 	bl	800c094 <_Balloc>
 800d078:	9005      	str	r0, [sp, #20]
 800d07a:	2800      	cmp	r0, #0
 800d07c:	f43f af18 	beq.w	800ceb0 <_strtod_l+0x488>
 800d080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d082:	691a      	ldr	r2, [r3, #16]
 800d084:	3202      	adds	r2, #2
 800d086:	f103 010c 	add.w	r1, r3, #12
 800d08a:	0092      	lsls	r2, r2, #2
 800d08c:	300c      	adds	r0, #12
 800d08e:	f7fe f870 	bl	800b172 <memcpy>
 800d092:	ec49 8b10 	vmov	d0, r8, r9
 800d096:	aa18      	add	r2, sp, #96	; 0x60
 800d098:	a917      	add	r1, sp, #92	; 0x5c
 800d09a:	4620      	mov	r0, r4
 800d09c:	f7ff fbd6 	bl	800c84c <__d2b>
 800d0a0:	ec49 8b18 	vmov	d8, r8, r9
 800d0a4:	9016      	str	r0, [sp, #88]	; 0x58
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	f43f af02 	beq.w	800ceb0 <_strtod_l+0x488>
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f7ff f930 	bl	800c314 <__i2b>
 800d0b4:	4683      	mov	fp, r0
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	f43f aefa 	beq.w	800ceb0 <_strtod_l+0x488>
 800d0bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d0be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d0c0:	2e00      	cmp	r6, #0
 800d0c2:	bfab      	itete	ge
 800d0c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d0c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d0c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d0ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d0ce:	bfac      	ite	ge
 800d0d0:	eb06 0a03 	addge.w	sl, r6, r3
 800d0d4:	1b9f      	sublt	r7, r3, r6
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	1af6      	subs	r6, r6, r3
 800d0da:	4416      	add	r6, r2
 800d0dc:	4ba0      	ldr	r3, [pc, #640]	; (800d360 <_strtod_l+0x938>)
 800d0de:	3e01      	subs	r6, #1
 800d0e0:	429e      	cmp	r6, r3
 800d0e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0e6:	f280 80c4 	bge.w	800d272 <_strtod_l+0x84a>
 800d0ea:	1b9b      	subs	r3, r3, r6
 800d0ec:	2b1f      	cmp	r3, #31
 800d0ee:	eba2 0203 	sub.w	r2, r2, r3
 800d0f2:	f04f 0101 	mov.w	r1, #1
 800d0f6:	f300 80b0 	bgt.w	800d25a <_strtod_l+0x832>
 800d0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d0fe:	930e      	str	r3, [sp, #56]	; 0x38
 800d100:	2300      	movs	r3, #0
 800d102:	930d      	str	r3, [sp, #52]	; 0x34
 800d104:	eb0a 0602 	add.w	r6, sl, r2
 800d108:	9b04      	ldr	r3, [sp, #16]
 800d10a:	45b2      	cmp	sl, r6
 800d10c:	4417      	add	r7, r2
 800d10e:	441f      	add	r7, r3
 800d110:	4653      	mov	r3, sl
 800d112:	bfa8      	it	ge
 800d114:	4633      	movge	r3, r6
 800d116:	42bb      	cmp	r3, r7
 800d118:	bfa8      	it	ge
 800d11a:	463b      	movge	r3, r7
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bfc2      	ittt	gt
 800d120:	1af6      	subgt	r6, r6, r3
 800d122:	1aff      	subgt	r7, r7, r3
 800d124:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	dd17      	ble.n	800d15e <_strtod_l+0x736>
 800d12e:	4659      	mov	r1, fp
 800d130:	461a      	mov	r2, r3
 800d132:	4620      	mov	r0, r4
 800d134:	f7ff f9ae 	bl	800c494 <__pow5mult>
 800d138:	4683      	mov	fp, r0
 800d13a:	2800      	cmp	r0, #0
 800d13c:	f43f aeb8 	beq.w	800ceb0 <_strtod_l+0x488>
 800d140:	4601      	mov	r1, r0
 800d142:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d144:	4620      	mov	r0, r4
 800d146:	f7ff f8fb 	bl	800c340 <__multiply>
 800d14a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d14c:	2800      	cmp	r0, #0
 800d14e:	f43f aeaf 	beq.w	800ceb0 <_strtod_l+0x488>
 800d152:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d154:	4620      	mov	r0, r4
 800d156:	f7fe ffdd 	bl	800c114 <_Bfree>
 800d15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15c:	9316      	str	r3, [sp, #88]	; 0x58
 800d15e:	2e00      	cmp	r6, #0
 800d160:	f300 808c 	bgt.w	800d27c <_strtod_l+0x854>
 800d164:	9b08      	ldr	r3, [sp, #32]
 800d166:	2b00      	cmp	r3, #0
 800d168:	dd08      	ble.n	800d17c <_strtod_l+0x754>
 800d16a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d16c:	9905      	ldr	r1, [sp, #20]
 800d16e:	4620      	mov	r0, r4
 800d170:	f7ff f990 	bl	800c494 <__pow5mult>
 800d174:	9005      	str	r0, [sp, #20]
 800d176:	2800      	cmp	r0, #0
 800d178:	f43f ae9a 	beq.w	800ceb0 <_strtod_l+0x488>
 800d17c:	2f00      	cmp	r7, #0
 800d17e:	dd08      	ble.n	800d192 <_strtod_l+0x76a>
 800d180:	9905      	ldr	r1, [sp, #20]
 800d182:	463a      	mov	r2, r7
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff f9df 	bl	800c548 <__lshift>
 800d18a:	9005      	str	r0, [sp, #20]
 800d18c:	2800      	cmp	r0, #0
 800d18e:	f43f ae8f 	beq.w	800ceb0 <_strtod_l+0x488>
 800d192:	f1ba 0f00 	cmp.w	sl, #0
 800d196:	dd08      	ble.n	800d1aa <_strtod_l+0x782>
 800d198:	4659      	mov	r1, fp
 800d19a:	4652      	mov	r2, sl
 800d19c:	4620      	mov	r0, r4
 800d19e:	f7ff f9d3 	bl	800c548 <__lshift>
 800d1a2:	4683      	mov	fp, r0
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f43f ae83 	beq.w	800ceb0 <_strtod_l+0x488>
 800d1aa:	9a05      	ldr	r2, [sp, #20]
 800d1ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f7ff fa52 	bl	800c658 <__mdiff>
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	f43f ae7a 	beq.w	800ceb0 <_strtod_l+0x488>
 800d1bc:	68c3      	ldr	r3, [r0, #12]
 800d1be:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	60c3      	str	r3, [r0, #12]
 800d1c4:	4659      	mov	r1, fp
 800d1c6:	f7ff fa2b 	bl	800c620 <__mcmp>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	da60      	bge.n	800d290 <_strtod_l+0x868>
 800d1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1d0:	ea53 0308 	orrs.w	r3, r3, r8
 800d1d4:	f040 8084 	bne.w	800d2e0 <_strtod_l+0x8b8>
 800d1d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d17f      	bne.n	800d2e0 <_strtod_l+0x8b8>
 800d1e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d1e4:	0d1b      	lsrs	r3, r3, #20
 800d1e6:	051b      	lsls	r3, r3, #20
 800d1e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d1ec:	d978      	bls.n	800d2e0 <_strtod_l+0x8b8>
 800d1ee:	696b      	ldr	r3, [r5, #20]
 800d1f0:	b913      	cbnz	r3, 800d1f8 <_strtod_l+0x7d0>
 800d1f2:	692b      	ldr	r3, [r5, #16]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	dd73      	ble.n	800d2e0 <_strtod_l+0x8b8>
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f7ff f9a3 	bl	800c548 <__lshift>
 800d202:	4659      	mov	r1, fp
 800d204:	4605      	mov	r5, r0
 800d206:	f7ff fa0b 	bl	800c620 <__mcmp>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	dd68      	ble.n	800d2e0 <_strtod_l+0x8b8>
 800d20e:	9904      	ldr	r1, [sp, #16]
 800d210:	4a54      	ldr	r2, [pc, #336]	; (800d364 <_strtod_l+0x93c>)
 800d212:	464b      	mov	r3, r9
 800d214:	2900      	cmp	r1, #0
 800d216:	f000 8084 	beq.w	800d322 <_strtod_l+0x8fa>
 800d21a:	ea02 0109 	and.w	r1, r2, r9
 800d21e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d222:	dc7e      	bgt.n	800d322 <_strtod_l+0x8fa>
 800d224:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d228:	f77f aeb3 	ble.w	800cf92 <_strtod_l+0x56a>
 800d22c:	4b4e      	ldr	r3, [pc, #312]	; (800d368 <_strtod_l+0x940>)
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	2200      	movs	r2, #0
 800d234:	f7f3 f9e0 	bl	80005f8 <__aeabi_dmul>
 800d238:	4b4a      	ldr	r3, [pc, #296]	; (800d364 <_strtod_l+0x93c>)
 800d23a:	400b      	ands	r3, r1
 800d23c:	4680      	mov	r8, r0
 800d23e:	4689      	mov	r9, r1
 800d240:	2b00      	cmp	r3, #0
 800d242:	f47f ae3f 	bne.w	800cec4 <_strtod_l+0x49c>
 800d246:	2322      	movs	r3, #34	; 0x22
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	e63b      	b.n	800cec4 <_strtod_l+0x49c>
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	fa02 f303 	lsl.w	r3, r2, r3
 800d254:	ea03 0808 	and.w	r8, r3, r8
 800d258:	e6e8      	b.n	800d02c <_strtod_l+0x604>
 800d25a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d25e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d262:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d266:	36e2      	adds	r6, #226	; 0xe2
 800d268:	fa01 f306 	lsl.w	r3, r1, r6
 800d26c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d270:	e748      	b.n	800d104 <_strtod_l+0x6dc>
 800d272:	2100      	movs	r1, #0
 800d274:	2301      	movs	r3, #1
 800d276:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d27a:	e743      	b.n	800d104 <_strtod_l+0x6dc>
 800d27c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d27e:	4632      	mov	r2, r6
 800d280:	4620      	mov	r0, r4
 800d282:	f7ff f961 	bl	800c548 <__lshift>
 800d286:	9016      	str	r0, [sp, #88]	; 0x58
 800d288:	2800      	cmp	r0, #0
 800d28a:	f47f af6b 	bne.w	800d164 <_strtod_l+0x73c>
 800d28e:	e60f      	b.n	800ceb0 <_strtod_l+0x488>
 800d290:	46ca      	mov	sl, r9
 800d292:	d171      	bne.n	800d378 <_strtod_l+0x950>
 800d294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d296:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d29a:	b352      	cbz	r2, 800d2f2 <_strtod_l+0x8ca>
 800d29c:	4a33      	ldr	r2, [pc, #204]	; (800d36c <_strtod_l+0x944>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d12a      	bne.n	800d2f8 <_strtod_l+0x8d0>
 800d2a2:	9b04      	ldr	r3, [sp, #16]
 800d2a4:	4641      	mov	r1, r8
 800d2a6:	b1fb      	cbz	r3, 800d2e8 <_strtod_l+0x8c0>
 800d2a8:	4b2e      	ldr	r3, [pc, #184]	; (800d364 <_strtod_l+0x93c>)
 800d2aa:	ea09 0303 	and.w	r3, r9, r3
 800d2ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	d81a      	bhi.n	800d2ee <_strtod_l+0x8c6>
 800d2b8:	0d1b      	lsrs	r3, r3, #20
 800d2ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2be:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c2:	4299      	cmp	r1, r3
 800d2c4:	d118      	bne.n	800d2f8 <_strtod_l+0x8d0>
 800d2c6:	4b2a      	ldr	r3, [pc, #168]	; (800d370 <_strtod_l+0x948>)
 800d2c8:	459a      	cmp	sl, r3
 800d2ca:	d102      	bne.n	800d2d2 <_strtod_l+0x8aa>
 800d2cc:	3101      	adds	r1, #1
 800d2ce:	f43f adef 	beq.w	800ceb0 <_strtod_l+0x488>
 800d2d2:	4b24      	ldr	r3, [pc, #144]	; (800d364 <_strtod_l+0x93c>)
 800d2d4:	ea0a 0303 	and.w	r3, sl, r3
 800d2d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d2dc:	f04f 0800 	mov.w	r8, #0
 800d2e0:	9b04      	ldr	r3, [sp, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1a2      	bne.n	800d22c <_strtod_l+0x804>
 800d2e6:	e5ed      	b.n	800cec4 <_strtod_l+0x49c>
 800d2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ec:	e7e9      	b.n	800d2c2 <_strtod_l+0x89a>
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	e7e7      	b.n	800d2c2 <_strtod_l+0x89a>
 800d2f2:	ea53 0308 	orrs.w	r3, r3, r8
 800d2f6:	d08a      	beq.n	800d20e <_strtod_l+0x7e6>
 800d2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2fa:	b1e3      	cbz	r3, 800d336 <_strtod_l+0x90e>
 800d2fc:	ea13 0f0a 	tst.w	r3, sl
 800d300:	d0ee      	beq.n	800d2e0 <_strtod_l+0x8b8>
 800d302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d304:	9a04      	ldr	r2, [sp, #16]
 800d306:	4640      	mov	r0, r8
 800d308:	4649      	mov	r1, r9
 800d30a:	b1c3      	cbz	r3, 800d33e <_strtod_l+0x916>
 800d30c:	f7ff fb6f 	bl	800c9ee <sulp>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	ec51 0b18 	vmov	r0, r1, d8
 800d318:	f7f2 ffb8 	bl	800028c <__adddf3>
 800d31c:	4680      	mov	r8, r0
 800d31e:	4689      	mov	r9, r1
 800d320:	e7de      	b.n	800d2e0 <_strtod_l+0x8b8>
 800d322:	4013      	ands	r3, r2
 800d324:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d328:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d32c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d330:	f04f 38ff 	mov.w	r8, #4294967295
 800d334:	e7d4      	b.n	800d2e0 <_strtod_l+0x8b8>
 800d336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d338:	ea13 0f08 	tst.w	r3, r8
 800d33c:	e7e0      	b.n	800d300 <_strtod_l+0x8d8>
 800d33e:	f7ff fb56 	bl	800c9ee <sulp>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	ec51 0b18 	vmov	r0, r1, d8
 800d34a:	f7f2 ff9d 	bl	8000288 <__aeabi_dsub>
 800d34e:	2200      	movs	r2, #0
 800d350:	2300      	movs	r3, #0
 800d352:	4680      	mov	r8, r0
 800d354:	4689      	mov	r9, r1
 800d356:	f7f3 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d0c0      	beq.n	800d2e0 <_strtod_l+0x8b8>
 800d35e:	e618      	b.n	800cf92 <_strtod_l+0x56a>
 800d360:	fffffc02 	.word	0xfffffc02
 800d364:	7ff00000 	.word	0x7ff00000
 800d368:	39500000 	.word	0x39500000
 800d36c:	000fffff 	.word	0x000fffff
 800d370:	7fefffff 	.word	0x7fefffff
 800d374:	08010040 	.word	0x08010040
 800d378:	4659      	mov	r1, fp
 800d37a:	4628      	mov	r0, r5
 800d37c:	f7ff fac0 	bl	800c900 <__ratio>
 800d380:	ec57 6b10 	vmov	r6, r7, d0
 800d384:	ee10 0a10 	vmov	r0, s0
 800d388:	2200      	movs	r2, #0
 800d38a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d38e:	4639      	mov	r1, r7
 800d390:	f7f3 fbae 	bl	8000af0 <__aeabi_dcmple>
 800d394:	2800      	cmp	r0, #0
 800d396:	d071      	beq.n	800d47c <_strtod_l+0xa54>
 800d398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d17c      	bne.n	800d498 <_strtod_l+0xa70>
 800d39e:	f1b8 0f00 	cmp.w	r8, #0
 800d3a2:	d15a      	bne.n	800d45a <_strtod_l+0xa32>
 800d3a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d15d      	bne.n	800d468 <_strtod_l+0xa40>
 800d3ac:	4b90      	ldr	r3, [pc, #576]	; (800d5f0 <_strtod_l+0xbc8>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	f7f3 fb92 	bl	8000adc <__aeabi_dcmplt>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d15c      	bne.n	800d476 <_strtod_l+0xa4e>
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4639      	mov	r1, r7
 800d3c0:	4b8c      	ldr	r3, [pc, #560]	; (800d5f4 <_strtod_l+0xbcc>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f7f3 f918 	bl	80005f8 <__aeabi_dmul>
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	460f      	mov	r7, r1
 800d3cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d3d0:	9606      	str	r6, [sp, #24]
 800d3d2:	9307      	str	r3, [sp, #28]
 800d3d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d3dc:	4b86      	ldr	r3, [pc, #536]	; (800d5f8 <_strtod_l+0xbd0>)
 800d3de:	ea0a 0303 	and.w	r3, sl, r3
 800d3e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d3e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3e6:	4b85      	ldr	r3, [pc, #532]	; (800d5fc <_strtod_l+0xbd4>)
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	f040 8090 	bne.w	800d50e <_strtod_l+0xae6>
 800d3ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d3f2:	ec49 8b10 	vmov	d0, r8, r9
 800d3f6:	f7ff f9b9 	bl	800c76c <__ulp>
 800d3fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3fe:	ec51 0b10 	vmov	r0, r1, d0
 800d402:	f7f3 f8f9 	bl	80005f8 <__aeabi_dmul>
 800d406:	4642      	mov	r2, r8
 800d408:	464b      	mov	r3, r9
 800d40a:	f7f2 ff3f 	bl	800028c <__adddf3>
 800d40e:	460b      	mov	r3, r1
 800d410:	4979      	ldr	r1, [pc, #484]	; (800d5f8 <_strtod_l+0xbd0>)
 800d412:	4a7b      	ldr	r2, [pc, #492]	; (800d600 <_strtod_l+0xbd8>)
 800d414:	4019      	ands	r1, r3
 800d416:	4291      	cmp	r1, r2
 800d418:	4680      	mov	r8, r0
 800d41a:	d944      	bls.n	800d4a6 <_strtod_l+0xa7e>
 800d41c:	ee18 2a90 	vmov	r2, s17
 800d420:	4b78      	ldr	r3, [pc, #480]	; (800d604 <_strtod_l+0xbdc>)
 800d422:	429a      	cmp	r2, r3
 800d424:	d104      	bne.n	800d430 <_strtod_l+0xa08>
 800d426:	ee18 3a10 	vmov	r3, s16
 800d42a:	3301      	adds	r3, #1
 800d42c:	f43f ad40 	beq.w	800ceb0 <_strtod_l+0x488>
 800d430:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d604 <_strtod_l+0xbdc>
 800d434:	f04f 38ff 	mov.w	r8, #4294967295
 800d438:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d43a:	4620      	mov	r0, r4
 800d43c:	f7fe fe6a 	bl	800c114 <_Bfree>
 800d440:	9905      	ldr	r1, [sp, #20]
 800d442:	4620      	mov	r0, r4
 800d444:	f7fe fe66 	bl	800c114 <_Bfree>
 800d448:	4659      	mov	r1, fp
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7fe fe62 	bl	800c114 <_Bfree>
 800d450:	4629      	mov	r1, r5
 800d452:	4620      	mov	r0, r4
 800d454:	f7fe fe5e 	bl	800c114 <_Bfree>
 800d458:	e609      	b.n	800d06e <_strtod_l+0x646>
 800d45a:	f1b8 0f01 	cmp.w	r8, #1
 800d45e:	d103      	bne.n	800d468 <_strtod_l+0xa40>
 800d460:	f1b9 0f00 	cmp.w	r9, #0
 800d464:	f43f ad95 	beq.w	800cf92 <_strtod_l+0x56a>
 800d468:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d5c0 <_strtod_l+0xb98>
 800d46c:	4f60      	ldr	r7, [pc, #384]	; (800d5f0 <_strtod_l+0xbc8>)
 800d46e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d472:	2600      	movs	r6, #0
 800d474:	e7ae      	b.n	800d3d4 <_strtod_l+0x9ac>
 800d476:	4f5f      	ldr	r7, [pc, #380]	; (800d5f4 <_strtod_l+0xbcc>)
 800d478:	2600      	movs	r6, #0
 800d47a:	e7a7      	b.n	800d3cc <_strtod_l+0x9a4>
 800d47c:	4b5d      	ldr	r3, [pc, #372]	; (800d5f4 <_strtod_l+0xbcc>)
 800d47e:	4630      	mov	r0, r6
 800d480:	4639      	mov	r1, r7
 800d482:	2200      	movs	r2, #0
 800d484:	f7f3 f8b8 	bl	80005f8 <__aeabi_dmul>
 800d488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d48a:	4606      	mov	r6, r0
 800d48c:	460f      	mov	r7, r1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d09c      	beq.n	800d3cc <_strtod_l+0x9a4>
 800d492:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d496:	e79d      	b.n	800d3d4 <_strtod_l+0x9ac>
 800d498:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d5c8 <_strtod_l+0xba0>
 800d49c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4a0:	ec57 6b17 	vmov	r6, r7, d7
 800d4a4:	e796      	b.n	800d3d4 <_strtod_l+0x9ac>
 800d4a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	46ca      	mov	sl, r9
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1c2      	bne.n	800d438 <_strtod_l+0xa10>
 800d4b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4b8:	0d1b      	lsrs	r3, r3, #20
 800d4ba:	051b      	lsls	r3, r3, #20
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d1bb      	bne.n	800d438 <_strtod_l+0xa10>
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	f7f3 fbf8 	bl	8000cb8 <__aeabi_d2lz>
 800d4c8:	f7f3 f868 	bl	800059c <__aeabi_l2d>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f2 fed8 	bl	8000288 <__aeabi_dsub>
 800d4d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4de:	ea43 0308 	orr.w	r3, r3, r8
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	460f      	mov	r7, r1
 800d4e8:	d054      	beq.n	800d594 <_strtod_l+0xb6c>
 800d4ea:	a339      	add	r3, pc, #228	; (adr r3, 800d5d0 <_strtod_l+0xba8>)
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	f7f3 faf4 	bl	8000adc <__aeabi_dcmplt>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	f47f ace5 	bne.w	800cec4 <_strtod_l+0x49c>
 800d4fa:	a337      	add	r3, pc, #220	; (adr r3, 800d5d8 <_strtod_l+0xbb0>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	f7f3 fb08 	bl	8000b18 <__aeabi_dcmpgt>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d095      	beq.n	800d438 <_strtod_l+0xa10>
 800d50c:	e4da      	b.n	800cec4 <_strtod_l+0x49c>
 800d50e:	9b04      	ldr	r3, [sp, #16]
 800d510:	b333      	cbz	r3, 800d560 <_strtod_l+0xb38>
 800d512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d514:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d518:	d822      	bhi.n	800d560 <_strtod_l+0xb38>
 800d51a:	a331      	add	r3, pc, #196	; (adr r3, 800d5e0 <_strtod_l+0xbb8>)
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	4630      	mov	r0, r6
 800d522:	4639      	mov	r1, r7
 800d524:	f7f3 fae4 	bl	8000af0 <__aeabi_dcmple>
 800d528:	b1a0      	cbz	r0, 800d554 <_strtod_l+0xb2c>
 800d52a:	4639      	mov	r1, r7
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7f3 fb3b 	bl	8000ba8 <__aeabi_d2uiz>
 800d532:	2801      	cmp	r0, #1
 800d534:	bf38      	it	cc
 800d536:	2001      	movcc	r0, #1
 800d538:	f7f2 ffe4 	bl	8000504 <__aeabi_ui2d>
 800d53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d53e:	4606      	mov	r6, r0
 800d540:	460f      	mov	r7, r1
 800d542:	bb23      	cbnz	r3, 800d58e <_strtod_l+0xb66>
 800d544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d548:	9010      	str	r0, [sp, #64]	; 0x40
 800d54a:	9311      	str	r3, [sp, #68]	; 0x44
 800d54c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d550:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d558:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d55c:	1a9b      	subs	r3, r3, r2
 800d55e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d560:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d564:	eeb0 0a48 	vmov.f32	s0, s16
 800d568:	eef0 0a68 	vmov.f32	s1, s17
 800d56c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d570:	f7ff f8fc 	bl	800c76c <__ulp>
 800d574:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d578:	ec53 2b10 	vmov	r2, r3, d0
 800d57c:	f7f3 f83c 	bl	80005f8 <__aeabi_dmul>
 800d580:	ec53 2b18 	vmov	r2, r3, d8
 800d584:	f7f2 fe82 	bl	800028c <__adddf3>
 800d588:	4680      	mov	r8, r0
 800d58a:	4689      	mov	r9, r1
 800d58c:	e78d      	b.n	800d4aa <_strtod_l+0xa82>
 800d58e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d592:	e7db      	b.n	800d54c <_strtod_l+0xb24>
 800d594:	a314      	add	r3, pc, #80	; (adr r3, 800d5e8 <_strtod_l+0xbc0>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f3 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800d59e:	e7b3      	b.n	800d508 <_strtod_l+0xae0>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	930a      	str	r3, [sp, #40]	; 0x28
 800d5a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	f7ff ba7c 	b.w	800caa6 <_strtod_l+0x7e>
 800d5ae:	2a65      	cmp	r2, #101	; 0x65
 800d5b0:	f43f ab75 	beq.w	800cc9e <_strtod_l+0x276>
 800d5b4:	2a45      	cmp	r2, #69	; 0x45
 800d5b6:	f43f ab72 	beq.w	800cc9e <_strtod_l+0x276>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	f7ff bbaa 	b.w	800cd14 <_strtod_l+0x2ec>
 800d5c0:	00000000 	.word	0x00000000
 800d5c4:	bff00000 	.word	0xbff00000
 800d5c8:	00000000 	.word	0x00000000
 800d5cc:	3ff00000 	.word	0x3ff00000
 800d5d0:	94a03595 	.word	0x94a03595
 800d5d4:	3fdfffff 	.word	0x3fdfffff
 800d5d8:	35afe535 	.word	0x35afe535
 800d5dc:	3fe00000 	.word	0x3fe00000
 800d5e0:	ffc00000 	.word	0xffc00000
 800d5e4:	41dfffff 	.word	0x41dfffff
 800d5e8:	94a03595 	.word	0x94a03595
 800d5ec:	3fcfffff 	.word	0x3fcfffff
 800d5f0:	3ff00000 	.word	0x3ff00000
 800d5f4:	3fe00000 	.word	0x3fe00000
 800d5f8:	7ff00000 	.word	0x7ff00000
 800d5fc:	7fe00000 	.word	0x7fe00000
 800d600:	7c9fffff 	.word	0x7c9fffff
 800d604:	7fefffff 	.word	0x7fefffff

0800d608 <_strtod_r>:
 800d608:	4b01      	ldr	r3, [pc, #4]	; (800d610 <_strtod_r+0x8>)
 800d60a:	f7ff ba0d 	b.w	800ca28 <_strtod_l>
 800d60e:	bf00      	nop
 800d610:	2000008c 	.word	0x2000008c

0800d614 <_strtol_l.constprop.0>:
 800d614:	2b01      	cmp	r3, #1
 800d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61a:	d001      	beq.n	800d620 <_strtol_l.constprop.0+0xc>
 800d61c:	2b24      	cmp	r3, #36	; 0x24
 800d61e:	d906      	bls.n	800d62e <_strtol_l.constprop.0+0x1a>
 800d620:	f7fd fd7a 	bl	800b118 <__errno>
 800d624:	2316      	movs	r3, #22
 800d626:	6003      	str	r3, [r0, #0]
 800d628:	2000      	movs	r0, #0
 800d62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d714 <_strtol_l.constprop.0+0x100>
 800d632:	460d      	mov	r5, r1
 800d634:	462e      	mov	r6, r5
 800d636:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d63a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d63e:	f017 0708 	ands.w	r7, r7, #8
 800d642:	d1f7      	bne.n	800d634 <_strtol_l.constprop.0+0x20>
 800d644:	2c2d      	cmp	r4, #45	; 0x2d
 800d646:	d132      	bne.n	800d6ae <_strtol_l.constprop.0+0x9a>
 800d648:	782c      	ldrb	r4, [r5, #0]
 800d64a:	2701      	movs	r7, #1
 800d64c:	1cb5      	adds	r5, r6, #2
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d05b      	beq.n	800d70a <_strtol_l.constprop.0+0xf6>
 800d652:	2b10      	cmp	r3, #16
 800d654:	d109      	bne.n	800d66a <_strtol_l.constprop.0+0x56>
 800d656:	2c30      	cmp	r4, #48	; 0x30
 800d658:	d107      	bne.n	800d66a <_strtol_l.constprop.0+0x56>
 800d65a:	782c      	ldrb	r4, [r5, #0]
 800d65c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d660:	2c58      	cmp	r4, #88	; 0x58
 800d662:	d14d      	bne.n	800d700 <_strtol_l.constprop.0+0xec>
 800d664:	786c      	ldrb	r4, [r5, #1]
 800d666:	2310      	movs	r3, #16
 800d668:	3502      	adds	r5, #2
 800d66a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d66e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d672:	f04f 0e00 	mov.w	lr, #0
 800d676:	fbb8 f9f3 	udiv	r9, r8, r3
 800d67a:	4676      	mov	r6, lr
 800d67c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d680:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d684:	f1bc 0f09 	cmp.w	ip, #9
 800d688:	d816      	bhi.n	800d6b8 <_strtol_l.constprop.0+0xa4>
 800d68a:	4664      	mov	r4, ip
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	dd24      	ble.n	800d6da <_strtol_l.constprop.0+0xc6>
 800d690:	f1be 3fff 	cmp.w	lr, #4294967295
 800d694:	d008      	beq.n	800d6a8 <_strtol_l.constprop.0+0x94>
 800d696:	45b1      	cmp	r9, r6
 800d698:	d31c      	bcc.n	800d6d4 <_strtol_l.constprop.0+0xc0>
 800d69a:	d101      	bne.n	800d6a0 <_strtol_l.constprop.0+0x8c>
 800d69c:	45a2      	cmp	sl, r4
 800d69e:	db19      	blt.n	800d6d4 <_strtol_l.constprop.0+0xc0>
 800d6a0:	fb06 4603 	mla	r6, r6, r3, r4
 800d6a4:	f04f 0e01 	mov.w	lr, #1
 800d6a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6ac:	e7e8      	b.n	800d680 <_strtol_l.constprop.0+0x6c>
 800d6ae:	2c2b      	cmp	r4, #43	; 0x2b
 800d6b0:	bf04      	itt	eq
 800d6b2:	782c      	ldrbeq	r4, [r5, #0]
 800d6b4:	1cb5      	addeq	r5, r6, #2
 800d6b6:	e7ca      	b.n	800d64e <_strtol_l.constprop.0+0x3a>
 800d6b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d6bc:	f1bc 0f19 	cmp.w	ip, #25
 800d6c0:	d801      	bhi.n	800d6c6 <_strtol_l.constprop.0+0xb2>
 800d6c2:	3c37      	subs	r4, #55	; 0x37
 800d6c4:	e7e2      	b.n	800d68c <_strtol_l.constprop.0+0x78>
 800d6c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d6ca:	f1bc 0f19 	cmp.w	ip, #25
 800d6ce:	d804      	bhi.n	800d6da <_strtol_l.constprop.0+0xc6>
 800d6d0:	3c57      	subs	r4, #87	; 0x57
 800d6d2:	e7db      	b.n	800d68c <_strtol_l.constprop.0+0x78>
 800d6d4:	f04f 3eff 	mov.w	lr, #4294967295
 800d6d8:	e7e6      	b.n	800d6a8 <_strtol_l.constprop.0+0x94>
 800d6da:	f1be 3fff 	cmp.w	lr, #4294967295
 800d6de:	d105      	bne.n	800d6ec <_strtol_l.constprop.0+0xd8>
 800d6e0:	2322      	movs	r3, #34	; 0x22
 800d6e2:	6003      	str	r3, [r0, #0]
 800d6e4:	4646      	mov	r6, r8
 800d6e6:	b942      	cbnz	r2, 800d6fa <_strtol_l.constprop.0+0xe6>
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	e79e      	b.n	800d62a <_strtol_l.constprop.0+0x16>
 800d6ec:	b107      	cbz	r7, 800d6f0 <_strtol_l.constprop.0+0xdc>
 800d6ee:	4276      	negs	r6, r6
 800d6f0:	2a00      	cmp	r2, #0
 800d6f2:	d0f9      	beq.n	800d6e8 <_strtol_l.constprop.0+0xd4>
 800d6f4:	f1be 0f00 	cmp.w	lr, #0
 800d6f8:	d000      	beq.n	800d6fc <_strtol_l.constprop.0+0xe8>
 800d6fa:	1e69      	subs	r1, r5, #1
 800d6fc:	6011      	str	r1, [r2, #0]
 800d6fe:	e7f3      	b.n	800d6e8 <_strtol_l.constprop.0+0xd4>
 800d700:	2430      	movs	r4, #48	; 0x30
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1b1      	bne.n	800d66a <_strtol_l.constprop.0+0x56>
 800d706:	2308      	movs	r3, #8
 800d708:	e7af      	b.n	800d66a <_strtol_l.constprop.0+0x56>
 800d70a:	2c30      	cmp	r4, #48	; 0x30
 800d70c:	d0a5      	beq.n	800d65a <_strtol_l.constprop.0+0x46>
 800d70e:	230a      	movs	r3, #10
 800d710:	e7ab      	b.n	800d66a <_strtol_l.constprop.0+0x56>
 800d712:	bf00      	nop
 800d714:	08010069 	.word	0x08010069

0800d718 <_strtol_r>:
 800d718:	f7ff bf7c 	b.w	800d614 <_strtol_l.constprop.0>

0800d71c <__ssputs_r>:
 800d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	688e      	ldr	r6, [r1, #8]
 800d722:	461f      	mov	r7, r3
 800d724:	42be      	cmp	r6, r7
 800d726:	680b      	ldr	r3, [r1, #0]
 800d728:	4682      	mov	sl, r0
 800d72a:	460c      	mov	r4, r1
 800d72c:	4690      	mov	r8, r2
 800d72e:	d82c      	bhi.n	800d78a <__ssputs_r+0x6e>
 800d730:	898a      	ldrh	r2, [r1, #12]
 800d732:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d736:	d026      	beq.n	800d786 <__ssputs_r+0x6a>
 800d738:	6965      	ldr	r5, [r4, #20]
 800d73a:	6909      	ldr	r1, [r1, #16]
 800d73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d740:	eba3 0901 	sub.w	r9, r3, r1
 800d744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d748:	1c7b      	adds	r3, r7, #1
 800d74a:	444b      	add	r3, r9
 800d74c:	106d      	asrs	r5, r5, #1
 800d74e:	429d      	cmp	r5, r3
 800d750:	bf38      	it	cc
 800d752:	461d      	movcc	r5, r3
 800d754:	0553      	lsls	r3, r2, #21
 800d756:	d527      	bpl.n	800d7a8 <__ssputs_r+0x8c>
 800d758:	4629      	mov	r1, r5
 800d75a:	f7fe fc0f 	bl	800bf7c <_malloc_r>
 800d75e:	4606      	mov	r6, r0
 800d760:	b360      	cbz	r0, 800d7bc <__ssputs_r+0xa0>
 800d762:	6921      	ldr	r1, [r4, #16]
 800d764:	464a      	mov	r2, r9
 800d766:	f7fd fd04 	bl	800b172 <memcpy>
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d774:	81a3      	strh	r3, [r4, #12]
 800d776:	6126      	str	r6, [r4, #16]
 800d778:	6165      	str	r5, [r4, #20]
 800d77a:	444e      	add	r6, r9
 800d77c:	eba5 0509 	sub.w	r5, r5, r9
 800d780:	6026      	str	r6, [r4, #0]
 800d782:	60a5      	str	r5, [r4, #8]
 800d784:	463e      	mov	r6, r7
 800d786:	42be      	cmp	r6, r7
 800d788:	d900      	bls.n	800d78c <__ssputs_r+0x70>
 800d78a:	463e      	mov	r6, r7
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	4632      	mov	r2, r6
 800d790:	4641      	mov	r1, r8
 800d792:	f000 f9c9 	bl	800db28 <memmove>
 800d796:	68a3      	ldr	r3, [r4, #8]
 800d798:	1b9b      	subs	r3, r3, r6
 800d79a:	60a3      	str	r3, [r4, #8]
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	4433      	add	r3, r6
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	f000 fd9e 	bl	800e2ea <_realloc_r>
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d1e0      	bne.n	800d776 <__ssputs_r+0x5a>
 800d7b4:	6921      	ldr	r1, [r4, #16]
 800d7b6:	4650      	mov	r0, sl
 800d7b8:	f7fe fb6c 	bl	800be94 <_free_r>
 800d7bc:	230c      	movs	r3, #12
 800d7be:	f8ca 3000 	str.w	r3, [sl]
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ce:	e7e9      	b.n	800d7a4 <__ssputs_r+0x88>

0800d7d0 <_svfiprintf_r>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	4698      	mov	r8, r3
 800d7d6:	898b      	ldrh	r3, [r1, #12]
 800d7d8:	061b      	lsls	r3, r3, #24
 800d7da:	b09d      	sub	sp, #116	; 0x74
 800d7dc:	4607      	mov	r7, r0
 800d7de:	460d      	mov	r5, r1
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	d50e      	bpl.n	800d802 <_svfiprintf_r+0x32>
 800d7e4:	690b      	ldr	r3, [r1, #16]
 800d7e6:	b963      	cbnz	r3, 800d802 <_svfiprintf_r+0x32>
 800d7e8:	2140      	movs	r1, #64	; 0x40
 800d7ea:	f7fe fbc7 	bl	800bf7c <_malloc_r>
 800d7ee:	6028      	str	r0, [r5, #0]
 800d7f0:	6128      	str	r0, [r5, #16]
 800d7f2:	b920      	cbnz	r0, 800d7fe <_svfiprintf_r+0x2e>
 800d7f4:	230c      	movs	r3, #12
 800d7f6:	603b      	str	r3, [r7, #0]
 800d7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fc:	e0d0      	b.n	800d9a0 <_svfiprintf_r+0x1d0>
 800d7fe:	2340      	movs	r3, #64	; 0x40
 800d800:	616b      	str	r3, [r5, #20]
 800d802:	2300      	movs	r3, #0
 800d804:	9309      	str	r3, [sp, #36]	; 0x24
 800d806:	2320      	movs	r3, #32
 800d808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d810:	2330      	movs	r3, #48	; 0x30
 800d812:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d9b8 <_svfiprintf_r+0x1e8>
 800d816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d81a:	f04f 0901 	mov.w	r9, #1
 800d81e:	4623      	mov	r3, r4
 800d820:	469a      	mov	sl, r3
 800d822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d826:	b10a      	cbz	r2, 800d82c <_svfiprintf_r+0x5c>
 800d828:	2a25      	cmp	r2, #37	; 0x25
 800d82a:	d1f9      	bne.n	800d820 <_svfiprintf_r+0x50>
 800d82c:	ebba 0b04 	subs.w	fp, sl, r4
 800d830:	d00b      	beq.n	800d84a <_svfiprintf_r+0x7a>
 800d832:	465b      	mov	r3, fp
 800d834:	4622      	mov	r2, r4
 800d836:	4629      	mov	r1, r5
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ff6f 	bl	800d71c <__ssputs_r>
 800d83e:	3001      	adds	r0, #1
 800d840:	f000 80a9 	beq.w	800d996 <_svfiprintf_r+0x1c6>
 800d844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d846:	445a      	add	r2, fp
 800d848:	9209      	str	r2, [sp, #36]	; 0x24
 800d84a:	f89a 3000 	ldrb.w	r3, [sl]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 80a1 	beq.w	800d996 <_svfiprintf_r+0x1c6>
 800d854:	2300      	movs	r3, #0
 800d856:	f04f 32ff 	mov.w	r2, #4294967295
 800d85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d85e:	f10a 0a01 	add.w	sl, sl, #1
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	9307      	str	r3, [sp, #28]
 800d866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d86a:	931a      	str	r3, [sp, #104]	; 0x68
 800d86c:	4654      	mov	r4, sl
 800d86e:	2205      	movs	r2, #5
 800d870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d874:	4850      	ldr	r0, [pc, #320]	; (800d9b8 <_svfiprintf_r+0x1e8>)
 800d876:	f7f2 fcab 	bl	80001d0 <memchr>
 800d87a:	9a04      	ldr	r2, [sp, #16]
 800d87c:	b9d8      	cbnz	r0, 800d8b6 <_svfiprintf_r+0xe6>
 800d87e:	06d0      	lsls	r0, r2, #27
 800d880:	bf44      	itt	mi
 800d882:	2320      	movmi	r3, #32
 800d884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d888:	0711      	lsls	r1, r2, #28
 800d88a:	bf44      	itt	mi
 800d88c:	232b      	movmi	r3, #43	; 0x2b
 800d88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d892:	f89a 3000 	ldrb.w	r3, [sl]
 800d896:	2b2a      	cmp	r3, #42	; 0x2a
 800d898:	d015      	beq.n	800d8c6 <_svfiprintf_r+0xf6>
 800d89a:	9a07      	ldr	r2, [sp, #28]
 800d89c:	4654      	mov	r4, sl
 800d89e:	2000      	movs	r0, #0
 800d8a0:	f04f 0c0a 	mov.w	ip, #10
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8aa:	3b30      	subs	r3, #48	; 0x30
 800d8ac:	2b09      	cmp	r3, #9
 800d8ae:	d94d      	bls.n	800d94c <_svfiprintf_r+0x17c>
 800d8b0:	b1b0      	cbz	r0, 800d8e0 <_svfiprintf_r+0x110>
 800d8b2:	9207      	str	r2, [sp, #28]
 800d8b4:	e014      	b.n	800d8e0 <_svfiprintf_r+0x110>
 800d8b6:	eba0 0308 	sub.w	r3, r0, r8
 800d8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	46a2      	mov	sl, r4
 800d8c4:	e7d2      	b.n	800d86c <_svfiprintf_r+0x9c>
 800d8c6:	9b03      	ldr	r3, [sp, #12]
 800d8c8:	1d19      	adds	r1, r3, #4
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	9103      	str	r1, [sp, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	bfbb      	ittet	lt
 800d8d2:	425b      	neglt	r3, r3
 800d8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d8:	9307      	strge	r3, [sp, #28]
 800d8da:	9307      	strlt	r3, [sp, #28]
 800d8dc:	bfb8      	it	lt
 800d8de:	9204      	strlt	r2, [sp, #16]
 800d8e0:	7823      	ldrb	r3, [r4, #0]
 800d8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8e4:	d10c      	bne.n	800d900 <_svfiprintf_r+0x130>
 800d8e6:	7863      	ldrb	r3, [r4, #1]
 800d8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ea:	d134      	bne.n	800d956 <_svfiprintf_r+0x186>
 800d8ec:	9b03      	ldr	r3, [sp, #12]
 800d8ee:	1d1a      	adds	r2, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	9203      	str	r2, [sp, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	bfb8      	it	lt
 800d8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8fc:	3402      	adds	r4, #2
 800d8fe:	9305      	str	r3, [sp, #20]
 800d900:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d9c8 <_svfiprintf_r+0x1f8>
 800d904:	7821      	ldrb	r1, [r4, #0]
 800d906:	2203      	movs	r2, #3
 800d908:	4650      	mov	r0, sl
 800d90a:	f7f2 fc61 	bl	80001d0 <memchr>
 800d90e:	b138      	cbz	r0, 800d920 <_svfiprintf_r+0x150>
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	eba0 000a 	sub.w	r0, r0, sl
 800d916:	2240      	movs	r2, #64	; 0x40
 800d918:	4082      	lsls	r2, r0
 800d91a:	4313      	orrs	r3, r2
 800d91c:	3401      	adds	r4, #1
 800d91e:	9304      	str	r3, [sp, #16]
 800d920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d924:	4825      	ldr	r0, [pc, #148]	; (800d9bc <_svfiprintf_r+0x1ec>)
 800d926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d92a:	2206      	movs	r2, #6
 800d92c:	f7f2 fc50 	bl	80001d0 <memchr>
 800d930:	2800      	cmp	r0, #0
 800d932:	d038      	beq.n	800d9a6 <_svfiprintf_r+0x1d6>
 800d934:	4b22      	ldr	r3, [pc, #136]	; (800d9c0 <_svfiprintf_r+0x1f0>)
 800d936:	bb1b      	cbnz	r3, 800d980 <_svfiprintf_r+0x1b0>
 800d938:	9b03      	ldr	r3, [sp, #12]
 800d93a:	3307      	adds	r3, #7
 800d93c:	f023 0307 	bic.w	r3, r3, #7
 800d940:	3308      	adds	r3, #8
 800d942:	9303      	str	r3, [sp, #12]
 800d944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d946:	4433      	add	r3, r6
 800d948:	9309      	str	r3, [sp, #36]	; 0x24
 800d94a:	e768      	b.n	800d81e <_svfiprintf_r+0x4e>
 800d94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d950:	460c      	mov	r4, r1
 800d952:	2001      	movs	r0, #1
 800d954:	e7a6      	b.n	800d8a4 <_svfiprintf_r+0xd4>
 800d956:	2300      	movs	r3, #0
 800d958:	3401      	adds	r4, #1
 800d95a:	9305      	str	r3, [sp, #20]
 800d95c:	4619      	mov	r1, r3
 800d95e:	f04f 0c0a 	mov.w	ip, #10
 800d962:	4620      	mov	r0, r4
 800d964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d968:	3a30      	subs	r2, #48	; 0x30
 800d96a:	2a09      	cmp	r2, #9
 800d96c:	d903      	bls.n	800d976 <_svfiprintf_r+0x1a6>
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0c6      	beq.n	800d900 <_svfiprintf_r+0x130>
 800d972:	9105      	str	r1, [sp, #20]
 800d974:	e7c4      	b.n	800d900 <_svfiprintf_r+0x130>
 800d976:	fb0c 2101 	mla	r1, ip, r1, r2
 800d97a:	4604      	mov	r4, r0
 800d97c:	2301      	movs	r3, #1
 800d97e:	e7f0      	b.n	800d962 <_svfiprintf_r+0x192>
 800d980:	ab03      	add	r3, sp, #12
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	462a      	mov	r2, r5
 800d986:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <_svfiprintf_r+0x1f4>)
 800d988:	a904      	add	r1, sp, #16
 800d98a:	4638      	mov	r0, r7
 800d98c:	f7fc fc76 	bl	800a27c <_printf_float>
 800d990:	1c42      	adds	r2, r0, #1
 800d992:	4606      	mov	r6, r0
 800d994:	d1d6      	bne.n	800d944 <_svfiprintf_r+0x174>
 800d996:	89ab      	ldrh	r3, [r5, #12]
 800d998:	065b      	lsls	r3, r3, #25
 800d99a:	f53f af2d 	bmi.w	800d7f8 <_svfiprintf_r+0x28>
 800d99e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9a0:	b01d      	add	sp, #116	; 0x74
 800d9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a6:	ab03      	add	r3, sp, #12
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <_svfiprintf_r+0x1f4>)
 800d9ae:	a904      	add	r1, sp, #16
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f7fc ff07 	bl	800a7c4 <_printf_i>
 800d9b6:	e7eb      	b.n	800d990 <_svfiprintf_r+0x1c0>
 800d9b8:	08010169 	.word	0x08010169
 800d9bc:	08010173 	.word	0x08010173
 800d9c0:	0800a27d 	.word	0x0800a27d
 800d9c4:	0800d71d 	.word	0x0800d71d
 800d9c8:	0801016f 	.word	0x0801016f

0800d9cc <__sflush_r>:
 800d9cc:	898a      	ldrh	r2, [r1, #12]
 800d9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	0710      	lsls	r0, r2, #28
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	d458      	bmi.n	800da8c <__sflush_r+0xc0>
 800d9da:	684b      	ldr	r3, [r1, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dc05      	bgt.n	800d9ec <__sflush_r+0x20>
 800d9e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	dc02      	bgt.n	800d9ec <__sflush_r+0x20>
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9ee:	2e00      	cmp	r6, #0
 800d9f0:	d0f9      	beq.n	800d9e6 <__sflush_r+0x1a>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9f8:	682f      	ldr	r7, [r5, #0]
 800d9fa:	6a21      	ldr	r1, [r4, #32]
 800d9fc:	602b      	str	r3, [r5, #0]
 800d9fe:	d032      	beq.n	800da66 <__sflush_r+0x9a>
 800da00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	075a      	lsls	r2, r3, #29
 800da06:	d505      	bpl.n	800da14 <__sflush_r+0x48>
 800da08:	6863      	ldr	r3, [r4, #4]
 800da0a:	1ac0      	subs	r0, r0, r3
 800da0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da0e:	b10b      	cbz	r3, 800da14 <__sflush_r+0x48>
 800da10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da12:	1ac0      	subs	r0, r0, r3
 800da14:	2300      	movs	r3, #0
 800da16:	4602      	mov	r2, r0
 800da18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da1a:	6a21      	ldr	r1, [r4, #32]
 800da1c:	4628      	mov	r0, r5
 800da1e:	47b0      	blx	r6
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	d106      	bne.n	800da34 <__sflush_r+0x68>
 800da26:	6829      	ldr	r1, [r5, #0]
 800da28:	291d      	cmp	r1, #29
 800da2a:	d82b      	bhi.n	800da84 <__sflush_r+0xb8>
 800da2c:	4a29      	ldr	r2, [pc, #164]	; (800dad4 <__sflush_r+0x108>)
 800da2e:	410a      	asrs	r2, r1
 800da30:	07d6      	lsls	r6, r2, #31
 800da32:	d427      	bmi.n	800da84 <__sflush_r+0xb8>
 800da34:	2200      	movs	r2, #0
 800da36:	6062      	str	r2, [r4, #4]
 800da38:	04d9      	lsls	r1, r3, #19
 800da3a:	6922      	ldr	r2, [r4, #16]
 800da3c:	6022      	str	r2, [r4, #0]
 800da3e:	d504      	bpl.n	800da4a <__sflush_r+0x7e>
 800da40:	1c42      	adds	r2, r0, #1
 800da42:	d101      	bne.n	800da48 <__sflush_r+0x7c>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	b903      	cbnz	r3, 800da4a <__sflush_r+0x7e>
 800da48:	6560      	str	r0, [r4, #84]	; 0x54
 800da4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da4c:	602f      	str	r7, [r5, #0]
 800da4e:	2900      	cmp	r1, #0
 800da50:	d0c9      	beq.n	800d9e6 <__sflush_r+0x1a>
 800da52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da56:	4299      	cmp	r1, r3
 800da58:	d002      	beq.n	800da60 <__sflush_r+0x94>
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7fe fa1a 	bl	800be94 <_free_r>
 800da60:	2000      	movs	r0, #0
 800da62:	6360      	str	r0, [r4, #52]	; 0x34
 800da64:	e7c0      	b.n	800d9e8 <__sflush_r+0x1c>
 800da66:	2301      	movs	r3, #1
 800da68:	4628      	mov	r0, r5
 800da6a:	47b0      	blx	r6
 800da6c:	1c41      	adds	r1, r0, #1
 800da6e:	d1c8      	bne.n	800da02 <__sflush_r+0x36>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0c5      	beq.n	800da02 <__sflush_r+0x36>
 800da76:	2b1d      	cmp	r3, #29
 800da78:	d001      	beq.n	800da7e <__sflush_r+0xb2>
 800da7a:	2b16      	cmp	r3, #22
 800da7c:	d101      	bne.n	800da82 <__sflush_r+0xb6>
 800da7e:	602f      	str	r7, [r5, #0]
 800da80:	e7b1      	b.n	800d9e6 <__sflush_r+0x1a>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da88:	81a3      	strh	r3, [r4, #12]
 800da8a:	e7ad      	b.n	800d9e8 <__sflush_r+0x1c>
 800da8c:	690f      	ldr	r7, [r1, #16]
 800da8e:	2f00      	cmp	r7, #0
 800da90:	d0a9      	beq.n	800d9e6 <__sflush_r+0x1a>
 800da92:	0793      	lsls	r3, r2, #30
 800da94:	680e      	ldr	r6, [r1, #0]
 800da96:	bf08      	it	eq
 800da98:	694b      	ldreq	r3, [r1, #20]
 800da9a:	600f      	str	r7, [r1, #0]
 800da9c:	bf18      	it	ne
 800da9e:	2300      	movne	r3, #0
 800daa0:	eba6 0807 	sub.w	r8, r6, r7
 800daa4:	608b      	str	r3, [r1, #8]
 800daa6:	f1b8 0f00 	cmp.w	r8, #0
 800daaa:	dd9c      	ble.n	800d9e6 <__sflush_r+0x1a>
 800daac:	6a21      	ldr	r1, [r4, #32]
 800daae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dab0:	4643      	mov	r3, r8
 800dab2:	463a      	mov	r2, r7
 800dab4:	4628      	mov	r0, r5
 800dab6:	47b0      	blx	r6
 800dab8:	2800      	cmp	r0, #0
 800daba:	dc06      	bgt.n	800daca <__sflush_r+0xfe>
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e78e      	b.n	800d9e8 <__sflush_r+0x1c>
 800daca:	4407      	add	r7, r0
 800dacc:	eba8 0800 	sub.w	r8, r8, r0
 800dad0:	e7e9      	b.n	800daa6 <__sflush_r+0xda>
 800dad2:	bf00      	nop
 800dad4:	dfbffffe 	.word	0xdfbffffe

0800dad8 <_fflush_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	690b      	ldr	r3, [r1, #16]
 800dadc:	4605      	mov	r5, r0
 800dade:	460c      	mov	r4, r1
 800dae0:	b913      	cbnz	r3, 800dae8 <_fflush_r+0x10>
 800dae2:	2500      	movs	r5, #0
 800dae4:	4628      	mov	r0, r5
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	b118      	cbz	r0, 800daf2 <_fflush_r+0x1a>
 800daea:	6a03      	ldr	r3, [r0, #32]
 800daec:	b90b      	cbnz	r3, 800daf2 <_fflush_r+0x1a>
 800daee:	f7fd fa27 	bl	800af40 <__sinit>
 800daf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0f3      	beq.n	800dae2 <_fflush_r+0xa>
 800dafa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dafc:	07d0      	lsls	r0, r2, #31
 800dafe:	d404      	bmi.n	800db0a <_fflush_r+0x32>
 800db00:	0599      	lsls	r1, r3, #22
 800db02:	d402      	bmi.n	800db0a <_fflush_r+0x32>
 800db04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db06:	f7fd fb32 	bl	800b16e <__retarget_lock_acquire_recursive>
 800db0a:	4628      	mov	r0, r5
 800db0c:	4621      	mov	r1, r4
 800db0e:	f7ff ff5d 	bl	800d9cc <__sflush_r>
 800db12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db14:	07da      	lsls	r2, r3, #31
 800db16:	4605      	mov	r5, r0
 800db18:	d4e4      	bmi.n	800dae4 <_fflush_r+0xc>
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	059b      	lsls	r3, r3, #22
 800db1e:	d4e1      	bmi.n	800dae4 <_fflush_r+0xc>
 800db20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db22:	f7fd fb25 	bl	800b170 <__retarget_lock_release_recursive>
 800db26:	e7dd      	b.n	800dae4 <_fflush_r+0xc>

0800db28 <memmove>:
 800db28:	4288      	cmp	r0, r1
 800db2a:	b510      	push	{r4, lr}
 800db2c:	eb01 0402 	add.w	r4, r1, r2
 800db30:	d902      	bls.n	800db38 <memmove+0x10>
 800db32:	4284      	cmp	r4, r0
 800db34:	4623      	mov	r3, r4
 800db36:	d807      	bhi.n	800db48 <memmove+0x20>
 800db38:	1e43      	subs	r3, r0, #1
 800db3a:	42a1      	cmp	r1, r4
 800db3c:	d008      	beq.n	800db50 <memmove+0x28>
 800db3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db46:	e7f8      	b.n	800db3a <memmove+0x12>
 800db48:	4402      	add	r2, r0
 800db4a:	4601      	mov	r1, r0
 800db4c:	428a      	cmp	r2, r1
 800db4e:	d100      	bne.n	800db52 <memmove+0x2a>
 800db50:	bd10      	pop	{r4, pc}
 800db52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db5a:	e7f7      	b.n	800db4c <memmove+0x24>

0800db5c <strncmp>:
 800db5c:	b510      	push	{r4, lr}
 800db5e:	b16a      	cbz	r2, 800db7c <strncmp+0x20>
 800db60:	3901      	subs	r1, #1
 800db62:	1884      	adds	r4, r0, r2
 800db64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d103      	bne.n	800db78 <strncmp+0x1c>
 800db70:	42a0      	cmp	r0, r4
 800db72:	d001      	beq.n	800db78 <strncmp+0x1c>
 800db74:	2a00      	cmp	r2, #0
 800db76:	d1f5      	bne.n	800db64 <strncmp+0x8>
 800db78:	1ad0      	subs	r0, r2, r3
 800db7a:	bd10      	pop	{r4, pc}
 800db7c:	4610      	mov	r0, r2
 800db7e:	e7fc      	b.n	800db7a <strncmp+0x1e>

0800db80 <_sbrk_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d06      	ldr	r5, [pc, #24]	; (800db9c <_sbrk_r+0x1c>)
 800db84:	2300      	movs	r3, #0
 800db86:	4604      	mov	r4, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	602b      	str	r3, [r5, #0]
 800db8c:	f7f5 ff50 	bl	8003a30 <_sbrk>
 800db90:	1c43      	adds	r3, r0, #1
 800db92:	d102      	bne.n	800db9a <_sbrk_r+0x1a>
 800db94:	682b      	ldr	r3, [r5, #0]
 800db96:	b103      	cbz	r3, 800db9a <_sbrk_r+0x1a>
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	bd38      	pop	{r3, r4, r5, pc}
 800db9c:	200050a4 	.word	0x200050a4

0800dba0 <nan>:
 800dba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dba8 <nan+0x8>
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	00000000 	.word	0x00000000
 800dbac:	7ff80000 	.word	0x7ff80000

0800dbb0 <__assert_func>:
 800dbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbb2:	4614      	mov	r4, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4b09      	ldr	r3, [pc, #36]	; (800dbdc <__assert_func+0x2c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4605      	mov	r5, r0
 800dbbc:	68d8      	ldr	r0, [r3, #12]
 800dbbe:	b14c      	cbz	r4, 800dbd4 <__assert_func+0x24>
 800dbc0:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <__assert_func+0x30>)
 800dbc2:	9100      	str	r1, [sp, #0]
 800dbc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbc8:	4906      	ldr	r1, [pc, #24]	; (800dbe4 <__assert_func+0x34>)
 800dbca:	462b      	mov	r3, r5
 800dbcc:	f000 fbca 	bl	800e364 <fiprintf>
 800dbd0:	f000 fbda 	bl	800e388 <abort>
 800dbd4:	4b04      	ldr	r3, [pc, #16]	; (800dbe8 <__assert_func+0x38>)
 800dbd6:	461c      	mov	r4, r3
 800dbd8:	e7f3      	b.n	800dbc2 <__assert_func+0x12>
 800dbda:	bf00      	nop
 800dbdc:	20000088 	.word	0x20000088
 800dbe0:	08010182 	.word	0x08010182
 800dbe4:	0801018f 	.word	0x0801018f
 800dbe8:	080101bd 	.word	0x080101bd

0800dbec <_calloc_r>:
 800dbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbee:	fba1 2402 	umull	r2, r4, r1, r2
 800dbf2:	b94c      	cbnz	r4, 800dc08 <_calloc_r+0x1c>
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	9201      	str	r2, [sp, #4]
 800dbf8:	f7fe f9c0 	bl	800bf7c <_malloc_r>
 800dbfc:	9a01      	ldr	r2, [sp, #4]
 800dbfe:	4605      	mov	r5, r0
 800dc00:	b930      	cbnz	r0, 800dc10 <_calloc_r+0x24>
 800dc02:	4628      	mov	r0, r5
 800dc04:	b003      	add	sp, #12
 800dc06:	bd30      	pop	{r4, r5, pc}
 800dc08:	220c      	movs	r2, #12
 800dc0a:	6002      	str	r2, [r0, #0]
 800dc0c:	2500      	movs	r5, #0
 800dc0e:	e7f8      	b.n	800dc02 <_calloc_r+0x16>
 800dc10:	4621      	mov	r1, r4
 800dc12:	f7fd fa2e 	bl	800b072 <memset>
 800dc16:	e7f4      	b.n	800dc02 <_calloc_r+0x16>

0800dc18 <rshift>:
 800dc18:	6903      	ldr	r3, [r0, #16]
 800dc1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc26:	f100 0414 	add.w	r4, r0, #20
 800dc2a:	dd45      	ble.n	800dcb8 <rshift+0xa0>
 800dc2c:	f011 011f 	ands.w	r1, r1, #31
 800dc30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc38:	d10c      	bne.n	800dc54 <rshift+0x3c>
 800dc3a:	f100 0710 	add.w	r7, r0, #16
 800dc3e:	4629      	mov	r1, r5
 800dc40:	42b1      	cmp	r1, r6
 800dc42:	d334      	bcc.n	800dcae <rshift+0x96>
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	1eea      	subs	r2, r5, #3
 800dc4a:	4296      	cmp	r6, r2
 800dc4c:	bf38      	it	cc
 800dc4e:	2300      	movcc	r3, #0
 800dc50:	4423      	add	r3, r4
 800dc52:	e015      	b.n	800dc80 <rshift+0x68>
 800dc54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc58:	f1c1 0820 	rsb	r8, r1, #32
 800dc5c:	40cf      	lsrs	r7, r1
 800dc5e:	f105 0e04 	add.w	lr, r5, #4
 800dc62:	46a1      	mov	r9, r4
 800dc64:	4576      	cmp	r6, lr
 800dc66:	46f4      	mov	ip, lr
 800dc68:	d815      	bhi.n	800dc96 <rshift+0x7e>
 800dc6a:	1a9a      	subs	r2, r3, r2
 800dc6c:	0092      	lsls	r2, r2, #2
 800dc6e:	3a04      	subs	r2, #4
 800dc70:	3501      	adds	r5, #1
 800dc72:	42ae      	cmp	r6, r5
 800dc74:	bf38      	it	cc
 800dc76:	2200      	movcc	r2, #0
 800dc78:	18a3      	adds	r3, r4, r2
 800dc7a:	50a7      	str	r7, [r4, r2]
 800dc7c:	b107      	cbz	r7, 800dc80 <rshift+0x68>
 800dc7e:	3304      	adds	r3, #4
 800dc80:	1b1a      	subs	r2, r3, r4
 800dc82:	42a3      	cmp	r3, r4
 800dc84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc88:	bf08      	it	eq
 800dc8a:	2300      	moveq	r3, #0
 800dc8c:	6102      	str	r2, [r0, #16]
 800dc8e:	bf08      	it	eq
 800dc90:	6143      	streq	r3, [r0, #20]
 800dc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc96:	f8dc c000 	ldr.w	ip, [ip]
 800dc9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc9e:	ea4c 0707 	orr.w	r7, ip, r7
 800dca2:	f849 7b04 	str.w	r7, [r9], #4
 800dca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcaa:	40cf      	lsrs	r7, r1
 800dcac:	e7da      	b.n	800dc64 <rshift+0x4c>
 800dcae:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcb2:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcb6:	e7c3      	b.n	800dc40 <rshift+0x28>
 800dcb8:	4623      	mov	r3, r4
 800dcba:	e7e1      	b.n	800dc80 <rshift+0x68>

0800dcbc <__hexdig_fun>:
 800dcbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dcc0:	2b09      	cmp	r3, #9
 800dcc2:	d802      	bhi.n	800dcca <__hexdig_fun+0xe>
 800dcc4:	3820      	subs	r0, #32
 800dcc6:	b2c0      	uxtb	r0, r0
 800dcc8:	4770      	bx	lr
 800dcca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dcce:	2b05      	cmp	r3, #5
 800dcd0:	d801      	bhi.n	800dcd6 <__hexdig_fun+0x1a>
 800dcd2:	3847      	subs	r0, #71	; 0x47
 800dcd4:	e7f7      	b.n	800dcc6 <__hexdig_fun+0xa>
 800dcd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dcda:	2b05      	cmp	r3, #5
 800dcdc:	d801      	bhi.n	800dce2 <__hexdig_fun+0x26>
 800dcde:	3827      	subs	r0, #39	; 0x27
 800dce0:	e7f1      	b.n	800dcc6 <__hexdig_fun+0xa>
 800dce2:	2000      	movs	r0, #0
 800dce4:	4770      	bx	lr
	...

0800dce8 <__gethex>:
 800dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcec:	4617      	mov	r7, r2
 800dcee:	680a      	ldr	r2, [r1, #0]
 800dcf0:	b085      	sub	sp, #20
 800dcf2:	f102 0b02 	add.w	fp, r2, #2
 800dcf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dcfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dcfe:	4681      	mov	r9, r0
 800dd00:	468a      	mov	sl, r1
 800dd02:	9302      	str	r3, [sp, #8]
 800dd04:	32fe      	adds	r2, #254	; 0xfe
 800dd06:	eb02 030b 	add.w	r3, r2, fp
 800dd0a:	46d8      	mov	r8, fp
 800dd0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	2830      	cmp	r0, #48	; 0x30
 800dd14:	d0f7      	beq.n	800dd06 <__gethex+0x1e>
 800dd16:	f7ff ffd1 	bl	800dcbc <__hexdig_fun>
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d138      	bne.n	800dd92 <__gethex+0xaa>
 800dd20:	49a7      	ldr	r1, [pc, #668]	; (800dfc0 <__gethex+0x2d8>)
 800dd22:	2201      	movs	r2, #1
 800dd24:	4640      	mov	r0, r8
 800dd26:	f7ff ff19 	bl	800db5c <strncmp>
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d169      	bne.n	800de04 <__gethex+0x11c>
 800dd30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dd34:	465d      	mov	r5, fp
 800dd36:	f7ff ffc1 	bl	800dcbc <__hexdig_fun>
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d064      	beq.n	800de08 <__gethex+0x120>
 800dd3e:	465a      	mov	r2, fp
 800dd40:	7810      	ldrb	r0, [r2, #0]
 800dd42:	2830      	cmp	r0, #48	; 0x30
 800dd44:	4690      	mov	r8, r2
 800dd46:	f102 0201 	add.w	r2, r2, #1
 800dd4a:	d0f9      	beq.n	800dd40 <__gethex+0x58>
 800dd4c:	f7ff ffb6 	bl	800dcbc <__hexdig_fun>
 800dd50:	2301      	movs	r3, #1
 800dd52:	fab0 f480 	clz	r4, r0
 800dd56:	0964      	lsrs	r4, r4, #5
 800dd58:	465e      	mov	r6, fp
 800dd5a:	9301      	str	r3, [sp, #4]
 800dd5c:	4642      	mov	r2, r8
 800dd5e:	4615      	mov	r5, r2
 800dd60:	3201      	adds	r2, #1
 800dd62:	7828      	ldrb	r0, [r5, #0]
 800dd64:	f7ff ffaa 	bl	800dcbc <__hexdig_fun>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d1f8      	bne.n	800dd5e <__gethex+0x76>
 800dd6c:	4994      	ldr	r1, [pc, #592]	; (800dfc0 <__gethex+0x2d8>)
 800dd6e:	2201      	movs	r2, #1
 800dd70:	4628      	mov	r0, r5
 800dd72:	f7ff fef3 	bl	800db5c <strncmp>
 800dd76:	b978      	cbnz	r0, 800dd98 <__gethex+0xb0>
 800dd78:	b946      	cbnz	r6, 800dd8c <__gethex+0xa4>
 800dd7a:	1c6e      	adds	r6, r5, #1
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	4615      	mov	r5, r2
 800dd80:	3201      	adds	r2, #1
 800dd82:	7828      	ldrb	r0, [r5, #0]
 800dd84:	f7ff ff9a 	bl	800dcbc <__hexdig_fun>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d1f8      	bne.n	800dd7e <__gethex+0x96>
 800dd8c:	1b73      	subs	r3, r6, r5
 800dd8e:	009e      	lsls	r6, r3, #2
 800dd90:	e004      	b.n	800dd9c <__gethex+0xb4>
 800dd92:	2400      	movs	r4, #0
 800dd94:	4626      	mov	r6, r4
 800dd96:	e7e1      	b.n	800dd5c <__gethex+0x74>
 800dd98:	2e00      	cmp	r6, #0
 800dd9a:	d1f7      	bne.n	800dd8c <__gethex+0xa4>
 800dd9c:	782b      	ldrb	r3, [r5, #0]
 800dd9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dda2:	2b50      	cmp	r3, #80	; 0x50
 800dda4:	d13d      	bne.n	800de22 <__gethex+0x13a>
 800dda6:	786b      	ldrb	r3, [r5, #1]
 800dda8:	2b2b      	cmp	r3, #43	; 0x2b
 800ddaa:	d02f      	beq.n	800de0c <__gethex+0x124>
 800ddac:	2b2d      	cmp	r3, #45	; 0x2d
 800ddae:	d031      	beq.n	800de14 <__gethex+0x12c>
 800ddb0:	1c69      	adds	r1, r5, #1
 800ddb2:	f04f 0b00 	mov.w	fp, #0
 800ddb6:	7808      	ldrb	r0, [r1, #0]
 800ddb8:	f7ff ff80 	bl	800dcbc <__hexdig_fun>
 800ddbc:	1e42      	subs	r2, r0, #1
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	2a18      	cmp	r2, #24
 800ddc2:	d82e      	bhi.n	800de22 <__gethex+0x13a>
 800ddc4:	f1a0 0210 	sub.w	r2, r0, #16
 800ddc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddcc:	f7ff ff76 	bl	800dcbc <__hexdig_fun>
 800ddd0:	f100 3cff 	add.w	ip, r0, #4294967295
 800ddd4:	fa5f fc8c 	uxtb.w	ip, ip
 800ddd8:	f1bc 0f18 	cmp.w	ip, #24
 800dddc:	d91d      	bls.n	800de1a <__gethex+0x132>
 800ddde:	f1bb 0f00 	cmp.w	fp, #0
 800dde2:	d000      	beq.n	800dde6 <__gethex+0xfe>
 800dde4:	4252      	negs	r2, r2
 800dde6:	4416      	add	r6, r2
 800dde8:	f8ca 1000 	str.w	r1, [sl]
 800ddec:	b1dc      	cbz	r4, 800de26 <__gethex+0x13e>
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bf14      	ite	ne
 800ddf4:	f04f 0800 	movne.w	r8, #0
 800ddf8:	f04f 0806 	moveq.w	r8, #6
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	b005      	add	sp, #20
 800de00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de04:	4645      	mov	r5, r8
 800de06:	4626      	mov	r6, r4
 800de08:	2401      	movs	r4, #1
 800de0a:	e7c7      	b.n	800dd9c <__gethex+0xb4>
 800de0c:	f04f 0b00 	mov.w	fp, #0
 800de10:	1ca9      	adds	r1, r5, #2
 800de12:	e7d0      	b.n	800ddb6 <__gethex+0xce>
 800de14:	f04f 0b01 	mov.w	fp, #1
 800de18:	e7fa      	b.n	800de10 <__gethex+0x128>
 800de1a:	230a      	movs	r3, #10
 800de1c:	fb03 0002 	mla	r0, r3, r2, r0
 800de20:	e7d0      	b.n	800ddc4 <__gethex+0xdc>
 800de22:	4629      	mov	r1, r5
 800de24:	e7e0      	b.n	800dde8 <__gethex+0x100>
 800de26:	eba5 0308 	sub.w	r3, r5, r8
 800de2a:	3b01      	subs	r3, #1
 800de2c:	4621      	mov	r1, r4
 800de2e:	2b07      	cmp	r3, #7
 800de30:	dc0a      	bgt.n	800de48 <__gethex+0x160>
 800de32:	4648      	mov	r0, r9
 800de34:	f7fe f92e 	bl	800c094 <_Balloc>
 800de38:	4604      	mov	r4, r0
 800de3a:	b940      	cbnz	r0, 800de4e <__gethex+0x166>
 800de3c:	4b61      	ldr	r3, [pc, #388]	; (800dfc4 <__gethex+0x2dc>)
 800de3e:	4602      	mov	r2, r0
 800de40:	21e4      	movs	r1, #228	; 0xe4
 800de42:	4861      	ldr	r0, [pc, #388]	; (800dfc8 <__gethex+0x2e0>)
 800de44:	f7ff feb4 	bl	800dbb0 <__assert_func>
 800de48:	3101      	adds	r1, #1
 800de4a:	105b      	asrs	r3, r3, #1
 800de4c:	e7ef      	b.n	800de2e <__gethex+0x146>
 800de4e:	f100 0a14 	add.w	sl, r0, #20
 800de52:	2300      	movs	r3, #0
 800de54:	495a      	ldr	r1, [pc, #360]	; (800dfc0 <__gethex+0x2d8>)
 800de56:	f8cd a004 	str.w	sl, [sp, #4]
 800de5a:	469b      	mov	fp, r3
 800de5c:	45a8      	cmp	r8, r5
 800de5e:	d342      	bcc.n	800dee6 <__gethex+0x1fe>
 800de60:	9801      	ldr	r0, [sp, #4]
 800de62:	f840 bb04 	str.w	fp, [r0], #4
 800de66:	eba0 000a 	sub.w	r0, r0, sl
 800de6a:	1080      	asrs	r0, r0, #2
 800de6c:	6120      	str	r0, [r4, #16]
 800de6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800de72:	4658      	mov	r0, fp
 800de74:	f7fe fa00 	bl	800c278 <__hi0bits>
 800de78:	683d      	ldr	r5, [r7, #0]
 800de7a:	eba8 0000 	sub.w	r0, r8, r0
 800de7e:	42a8      	cmp	r0, r5
 800de80:	dd59      	ble.n	800df36 <__gethex+0x24e>
 800de82:	eba0 0805 	sub.w	r8, r0, r5
 800de86:	4641      	mov	r1, r8
 800de88:	4620      	mov	r0, r4
 800de8a:	f7fe fd8f 	bl	800c9ac <__any_on>
 800de8e:	4683      	mov	fp, r0
 800de90:	b1b8      	cbz	r0, 800dec2 <__gethex+0x1da>
 800de92:	f108 33ff 	add.w	r3, r8, #4294967295
 800de96:	1159      	asrs	r1, r3, #5
 800de98:	f003 021f 	and.w	r2, r3, #31
 800de9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dea0:	f04f 0b01 	mov.w	fp, #1
 800dea4:	fa0b f202 	lsl.w	r2, fp, r2
 800dea8:	420a      	tst	r2, r1
 800deaa:	d00a      	beq.n	800dec2 <__gethex+0x1da>
 800deac:	455b      	cmp	r3, fp
 800deae:	dd06      	ble.n	800debe <__gethex+0x1d6>
 800deb0:	f1a8 0102 	sub.w	r1, r8, #2
 800deb4:	4620      	mov	r0, r4
 800deb6:	f7fe fd79 	bl	800c9ac <__any_on>
 800deba:	2800      	cmp	r0, #0
 800debc:	d138      	bne.n	800df30 <__gethex+0x248>
 800debe:	f04f 0b02 	mov.w	fp, #2
 800dec2:	4641      	mov	r1, r8
 800dec4:	4620      	mov	r0, r4
 800dec6:	f7ff fea7 	bl	800dc18 <rshift>
 800deca:	4446      	add	r6, r8
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	42b3      	cmp	r3, r6
 800ded0:	da41      	bge.n	800df56 <__gethex+0x26e>
 800ded2:	4621      	mov	r1, r4
 800ded4:	4648      	mov	r0, r9
 800ded6:	f7fe f91d 	bl	800c114 <_Bfree>
 800deda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dedc:	2300      	movs	r3, #0
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dee4:	e78a      	b.n	800ddfc <__gethex+0x114>
 800dee6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800deea:	2a2e      	cmp	r2, #46	; 0x2e
 800deec:	d014      	beq.n	800df18 <__gethex+0x230>
 800deee:	2b20      	cmp	r3, #32
 800def0:	d106      	bne.n	800df00 <__gethex+0x218>
 800def2:	9b01      	ldr	r3, [sp, #4]
 800def4:	f843 bb04 	str.w	fp, [r3], #4
 800def8:	f04f 0b00 	mov.w	fp, #0
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	465b      	mov	r3, fp
 800df00:	7828      	ldrb	r0, [r5, #0]
 800df02:	9303      	str	r3, [sp, #12]
 800df04:	f7ff feda 	bl	800dcbc <__hexdig_fun>
 800df08:	9b03      	ldr	r3, [sp, #12]
 800df0a:	f000 000f 	and.w	r0, r0, #15
 800df0e:	4098      	lsls	r0, r3
 800df10:	ea4b 0b00 	orr.w	fp, fp, r0
 800df14:	3304      	adds	r3, #4
 800df16:	e7a1      	b.n	800de5c <__gethex+0x174>
 800df18:	45a8      	cmp	r8, r5
 800df1a:	d8e8      	bhi.n	800deee <__gethex+0x206>
 800df1c:	2201      	movs	r2, #1
 800df1e:	4628      	mov	r0, r5
 800df20:	9303      	str	r3, [sp, #12]
 800df22:	f7ff fe1b 	bl	800db5c <strncmp>
 800df26:	4926      	ldr	r1, [pc, #152]	; (800dfc0 <__gethex+0x2d8>)
 800df28:	9b03      	ldr	r3, [sp, #12]
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d1df      	bne.n	800deee <__gethex+0x206>
 800df2e:	e795      	b.n	800de5c <__gethex+0x174>
 800df30:	f04f 0b03 	mov.w	fp, #3
 800df34:	e7c5      	b.n	800dec2 <__gethex+0x1da>
 800df36:	da0b      	bge.n	800df50 <__gethex+0x268>
 800df38:	eba5 0800 	sub.w	r8, r5, r0
 800df3c:	4621      	mov	r1, r4
 800df3e:	4642      	mov	r2, r8
 800df40:	4648      	mov	r0, r9
 800df42:	f7fe fb01 	bl	800c548 <__lshift>
 800df46:	eba6 0608 	sub.w	r6, r6, r8
 800df4a:	4604      	mov	r4, r0
 800df4c:	f100 0a14 	add.w	sl, r0, #20
 800df50:	f04f 0b00 	mov.w	fp, #0
 800df54:	e7ba      	b.n	800decc <__gethex+0x1e4>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	42b3      	cmp	r3, r6
 800df5a:	dd73      	ble.n	800e044 <__gethex+0x35c>
 800df5c:	1b9e      	subs	r6, r3, r6
 800df5e:	42b5      	cmp	r5, r6
 800df60:	dc34      	bgt.n	800dfcc <__gethex+0x2e4>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b02      	cmp	r3, #2
 800df66:	d023      	beq.n	800dfb0 <__gethex+0x2c8>
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d025      	beq.n	800dfb8 <__gethex+0x2d0>
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d115      	bne.n	800df9c <__gethex+0x2b4>
 800df70:	42b5      	cmp	r5, r6
 800df72:	d113      	bne.n	800df9c <__gethex+0x2b4>
 800df74:	2d01      	cmp	r5, #1
 800df76:	d10b      	bne.n	800df90 <__gethex+0x2a8>
 800df78:	9a02      	ldr	r2, [sp, #8]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6013      	str	r3, [r2, #0]
 800df7e:	2301      	movs	r3, #1
 800df80:	6123      	str	r3, [r4, #16]
 800df82:	f8ca 3000 	str.w	r3, [sl]
 800df86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800df8c:	601c      	str	r4, [r3, #0]
 800df8e:	e735      	b.n	800ddfc <__gethex+0x114>
 800df90:	1e69      	subs	r1, r5, #1
 800df92:	4620      	mov	r0, r4
 800df94:	f7fe fd0a 	bl	800c9ac <__any_on>
 800df98:	2800      	cmp	r0, #0
 800df9a:	d1ed      	bne.n	800df78 <__gethex+0x290>
 800df9c:	4621      	mov	r1, r4
 800df9e:	4648      	mov	r0, r9
 800dfa0:	f7fe f8b8 	bl	800c114 <_Bfree>
 800dfa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dfae:	e725      	b.n	800ddfc <__gethex+0x114>
 800dfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1f2      	bne.n	800df9c <__gethex+0x2b4>
 800dfb6:	e7df      	b.n	800df78 <__gethex+0x290>
 800dfb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1dc      	bne.n	800df78 <__gethex+0x290>
 800dfbe:	e7ed      	b.n	800df9c <__gethex+0x2b4>
 800dfc0:	08010014 	.word	0x08010014
 800dfc4:	0800fea9 	.word	0x0800fea9
 800dfc8:	080101be 	.word	0x080101be
 800dfcc:	f106 38ff 	add.w	r8, r6, #4294967295
 800dfd0:	f1bb 0f00 	cmp.w	fp, #0
 800dfd4:	d133      	bne.n	800e03e <__gethex+0x356>
 800dfd6:	f1b8 0f00 	cmp.w	r8, #0
 800dfda:	d004      	beq.n	800dfe6 <__gethex+0x2fe>
 800dfdc:	4641      	mov	r1, r8
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f7fe fce4 	bl	800c9ac <__any_on>
 800dfe4:	4683      	mov	fp, r0
 800dfe6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800dfea:	2301      	movs	r3, #1
 800dfec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dff0:	f008 081f 	and.w	r8, r8, #31
 800dff4:	fa03 f308 	lsl.w	r3, r3, r8
 800dff8:	4213      	tst	r3, r2
 800dffa:	4631      	mov	r1, r6
 800dffc:	4620      	mov	r0, r4
 800dffe:	bf18      	it	ne
 800e000:	f04b 0b02 	orrne.w	fp, fp, #2
 800e004:	1bad      	subs	r5, r5, r6
 800e006:	f7ff fe07 	bl	800dc18 <rshift>
 800e00a:	687e      	ldr	r6, [r7, #4]
 800e00c:	f04f 0802 	mov.w	r8, #2
 800e010:	f1bb 0f00 	cmp.w	fp, #0
 800e014:	d04a      	beq.n	800e0ac <__gethex+0x3c4>
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d016      	beq.n	800e04a <__gethex+0x362>
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	d018      	beq.n	800e052 <__gethex+0x36a>
 800e020:	2b01      	cmp	r3, #1
 800e022:	d109      	bne.n	800e038 <__gethex+0x350>
 800e024:	f01b 0f02 	tst.w	fp, #2
 800e028:	d006      	beq.n	800e038 <__gethex+0x350>
 800e02a:	f8da 3000 	ldr.w	r3, [sl]
 800e02e:	ea4b 0b03 	orr.w	fp, fp, r3
 800e032:	f01b 0f01 	tst.w	fp, #1
 800e036:	d10f      	bne.n	800e058 <__gethex+0x370>
 800e038:	f048 0810 	orr.w	r8, r8, #16
 800e03c:	e036      	b.n	800e0ac <__gethex+0x3c4>
 800e03e:	f04f 0b01 	mov.w	fp, #1
 800e042:	e7d0      	b.n	800dfe6 <__gethex+0x2fe>
 800e044:	f04f 0801 	mov.w	r8, #1
 800e048:	e7e2      	b.n	800e010 <__gethex+0x328>
 800e04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e04c:	f1c3 0301 	rsb	r3, r3, #1
 800e050:	930f      	str	r3, [sp, #60]	; 0x3c
 800e052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d0ef      	beq.n	800e038 <__gethex+0x350>
 800e058:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e05c:	f104 0214 	add.w	r2, r4, #20
 800e060:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e06a:	2300      	movs	r3, #0
 800e06c:	4694      	mov	ip, r2
 800e06e:	f852 1b04 	ldr.w	r1, [r2], #4
 800e072:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e076:	d01e      	beq.n	800e0b6 <__gethex+0x3ce>
 800e078:	3101      	adds	r1, #1
 800e07a:	f8cc 1000 	str.w	r1, [ip]
 800e07e:	f1b8 0f02 	cmp.w	r8, #2
 800e082:	f104 0214 	add.w	r2, r4, #20
 800e086:	d13d      	bne.n	800e104 <__gethex+0x41c>
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	42ab      	cmp	r3, r5
 800e08e:	d10b      	bne.n	800e0a8 <__gethex+0x3c0>
 800e090:	1169      	asrs	r1, r5, #5
 800e092:	2301      	movs	r3, #1
 800e094:	f005 051f 	and.w	r5, r5, #31
 800e098:	fa03 f505 	lsl.w	r5, r3, r5
 800e09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0a0:	421d      	tst	r5, r3
 800e0a2:	bf18      	it	ne
 800e0a4:	f04f 0801 	movne.w	r8, #1
 800e0a8:	f048 0820 	orr.w	r8, r8, #32
 800e0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0ae:	601c      	str	r4, [r3, #0]
 800e0b0:	9b02      	ldr	r3, [sp, #8]
 800e0b2:	601e      	str	r6, [r3, #0]
 800e0b4:	e6a2      	b.n	800ddfc <__gethex+0x114>
 800e0b6:	4290      	cmp	r0, r2
 800e0b8:	f842 3c04 	str.w	r3, [r2, #-4]
 800e0bc:	d8d6      	bhi.n	800e06c <__gethex+0x384>
 800e0be:	68a2      	ldr	r2, [r4, #8]
 800e0c0:	4593      	cmp	fp, r2
 800e0c2:	db17      	blt.n	800e0f4 <__gethex+0x40c>
 800e0c4:	6861      	ldr	r1, [r4, #4]
 800e0c6:	4648      	mov	r0, r9
 800e0c8:	3101      	adds	r1, #1
 800e0ca:	f7fd ffe3 	bl	800c094 <_Balloc>
 800e0ce:	4682      	mov	sl, r0
 800e0d0:	b918      	cbnz	r0, 800e0da <__gethex+0x3f2>
 800e0d2:	4b1b      	ldr	r3, [pc, #108]	; (800e140 <__gethex+0x458>)
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	2184      	movs	r1, #132	; 0x84
 800e0d8:	e6b3      	b.n	800de42 <__gethex+0x15a>
 800e0da:	6922      	ldr	r2, [r4, #16]
 800e0dc:	3202      	adds	r2, #2
 800e0de:	f104 010c 	add.w	r1, r4, #12
 800e0e2:	0092      	lsls	r2, r2, #2
 800e0e4:	300c      	adds	r0, #12
 800e0e6:	f7fd f844 	bl	800b172 <memcpy>
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	f7fe f811 	bl	800c114 <_Bfree>
 800e0f2:	4654      	mov	r4, sl
 800e0f4:	6922      	ldr	r2, [r4, #16]
 800e0f6:	1c51      	adds	r1, r2, #1
 800e0f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e0fc:	6121      	str	r1, [r4, #16]
 800e0fe:	2101      	movs	r1, #1
 800e100:	6151      	str	r1, [r2, #20]
 800e102:	e7bc      	b.n	800e07e <__gethex+0x396>
 800e104:	6921      	ldr	r1, [r4, #16]
 800e106:	4559      	cmp	r1, fp
 800e108:	dd0b      	ble.n	800e122 <__gethex+0x43a>
 800e10a:	2101      	movs	r1, #1
 800e10c:	4620      	mov	r0, r4
 800e10e:	f7ff fd83 	bl	800dc18 <rshift>
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	3601      	adds	r6, #1
 800e116:	42b3      	cmp	r3, r6
 800e118:	f6ff aedb 	blt.w	800ded2 <__gethex+0x1ea>
 800e11c:	f04f 0801 	mov.w	r8, #1
 800e120:	e7c2      	b.n	800e0a8 <__gethex+0x3c0>
 800e122:	f015 051f 	ands.w	r5, r5, #31
 800e126:	d0f9      	beq.n	800e11c <__gethex+0x434>
 800e128:	9b01      	ldr	r3, [sp, #4]
 800e12a:	441a      	add	r2, r3
 800e12c:	f1c5 0520 	rsb	r5, r5, #32
 800e130:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e134:	f7fe f8a0 	bl	800c278 <__hi0bits>
 800e138:	42a8      	cmp	r0, r5
 800e13a:	dbe6      	blt.n	800e10a <__gethex+0x422>
 800e13c:	e7ee      	b.n	800e11c <__gethex+0x434>
 800e13e:	bf00      	nop
 800e140:	0800fea9 	.word	0x0800fea9

0800e144 <L_shift>:
 800e144:	f1c2 0208 	rsb	r2, r2, #8
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	b570      	push	{r4, r5, r6, lr}
 800e14c:	f1c2 0620 	rsb	r6, r2, #32
 800e150:	6843      	ldr	r3, [r0, #4]
 800e152:	6804      	ldr	r4, [r0, #0]
 800e154:	fa03 f506 	lsl.w	r5, r3, r6
 800e158:	432c      	orrs	r4, r5
 800e15a:	40d3      	lsrs	r3, r2
 800e15c:	6004      	str	r4, [r0, #0]
 800e15e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e162:	4288      	cmp	r0, r1
 800e164:	d3f4      	bcc.n	800e150 <L_shift+0xc>
 800e166:	bd70      	pop	{r4, r5, r6, pc}

0800e168 <__match>:
 800e168:	b530      	push	{r4, r5, lr}
 800e16a:	6803      	ldr	r3, [r0, #0]
 800e16c:	3301      	adds	r3, #1
 800e16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e172:	b914      	cbnz	r4, 800e17a <__match+0x12>
 800e174:	6003      	str	r3, [r0, #0]
 800e176:	2001      	movs	r0, #1
 800e178:	bd30      	pop	{r4, r5, pc}
 800e17a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e17e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e182:	2d19      	cmp	r5, #25
 800e184:	bf98      	it	ls
 800e186:	3220      	addls	r2, #32
 800e188:	42a2      	cmp	r2, r4
 800e18a:	d0f0      	beq.n	800e16e <__match+0x6>
 800e18c:	2000      	movs	r0, #0
 800e18e:	e7f3      	b.n	800e178 <__match+0x10>

0800e190 <__hexnan>:
 800e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e194:	680b      	ldr	r3, [r1, #0]
 800e196:	6801      	ldr	r1, [r0, #0]
 800e198:	115e      	asrs	r6, r3, #5
 800e19a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e19e:	f013 031f 	ands.w	r3, r3, #31
 800e1a2:	b087      	sub	sp, #28
 800e1a4:	bf18      	it	ne
 800e1a6:	3604      	addne	r6, #4
 800e1a8:	2500      	movs	r5, #0
 800e1aa:	1f37      	subs	r7, r6, #4
 800e1ac:	4682      	mov	sl, r0
 800e1ae:	4690      	mov	r8, r2
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1b6:	46b9      	mov	r9, r7
 800e1b8:	463c      	mov	r4, r7
 800e1ba:	9502      	str	r5, [sp, #8]
 800e1bc:	46ab      	mov	fp, r5
 800e1be:	784a      	ldrb	r2, [r1, #1]
 800e1c0:	1c4b      	adds	r3, r1, #1
 800e1c2:	9303      	str	r3, [sp, #12]
 800e1c4:	b342      	cbz	r2, 800e218 <__hexnan+0x88>
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	9105      	str	r1, [sp, #20]
 800e1ca:	9204      	str	r2, [sp, #16]
 800e1cc:	f7ff fd76 	bl	800dcbc <__hexdig_fun>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d14f      	bne.n	800e274 <__hexnan+0xe4>
 800e1d4:	9a04      	ldr	r2, [sp, #16]
 800e1d6:	9905      	ldr	r1, [sp, #20]
 800e1d8:	2a20      	cmp	r2, #32
 800e1da:	d818      	bhi.n	800e20e <__hexnan+0x7e>
 800e1dc:	9b02      	ldr	r3, [sp, #8]
 800e1de:	459b      	cmp	fp, r3
 800e1e0:	dd13      	ble.n	800e20a <__hexnan+0x7a>
 800e1e2:	454c      	cmp	r4, r9
 800e1e4:	d206      	bcs.n	800e1f4 <__hexnan+0x64>
 800e1e6:	2d07      	cmp	r5, #7
 800e1e8:	dc04      	bgt.n	800e1f4 <__hexnan+0x64>
 800e1ea:	462a      	mov	r2, r5
 800e1ec:	4649      	mov	r1, r9
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f7ff ffa8 	bl	800e144 <L_shift>
 800e1f4:	4544      	cmp	r4, r8
 800e1f6:	d950      	bls.n	800e29a <__hexnan+0x10a>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f1a4 0904 	sub.w	r9, r4, #4
 800e1fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800e202:	f8cd b008 	str.w	fp, [sp, #8]
 800e206:	464c      	mov	r4, r9
 800e208:	461d      	mov	r5, r3
 800e20a:	9903      	ldr	r1, [sp, #12]
 800e20c:	e7d7      	b.n	800e1be <__hexnan+0x2e>
 800e20e:	2a29      	cmp	r2, #41	; 0x29
 800e210:	d155      	bne.n	800e2be <__hexnan+0x12e>
 800e212:	3102      	adds	r1, #2
 800e214:	f8ca 1000 	str.w	r1, [sl]
 800e218:	f1bb 0f00 	cmp.w	fp, #0
 800e21c:	d04f      	beq.n	800e2be <__hexnan+0x12e>
 800e21e:	454c      	cmp	r4, r9
 800e220:	d206      	bcs.n	800e230 <__hexnan+0xa0>
 800e222:	2d07      	cmp	r5, #7
 800e224:	dc04      	bgt.n	800e230 <__hexnan+0xa0>
 800e226:	462a      	mov	r2, r5
 800e228:	4649      	mov	r1, r9
 800e22a:	4620      	mov	r0, r4
 800e22c:	f7ff ff8a 	bl	800e144 <L_shift>
 800e230:	4544      	cmp	r4, r8
 800e232:	d934      	bls.n	800e29e <__hexnan+0x10e>
 800e234:	f1a8 0204 	sub.w	r2, r8, #4
 800e238:	4623      	mov	r3, r4
 800e23a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e23e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e242:	429f      	cmp	r7, r3
 800e244:	d2f9      	bcs.n	800e23a <__hexnan+0xaa>
 800e246:	1b3b      	subs	r3, r7, r4
 800e248:	f023 0303 	bic.w	r3, r3, #3
 800e24c:	3304      	adds	r3, #4
 800e24e:	3e03      	subs	r6, #3
 800e250:	3401      	adds	r4, #1
 800e252:	42a6      	cmp	r6, r4
 800e254:	bf38      	it	cc
 800e256:	2304      	movcc	r3, #4
 800e258:	4443      	add	r3, r8
 800e25a:	2200      	movs	r2, #0
 800e25c:	f843 2b04 	str.w	r2, [r3], #4
 800e260:	429f      	cmp	r7, r3
 800e262:	d2fb      	bcs.n	800e25c <__hexnan+0xcc>
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	b91b      	cbnz	r3, 800e270 <__hexnan+0xe0>
 800e268:	4547      	cmp	r7, r8
 800e26a:	d126      	bne.n	800e2ba <__hexnan+0x12a>
 800e26c:	2301      	movs	r3, #1
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	2005      	movs	r0, #5
 800e272:	e025      	b.n	800e2c0 <__hexnan+0x130>
 800e274:	3501      	adds	r5, #1
 800e276:	2d08      	cmp	r5, #8
 800e278:	f10b 0b01 	add.w	fp, fp, #1
 800e27c:	dd06      	ble.n	800e28c <__hexnan+0xfc>
 800e27e:	4544      	cmp	r4, r8
 800e280:	d9c3      	bls.n	800e20a <__hexnan+0x7a>
 800e282:	2300      	movs	r3, #0
 800e284:	f844 3c04 	str.w	r3, [r4, #-4]
 800e288:	2501      	movs	r5, #1
 800e28a:	3c04      	subs	r4, #4
 800e28c:	6822      	ldr	r2, [r4, #0]
 800e28e:	f000 000f 	and.w	r0, r0, #15
 800e292:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e296:	6020      	str	r0, [r4, #0]
 800e298:	e7b7      	b.n	800e20a <__hexnan+0x7a>
 800e29a:	2508      	movs	r5, #8
 800e29c:	e7b5      	b.n	800e20a <__hexnan+0x7a>
 800e29e:	9b01      	ldr	r3, [sp, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d0df      	beq.n	800e264 <__hexnan+0xd4>
 800e2a4:	f1c3 0320 	rsb	r3, r3, #32
 800e2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ac:	40da      	lsrs	r2, r3
 800e2ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800e2b8:	e7d4      	b.n	800e264 <__hexnan+0xd4>
 800e2ba:	3f04      	subs	r7, #4
 800e2bc:	e7d2      	b.n	800e264 <__hexnan+0xd4>
 800e2be:	2004      	movs	r0, #4
 800e2c0:	b007      	add	sp, #28
 800e2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2c6 <__ascii_mbtowc>:
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	b901      	cbnz	r1, 800e2cc <__ascii_mbtowc+0x6>
 800e2ca:	a901      	add	r1, sp, #4
 800e2cc:	b142      	cbz	r2, 800e2e0 <__ascii_mbtowc+0x1a>
 800e2ce:	b14b      	cbz	r3, 800e2e4 <__ascii_mbtowc+0x1e>
 800e2d0:	7813      	ldrb	r3, [r2, #0]
 800e2d2:	600b      	str	r3, [r1, #0]
 800e2d4:	7812      	ldrb	r2, [r2, #0]
 800e2d6:	1e10      	subs	r0, r2, #0
 800e2d8:	bf18      	it	ne
 800e2da:	2001      	movne	r0, #1
 800e2dc:	b002      	add	sp, #8
 800e2de:	4770      	bx	lr
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	e7fb      	b.n	800e2dc <__ascii_mbtowc+0x16>
 800e2e4:	f06f 0001 	mvn.w	r0, #1
 800e2e8:	e7f8      	b.n	800e2dc <__ascii_mbtowc+0x16>

0800e2ea <_realloc_r>:
 800e2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	460e      	mov	r6, r1
 800e2f4:	b921      	cbnz	r1, 800e300 <_realloc_r+0x16>
 800e2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	f7fd be3e 	b.w	800bf7c <_malloc_r>
 800e300:	b92a      	cbnz	r2, 800e30e <_realloc_r+0x24>
 800e302:	f7fd fdc7 	bl	800be94 <_free_r>
 800e306:	4625      	mov	r5, r4
 800e308:	4628      	mov	r0, r5
 800e30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30e:	f000 f842 	bl	800e396 <_malloc_usable_size_r>
 800e312:	4284      	cmp	r4, r0
 800e314:	4607      	mov	r7, r0
 800e316:	d802      	bhi.n	800e31e <_realloc_r+0x34>
 800e318:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e31c:	d812      	bhi.n	800e344 <_realloc_r+0x5a>
 800e31e:	4621      	mov	r1, r4
 800e320:	4640      	mov	r0, r8
 800e322:	f7fd fe2b 	bl	800bf7c <_malloc_r>
 800e326:	4605      	mov	r5, r0
 800e328:	2800      	cmp	r0, #0
 800e32a:	d0ed      	beq.n	800e308 <_realloc_r+0x1e>
 800e32c:	42bc      	cmp	r4, r7
 800e32e:	4622      	mov	r2, r4
 800e330:	4631      	mov	r1, r6
 800e332:	bf28      	it	cs
 800e334:	463a      	movcs	r2, r7
 800e336:	f7fc ff1c 	bl	800b172 <memcpy>
 800e33a:	4631      	mov	r1, r6
 800e33c:	4640      	mov	r0, r8
 800e33e:	f7fd fda9 	bl	800be94 <_free_r>
 800e342:	e7e1      	b.n	800e308 <_realloc_r+0x1e>
 800e344:	4635      	mov	r5, r6
 800e346:	e7df      	b.n	800e308 <_realloc_r+0x1e>

0800e348 <__ascii_wctomb>:
 800e348:	b149      	cbz	r1, 800e35e <__ascii_wctomb+0x16>
 800e34a:	2aff      	cmp	r2, #255	; 0xff
 800e34c:	bf85      	ittet	hi
 800e34e:	238a      	movhi	r3, #138	; 0x8a
 800e350:	6003      	strhi	r3, [r0, #0]
 800e352:	700a      	strbls	r2, [r1, #0]
 800e354:	f04f 30ff 	movhi.w	r0, #4294967295
 800e358:	bf98      	it	ls
 800e35a:	2001      	movls	r0, #1
 800e35c:	4770      	bx	lr
 800e35e:	4608      	mov	r0, r1
 800e360:	4770      	bx	lr
	...

0800e364 <fiprintf>:
 800e364:	b40e      	push	{r1, r2, r3}
 800e366:	b503      	push	{r0, r1, lr}
 800e368:	4601      	mov	r1, r0
 800e36a:	ab03      	add	r3, sp, #12
 800e36c:	4805      	ldr	r0, [pc, #20]	; (800e384 <fiprintf+0x20>)
 800e36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e372:	6800      	ldr	r0, [r0, #0]
 800e374:	9301      	str	r3, [sp, #4]
 800e376:	f000 f83f 	bl	800e3f8 <_vfiprintf_r>
 800e37a:	b002      	add	sp, #8
 800e37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e380:	b003      	add	sp, #12
 800e382:	4770      	bx	lr
 800e384:	20000088 	.word	0x20000088

0800e388 <abort>:
 800e388:	b508      	push	{r3, lr}
 800e38a:	2006      	movs	r0, #6
 800e38c:	f000 fa0c 	bl	800e7a8 <raise>
 800e390:	2001      	movs	r0, #1
 800e392:	f7f5 fad5 	bl	8003940 <_exit>

0800e396 <_malloc_usable_size_r>:
 800e396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e39a:	1f18      	subs	r0, r3, #4
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bfbc      	itt	lt
 800e3a0:	580b      	ldrlt	r3, [r1, r0]
 800e3a2:	18c0      	addlt	r0, r0, r3
 800e3a4:	4770      	bx	lr

0800e3a6 <__sfputc_r>:
 800e3a6:	6893      	ldr	r3, [r2, #8]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	b410      	push	{r4}
 800e3ae:	6093      	str	r3, [r2, #8]
 800e3b0:	da08      	bge.n	800e3c4 <__sfputc_r+0x1e>
 800e3b2:	6994      	ldr	r4, [r2, #24]
 800e3b4:	42a3      	cmp	r3, r4
 800e3b6:	db01      	blt.n	800e3bc <__sfputc_r+0x16>
 800e3b8:	290a      	cmp	r1, #10
 800e3ba:	d103      	bne.n	800e3c4 <__sfputc_r+0x1e>
 800e3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c0:	f000 b934 	b.w	800e62c <__swbuf_r>
 800e3c4:	6813      	ldr	r3, [r2, #0]
 800e3c6:	1c58      	adds	r0, r3, #1
 800e3c8:	6010      	str	r0, [r2, #0]
 800e3ca:	7019      	strb	r1, [r3, #0]
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <__sfputs_r>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	460f      	mov	r7, r1
 800e3da:	4614      	mov	r4, r2
 800e3dc:	18d5      	adds	r5, r2, r3
 800e3de:	42ac      	cmp	r4, r5
 800e3e0:	d101      	bne.n	800e3e6 <__sfputs_r+0x12>
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	e007      	b.n	800e3f6 <__sfputs_r+0x22>
 800e3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ea:	463a      	mov	r2, r7
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff ffda 	bl	800e3a6 <__sfputc_r>
 800e3f2:	1c43      	adds	r3, r0, #1
 800e3f4:	d1f3      	bne.n	800e3de <__sfputs_r+0xa>
 800e3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3f8 <_vfiprintf_r>:
 800e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	460d      	mov	r5, r1
 800e3fe:	b09d      	sub	sp, #116	; 0x74
 800e400:	4614      	mov	r4, r2
 800e402:	4698      	mov	r8, r3
 800e404:	4606      	mov	r6, r0
 800e406:	b118      	cbz	r0, 800e410 <_vfiprintf_r+0x18>
 800e408:	6a03      	ldr	r3, [r0, #32]
 800e40a:	b90b      	cbnz	r3, 800e410 <_vfiprintf_r+0x18>
 800e40c:	f7fc fd98 	bl	800af40 <__sinit>
 800e410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e412:	07d9      	lsls	r1, r3, #31
 800e414:	d405      	bmi.n	800e422 <_vfiprintf_r+0x2a>
 800e416:	89ab      	ldrh	r3, [r5, #12]
 800e418:	059a      	lsls	r2, r3, #22
 800e41a:	d402      	bmi.n	800e422 <_vfiprintf_r+0x2a>
 800e41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e41e:	f7fc fea6 	bl	800b16e <__retarget_lock_acquire_recursive>
 800e422:	89ab      	ldrh	r3, [r5, #12]
 800e424:	071b      	lsls	r3, r3, #28
 800e426:	d501      	bpl.n	800e42c <_vfiprintf_r+0x34>
 800e428:	692b      	ldr	r3, [r5, #16]
 800e42a:	b99b      	cbnz	r3, 800e454 <_vfiprintf_r+0x5c>
 800e42c:	4629      	mov	r1, r5
 800e42e:	4630      	mov	r0, r6
 800e430:	f000 f93a 	bl	800e6a8 <__swsetup_r>
 800e434:	b170      	cbz	r0, 800e454 <_vfiprintf_r+0x5c>
 800e436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e438:	07dc      	lsls	r4, r3, #31
 800e43a:	d504      	bpl.n	800e446 <_vfiprintf_r+0x4e>
 800e43c:	f04f 30ff 	mov.w	r0, #4294967295
 800e440:	b01d      	add	sp, #116	; 0x74
 800e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e446:	89ab      	ldrh	r3, [r5, #12]
 800e448:	0598      	lsls	r0, r3, #22
 800e44a:	d4f7      	bmi.n	800e43c <_vfiprintf_r+0x44>
 800e44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e44e:	f7fc fe8f 	bl	800b170 <__retarget_lock_release_recursive>
 800e452:	e7f3      	b.n	800e43c <_vfiprintf_r+0x44>
 800e454:	2300      	movs	r3, #0
 800e456:	9309      	str	r3, [sp, #36]	; 0x24
 800e458:	2320      	movs	r3, #32
 800e45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e462:	2330      	movs	r3, #48	; 0x30
 800e464:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e618 <_vfiprintf_r+0x220>
 800e468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e46c:	f04f 0901 	mov.w	r9, #1
 800e470:	4623      	mov	r3, r4
 800e472:	469a      	mov	sl, r3
 800e474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e478:	b10a      	cbz	r2, 800e47e <_vfiprintf_r+0x86>
 800e47a:	2a25      	cmp	r2, #37	; 0x25
 800e47c:	d1f9      	bne.n	800e472 <_vfiprintf_r+0x7a>
 800e47e:	ebba 0b04 	subs.w	fp, sl, r4
 800e482:	d00b      	beq.n	800e49c <_vfiprintf_r+0xa4>
 800e484:	465b      	mov	r3, fp
 800e486:	4622      	mov	r2, r4
 800e488:	4629      	mov	r1, r5
 800e48a:	4630      	mov	r0, r6
 800e48c:	f7ff ffa2 	bl	800e3d4 <__sfputs_r>
 800e490:	3001      	adds	r0, #1
 800e492:	f000 80a9 	beq.w	800e5e8 <_vfiprintf_r+0x1f0>
 800e496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e498:	445a      	add	r2, fp
 800e49a:	9209      	str	r2, [sp, #36]	; 0x24
 800e49c:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f000 80a1 	beq.w	800e5e8 <_vfiprintf_r+0x1f0>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4b0:	f10a 0a01 	add.w	sl, sl, #1
 800e4b4:	9304      	str	r3, [sp, #16]
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800e4be:	4654      	mov	r4, sl
 800e4c0:	2205      	movs	r2, #5
 800e4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c6:	4854      	ldr	r0, [pc, #336]	; (800e618 <_vfiprintf_r+0x220>)
 800e4c8:	f7f1 fe82 	bl	80001d0 <memchr>
 800e4cc:	9a04      	ldr	r2, [sp, #16]
 800e4ce:	b9d8      	cbnz	r0, 800e508 <_vfiprintf_r+0x110>
 800e4d0:	06d1      	lsls	r1, r2, #27
 800e4d2:	bf44      	itt	mi
 800e4d4:	2320      	movmi	r3, #32
 800e4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4da:	0713      	lsls	r3, r2, #28
 800e4dc:	bf44      	itt	mi
 800e4de:	232b      	movmi	r3, #43	; 0x2b
 800e4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ea:	d015      	beq.n	800e518 <_vfiprintf_r+0x120>
 800e4ec:	9a07      	ldr	r2, [sp, #28]
 800e4ee:	4654      	mov	r4, sl
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	f04f 0c0a 	mov.w	ip, #10
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4fc:	3b30      	subs	r3, #48	; 0x30
 800e4fe:	2b09      	cmp	r3, #9
 800e500:	d94d      	bls.n	800e59e <_vfiprintf_r+0x1a6>
 800e502:	b1b0      	cbz	r0, 800e532 <_vfiprintf_r+0x13a>
 800e504:	9207      	str	r2, [sp, #28]
 800e506:	e014      	b.n	800e532 <_vfiprintf_r+0x13a>
 800e508:	eba0 0308 	sub.w	r3, r0, r8
 800e50c:	fa09 f303 	lsl.w	r3, r9, r3
 800e510:	4313      	orrs	r3, r2
 800e512:	9304      	str	r3, [sp, #16]
 800e514:	46a2      	mov	sl, r4
 800e516:	e7d2      	b.n	800e4be <_vfiprintf_r+0xc6>
 800e518:	9b03      	ldr	r3, [sp, #12]
 800e51a:	1d19      	adds	r1, r3, #4
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	9103      	str	r1, [sp, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	bfbb      	ittet	lt
 800e524:	425b      	neglt	r3, r3
 800e526:	f042 0202 	orrlt.w	r2, r2, #2
 800e52a:	9307      	strge	r3, [sp, #28]
 800e52c:	9307      	strlt	r3, [sp, #28]
 800e52e:	bfb8      	it	lt
 800e530:	9204      	strlt	r2, [sp, #16]
 800e532:	7823      	ldrb	r3, [r4, #0]
 800e534:	2b2e      	cmp	r3, #46	; 0x2e
 800e536:	d10c      	bne.n	800e552 <_vfiprintf_r+0x15a>
 800e538:	7863      	ldrb	r3, [r4, #1]
 800e53a:	2b2a      	cmp	r3, #42	; 0x2a
 800e53c:	d134      	bne.n	800e5a8 <_vfiprintf_r+0x1b0>
 800e53e:	9b03      	ldr	r3, [sp, #12]
 800e540:	1d1a      	adds	r2, r3, #4
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	9203      	str	r2, [sp, #12]
 800e546:	2b00      	cmp	r3, #0
 800e548:	bfb8      	it	lt
 800e54a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e54e:	3402      	adds	r4, #2
 800e550:	9305      	str	r3, [sp, #20]
 800e552:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e628 <_vfiprintf_r+0x230>
 800e556:	7821      	ldrb	r1, [r4, #0]
 800e558:	2203      	movs	r2, #3
 800e55a:	4650      	mov	r0, sl
 800e55c:	f7f1 fe38 	bl	80001d0 <memchr>
 800e560:	b138      	cbz	r0, 800e572 <_vfiprintf_r+0x17a>
 800e562:	9b04      	ldr	r3, [sp, #16]
 800e564:	eba0 000a 	sub.w	r0, r0, sl
 800e568:	2240      	movs	r2, #64	; 0x40
 800e56a:	4082      	lsls	r2, r0
 800e56c:	4313      	orrs	r3, r2
 800e56e:	3401      	adds	r4, #1
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e576:	4829      	ldr	r0, [pc, #164]	; (800e61c <_vfiprintf_r+0x224>)
 800e578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e57c:	2206      	movs	r2, #6
 800e57e:	f7f1 fe27 	bl	80001d0 <memchr>
 800e582:	2800      	cmp	r0, #0
 800e584:	d03f      	beq.n	800e606 <_vfiprintf_r+0x20e>
 800e586:	4b26      	ldr	r3, [pc, #152]	; (800e620 <_vfiprintf_r+0x228>)
 800e588:	bb1b      	cbnz	r3, 800e5d2 <_vfiprintf_r+0x1da>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	3307      	adds	r3, #7
 800e58e:	f023 0307 	bic.w	r3, r3, #7
 800e592:	3308      	adds	r3, #8
 800e594:	9303      	str	r3, [sp, #12]
 800e596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e598:	443b      	add	r3, r7
 800e59a:	9309      	str	r3, [sp, #36]	; 0x24
 800e59c:	e768      	b.n	800e470 <_vfiprintf_r+0x78>
 800e59e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	e7a6      	b.n	800e4f6 <_vfiprintf_r+0xfe>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	3401      	adds	r4, #1
 800e5ac:	9305      	str	r3, [sp, #20]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	f04f 0c0a 	mov.w	ip, #10
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ba:	3a30      	subs	r2, #48	; 0x30
 800e5bc:	2a09      	cmp	r2, #9
 800e5be:	d903      	bls.n	800e5c8 <_vfiprintf_r+0x1d0>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0c6      	beq.n	800e552 <_vfiprintf_r+0x15a>
 800e5c4:	9105      	str	r1, [sp, #20]
 800e5c6:	e7c4      	b.n	800e552 <_vfiprintf_r+0x15a>
 800e5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7f0      	b.n	800e5b4 <_vfiprintf_r+0x1bc>
 800e5d2:	ab03      	add	r3, sp, #12
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4b12      	ldr	r3, [pc, #72]	; (800e624 <_vfiprintf_r+0x22c>)
 800e5da:	a904      	add	r1, sp, #16
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7fb fe4d 	bl	800a27c <_printf_float>
 800e5e2:	4607      	mov	r7, r0
 800e5e4:	1c78      	adds	r0, r7, #1
 800e5e6:	d1d6      	bne.n	800e596 <_vfiprintf_r+0x19e>
 800e5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5ea:	07d9      	lsls	r1, r3, #31
 800e5ec:	d405      	bmi.n	800e5fa <_vfiprintf_r+0x202>
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	059a      	lsls	r2, r3, #22
 800e5f2:	d402      	bmi.n	800e5fa <_vfiprintf_r+0x202>
 800e5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5f6:	f7fc fdbb 	bl	800b170 <__retarget_lock_release_recursive>
 800e5fa:	89ab      	ldrh	r3, [r5, #12]
 800e5fc:	065b      	lsls	r3, r3, #25
 800e5fe:	f53f af1d 	bmi.w	800e43c <_vfiprintf_r+0x44>
 800e602:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e604:	e71c      	b.n	800e440 <_vfiprintf_r+0x48>
 800e606:	ab03      	add	r3, sp, #12
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	462a      	mov	r2, r5
 800e60c:	4b05      	ldr	r3, [pc, #20]	; (800e624 <_vfiprintf_r+0x22c>)
 800e60e:	a904      	add	r1, sp, #16
 800e610:	4630      	mov	r0, r6
 800e612:	f7fc f8d7 	bl	800a7c4 <_printf_i>
 800e616:	e7e4      	b.n	800e5e2 <_vfiprintf_r+0x1ea>
 800e618:	08010169 	.word	0x08010169
 800e61c:	08010173 	.word	0x08010173
 800e620:	0800a27d 	.word	0x0800a27d
 800e624:	0800e3d5 	.word	0x0800e3d5
 800e628:	0801016f 	.word	0x0801016f

0800e62c <__swbuf_r>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	460e      	mov	r6, r1
 800e630:	4614      	mov	r4, r2
 800e632:	4605      	mov	r5, r0
 800e634:	b118      	cbz	r0, 800e63e <__swbuf_r+0x12>
 800e636:	6a03      	ldr	r3, [r0, #32]
 800e638:	b90b      	cbnz	r3, 800e63e <__swbuf_r+0x12>
 800e63a:	f7fc fc81 	bl	800af40 <__sinit>
 800e63e:	69a3      	ldr	r3, [r4, #24]
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	071a      	lsls	r2, r3, #28
 800e646:	d525      	bpl.n	800e694 <__swbuf_r+0x68>
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	b31b      	cbz	r3, 800e694 <__swbuf_r+0x68>
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	6922      	ldr	r2, [r4, #16]
 800e650:	1a98      	subs	r0, r3, r2
 800e652:	6963      	ldr	r3, [r4, #20]
 800e654:	b2f6      	uxtb	r6, r6
 800e656:	4283      	cmp	r3, r0
 800e658:	4637      	mov	r7, r6
 800e65a:	dc04      	bgt.n	800e666 <__swbuf_r+0x3a>
 800e65c:	4621      	mov	r1, r4
 800e65e:	4628      	mov	r0, r5
 800e660:	f7ff fa3a 	bl	800dad8 <_fflush_r>
 800e664:	b9e0      	cbnz	r0, 800e6a0 <__swbuf_r+0x74>
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	3b01      	subs	r3, #1
 800e66a:	60a3      	str	r3, [r4, #8]
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	6022      	str	r2, [r4, #0]
 800e672:	701e      	strb	r6, [r3, #0]
 800e674:	6962      	ldr	r2, [r4, #20]
 800e676:	1c43      	adds	r3, r0, #1
 800e678:	429a      	cmp	r2, r3
 800e67a:	d004      	beq.n	800e686 <__swbuf_r+0x5a>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	07db      	lsls	r3, r3, #31
 800e680:	d506      	bpl.n	800e690 <__swbuf_r+0x64>
 800e682:	2e0a      	cmp	r6, #10
 800e684:	d104      	bne.n	800e690 <__swbuf_r+0x64>
 800e686:	4621      	mov	r1, r4
 800e688:	4628      	mov	r0, r5
 800e68a:	f7ff fa25 	bl	800dad8 <_fflush_r>
 800e68e:	b938      	cbnz	r0, 800e6a0 <__swbuf_r+0x74>
 800e690:	4638      	mov	r0, r7
 800e692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e694:	4621      	mov	r1, r4
 800e696:	4628      	mov	r0, r5
 800e698:	f000 f806 	bl	800e6a8 <__swsetup_r>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d0d5      	beq.n	800e64c <__swbuf_r+0x20>
 800e6a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e6a4:	e7f4      	b.n	800e690 <__swbuf_r+0x64>
	...

0800e6a8 <__swsetup_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4b2a      	ldr	r3, [pc, #168]	; (800e754 <__swsetup_r+0xac>)
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	6818      	ldr	r0, [r3, #0]
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	b118      	cbz	r0, 800e6bc <__swsetup_r+0x14>
 800e6b4:	6a03      	ldr	r3, [r0, #32]
 800e6b6:	b90b      	cbnz	r3, 800e6bc <__swsetup_r+0x14>
 800e6b8:	f7fc fc42 	bl	800af40 <__sinit>
 800e6bc:	89a3      	ldrh	r3, [r4, #12]
 800e6be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6c2:	0718      	lsls	r0, r3, #28
 800e6c4:	d422      	bmi.n	800e70c <__swsetup_r+0x64>
 800e6c6:	06d9      	lsls	r1, r3, #27
 800e6c8:	d407      	bmi.n	800e6da <__swsetup_r+0x32>
 800e6ca:	2309      	movs	r3, #9
 800e6cc:	602b      	str	r3, [r5, #0]
 800e6ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6d2:	81a3      	strh	r3, [r4, #12]
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	e034      	b.n	800e744 <__swsetup_r+0x9c>
 800e6da:	0758      	lsls	r0, r3, #29
 800e6dc:	d512      	bpl.n	800e704 <__swsetup_r+0x5c>
 800e6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6e0:	b141      	cbz	r1, 800e6f4 <__swsetup_r+0x4c>
 800e6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6e6:	4299      	cmp	r1, r3
 800e6e8:	d002      	beq.n	800e6f0 <__swsetup_r+0x48>
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	f7fd fbd2 	bl	800be94 <_free_r>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	6363      	str	r3, [r4, #52]	; 0x34
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	6063      	str	r3, [r4, #4]
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	6023      	str	r3, [r4, #0]
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	f043 0308 	orr.w	r3, r3, #8
 800e70a:	81a3      	strh	r3, [r4, #12]
 800e70c:	6923      	ldr	r3, [r4, #16]
 800e70e:	b94b      	cbnz	r3, 800e724 <__swsetup_r+0x7c>
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e71a:	d003      	beq.n	800e724 <__swsetup_r+0x7c>
 800e71c:	4621      	mov	r1, r4
 800e71e:	4628      	mov	r0, r5
 800e720:	f000 f884 	bl	800e82c <__smakebuf_r>
 800e724:	89a0      	ldrh	r0, [r4, #12]
 800e726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e72a:	f010 0301 	ands.w	r3, r0, #1
 800e72e:	d00a      	beq.n	800e746 <__swsetup_r+0x9e>
 800e730:	2300      	movs	r3, #0
 800e732:	60a3      	str	r3, [r4, #8]
 800e734:	6963      	ldr	r3, [r4, #20]
 800e736:	425b      	negs	r3, r3
 800e738:	61a3      	str	r3, [r4, #24]
 800e73a:	6923      	ldr	r3, [r4, #16]
 800e73c:	b943      	cbnz	r3, 800e750 <__swsetup_r+0xa8>
 800e73e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e742:	d1c4      	bne.n	800e6ce <__swsetup_r+0x26>
 800e744:	bd38      	pop	{r3, r4, r5, pc}
 800e746:	0781      	lsls	r1, r0, #30
 800e748:	bf58      	it	pl
 800e74a:	6963      	ldrpl	r3, [r4, #20]
 800e74c:	60a3      	str	r3, [r4, #8]
 800e74e:	e7f4      	b.n	800e73a <__swsetup_r+0x92>
 800e750:	2000      	movs	r0, #0
 800e752:	e7f7      	b.n	800e744 <__swsetup_r+0x9c>
 800e754:	20000088 	.word	0x20000088

0800e758 <_raise_r>:
 800e758:	291f      	cmp	r1, #31
 800e75a:	b538      	push	{r3, r4, r5, lr}
 800e75c:	4604      	mov	r4, r0
 800e75e:	460d      	mov	r5, r1
 800e760:	d904      	bls.n	800e76c <_raise_r+0x14>
 800e762:	2316      	movs	r3, #22
 800e764:	6003      	str	r3, [r0, #0]
 800e766:	f04f 30ff 	mov.w	r0, #4294967295
 800e76a:	bd38      	pop	{r3, r4, r5, pc}
 800e76c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e76e:	b112      	cbz	r2, 800e776 <_raise_r+0x1e>
 800e770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e774:	b94b      	cbnz	r3, 800e78a <_raise_r+0x32>
 800e776:	4620      	mov	r0, r4
 800e778:	f000 f830 	bl	800e7dc <_getpid_r>
 800e77c:	462a      	mov	r2, r5
 800e77e:	4601      	mov	r1, r0
 800e780:	4620      	mov	r0, r4
 800e782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e786:	f000 b817 	b.w	800e7b8 <_kill_r>
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d00a      	beq.n	800e7a4 <_raise_r+0x4c>
 800e78e:	1c59      	adds	r1, r3, #1
 800e790:	d103      	bne.n	800e79a <_raise_r+0x42>
 800e792:	2316      	movs	r3, #22
 800e794:	6003      	str	r3, [r0, #0]
 800e796:	2001      	movs	r0, #1
 800e798:	e7e7      	b.n	800e76a <_raise_r+0x12>
 800e79a:	2400      	movs	r4, #0
 800e79c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	4798      	blx	r3
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	e7e0      	b.n	800e76a <_raise_r+0x12>

0800e7a8 <raise>:
 800e7a8:	4b02      	ldr	r3, [pc, #8]	; (800e7b4 <raise+0xc>)
 800e7aa:	4601      	mov	r1, r0
 800e7ac:	6818      	ldr	r0, [r3, #0]
 800e7ae:	f7ff bfd3 	b.w	800e758 <_raise_r>
 800e7b2:	bf00      	nop
 800e7b4:	20000088 	.word	0x20000088

0800e7b8 <_kill_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	4d07      	ldr	r5, [pc, #28]	; (800e7d8 <_kill_r+0x20>)
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	4608      	mov	r0, r1
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	602b      	str	r3, [r5, #0]
 800e7c6:	f7f5 f8ab 	bl	8003920 <_kill>
 800e7ca:	1c43      	adds	r3, r0, #1
 800e7cc:	d102      	bne.n	800e7d4 <_kill_r+0x1c>
 800e7ce:	682b      	ldr	r3, [r5, #0]
 800e7d0:	b103      	cbz	r3, 800e7d4 <_kill_r+0x1c>
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	bd38      	pop	{r3, r4, r5, pc}
 800e7d6:	bf00      	nop
 800e7d8:	200050a4 	.word	0x200050a4

0800e7dc <_getpid_r>:
 800e7dc:	f7f5 b898 	b.w	8003910 <_getpid>

0800e7e0 <__swhatbuf_r>:
 800e7e0:	b570      	push	{r4, r5, r6, lr}
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e8:	2900      	cmp	r1, #0
 800e7ea:	b096      	sub	sp, #88	; 0x58
 800e7ec:	4615      	mov	r5, r2
 800e7ee:	461e      	mov	r6, r3
 800e7f0:	da0d      	bge.n	800e80e <__swhatbuf_r+0x2e>
 800e7f2:	89a3      	ldrh	r3, [r4, #12]
 800e7f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7f8:	f04f 0100 	mov.w	r1, #0
 800e7fc:	bf0c      	ite	eq
 800e7fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e802:	2340      	movne	r3, #64	; 0x40
 800e804:	2000      	movs	r0, #0
 800e806:	6031      	str	r1, [r6, #0]
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	b016      	add	sp, #88	; 0x58
 800e80c:	bd70      	pop	{r4, r5, r6, pc}
 800e80e:	466a      	mov	r2, sp
 800e810:	f000 f848 	bl	800e8a4 <_fstat_r>
 800e814:	2800      	cmp	r0, #0
 800e816:	dbec      	blt.n	800e7f2 <__swhatbuf_r+0x12>
 800e818:	9901      	ldr	r1, [sp, #4]
 800e81a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e81e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e822:	4259      	negs	r1, r3
 800e824:	4159      	adcs	r1, r3
 800e826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e82a:	e7eb      	b.n	800e804 <__swhatbuf_r+0x24>

0800e82c <__smakebuf_r>:
 800e82c:	898b      	ldrh	r3, [r1, #12]
 800e82e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e830:	079d      	lsls	r5, r3, #30
 800e832:	4606      	mov	r6, r0
 800e834:	460c      	mov	r4, r1
 800e836:	d507      	bpl.n	800e848 <__smakebuf_r+0x1c>
 800e838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	6123      	str	r3, [r4, #16]
 800e840:	2301      	movs	r3, #1
 800e842:	6163      	str	r3, [r4, #20]
 800e844:	b002      	add	sp, #8
 800e846:	bd70      	pop	{r4, r5, r6, pc}
 800e848:	ab01      	add	r3, sp, #4
 800e84a:	466a      	mov	r2, sp
 800e84c:	f7ff ffc8 	bl	800e7e0 <__swhatbuf_r>
 800e850:	9900      	ldr	r1, [sp, #0]
 800e852:	4605      	mov	r5, r0
 800e854:	4630      	mov	r0, r6
 800e856:	f7fd fb91 	bl	800bf7c <_malloc_r>
 800e85a:	b948      	cbnz	r0, 800e870 <__smakebuf_r+0x44>
 800e85c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e860:	059a      	lsls	r2, r3, #22
 800e862:	d4ef      	bmi.n	800e844 <__smakebuf_r+0x18>
 800e864:	f023 0303 	bic.w	r3, r3, #3
 800e868:	f043 0302 	orr.w	r3, r3, #2
 800e86c:	81a3      	strh	r3, [r4, #12]
 800e86e:	e7e3      	b.n	800e838 <__smakebuf_r+0xc>
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	6020      	str	r0, [r4, #0]
 800e874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	9b00      	ldr	r3, [sp, #0]
 800e87c:	6163      	str	r3, [r4, #20]
 800e87e:	9b01      	ldr	r3, [sp, #4]
 800e880:	6120      	str	r0, [r4, #16]
 800e882:	b15b      	cbz	r3, 800e89c <__smakebuf_r+0x70>
 800e884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e888:	4630      	mov	r0, r6
 800e88a:	f000 f81d 	bl	800e8c8 <_isatty_r>
 800e88e:	b128      	cbz	r0, 800e89c <__smakebuf_r+0x70>
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	f023 0303 	bic.w	r3, r3, #3
 800e896:	f043 0301 	orr.w	r3, r3, #1
 800e89a:	81a3      	strh	r3, [r4, #12]
 800e89c:	89a3      	ldrh	r3, [r4, #12]
 800e89e:	431d      	orrs	r5, r3
 800e8a0:	81a5      	strh	r5, [r4, #12]
 800e8a2:	e7cf      	b.n	800e844 <__smakebuf_r+0x18>

0800e8a4 <_fstat_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d07      	ldr	r5, [pc, #28]	; (800e8c4 <_fstat_r+0x20>)
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	4608      	mov	r0, r1
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	602b      	str	r3, [r5, #0]
 800e8b2:	f7f5 f894 	bl	80039de <_fstat>
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	d102      	bne.n	800e8c0 <_fstat_r+0x1c>
 800e8ba:	682b      	ldr	r3, [r5, #0]
 800e8bc:	b103      	cbz	r3, 800e8c0 <_fstat_r+0x1c>
 800e8be:	6023      	str	r3, [r4, #0]
 800e8c0:	bd38      	pop	{r3, r4, r5, pc}
 800e8c2:	bf00      	nop
 800e8c4:	200050a4 	.word	0x200050a4

0800e8c8 <_isatty_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4d06      	ldr	r5, [pc, #24]	; (800e8e4 <_isatty_r+0x1c>)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	602b      	str	r3, [r5, #0]
 800e8d4:	f7f5 f893 	bl	80039fe <_isatty>
 800e8d8:	1c43      	adds	r3, r0, #1
 800e8da:	d102      	bne.n	800e8e2 <_isatty_r+0x1a>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	b103      	cbz	r3, 800e8e2 <_isatty_r+0x1a>
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	200050a4 	.word	0x200050a4

0800e8e8 <atan>:
 800e8e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	ec55 4b10 	vmov	r4, r5, d0
 800e8f0:	4bc3      	ldr	r3, [pc, #780]	; (800ec00 <atan+0x318>)
 800e8f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e8f6:	429e      	cmp	r6, r3
 800e8f8:	46ab      	mov	fp, r5
 800e8fa:	dd18      	ble.n	800e92e <atan+0x46>
 800e8fc:	4bc1      	ldr	r3, [pc, #772]	; (800ec04 <atan+0x31c>)
 800e8fe:	429e      	cmp	r6, r3
 800e900:	dc01      	bgt.n	800e906 <atan+0x1e>
 800e902:	d109      	bne.n	800e918 <atan+0x30>
 800e904:	b144      	cbz	r4, 800e918 <atan+0x30>
 800e906:	4622      	mov	r2, r4
 800e908:	462b      	mov	r3, r5
 800e90a:	4620      	mov	r0, r4
 800e90c:	4629      	mov	r1, r5
 800e90e:	f7f1 fcbd 	bl	800028c <__adddf3>
 800e912:	4604      	mov	r4, r0
 800e914:	460d      	mov	r5, r1
 800e916:	e006      	b.n	800e926 <atan+0x3e>
 800e918:	f1bb 0f00 	cmp.w	fp, #0
 800e91c:	f300 8131 	bgt.w	800eb82 <atan+0x29a>
 800e920:	a59b      	add	r5, pc, #620	; (adr r5, 800eb90 <atan+0x2a8>)
 800e922:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e926:	ec45 4b10 	vmov	d0, r4, r5
 800e92a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92e:	4bb6      	ldr	r3, [pc, #728]	; (800ec08 <atan+0x320>)
 800e930:	429e      	cmp	r6, r3
 800e932:	dc14      	bgt.n	800e95e <atan+0x76>
 800e934:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e938:	429e      	cmp	r6, r3
 800e93a:	dc0d      	bgt.n	800e958 <atan+0x70>
 800e93c:	a396      	add	r3, pc, #600	; (adr r3, 800eb98 <atan+0x2b0>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	ee10 0a10 	vmov	r0, s0
 800e946:	4629      	mov	r1, r5
 800e948:	f7f1 fca0 	bl	800028c <__adddf3>
 800e94c:	4baf      	ldr	r3, [pc, #700]	; (800ec0c <atan+0x324>)
 800e94e:	2200      	movs	r2, #0
 800e950:	f7f2 f8e2 	bl	8000b18 <__aeabi_dcmpgt>
 800e954:	2800      	cmp	r0, #0
 800e956:	d1e6      	bne.n	800e926 <atan+0x3e>
 800e958:	f04f 3aff 	mov.w	sl, #4294967295
 800e95c:	e02b      	b.n	800e9b6 <atan+0xce>
 800e95e:	f000 f9b7 	bl	800ecd0 <fabs>
 800e962:	4bab      	ldr	r3, [pc, #684]	; (800ec10 <atan+0x328>)
 800e964:	429e      	cmp	r6, r3
 800e966:	ec55 4b10 	vmov	r4, r5, d0
 800e96a:	f300 80bf 	bgt.w	800eaec <atan+0x204>
 800e96e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e972:	429e      	cmp	r6, r3
 800e974:	f300 80a0 	bgt.w	800eab8 <atan+0x1d0>
 800e978:	ee10 2a10 	vmov	r2, s0
 800e97c:	ee10 0a10 	vmov	r0, s0
 800e980:	462b      	mov	r3, r5
 800e982:	4629      	mov	r1, r5
 800e984:	f7f1 fc82 	bl	800028c <__adddf3>
 800e988:	4ba0      	ldr	r3, [pc, #640]	; (800ec0c <atan+0x324>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	f7f1 fc7c 	bl	8000288 <__aeabi_dsub>
 800e990:	2200      	movs	r2, #0
 800e992:	4606      	mov	r6, r0
 800e994:	460f      	mov	r7, r1
 800e996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e99a:	4620      	mov	r0, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	f7f1 fc75 	bl	800028c <__adddf3>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f1 ff4f 	bl	800084c <__aeabi_ddiv>
 800e9ae:	f04f 0a00 	mov.w	sl, #0
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	4622      	mov	r2, r4
 800e9b8:	462b      	mov	r3, r5
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4629      	mov	r1, r5
 800e9be:	f7f1 fe1b 	bl	80005f8 <__aeabi_dmul>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4680      	mov	r8, r0
 800e9c8:	4689      	mov	r9, r1
 800e9ca:	f7f1 fe15 	bl	80005f8 <__aeabi_dmul>
 800e9ce:	a374      	add	r3, pc, #464	; (adr r3, 800eba0 <atan+0x2b8>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	460f      	mov	r7, r1
 800e9d8:	f7f1 fe0e 	bl	80005f8 <__aeabi_dmul>
 800e9dc:	a372      	add	r3, pc, #456	; (adr r3, 800eba8 <atan+0x2c0>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f7f1 fc53 	bl	800028c <__adddf3>
 800e9e6:	4632      	mov	r2, r6
 800e9e8:	463b      	mov	r3, r7
 800e9ea:	f7f1 fe05 	bl	80005f8 <__aeabi_dmul>
 800e9ee:	a370      	add	r3, pc, #448	; (adr r3, 800ebb0 <atan+0x2c8>)
 800e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f4:	f7f1 fc4a 	bl	800028c <__adddf3>
 800e9f8:	4632      	mov	r2, r6
 800e9fa:	463b      	mov	r3, r7
 800e9fc:	f7f1 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ea00:	a36d      	add	r3, pc, #436	; (adr r3, 800ebb8 <atan+0x2d0>)
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	f7f1 fc41 	bl	800028c <__adddf3>
 800ea0a:	4632      	mov	r2, r6
 800ea0c:	463b      	mov	r3, r7
 800ea0e:	f7f1 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ea12:	a36b      	add	r3, pc, #428	; (adr r3, 800ebc0 <atan+0x2d8>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	f7f1 fc38 	bl	800028c <__adddf3>
 800ea1c:	4632      	mov	r2, r6
 800ea1e:	463b      	mov	r3, r7
 800ea20:	f7f1 fdea 	bl	80005f8 <__aeabi_dmul>
 800ea24:	a368      	add	r3, pc, #416	; (adr r3, 800ebc8 <atan+0x2e0>)
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	f7f1 fc2f 	bl	800028c <__adddf3>
 800ea2e:	4642      	mov	r2, r8
 800ea30:	464b      	mov	r3, r9
 800ea32:	f7f1 fde1 	bl	80005f8 <__aeabi_dmul>
 800ea36:	a366      	add	r3, pc, #408	; (adr r3, 800ebd0 <atan+0x2e8>)
 800ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3c:	4680      	mov	r8, r0
 800ea3e:	4689      	mov	r9, r1
 800ea40:	4630      	mov	r0, r6
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f1 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ea48:	a363      	add	r3, pc, #396	; (adr r3, 800ebd8 <atan+0x2f0>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	f7f1 fc1b 	bl	8000288 <__aeabi_dsub>
 800ea52:	4632      	mov	r2, r6
 800ea54:	463b      	mov	r3, r7
 800ea56:	f7f1 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ea5a:	a361      	add	r3, pc, #388	; (adr r3, 800ebe0 <atan+0x2f8>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f7f1 fc12 	bl	8000288 <__aeabi_dsub>
 800ea64:	4632      	mov	r2, r6
 800ea66:	463b      	mov	r3, r7
 800ea68:	f7f1 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ea6c:	a35e      	add	r3, pc, #376	; (adr r3, 800ebe8 <atan+0x300>)
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	f7f1 fc09 	bl	8000288 <__aeabi_dsub>
 800ea76:	4632      	mov	r2, r6
 800ea78:	463b      	mov	r3, r7
 800ea7a:	f7f1 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ea7e:	a35c      	add	r3, pc, #368	; (adr r3, 800ebf0 <atan+0x308>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	f7f1 fc00 	bl	8000288 <__aeabi_dsub>
 800ea88:	4632      	mov	r2, r6
 800ea8a:	463b      	mov	r3, r7
 800ea8c:	f7f1 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4640      	mov	r0, r8
 800ea96:	4649      	mov	r1, r9
 800ea98:	f7f1 fbf8 	bl	800028c <__adddf3>
 800ea9c:	4622      	mov	r2, r4
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	f7f1 fdaa 	bl	80005f8 <__aeabi_dmul>
 800eaa4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	d14b      	bne.n	800eb46 <atan+0x25e>
 800eaae:	4620      	mov	r0, r4
 800eab0:	4629      	mov	r1, r5
 800eab2:	f7f1 fbe9 	bl	8000288 <__aeabi_dsub>
 800eab6:	e72c      	b.n	800e912 <atan+0x2a>
 800eab8:	ee10 0a10 	vmov	r0, s0
 800eabc:	4b53      	ldr	r3, [pc, #332]	; (800ec0c <atan+0x324>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	4629      	mov	r1, r5
 800eac2:	f7f1 fbe1 	bl	8000288 <__aeabi_dsub>
 800eac6:	4b51      	ldr	r3, [pc, #324]	; (800ec0c <atan+0x324>)
 800eac8:	4606      	mov	r6, r0
 800eaca:	460f      	mov	r7, r1
 800eacc:	2200      	movs	r2, #0
 800eace:	4620      	mov	r0, r4
 800ead0:	4629      	mov	r1, r5
 800ead2:	f7f1 fbdb 	bl	800028c <__adddf3>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4630      	mov	r0, r6
 800eadc:	4639      	mov	r1, r7
 800eade:	f7f1 feb5 	bl	800084c <__aeabi_ddiv>
 800eae2:	f04f 0a01 	mov.w	sl, #1
 800eae6:	4604      	mov	r4, r0
 800eae8:	460d      	mov	r5, r1
 800eaea:	e764      	b.n	800e9b6 <atan+0xce>
 800eaec:	4b49      	ldr	r3, [pc, #292]	; (800ec14 <atan+0x32c>)
 800eaee:	429e      	cmp	r6, r3
 800eaf0:	da1d      	bge.n	800eb2e <atan+0x246>
 800eaf2:	ee10 0a10 	vmov	r0, s0
 800eaf6:	4b48      	ldr	r3, [pc, #288]	; (800ec18 <atan+0x330>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4629      	mov	r1, r5
 800eafc:	f7f1 fbc4 	bl	8000288 <__aeabi_dsub>
 800eb00:	4b45      	ldr	r3, [pc, #276]	; (800ec18 <atan+0x330>)
 800eb02:	4606      	mov	r6, r0
 800eb04:	460f      	mov	r7, r1
 800eb06:	2200      	movs	r2, #0
 800eb08:	4620      	mov	r0, r4
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	f7f1 fd74 	bl	80005f8 <__aeabi_dmul>
 800eb10:	4b3e      	ldr	r3, [pc, #248]	; (800ec0c <atan+0x324>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	f7f1 fbba 	bl	800028c <__adddf3>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	4639      	mov	r1, r7
 800eb20:	f7f1 fe94 	bl	800084c <__aeabi_ddiv>
 800eb24:	f04f 0a02 	mov.w	sl, #2
 800eb28:	4604      	mov	r4, r0
 800eb2a:	460d      	mov	r5, r1
 800eb2c:	e743      	b.n	800e9b6 <atan+0xce>
 800eb2e:	462b      	mov	r3, r5
 800eb30:	ee10 2a10 	vmov	r2, s0
 800eb34:	4939      	ldr	r1, [pc, #228]	; (800ec1c <atan+0x334>)
 800eb36:	2000      	movs	r0, #0
 800eb38:	f7f1 fe88 	bl	800084c <__aeabi_ddiv>
 800eb3c:	f04f 0a03 	mov.w	sl, #3
 800eb40:	4604      	mov	r4, r0
 800eb42:	460d      	mov	r5, r1
 800eb44:	e737      	b.n	800e9b6 <atan+0xce>
 800eb46:	4b36      	ldr	r3, [pc, #216]	; (800ec20 <atan+0x338>)
 800eb48:	4e36      	ldr	r6, [pc, #216]	; (800ec24 <atan+0x33c>)
 800eb4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	f7f1 fb99 	bl	8000288 <__aeabi_dsub>
 800eb56:	4622      	mov	r2, r4
 800eb58:	462b      	mov	r3, r5
 800eb5a:	f7f1 fb95 	bl	8000288 <__aeabi_dsub>
 800eb5e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eb6a:	f7f1 fb8d 	bl	8000288 <__aeabi_dsub>
 800eb6e:	f1bb 0f00 	cmp.w	fp, #0
 800eb72:	4604      	mov	r4, r0
 800eb74:	460d      	mov	r5, r1
 800eb76:	f6bf aed6 	bge.w	800e926 <atan+0x3e>
 800eb7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb7e:	461d      	mov	r5, r3
 800eb80:	e6d1      	b.n	800e926 <atan+0x3e>
 800eb82:	a51d      	add	r5, pc, #116	; (adr r5, 800ebf8 <atan+0x310>)
 800eb84:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eb88:	e6cd      	b.n	800e926 <atan+0x3e>
 800eb8a:	bf00      	nop
 800eb8c:	f3af 8000 	nop.w
 800eb90:	54442d18 	.word	0x54442d18
 800eb94:	bff921fb 	.word	0xbff921fb
 800eb98:	8800759c 	.word	0x8800759c
 800eb9c:	7e37e43c 	.word	0x7e37e43c
 800eba0:	e322da11 	.word	0xe322da11
 800eba4:	3f90ad3a 	.word	0x3f90ad3a
 800eba8:	24760deb 	.word	0x24760deb
 800ebac:	3fa97b4b 	.word	0x3fa97b4b
 800ebb0:	a0d03d51 	.word	0xa0d03d51
 800ebb4:	3fb10d66 	.word	0x3fb10d66
 800ebb8:	c54c206e 	.word	0xc54c206e
 800ebbc:	3fb745cd 	.word	0x3fb745cd
 800ebc0:	920083ff 	.word	0x920083ff
 800ebc4:	3fc24924 	.word	0x3fc24924
 800ebc8:	5555550d 	.word	0x5555550d
 800ebcc:	3fd55555 	.word	0x3fd55555
 800ebd0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ebd4:	bfa2b444 	.word	0xbfa2b444
 800ebd8:	52defd9a 	.word	0x52defd9a
 800ebdc:	3fadde2d 	.word	0x3fadde2d
 800ebe0:	af749a6d 	.word	0xaf749a6d
 800ebe4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ebe8:	fe231671 	.word	0xfe231671
 800ebec:	3fbc71c6 	.word	0x3fbc71c6
 800ebf0:	9998ebc4 	.word	0x9998ebc4
 800ebf4:	3fc99999 	.word	0x3fc99999
 800ebf8:	54442d18 	.word	0x54442d18
 800ebfc:	3ff921fb 	.word	0x3ff921fb
 800ec00:	440fffff 	.word	0x440fffff
 800ec04:	7ff00000 	.word	0x7ff00000
 800ec08:	3fdbffff 	.word	0x3fdbffff
 800ec0c:	3ff00000 	.word	0x3ff00000
 800ec10:	3ff2ffff 	.word	0x3ff2ffff
 800ec14:	40038000 	.word	0x40038000
 800ec18:	3ff80000 	.word	0x3ff80000
 800ec1c:	bff00000 	.word	0xbff00000
 800ec20:	08010240 	.word	0x08010240
 800ec24:	08010220 	.word	0x08010220

0800ec28 <cos>:
 800ec28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec2a:	ec53 2b10 	vmov	r2, r3, d0
 800ec2e:	4826      	ldr	r0, [pc, #152]	; (800ecc8 <cos+0xa0>)
 800ec30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec34:	4281      	cmp	r1, r0
 800ec36:	dc06      	bgt.n	800ec46 <cos+0x1e>
 800ec38:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ecc0 <cos+0x98>
 800ec3c:	b005      	add	sp, #20
 800ec3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec42:	f000 b929 	b.w	800ee98 <__kernel_cos>
 800ec46:	4821      	ldr	r0, [pc, #132]	; (800eccc <cos+0xa4>)
 800ec48:	4281      	cmp	r1, r0
 800ec4a:	dd09      	ble.n	800ec60 <cos+0x38>
 800ec4c:	ee10 0a10 	vmov	r0, s0
 800ec50:	4619      	mov	r1, r3
 800ec52:	f7f1 fb19 	bl	8000288 <__aeabi_dsub>
 800ec56:	ec41 0b10 	vmov	d0, r0, r1
 800ec5a:	b005      	add	sp, #20
 800ec5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec60:	4668      	mov	r0, sp
 800ec62:	f000 faa1 	bl	800f1a8 <__ieee754_rem_pio2>
 800ec66:	f000 0003 	and.w	r0, r0, #3
 800ec6a:	2801      	cmp	r0, #1
 800ec6c:	d00b      	beq.n	800ec86 <cos+0x5e>
 800ec6e:	2802      	cmp	r0, #2
 800ec70:	d016      	beq.n	800eca0 <cos+0x78>
 800ec72:	b9e0      	cbnz	r0, 800ecae <cos+0x86>
 800ec74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec78:	ed9d 0b00 	vldr	d0, [sp]
 800ec7c:	f000 f90c 	bl	800ee98 <__kernel_cos>
 800ec80:	ec51 0b10 	vmov	r0, r1, d0
 800ec84:	e7e7      	b.n	800ec56 <cos+0x2e>
 800ec86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec8a:	ed9d 0b00 	vldr	d0, [sp]
 800ec8e:	f000 f9cb 	bl	800f028 <__kernel_sin>
 800ec92:	ec53 2b10 	vmov	r2, r3, d0
 800ec96:	ee10 0a10 	vmov	r0, s0
 800ec9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ec9e:	e7da      	b.n	800ec56 <cos+0x2e>
 800eca0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eca4:	ed9d 0b00 	vldr	d0, [sp]
 800eca8:	f000 f8f6 	bl	800ee98 <__kernel_cos>
 800ecac:	e7f1      	b.n	800ec92 <cos+0x6a>
 800ecae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ecb2:	ed9d 0b00 	vldr	d0, [sp]
 800ecb6:	2001      	movs	r0, #1
 800ecb8:	f000 f9b6 	bl	800f028 <__kernel_sin>
 800ecbc:	e7e0      	b.n	800ec80 <cos+0x58>
 800ecbe:	bf00      	nop
	...
 800ecc8:	3fe921fb 	.word	0x3fe921fb
 800eccc:	7fefffff 	.word	0x7fefffff

0800ecd0 <fabs>:
 800ecd0:	ec51 0b10 	vmov	r0, r1, d0
 800ecd4:	ee10 2a10 	vmov	r2, s0
 800ecd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ecdc:	ec43 2b10 	vmov	d0, r2, r3
 800ece0:	4770      	bx	lr
 800ece2:	0000      	movs	r0, r0
 800ece4:	0000      	movs	r0, r0
	...

0800ece8 <sin>:
 800ece8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecea:	ec53 2b10 	vmov	r2, r3, d0
 800ecee:	4828      	ldr	r0, [pc, #160]	; (800ed90 <sin+0xa8>)
 800ecf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ecf4:	4281      	cmp	r1, r0
 800ecf6:	dc07      	bgt.n	800ed08 <sin+0x20>
 800ecf8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ed88 <sin+0xa0>
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	b005      	add	sp, #20
 800ed00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed04:	f000 b990 	b.w	800f028 <__kernel_sin>
 800ed08:	4822      	ldr	r0, [pc, #136]	; (800ed94 <sin+0xac>)
 800ed0a:	4281      	cmp	r1, r0
 800ed0c:	dd09      	ble.n	800ed22 <sin+0x3a>
 800ed0e:	ee10 0a10 	vmov	r0, s0
 800ed12:	4619      	mov	r1, r3
 800ed14:	f7f1 fab8 	bl	8000288 <__aeabi_dsub>
 800ed18:	ec41 0b10 	vmov	d0, r0, r1
 800ed1c:	b005      	add	sp, #20
 800ed1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed22:	4668      	mov	r0, sp
 800ed24:	f000 fa40 	bl	800f1a8 <__ieee754_rem_pio2>
 800ed28:	f000 0003 	and.w	r0, r0, #3
 800ed2c:	2801      	cmp	r0, #1
 800ed2e:	d00c      	beq.n	800ed4a <sin+0x62>
 800ed30:	2802      	cmp	r0, #2
 800ed32:	d011      	beq.n	800ed58 <sin+0x70>
 800ed34:	b9f0      	cbnz	r0, 800ed74 <sin+0x8c>
 800ed36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed3a:	ed9d 0b00 	vldr	d0, [sp]
 800ed3e:	2001      	movs	r0, #1
 800ed40:	f000 f972 	bl	800f028 <__kernel_sin>
 800ed44:	ec51 0b10 	vmov	r0, r1, d0
 800ed48:	e7e6      	b.n	800ed18 <sin+0x30>
 800ed4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed4e:	ed9d 0b00 	vldr	d0, [sp]
 800ed52:	f000 f8a1 	bl	800ee98 <__kernel_cos>
 800ed56:	e7f5      	b.n	800ed44 <sin+0x5c>
 800ed58:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed5c:	ed9d 0b00 	vldr	d0, [sp]
 800ed60:	2001      	movs	r0, #1
 800ed62:	f000 f961 	bl	800f028 <__kernel_sin>
 800ed66:	ec53 2b10 	vmov	r2, r3, d0
 800ed6a:	ee10 0a10 	vmov	r0, s0
 800ed6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ed72:	e7d1      	b.n	800ed18 <sin+0x30>
 800ed74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ed78:	ed9d 0b00 	vldr	d0, [sp]
 800ed7c:	f000 f88c 	bl	800ee98 <__kernel_cos>
 800ed80:	e7f1      	b.n	800ed66 <sin+0x7e>
 800ed82:	bf00      	nop
 800ed84:	f3af 8000 	nop.w
	...
 800ed90:	3fe921fb 	.word	0x3fe921fb
 800ed94:	7fefffff 	.word	0x7fefffff

0800ed98 <floor>:
 800ed98:	ec51 0b10 	vmov	r0, r1, d0
 800ed9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800eda8:	2e13      	cmp	r6, #19
 800edaa:	ee10 5a10 	vmov	r5, s0
 800edae:	ee10 8a10 	vmov	r8, s0
 800edb2:	460c      	mov	r4, r1
 800edb4:	dc31      	bgt.n	800ee1a <floor+0x82>
 800edb6:	2e00      	cmp	r6, #0
 800edb8:	da14      	bge.n	800ede4 <floor+0x4c>
 800edba:	a333      	add	r3, pc, #204	; (adr r3, 800ee88 <floor+0xf0>)
 800edbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc0:	f7f1 fa64 	bl	800028c <__adddf3>
 800edc4:	2200      	movs	r2, #0
 800edc6:	2300      	movs	r3, #0
 800edc8:	f7f1 fea6 	bl	8000b18 <__aeabi_dcmpgt>
 800edcc:	b138      	cbz	r0, 800edde <floor+0x46>
 800edce:	2c00      	cmp	r4, #0
 800edd0:	da53      	bge.n	800ee7a <floor+0xe2>
 800edd2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800edd6:	4325      	orrs	r5, r4
 800edd8:	d052      	beq.n	800ee80 <floor+0xe8>
 800edda:	4c2d      	ldr	r4, [pc, #180]	; (800ee90 <floor+0xf8>)
 800eddc:	2500      	movs	r5, #0
 800edde:	4621      	mov	r1, r4
 800ede0:	4628      	mov	r0, r5
 800ede2:	e024      	b.n	800ee2e <floor+0x96>
 800ede4:	4f2b      	ldr	r7, [pc, #172]	; (800ee94 <floor+0xfc>)
 800ede6:	4137      	asrs	r7, r6
 800ede8:	ea01 0307 	and.w	r3, r1, r7
 800edec:	4303      	orrs	r3, r0
 800edee:	d01e      	beq.n	800ee2e <floor+0x96>
 800edf0:	a325      	add	r3, pc, #148	; (adr r3, 800ee88 <floor+0xf0>)
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	f7f1 fa49 	bl	800028c <__adddf3>
 800edfa:	2200      	movs	r2, #0
 800edfc:	2300      	movs	r3, #0
 800edfe:	f7f1 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d0eb      	beq.n	800edde <floor+0x46>
 800ee06:	2c00      	cmp	r4, #0
 800ee08:	bfbe      	ittt	lt
 800ee0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ee0e:	4133      	asrlt	r3, r6
 800ee10:	18e4      	addlt	r4, r4, r3
 800ee12:	ea24 0407 	bic.w	r4, r4, r7
 800ee16:	2500      	movs	r5, #0
 800ee18:	e7e1      	b.n	800edde <floor+0x46>
 800ee1a:	2e33      	cmp	r6, #51	; 0x33
 800ee1c:	dd0b      	ble.n	800ee36 <floor+0x9e>
 800ee1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee22:	d104      	bne.n	800ee2e <floor+0x96>
 800ee24:	ee10 2a10 	vmov	r2, s0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	f7f1 fa2f 	bl	800028c <__adddf3>
 800ee2e:	ec41 0b10 	vmov	d0, r0, r1
 800ee32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee36:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ee3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ee3e:	40df      	lsrs	r7, r3
 800ee40:	4238      	tst	r0, r7
 800ee42:	d0f4      	beq.n	800ee2e <floor+0x96>
 800ee44:	a310      	add	r3, pc, #64	; (adr r3, 800ee88 <floor+0xf0>)
 800ee46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4a:	f7f1 fa1f 	bl	800028c <__adddf3>
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2300      	movs	r3, #0
 800ee52:	f7f1 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d0c1      	beq.n	800edde <floor+0x46>
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	da0a      	bge.n	800ee74 <floor+0xdc>
 800ee5e:	2e14      	cmp	r6, #20
 800ee60:	d101      	bne.n	800ee66 <floor+0xce>
 800ee62:	3401      	adds	r4, #1
 800ee64:	e006      	b.n	800ee74 <floor+0xdc>
 800ee66:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	40b3      	lsls	r3, r6
 800ee6e:	441d      	add	r5, r3
 800ee70:	45a8      	cmp	r8, r5
 800ee72:	d8f6      	bhi.n	800ee62 <floor+0xca>
 800ee74:	ea25 0507 	bic.w	r5, r5, r7
 800ee78:	e7b1      	b.n	800edde <floor+0x46>
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	462c      	mov	r4, r5
 800ee7e:	e7ae      	b.n	800edde <floor+0x46>
 800ee80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ee84:	e7ab      	b.n	800edde <floor+0x46>
 800ee86:	bf00      	nop
 800ee88:	8800759c 	.word	0x8800759c
 800ee8c:	7e37e43c 	.word	0x7e37e43c
 800ee90:	bff00000 	.word	0xbff00000
 800ee94:	000fffff 	.word	0x000fffff

0800ee98 <__kernel_cos>:
 800ee98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	ec57 6b10 	vmov	r6, r7, d0
 800eea0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eea4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800eea8:	ed8d 1b00 	vstr	d1, [sp]
 800eeac:	da07      	bge.n	800eebe <__kernel_cos+0x26>
 800eeae:	ee10 0a10 	vmov	r0, s0
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	f7f1 fe50 	bl	8000b58 <__aeabi_d2iz>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	f000 8088 	beq.w	800efce <__kernel_cos+0x136>
 800eebe:	4632      	mov	r2, r6
 800eec0:	463b      	mov	r3, r7
 800eec2:	4630      	mov	r0, r6
 800eec4:	4639      	mov	r1, r7
 800eec6:	f7f1 fb97 	bl	80005f8 <__aeabi_dmul>
 800eeca:	4b51      	ldr	r3, [pc, #324]	; (800f010 <__kernel_cos+0x178>)
 800eecc:	2200      	movs	r2, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	460d      	mov	r5, r1
 800eed2:	f7f1 fb91 	bl	80005f8 <__aeabi_dmul>
 800eed6:	a340      	add	r3, pc, #256	; (adr r3, 800efd8 <__kernel_cos+0x140>)
 800eed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eedc:	4682      	mov	sl, r0
 800eede:	468b      	mov	fp, r1
 800eee0:	4620      	mov	r0, r4
 800eee2:	4629      	mov	r1, r5
 800eee4:	f7f1 fb88 	bl	80005f8 <__aeabi_dmul>
 800eee8:	a33d      	add	r3, pc, #244	; (adr r3, 800efe0 <__kernel_cos+0x148>)
 800eeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeee:	f7f1 f9cd 	bl	800028c <__adddf3>
 800eef2:	4622      	mov	r2, r4
 800eef4:	462b      	mov	r3, r5
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	a33b      	add	r3, pc, #236	; (adr r3, 800efe8 <__kernel_cos+0x150>)
 800eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef00:	f7f1 f9c2 	bl	8000288 <__aeabi_dsub>
 800ef04:	4622      	mov	r2, r4
 800ef06:	462b      	mov	r3, r5
 800ef08:	f7f1 fb76 	bl	80005f8 <__aeabi_dmul>
 800ef0c:	a338      	add	r3, pc, #224	; (adr r3, 800eff0 <__kernel_cos+0x158>)
 800ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef12:	f7f1 f9bb 	bl	800028c <__adddf3>
 800ef16:	4622      	mov	r2, r4
 800ef18:	462b      	mov	r3, r5
 800ef1a:	f7f1 fb6d 	bl	80005f8 <__aeabi_dmul>
 800ef1e:	a336      	add	r3, pc, #216	; (adr r3, 800eff8 <__kernel_cos+0x160>)
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	f7f1 f9b0 	bl	8000288 <__aeabi_dsub>
 800ef28:	4622      	mov	r2, r4
 800ef2a:	462b      	mov	r3, r5
 800ef2c:	f7f1 fb64 	bl	80005f8 <__aeabi_dmul>
 800ef30:	a333      	add	r3, pc, #204	; (adr r3, 800f000 <__kernel_cos+0x168>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 f9a9 	bl	800028c <__adddf3>
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	f7f1 fb5b 	bl	80005f8 <__aeabi_dmul>
 800ef42:	4622      	mov	r2, r4
 800ef44:	462b      	mov	r3, r5
 800ef46:	f7f1 fb57 	bl	80005f8 <__aeabi_dmul>
 800ef4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef4e:	4604      	mov	r4, r0
 800ef50:	460d      	mov	r5, r1
 800ef52:	4630      	mov	r0, r6
 800ef54:	4639      	mov	r1, r7
 800ef56:	f7f1 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4620      	mov	r0, r4
 800ef62:	f7f1 f991 	bl	8000288 <__aeabi_dsub>
 800ef66:	4b2b      	ldr	r3, [pc, #172]	; (800f014 <__kernel_cos+0x17c>)
 800ef68:	4598      	cmp	r8, r3
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	460f      	mov	r7, r1
 800ef6e:	dc10      	bgt.n	800ef92 <__kernel_cos+0xfa>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	4650      	mov	r0, sl
 800ef76:	4659      	mov	r1, fp
 800ef78:	f7f1 f986 	bl	8000288 <__aeabi_dsub>
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	4926      	ldr	r1, [pc, #152]	; (800f018 <__kernel_cos+0x180>)
 800ef80:	4602      	mov	r2, r0
 800ef82:	2000      	movs	r0, #0
 800ef84:	f7f1 f980 	bl	8000288 <__aeabi_dsub>
 800ef88:	ec41 0b10 	vmov	d0, r0, r1
 800ef8c:	b003      	add	sp, #12
 800ef8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef92:	4b22      	ldr	r3, [pc, #136]	; (800f01c <__kernel_cos+0x184>)
 800ef94:	4920      	ldr	r1, [pc, #128]	; (800f018 <__kernel_cos+0x180>)
 800ef96:	4598      	cmp	r8, r3
 800ef98:	bfcc      	ite	gt
 800ef9a:	4d21      	ldrgt	r5, [pc, #132]	; (800f020 <__kernel_cos+0x188>)
 800ef9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800efa0:	2400      	movs	r4, #0
 800efa2:	4622      	mov	r2, r4
 800efa4:	462b      	mov	r3, r5
 800efa6:	2000      	movs	r0, #0
 800efa8:	f7f1 f96e 	bl	8000288 <__aeabi_dsub>
 800efac:	4622      	mov	r2, r4
 800efae:	4680      	mov	r8, r0
 800efb0:	4689      	mov	r9, r1
 800efb2:	462b      	mov	r3, r5
 800efb4:	4650      	mov	r0, sl
 800efb6:	4659      	mov	r1, fp
 800efb8:	f7f1 f966 	bl	8000288 <__aeabi_dsub>
 800efbc:	4632      	mov	r2, r6
 800efbe:	463b      	mov	r3, r7
 800efc0:	f7f1 f962 	bl	8000288 <__aeabi_dsub>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	4640      	mov	r0, r8
 800efca:	4649      	mov	r1, r9
 800efcc:	e7da      	b.n	800ef84 <__kernel_cos+0xec>
 800efce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f008 <__kernel_cos+0x170>
 800efd2:	e7db      	b.n	800ef8c <__kernel_cos+0xf4>
 800efd4:	f3af 8000 	nop.w
 800efd8:	be8838d4 	.word	0xbe8838d4
 800efdc:	bda8fae9 	.word	0xbda8fae9
 800efe0:	bdb4b1c4 	.word	0xbdb4b1c4
 800efe4:	3e21ee9e 	.word	0x3e21ee9e
 800efe8:	809c52ad 	.word	0x809c52ad
 800efec:	3e927e4f 	.word	0x3e927e4f
 800eff0:	19cb1590 	.word	0x19cb1590
 800eff4:	3efa01a0 	.word	0x3efa01a0
 800eff8:	16c15177 	.word	0x16c15177
 800effc:	3f56c16c 	.word	0x3f56c16c
 800f000:	5555554c 	.word	0x5555554c
 800f004:	3fa55555 	.word	0x3fa55555
 800f008:	00000000 	.word	0x00000000
 800f00c:	3ff00000 	.word	0x3ff00000
 800f010:	3fe00000 	.word	0x3fe00000
 800f014:	3fd33332 	.word	0x3fd33332
 800f018:	3ff00000 	.word	0x3ff00000
 800f01c:	3fe90000 	.word	0x3fe90000
 800f020:	3fd20000 	.word	0x3fd20000
 800f024:	00000000 	.word	0x00000000

0800f028 <__kernel_sin>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	ed2d 8b04 	vpush	{d8-d9}
 800f030:	eeb0 8a41 	vmov.f32	s16, s2
 800f034:	eef0 8a61 	vmov.f32	s17, s3
 800f038:	ec55 4b10 	vmov	r4, r5, d0
 800f03c:	b083      	sub	sp, #12
 800f03e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f042:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f046:	9001      	str	r0, [sp, #4]
 800f048:	da06      	bge.n	800f058 <__kernel_sin+0x30>
 800f04a:	ee10 0a10 	vmov	r0, s0
 800f04e:	4629      	mov	r1, r5
 800f050:	f7f1 fd82 	bl	8000b58 <__aeabi_d2iz>
 800f054:	2800      	cmp	r0, #0
 800f056:	d051      	beq.n	800f0fc <__kernel_sin+0xd4>
 800f058:	4622      	mov	r2, r4
 800f05a:	462b      	mov	r3, r5
 800f05c:	4620      	mov	r0, r4
 800f05e:	4629      	mov	r1, r5
 800f060:	f7f1 faca 	bl	80005f8 <__aeabi_dmul>
 800f064:	4682      	mov	sl, r0
 800f066:	468b      	mov	fp, r1
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 fac2 	bl	80005f8 <__aeabi_dmul>
 800f074:	a341      	add	r3, pc, #260	; (adr r3, 800f17c <__kernel_sin+0x154>)
 800f076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07a:	4680      	mov	r8, r0
 800f07c:	4689      	mov	r9, r1
 800f07e:	4650      	mov	r0, sl
 800f080:	4659      	mov	r1, fp
 800f082:	f7f1 fab9 	bl	80005f8 <__aeabi_dmul>
 800f086:	a33f      	add	r3, pc, #252	; (adr r3, 800f184 <__kernel_sin+0x15c>)
 800f088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08c:	f7f1 f8fc 	bl	8000288 <__aeabi_dsub>
 800f090:	4652      	mov	r2, sl
 800f092:	465b      	mov	r3, fp
 800f094:	f7f1 fab0 	bl	80005f8 <__aeabi_dmul>
 800f098:	a33c      	add	r3, pc, #240	; (adr r3, 800f18c <__kernel_sin+0x164>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f7f1 f8f5 	bl	800028c <__adddf3>
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	465b      	mov	r3, fp
 800f0a6:	f7f1 faa7 	bl	80005f8 <__aeabi_dmul>
 800f0aa:	a33a      	add	r3, pc, #232	; (adr r3, 800f194 <__kernel_sin+0x16c>)
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	f7f1 f8ea 	bl	8000288 <__aeabi_dsub>
 800f0b4:	4652      	mov	r2, sl
 800f0b6:	465b      	mov	r3, fp
 800f0b8:	f7f1 fa9e 	bl	80005f8 <__aeabi_dmul>
 800f0bc:	a337      	add	r3, pc, #220	; (adr r3, 800f19c <__kernel_sin+0x174>)
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	f7f1 f8e3 	bl	800028c <__adddf3>
 800f0c6:	9b01      	ldr	r3, [sp, #4]
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	460f      	mov	r7, r1
 800f0cc:	b9eb      	cbnz	r3, 800f10a <__kernel_sin+0xe2>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	4659      	mov	r1, fp
 800f0d6:	f7f1 fa8f 	bl	80005f8 <__aeabi_dmul>
 800f0da:	a325      	add	r3, pc, #148	; (adr r3, 800f170 <__kernel_sin+0x148>)
 800f0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e0:	f7f1 f8d2 	bl	8000288 <__aeabi_dsub>
 800f0e4:	4642      	mov	r2, r8
 800f0e6:	464b      	mov	r3, r9
 800f0e8:	f7f1 fa86 	bl	80005f8 <__aeabi_dmul>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	f7f1 f8ca 	bl	800028c <__adddf3>
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	ec45 4b10 	vmov	d0, r4, r5
 800f100:	b003      	add	sp, #12
 800f102:	ecbd 8b04 	vpop	{d8-d9}
 800f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10a:	4b1b      	ldr	r3, [pc, #108]	; (800f178 <__kernel_sin+0x150>)
 800f10c:	ec51 0b18 	vmov	r0, r1, d8
 800f110:	2200      	movs	r2, #0
 800f112:	f7f1 fa71 	bl	80005f8 <__aeabi_dmul>
 800f116:	4632      	mov	r2, r6
 800f118:	ec41 0b19 	vmov	d9, r0, r1
 800f11c:	463b      	mov	r3, r7
 800f11e:	4640      	mov	r0, r8
 800f120:	4649      	mov	r1, r9
 800f122:	f7f1 fa69 	bl	80005f8 <__aeabi_dmul>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	ec51 0b19 	vmov	r0, r1, d9
 800f12e:	f7f1 f8ab 	bl	8000288 <__aeabi_dsub>
 800f132:	4652      	mov	r2, sl
 800f134:	465b      	mov	r3, fp
 800f136:	f7f1 fa5f 	bl	80005f8 <__aeabi_dmul>
 800f13a:	ec53 2b18 	vmov	r2, r3, d8
 800f13e:	f7f1 f8a3 	bl	8000288 <__aeabi_dsub>
 800f142:	a30b      	add	r3, pc, #44	; (adr r3, 800f170 <__kernel_sin+0x148>)
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	4606      	mov	r6, r0
 800f14a:	460f      	mov	r7, r1
 800f14c:	4640      	mov	r0, r8
 800f14e:	4649      	mov	r1, r9
 800f150:	f7f1 fa52 	bl	80005f8 <__aeabi_dmul>
 800f154:	4602      	mov	r2, r0
 800f156:	460b      	mov	r3, r1
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7f1 f896 	bl	800028c <__adddf3>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	4620      	mov	r0, r4
 800f166:	4629      	mov	r1, r5
 800f168:	f7f1 f88e 	bl	8000288 <__aeabi_dsub>
 800f16c:	e7c4      	b.n	800f0f8 <__kernel_sin+0xd0>
 800f16e:	bf00      	nop
 800f170:	55555549 	.word	0x55555549
 800f174:	3fc55555 	.word	0x3fc55555
 800f178:	3fe00000 	.word	0x3fe00000
 800f17c:	5acfd57c 	.word	0x5acfd57c
 800f180:	3de5d93a 	.word	0x3de5d93a
 800f184:	8a2b9ceb 	.word	0x8a2b9ceb
 800f188:	3e5ae5e6 	.word	0x3e5ae5e6
 800f18c:	57b1fe7d 	.word	0x57b1fe7d
 800f190:	3ec71de3 	.word	0x3ec71de3
 800f194:	19c161d5 	.word	0x19c161d5
 800f198:	3f2a01a0 	.word	0x3f2a01a0
 800f19c:	1110f8a6 	.word	0x1110f8a6
 800f1a0:	3f811111 	.word	0x3f811111
 800f1a4:	00000000 	.word	0x00000000

0800f1a8 <__ieee754_rem_pio2>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	ed2d 8b02 	vpush	{d8}
 800f1b0:	ec55 4b10 	vmov	r4, r5, d0
 800f1b4:	4bca      	ldr	r3, [pc, #808]	; (800f4e0 <__ieee754_rem_pio2+0x338>)
 800f1b6:	b08b      	sub	sp, #44	; 0x2c
 800f1b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f1bc:	4598      	cmp	r8, r3
 800f1be:	4682      	mov	sl, r0
 800f1c0:	9502      	str	r5, [sp, #8]
 800f1c2:	dc08      	bgt.n	800f1d6 <__ieee754_rem_pio2+0x2e>
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	ed80 0b00 	vstr	d0, [r0]
 800f1cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f1d0:	f04f 0b00 	mov.w	fp, #0
 800f1d4:	e028      	b.n	800f228 <__ieee754_rem_pio2+0x80>
 800f1d6:	4bc3      	ldr	r3, [pc, #780]	; (800f4e4 <__ieee754_rem_pio2+0x33c>)
 800f1d8:	4598      	cmp	r8, r3
 800f1da:	dc78      	bgt.n	800f2ce <__ieee754_rem_pio2+0x126>
 800f1dc:	9b02      	ldr	r3, [sp, #8]
 800f1de:	4ec2      	ldr	r6, [pc, #776]	; (800f4e8 <__ieee754_rem_pio2+0x340>)
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	ee10 0a10 	vmov	r0, s0
 800f1e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800f4a8 <__ieee754_rem_pio2+0x300>)
 800f1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	dd39      	ble.n	800f264 <__ieee754_rem_pio2+0xbc>
 800f1f0:	f7f1 f84a 	bl	8000288 <__aeabi_dsub>
 800f1f4:	45b0      	cmp	r8, r6
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	d01b      	beq.n	800f234 <__ieee754_rem_pio2+0x8c>
 800f1fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800f4b0 <__ieee754_rem_pio2+0x308>)
 800f1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f202:	f7f1 f841 	bl	8000288 <__aeabi_dsub>
 800f206:	4602      	mov	r2, r0
 800f208:	460b      	mov	r3, r1
 800f20a:	e9ca 2300 	strd	r2, r3, [sl]
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	f7f1 f839 	bl	8000288 <__aeabi_dsub>
 800f216:	a3a6      	add	r3, pc, #664	; (adr r3, 800f4b0 <__ieee754_rem_pio2+0x308>)
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f7f1 f834 	bl	8000288 <__aeabi_dsub>
 800f220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f224:	f04f 0b01 	mov.w	fp, #1
 800f228:	4658      	mov	r0, fp
 800f22a:	b00b      	add	sp, #44	; 0x2c
 800f22c:	ecbd 8b02 	vpop	{d8}
 800f230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f234:	a3a0      	add	r3, pc, #640	; (adr r3, 800f4b8 <__ieee754_rem_pio2+0x310>)
 800f236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23a:	f7f1 f825 	bl	8000288 <__aeabi_dsub>
 800f23e:	a3a0      	add	r3, pc, #640	; (adr r3, 800f4c0 <__ieee754_rem_pio2+0x318>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	4604      	mov	r4, r0
 800f246:	460d      	mov	r5, r1
 800f248:	f7f1 f81e 	bl	8000288 <__aeabi_dsub>
 800f24c:	4602      	mov	r2, r0
 800f24e:	460b      	mov	r3, r1
 800f250:	e9ca 2300 	strd	r2, r3, [sl]
 800f254:	4620      	mov	r0, r4
 800f256:	4629      	mov	r1, r5
 800f258:	f7f1 f816 	bl	8000288 <__aeabi_dsub>
 800f25c:	a398      	add	r3, pc, #608	; (adr r3, 800f4c0 <__ieee754_rem_pio2+0x318>)
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	e7db      	b.n	800f21c <__ieee754_rem_pio2+0x74>
 800f264:	f7f1 f812 	bl	800028c <__adddf3>
 800f268:	45b0      	cmp	r8, r6
 800f26a:	4604      	mov	r4, r0
 800f26c:	460d      	mov	r5, r1
 800f26e:	d016      	beq.n	800f29e <__ieee754_rem_pio2+0xf6>
 800f270:	a38f      	add	r3, pc, #572	; (adr r3, 800f4b0 <__ieee754_rem_pio2+0x308>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f7f1 f809 	bl	800028c <__adddf3>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	e9ca 2300 	strd	r2, r3, [sl]
 800f282:	4620      	mov	r0, r4
 800f284:	4629      	mov	r1, r5
 800f286:	f7f0 ffff 	bl	8000288 <__aeabi_dsub>
 800f28a:	a389      	add	r3, pc, #548	; (adr r3, 800f4b0 <__ieee754_rem_pio2+0x308>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	f7f0 fffc 	bl	800028c <__adddf3>
 800f294:	f04f 3bff 	mov.w	fp, #4294967295
 800f298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f29c:	e7c4      	b.n	800f228 <__ieee754_rem_pio2+0x80>
 800f29e:	a386      	add	r3, pc, #536	; (adr r3, 800f4b8 <__ieee754_rem_pio2+0x310>)
 800f2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a4:	f7f0 fff2 	bl	800028c <__adddf3>
 800f2a8:	a385      	add	r3, pc, #532	; (adr r3, 800f4c0 <__ieee754_rem_pio2+0x318>)
 800f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	460d      	mov	r5, r1
 800f2b2:	f7f0 ffeb 	bl	800028c <__adddf3>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	e9ca 2300 	strd	r2, r3, [sl]
 800f2be:	4620      	mov	r0, r4
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	f7f0 ffe1 	bl	8000288 <__aeabi_dsub>
 800f2c6:	a37e      	add	r3, pc, #504	; (adr r3, 800f4c0 <__ieee754_rem_pio2+0x318>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	e7e0      	b.n	800f290 <__ieee754_rem_pio2+0xe8>
 800f2ce:	4b87      	ldr	r3, [pc, #540]	; (800f4ec <__ieee754_rem_pio2+0x344>)
 800f2d0:	4598      	cmp	r8, r3
 800f2d2:	f300 80d8 	bgt.w	800f486 <__ieee754_rem_pio2+0x2de>
 800f2d6:	f7ff fcfb 	bl	800ecd0 <fabs>
 800f2da:	ec55 4b10 	vmov	r4, r5, d0
 800f2de:	ee10 0a10 	vmov	r0, s0
 800f2e2:	a379      	add	r3, pc, #484	; (adr r3, 800f4c8 <__ieee754_rem_pio2+0x320>)
 800f2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f1 f985 	bl	80005f8 <__aeabi_dmul>
 800f2ee:	4b80      	ldr	r3, [pc, #512]	; (800f4f0 <__ieee754_rem_pio2+0x348>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f7f0 ffcb 	bl	800028c <__adddf3>
 800f2f6:	f7f1 fc2f 	bl	8000b58 <__aeabi_d2iz>
 800f2fa:	4683      	mov	fp, r0
 800f2fc:	f7f1 f912 	bl	8000524 <__aeabi_i2d>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	ec43 2b18 	vmov	d8, r2, r3
 800f308:	a367      	add	r3, pc, #412	; (adr r3, 800f4a8 <__ieee754_rem_pio2+0x300>)
 800f30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30e:	f7f1 f973 	bl	80005f8 <__aeabi_dmul>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	4620      	mov	r0, r4
 800f318:	4629      	mov	r1, r5
 800f31a:	f7f0 ffb5 	bl	8000288 <__aeabi_dsub>
 800f31e:	a364      	add	r3, pc, #400	; (adr r3, 800f4b0 <__ieee754_rem_pio2+0x308>)
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	4606      	mov	r6, r0
 800f326:	460f      	mov	r7, r1
 800f328:	ec51 0b18 	vmov	r0, r1, d8
 800f32c:	f7f1 f964 	bl	80005f8 <__aeabi_dmul>
 800f330:	f1bb 0f1f 	cmp.w	fp, #31
 800f334:	4604      	mov	r4, r0
 800f336:	460d      	mov	r5, r1
 800f338:	dc0d      	bgt.n	800f356 <__ieee754_rem_pio2+0x1ae>
 800f33a:	4b6e      	ldr	r3, [pc, #440]	; (800f4f4 <__ieee754_rem_pio2+0x34c>)
 800f33c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f344:	4543      	cmp	r3, r8
 800f346:	d006      	beq.n	800f356 <__ieee754_rem_pio2+0x1ae>
 800f348:	4622      	mov	r2, r4
 800f34a:	462b      	mov	r3, r5
 800f34c:	4630      	mov	r0, r6
 800f34e:	4639      	mov	r1, r7
 800f350:	f7f0 ff9a 	bl	8000288 <__aeabi_dsub>
 800f354:	e00e      	b.n	800f374 <__ieee754_rem_pio2+0x1cc>
 800f356:	462b      	mov	r3, r5
 800f358:	4622      	mov	r2, r4
 800f35a:	4630      	mov	r0, r6
 800f35c:	4639      	mov	r1, r7
 800f35e:	f7f0 ff93 	bl	8000288 <__aeabi_dsub>
 800f362:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f366:	9303      	str	r3, [sp, #12]
 800f368:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f36c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f370:	2b10      	cmp	r3, #16
 800f372:	dc02      	bgt.n	800f37a <__ieee754_rem_pio2+0x1d2>
 800f374:	e9ca 0100 	strd	r0, r1, [sl]
 800f378:	e039      	b.n	800f3ee <__ieee754_rem_pio2+0x246>
 800f37a:	a34f      	add	r3, pc, #316	; (adr r3, 800f4b8 <__ieee754_rem_pio2+0x310>)
 800f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f380:	ec51 0b18 	vmov	r0, r1, d8
 800f384:	f7f1 f938 	bl	80005f8 <__aeabi_dmul>
 800f388:	4604      	mov	r4, r0
 800f38a:	460d      	mov	r5, r1
 800f38c:	4602      	mov	r2, r0
 800f38e:	460b      	mov	r3, r1
 800f390:	4630      	mov	r0, r6
 800f392:	4639      	mov	r1, r7
 800f394:	f7f0 ff78 	bl	8000288 <__aeabi_dsub>
 800f398:	4602      	mov	r2, r0
 800f39a:	460b      	mov	r3, r1
 800f39c:	4680      	mov	r8, r0
 800f39e:	4689      	mov	r9, r1
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f0 ff70 	bl	8000288 <__aeabi_dsub>
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	f7f0 ff6c 	bl	8000288 <__aeabi_dsub>
 800f3b0:	a343      	add	r3, pc, #268	; (adr r3, 800f4c0 <__ieee754_rem_pio2+0x318>)
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	460d      	mov	r5, r1
 800f3ba:	ec51 0b18 	vmov	r0, r1, d8
 800f3be:	f7f1 f91b 	bl	80005f8 <__aeabi_dmul>
 800f3c2:	4622      	mov	r2, r4
 800f3c4:	462b      	mov	r3, r5
 800f3c6:	f7f0 ff5f 	bl	8000288 <__aeabi_dsub>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	4640      	mov	r0, r8
 800f3d4:	4649      	mov	r1, r9
 800f3d6:	f7f0 ff57 	bl	8000288 <__aeabi_dsub>
 800f3da:	9a03      	ldr	r2, [sp, #12]
 800f3dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	2b31      	cmp	r3, #49	; 0x31
 800f3e4:	dc24      	bgt.n	800f430 <__ieee754_rem_pio2+0x288>
 800f3e6:	e9ca 0100 	strd	r0, r1, [sl]
 800f3ea:	4646      	mov	r6, r8
 800f3ec:	464f      	mov	r7, r9
 800f3ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	4642      	mov	r2, r8
 800f3f6:	464b      	mov	r3, r9
 800f3f8:	4639      	mov	r1, r7
 800f3fa:	f7f0 ff45 	bl	8000288 <__aeabi_dsub>
 800f3fe:	462b      	mov	r3, r5
 800f400:	4622      	mov	r2, r4
 800f402:	f7f0 ff41 	bl	8000288 <__aeabi_dsub>
 800f406:	9b02      	ldr	r3, [sp, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f40e:	f6bf af0b 	bge.w	800f228 <__ieee754_rem_pio2+0x80>
 800f412:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f416:	f8ca 3004 	str.w	r3, [sl, #4]
 800f41a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f41e:	f8ca 8000 	str.w	r8, [sl]
 800f422:	f8ca 0008 	str.w	r0, [sl, #8]
 800f426:	f8ca 300c 	str.w	r3, [sl, #12]
 800f42a:	f1cb 0b00 	rsb	fp, fp, #0
 800f42e:	e6fb      	b.n	800f228 <__ieee754_rem_pio2+0x80>
 800f430:	a327      	add	r3, pc, #156	; (adr r3, 800f4d0 <__ieee754_rem_pio2+0x328>)
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	ec51 0b18 	vmov	r0, r1, d8
 800f43a:	f7f1 f8dd 	bl	80005f8 <__aeabi_dmul>
 800f43e:	4604      	mov	r4, r0
 800f440:	460d      	mov	r5, r1
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4640      	mov	r0, r8
 800f448:	4649      	mov	r1, r9
 800f44a:	f7f0 ff1d 	bl	8000288 <__aeabi_dsub>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	4606      	mov	r6, r0
 800f454:	460f      	mov	r7, r1
 800f456:	4640      	mov	r0, r8
 800f458:	4649      	mov	r1, r9
 800f45a:	f7f0 ff15 	bl	8000288 <__aeabi_dsub>
 800f45e:	4622      	mov	r2, r4
 800f460:	462b      	mov	r3, r5
 800f462:	f7f0 ff11 	bl	8000288 <__aeabi_dsub>
 800f466:	a31c      	add	r3, pc, #112	; (adr r3, 800f4d8 <__ieee754_rem_pio2+0x330>)
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	4604      	mov	r4, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	ec51 0b18 	vmov	r0, r1, d8
 800f474:	f7f1 f8c0 	bl	80005f8 <__aeabi_dmul>
 800f478:	4622      	mov	r2, r4
 800f47a:	462b      	mov	r3, r5
 800f47c:	f7f0 ff04 	bl	8000288 <__aeabi_dsub>
 800f480:	4604      	mov	r4, r0
 800f482:	460d      	mov	r5, r1
 800f484:	e760      	b.n	800f348 <__ieee754_rem_pio2+0x1a0>
 800f486:	4b1c      	ldr	r3, [pc, #112]	; (800f4f8 <__ieee754_rem_pio2+0x350>)
 800f488:	4598      	cmp	r8, r3
 800f48a:	dd37      	ble.n	800f4fc <__ieee754_rem_pio2+0x354>
 800f48c:	ee10 2a10 	vmov	r2, s0
 800f490:	462b      	mov	r3, r5
 800f492:	4620      	mov	r0, r4
 800f494:	4629      	mov	r1, r5
 800f496:	f7f0 fef7 	bl	8000288 <__aeabi_dsub>
 800f49a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f49e:	e9ca 0100 	strd	r0, r1, [sl]
 800f4a2:	e695      	b.n	800f1d0 <__ieee754_rem_pio2+0x28>
 800f4a4:	f3af 8000 	nop.w
 800f4a8:	54400000 	.word	0x54400000
 800f4ac:	3ff921fb 	.word	0x3ff921fb
 800f4b0:	1a626331 	.word	0x1a626331
 800f4b4:	3dd0b461 	.word	0x3dd0b461
 800f4b8:	1a600000 	.word	0x1a600000
 800f4bc:	3dd0b461 	.word	0x3dd0b461
 800f4c0:	2e037073 	.word	0x2e037073
 800f4c4:	3ba3198a 	.word	0x3ba3198a
 800f4c8:	6dc9c883 	.word	0x6dc9c883
 800f4cc:	3fe45f30 	.word	0x3fe45f30
 800f4d0:	2e000000 	.word	0x2e000000
 800f4d4:	3ba3198a 	.word	0x3ba3198a
 800f4d8:	252049c1 	.word	0x252049c1
 800f4dc:	397b839a 	.word	0x397b839a
 800f4e0:	3fe921fb 	.word	0x3fe921fb
 800f4e4:	4002d97b 	.word	0x4002d97b
 800f4e8:	3ff921fb 	.word	0x3ff921fb
 800f4ec:	413921fb 	.word	0x413921fb
 800f4f0:	3fe00000 	.word	0x3fe00000
 800f4f4:	08010260 	.word	0x08010260
 800f4f8:	7fefffff 	.word	0x7fefffff
 800f4fc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f500:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f504:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f508:	4620      	mov	r0, r4
 800f50a:	460d      	mov	r5, r1
 800f50c:	f7f1 fb24 	bl	8000b58 <__aeabi_d2iz>
 800f510:	f7f1 f808 	bl	8000524 <__aeabi_i2d>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	4620      	mov	r0, r4
 800f51a:	4629      	mov	r1, r5
 800f51c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f520:	f7f0 feb2 	bl	8000288 <__aeabi_dsub>
 800f524:	4b21      	ldr	r3, [pc, #132]	; (800f5ac <__ieee754_rem_pio2+0x404>)
 800f526:	2200      	movs	r2, #0
 800f528:	f7f1 f866 	bl	80005f8 <__aeabi_dmul>
 800f52c:	460d      	mov	r5, r1
 800f52e:	4604      	mov	r4, r0
 800f530:	f7f1 fb12 	bl	8000b58 <__aeabi_d2iz>
 800f534:	f7f0 fff6 	bl	8000524 <__aeabi_i2d>
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	4620      	mov	r0, r4
 800f53e:	4629      	mov	r1, r5
 800f540:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f544:	f7f0 fea0 	bl	8000288 <__aeabi_dsub>
 800f548:	4b18      	ldr	r3, [pc, #96]	; (800f5ac <__ieee754_rem_pio2+0x404>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	f7f1 f854 	bl	80005f8 <__aeabi_dmul>
 800f550:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f554:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f558:	2703      	movs	r7, #3
 800f55a:	2400      	movs	r4, #0
 800f55c:	2500      	movs	r5, #0
 800f55e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f562:	4622      	mov	r2, r4
 800f564:	462b      	mov	r3, r5
 800f566:	46b9      	mov	r9, r7
 800f568:	3f01      	subs	r7, #1
 800f56a:	f7f1 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800f56e:	2800      	cmp	r0, #0
 800f570:	d1f5      	bne.n	800f55e <__ieee754_rem_pio2+0x3b6>
 800f572:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <__ieee754_rem_pio2+0x408>)
 800f574:	9301      	str	r3, [sp, #4]
 800f576:	2302      	movs	r3, #2
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	4632      	mov	r2, r6
 800f57c:	464b      	mov	r3, r9
 800f57e:	4651      	mov	r1, sl
 800f580:	a804      	add	r0, sp, #16
 800f582:	f000 f819 	bl	800f5b8 <__kernel_rem_pio2>
 800f586:	9b02      	ldr	r3, [sp, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	4683      	mov	fp, r0
 800f58c:	f6bf ae4c 	bge.w	800f228 <__ieee754_rem_pio2+0x80>
 800f590:	e9da 2100 	ldrd	r2, r1, [sl]
 800f594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f598:	e9ca 2300 	strd	r2, r3, [sl]
 800f59c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f5a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5a4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f5a8:	e73f      	b.n	800f42a <__ieee754_rem_pio2+0x282>
 800f5aa:	bf00      	nop
 800f5ac:	41700000 	.word	0x41700000
 800f5b0:	080102e0 	.word	0x080102e0
 800f5b4:	00000000 	.word	0x00000000

0800f5b8 <__kernel_rem_pio2>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	ed2d 8b02 	vpush	{d8}
 800f5c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f5c4:	f112 0f14 	cmn.w	r2, #20
 800f5c8:	9306      	str	r3, [sp, #24]
 800f5ca:	9104      	str	r1, [sp, #16]
 800f5cc:	4bc2      	ldr	r3, [pc, #776]	; (800f8d8 <__kernel_rem_pio2+0x320>)
 800f5ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f5d0:	9009      	str	r0, [sp, #36]	; 0x24
 800f5d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	9b06      	ldr	r3, [sp, #24]
 800f5da:	f103 33ff 	add.w	r3, r3, #4294967295
 800f5de:	bfa8      	it	ge
 800f5e0:	1ed4      	subge	r4, r2, #3
 800f5e2:	9305      	str	r3, [sp, #20]
 800f5e4:	bfb2      	itee	lt
 800f5e6:	2400      	movlt	r4, #0
 800f5e8:	2318      	movge	r3, #24
 800f5ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800f5ee:	f06f 0317 	mvn.w	r3, #23
 800f5f2:	fb04 3303 	mla	r3, r4, r3, r3
 800f5f6:	eb03 0a02 	add.w	sl, r3, r2
 800f5fa:	9b00      	ldr	r3, [sp, #0]
 800f5fc:	9a05      	ldr	r2, [sp, #20]
 800f5fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f8c8 <__kernel_rem_pio2+0x310>
 800f602:	eb03 0802 	add.w	r8, r3, r2
 800f606:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f608:	1aa7      	subs	r7, r4, r2
 800f60a:	ae20      	add	r6, sp, #128	; 0x80
 800f60c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f610:	2500      	movs	r5, #0
 800f612:	4545      	cmp	r5, r8
 800f614:	dd13      	ble.n	800f63e <__kernel_rem_pio2+0x86>
 800f616:	9b06      	ldr	r3, [sp, #24]
 800f618:	aa20      	add	r2, sp, #128	; 0x80
 800f61a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f61e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f622:	f04f 0800 	mov.w	r8, #0
 800f626:	9b00      	ldr	r3, [sp, #0]
 800f628:	4598      	cmp	r8, r3
 800f62a:	dc31      	bgt.n	800f690 <__kernel_rem_pio2+0xd8>
 800f62c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f8c8 <__kernel_rem_pio2+0x310>
 800f630:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f634:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f638:	462f      	mov	r7, r5
 800f63a:	2600      	movs	r6, #0
 800f63c:	e01b      	b.n	800f676 <__kernel_rem_pio2+0xbe>
 800f63e:	42ef      	cmn	r7, r5
 800f640:	d407      	bmi.n	800f652 <__kernel_rem_pio2+0x9a>
 800f642:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f646:	f7f0 ff6d 	bl	8000524 <__aeabi_i2d>
 800f64a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f64e:	3501      	adds	r5, #1
 800f650:	e7df      	b.n	800f612 <__kernel_rem_pio2+0x5a>
 800f652:	ec51 0b18 	vmov	r0, r1, d8
 800f656:	e7f8      	b.n	800f64a <__kernel_rem_pio2+0x92>
 800f658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f65c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f660:	f7f0 ffca 	bl	80005f8 <__aeabi_dmul>
 800f664:	4602      	mov	r2, r0
 800f666:	460b      	mov	r3, r1
 800f668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66c:	f7f0 fe0e 	bl	800028c <__adddf3>
 800f670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f674:	3601      	adds	r6, #1
 800f676:	9b05      	ldr	r3, [sp, #20]
 800f678:	429e      	cmp	r6, r3
 800f67a:	f1a7 0708 	sub.w	r7, r7, #8
 800f67e:	ddeb      	ble.n	800f658 <__kernel_rem_pio2+0xa0>
 800f680:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f684:	f108 0801 	add.w	r8, r8, #1
 800f688:	ecab 7b02 	vstmia	fp!, {d7}
 800f68c:	3508      	adds	r5, #8
 800f68e:	e7ca      	b.n	800f626 <__kernel_rem_pio2+0x6e>
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	aa0c      	add	r2, sp, #48	; 0x30
 800f694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f698:	930b      	str	r3, [sp, #44]	; 0x2c
 800f69a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f69c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f6a0:	9c00      	ldr	r4, [sp, #0]
 800f6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f6a4:	00e3      	lsls	r3, r4, #3
 800f6a6:	9308      	str	r3, [sp, #32]
 800f6a8:	ab98      	add	r3, sp, #608	; 0x260
 800f6aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f6b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f6b6:	ab70      	add	r3, sp, #448	; 0x1c0
 800f6b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f6bc:	46c3      	mov	fp, r8
 800f6be:	46a1      	mov	r9, r4
 800f6c0:	f1b9 0f00 	cmp.w	r9, #0
 800f6c4:	f1a5 0508 	sub.w	r5, r5, #8
 800f6c8:	dc77      	bgt.n	800f7ba <__kernel_rem_pio2+0x202>
 800f6ca:	ec47 6b10 	vmov	d0, r6, r7
 800f6ce:	4650      	mov	r0, sl
 800f6d0:	f000 fac2 	bl	800fc58 <scalbn>
 800f6d4:	ec57 6b10 	vmov	r6, r7, d0
 800f6d8:	2200      	movs	r2, #0
 800f6da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f6de:	ee10 0a10 	vmov	r0, s0
 800f6e2:	4639      	mov	r1, r7
 800f6e4:	f7f0 ff88 	bl	80005f8 <__aeabi_dmul>
 800f6e8:	ec41 0b10 	vmov	d0, r0, r1
 800f6ec:	f7ff fb54 	bl	800ed98 <floor>
 800f6f0:	4b7a      	ldr	r3, [pc, #488]	; (800f8dc <__kernel_rem_pio2+0x324>)
 800f6f2:	ec51 0b10 	vmov	r0, r1, d0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	4630      	mov	r0, r6
 800f702:	4639      	mov	r1, r7
 800f704:	f7f0 fdc0 	bl	8000288 <__aeabi_dsub>
 800f708:	460f      	mov	r7, r1
 800f70a:	4606      	mov	r6, r0
 800f70c:	f7f1 fa24 	bl	8000b58 <__aeabi_d2iz>
 800f710:	9002      	str	r0, [sp, #8]
 800f712:	f7f0 ff07 	bl	8000524 <__aeabi_i2d>
 800f716:	4602      	mov	r2, r0
 800f718:	460b      	mov	r3, r1
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f0 fdb3 	bl	8000288 <__aeabi_dsub>
 800f722:	f1ba 0f00 	cmp.w	sl, #0
 800f726:	4606      	mov	r6, r0
 800f728:	460f      	mov	r7, r1
 800f72a:	dd6d      	ble.n	800f808 <__kernel_rem_pio2+0x250>
 800f72c:	1e61      	subs	r1, r4, #1
 800f72e:	ab0c      	add	r3, sp, #48	; 0x30
 800f730:	9d02      	ldr	r5, [sp, #8]
 800f732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f736:	f1ca 0018 	rsb	r0, sl, #24
 800f73a:	fa43 f200 	asr.w	r2, r3, r0
 800f73e:	4415      	add	r5, r2
 800f740:	4082      	lsls	r2, r0
 800f742:	1a9b      	subs	r3, r3, r2
 800f744:	aa0c      	add	r2, sp, #48	; 0x30
 800f746:	9502      	str	r5, [sp, #8]
 800f748:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f74c:	f1ca 0217 	rsb	r2, sl, #23
 800f750:	fa43 fb02 	asr.w	fp, r3, r2
 800f754:	f1bb 0f00 	cmp.w	fp, #0
 800f758:	dd65      	ble.n	800f826 <__kernel_rem_pio2+0x26e>
 800f75a:	9b02      	ldr	r3, [sp, #8]
 800f75c:	2200      	movs	r2, #0
 800f75e:	3301      	adds	r3, #1
 800f760:	9302      	str	r3, [sp, #8]
 800f762:	4615      	mov	r5, r2
 800f764:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f768:	4294      	cmp	r4, r2
 800f76a:	f300 809f 	bgt.w	800f8ac <__kernel_rem_pio2+0x2f4>
 800f76e:	f1ba 0f00 	cmp.w	sl, #0
 800f772:	dd07      	ble.n	800f784 <__kernel_rem_pio2+0x1cc>
 800f774:	f1ba 0f01 	cmp.w	sl, #1
 800f778:	f000 80c1 	beq.w	800f8fe <__kernel_rem_pio2+0x346>
 800f77c:	f1ba 0f02 	cmp.w	sl, #2
 800f780:	f000 80c7 	beq.w	800f912 <__kernel_rem_pio2+0x35a>
 800f784:	f1bb 0f02 	cmp.w	fp, #2
 800f788:	d14d      	bne.n	800f826 <__kernel_rem_pio2+0x26e>
 800f78a:	4632      	mov	r2, r6
 800f78c:	463b      	mov	r3, r7
 800f78e:	4954      	ldr	r1, [pc, #336]	; (800f8e0 <__kernel_rem_pio2+0x328>)
 800f790:	2000      	movs	r0, #0
 800f792:	f7f0 fd79 	bl	8000288 <__aeabi_dsub>
 800f796:	4606      	mov	r6, r0
 800f798:	460f      	mov	r7, r1
 800f79a:	2d00      	cmp	r5, #0
 800f79c:	d043      	beq.n	800f826 <__kernel_rem_pio2+0x26e>
 800f79e:	4650      	mov	r0, sl
 800f7a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f8d0 <__kernel_rem_pio2+0x318>
 800f7a4:	f000 fa58 	bl	800fc58 <scalbn>
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	ec53 2b10 	vmov	r2, r3, d0
 800f7b0:	f7f0 fd6a 	bl	8000288 <__aeabi_dsub>
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	460f      	mov	r7, r1
 800f7b8:	e035      	b.n	800f826 <__kernel_rem_pio2+0x26e>
 800f7ba:	4b4a      	ldr	r3, [pc, #296]	; (800f8e4 <__kernel_rem_pio2+0x32c>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4630      	mov	r0, r6
 800f7c0:	4639      	mov	r1, r7
 800f7c2:	f7f0 ff19 	bl	80005f8 <__aeabi_dmul>
 800f7c6:	f7f1 f9c7 	bl	8000b58 <__aeabi_d2iz>
 800f7ca:	f7f0 feab 	bl	8000524 <__aeabi_i2d>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	ec43 2b18 	vmov	d8, r2, r3
 800f7d6:	4b44      	ldr	r3, [pc, #272]	; (800f8e8 <__kernel_rem_pio2+0x330>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f7f0 ff0d 	bl	80005f8 <__aeabi_dmul>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	4639      	mov	r1, r7
 800f7e6:	f7f0 fd4f 	bl	8000288 <__aeabi_dsub>
 800f7ea:	f7f1 f9b5 	bl	8000b58 <__aeabi_d2iz>
 800f7ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7f2:	f84b 0b04 	str.w	r0, [fp], #4
 800f7f6:	ec51 0b18 	vmov	r0, r1, d8
 800f7fa:	f7f0 fd47 	bl	800028c <__adddf3>
 800f7fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800f802:	4606      	mov	r6, r0
 800f804:	460f      	mov	r7, r1
 800f806:	e75b      	b.n	800f6c0 <__kernel_rem_pio2+0x108>
 800f808:	d106      	bne.n	800f818 <__kernel_rem_pio2+0x260>
 800f80a:	1e63      	subs	r3, r4, #1
 800f80c:	aa0c      	add	r2, sp, #48	; 0x30
 800f80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f812:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f816:	e79d      	b.n	800f754 <__kernel_rem_pio2+0x19c>
 800f818:	4b34      	ldr	r3, [pc, #208]	; (800f8ec <__kernel_rem_pio2+0x334>)
 800f81a:	2200      	movs	r2, #0
 800f81c:	f7f1 f972 	bl	8000b04 <__aeabi_dcmpge>
 800f820:	2800      	cmp	r0, #0
 800f822:	d140      	bne.n	800f8a6 <__kernel_rem_pio2+0x2ee>
 800f824:	4683      	mov	fp, r0
 800f826:	2200      	movs	r2, #0
 800f828:	2300      	movs	r3, #0
 800f82a:	4630      	mov	r0, r6
 800f82c:	4639      	mov	r1, r7
 800f82e:	f7f1 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f832:	2800      	cmp	r0, #0
 800f834:	f000 80c1 	beq.w	800f9ba <__kernel_rem_pio2+0x402>
 800f838:	1e65      	subs	r5, r4, #1
 800f83a:	462b      	mov	r3, r5
 800f83c:	2200      	movs	r2, #0
 800f83e:	9900      	ldr	r1, [sp, #0]
 800f840:	428b      	cmp	r3, r1
 800f842:	da6d      	bge.n	800f920 <__kernel_rem_pio2+0x368>
 800f844:	2a00      	cmp	r2, #0
 800f846:	f000 808a 	beq.w	800f95e <__kernel_rem_pio2+0x3a6>
 800f84a:	ab0c      	add	r3, sp, #48	; 0x30
 800f84c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f850:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 80ae 	beq.w	800f9b6 <__kernel_rem_pio2+0x3fe>
 800f85a:	4650      	mov	r0, sl
 800f85c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f8d0 <__kernel_rem_pio2+0x318>
 800f860:	f000 f9fa 	bl	800fc58 <scalbn>
 800f864:	1c6b      	adds	r3, r5, #1
 800f866:	00da      	lsls	r2, r3, #3
 800f868:	9205      	str	r2, [sp, #20]
 800f86a:	ec57 6b10 	vmov	r6, r7, d0
 800f86e:	aa70      	add	r2, sp, #448	; 0x1c0
 800f870:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f8e4 <__kernel_rem_pio2+0x32c>
 800f874:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f878:	462c      	mov	r4, r5
 800f87a:	f04f 0800 	mov.w	r8, #0
 800f87e:	2c00      	cmp	r4, #0
 800f880:	f280 80d4 	bge.w	800fa2c <__kernel_rem_pio2+0x474>
 800f884:	462c      	mov	r4, r5
 800f886:	2c00      	cmp	r4, #0
 800f888:	f2c0 8102 	blt.w	800fa90 <__kernel_rem_pio2+0x4d8>
 800f88c:	4b18      	ldr	r3, [pc, #96]	; (800f8f0 <__kernel_rem_pio2+0x338>)
 800f88e:	461e      	mov	r6, r3
 800f890:	ab70      	add	r3, sp, #448	; 0x1c0
 800f892:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f896:	1b2b      	subs	r3, r5, r4
 800f898:	f04f 0900 	mov.w	r9, #0
 800f89c:	f04f 0a00 	mov.w	sl, #0
 800f8a0:	2700      	movs	r7, #0
 800f8a2:	9306      	str	r3, [sp, #24]
 800f8a4:	e0e6      	b.n	800fa74 <__kernel_rem_pio2+0x4bc>
 800f8a6:	f04f 0b02 	mov.w	fp, #2
 800f8aa:	e756      	b.n	800f75a <__kernel_rem_pio2+0x1a2>
 800f8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b0:	bb05      	cbnz	r5, 800f8f4 <__kernel_rem_pio2+0x33c>
 800f8b2:	b123      	cbz	r3, 800f8be <__kernel_rem_pio2+0x306>
 800f8b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f8b8:	f8c8 3000 	str.w	r3, [r8]
 800f8bc:	2301      	movs	r3, #1
 800f8be:	3201      	adds	r2, #1
 800f8c0:	f108 0804 	add.w	r8, r8, #4
 800f8c4:	461d      	mov	r5, r3
 800f8c6:	e74f      	b.n	800f768 <__kernel_rem_pio2+0x1b0>
	...
 800f8d4:	3ff00000 	.word	0x3ff00000
 800f8d8:	08010428 	.word	0x08010428
 800f8dc:	40200000 	.word	0x40200000
 800f8e0:	3ff00000 	.word	0x3ff00000
 800f8e4:	3e700000 	.word	0x3e700000
 800f8e8:	41700000 	.word	0x41700000
 800f8ec:	3fe00000 	.word	0x3fe00000
 800f8f0:	080103e8 	.word	0x080103e8
 800f8f4:	1acb      	subs	r3, r1, r3
 800f8f6:	f8c8 3000 	str.w	r3, [r8]
 800f8fa:	462b      	mov	r3, r5
 800f8fc:	e7df      	b.n	800f8be <__kernel_rem_pio2+0x306>
 800f8fe:	1e62      	subs	r2, r4, #1
 800f900:	ab0c      	add	r3, sp, #48	; 0x30
 800f902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f906:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f90a:	a90c      	add	r1, sp, #48	; 0x30
 800f90c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f910:	e738      	b.n	800f784 <__kernel_rem_pio2+0x1cc>
 800f912:	1e62      	subs	r2, r4, #1
 800f914:	ab0c      	add	r3, sp, #48	; 0x30
 800f916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f91e:	e7f4      	b.n	800f90a <__kernel_rem_pio2+0x352>
 800f920:	a90c      	add	r1, sp, #48	; 0x30
 800f922:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f926:	3b01      	subs	r3, #1
 800f928:	430a      	orrs	r2, r1
 800f92a:	e788      	b.n	800f83e <__kernel_rem_pio2+0x286>
 800f92c:	3301      	adds	r3, #1
 800f92e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f932:	2900      	cmp	r1, #0
 800f934:	d0fa      	beq.n	800f92c <__kernel_rem_pio2+0x374>
 800f936:	9a08      	ldr	r2, [sp, #32]
 800f938:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f93c:	446a      	add	r2, sp
 800f93e:	3a98      	subs	r2, #152	; 0x98
 800f940:	9208      	str	r2, [sp, #32]
 800f942:	9a06      	ldr	r2, [sp, #24]
 800f944:	a920      	add	r1, sp, #128	; 0x80
 800f946:	18a2      	adds	r2, r4, r2
 800f948:	18e3      	adds	r3, r4, r3
 800f94a:	f104 0801 	add.w	r8, r4, #1
 800f94e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f952:	9302      	str	r3, [sp, #8]
 800f954:	9b02      	ldr	r3, [sp, #8]
 800f956:	4543      	cmp	r3, r8
 800f958:	da04      	bge.n	800f964 <__kernel_rem_pio2+0x3ac>
 800f95a:	461c      	mov	r4, r3
 800f95c:	e6a2      	b.n	800f6a4 <__kernel_rem_pio2+0xec>
 800f95e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f960:	2301      	movs	r3, #1
 800f962:	e7e4      	b.n	800f92e <__kernel_rem_pio2+0x376>
 800f964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f966:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f96a:	f7f0 fddb 	bl	8000524 <__aeabi_i2d>
 800f96e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f974:	46ab      	mov	fp, r5
 800f976:	461c      	mov	r4, r3
 800f978:	f04f 0900 	mov.w	r9, #0
 800f97c:	2600      	movs	r6, #0
 800f97e:	2700      	movs	r7, #0
 800f980:	9b05      	ldr	r3, [sp, #20]
 800f982:	4599      	cmp	r9, r3
 800f984:	dd06      	ble.n	800f994 <__kernel_rem_pio2+0x3dc>
 800f986:	9b08      	ldr	r3, [sp, #32]
 800f988:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f98c:	f108 0801 	add.w	r8, r8, #1
 800f990:	9308      	str	r3, [sp, #32]
 800f992:	e7df      	b.n	800f954 <__kernel_rem_pio2+0x39c>
 800f994:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f998:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f99c:	f7f0 fe2c 	bl	80005f8 <__aeabi_dmul>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	4639      	mov	r1, r7
 800f9a8:	f7f0 fc70 	bl	800028c <__adddf3>
 800f9ac:	f109 0901 	add.w	r9, r9, #1
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	460f      	mov	r7, r1
 800f9b4:	e7e4      	b.n	800f980 <__kernel_rem_pio2+0x3c8>
 800f9b6:	3d01      	subs	r5, #1
 800f9b8:	e747      	b.n	800f84a <__kernel_rem_pio2+0x292>
 800f9ba:	ec47 6b10 	vmov	d0, r6, r7
 800f9be:	f1ca 0000 	rsb	r0, sl, #0
 800f9c2:	f000 f949 	bl	800fc58 <scalbn>
 800f9c6:	ec57 6b10 	vmov	r6, r7, d0
 800f9ca:	4ba0      	ldr	r3, [pc, #640]	; (800fc4c <__kernel_rem_pio2+0x694>)
 800f9cc:	ee10 0a10 	vmov	r0, s0
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	4639      	mov	r1, r7
 800f9d4:	f7f1 f896 	bl	8000b04 <__aeabi_dcmpge>
 800f9d8:	b1f8      	cbz	r0, 800fa1a <__kernel_rem_pio2+0x462>
 800f9da:	4b9d      	ldr	r3, [pc, #628]	; (800fc50 <__kernel_rem_pio2+0x698>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	4630      	mov	r0, r6
 800f9e0:	4639      	mov	r1, r7
 800f9e2:	f7f0 fe09 	bl	80005f8 <__aeabi_dmul>
 800f9e6:	f7f1 f8b7 	bl	8000b58 <__aeabi_d2iz>
 800f9ea:	4680      	mov	r8, r0
 800f9ec:	f7f0 fd9a 	bl	8000524 <__aeabi_i2d>
 800f9f0:	4b96      	ldr	r3, [pc, #600]	; (800fc4c <__kernel_rem_pio2+0x694>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f7f0 fe00 	bl	80005f8 <__aeabi_dmul>
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	4639      	mov	r1, r7
 800f9fe:	4630      	mov	r0, r6
 800fa00:	f7f0 fc42 	bl	8000288 <__aeabi_dsub>
 800fa04:	f7f1 f8a8 	bl	8000b58 <__aeabi_d2iz>
 800fa08:	1c65      	adds	r5, r4, #1
 800fa0a:	ab0c      	add	r3, sp, #48	; 0x30
 800fa0c:	f10a 0a18 	add.w	sl, sl, #24
 800fa10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fa14:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fa18:	e71f      	b.n	800f85a <__kernel_rem_pio2+0x2a2>
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	4639      	mov	r1, r7
 800fa1e:	f7f1 f89b 	bl	8000b58 <__aeabi_d2iz>
 800fa22:	ab0c      	add	r3, sp, #48	; 0x30
 800fa24:	4625      	mov	r5, r4
 800fa26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fa2a:	e716      	b.n	800f85a <__kernel_rem_pio2+0x2a2>
 800fa2c:	ab0c      	add	r3, sp, #48	; 0x30
 800fa2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fa32:	f7f0 fd77 	bl	8000524 <__aeabi_i2d>
 800fa36:	4632      	mov	r2, r6
 800fa38:	463b      	mov	r3, r7
 800fa3a:	f7f0 fddd 	bl	80005f8 <__aeabi_dmul>
 800fa3e:	4642      	mov	r2, r8
 800fa40:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800fa44:	464b      	mov	r3, r9
 800fa46:	4630      	mov	r0, r6
 800fa48:	4639      	mov	r1, r7
 800fa4a:	f7f0 fdd5 	bl	80005f8 <__aeabi_dmul>
 800fa4e:	3c01      	subs	r4, #1
 800fa50:	4606      	mov	r6, r0
 800fa52:	460f      	mov	r7, r1
 800fa54:	e713      	b.n	800f87e <__kernel_rem_pio2+0x2c6>
 800fa56:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800fa5a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800fa5e:	f7f0 fdcb 	bl	80005f8 <__aeabi_dmul>
 800fa62:	4602      	mov	r2, r0
 800fa64:	460b      	mov	r3, r1
 800fa66:	4648      	mov	r0, r9
 800fa68:	4651      	mov	r1, sl
 800fa6a:	f7f0 fc0f 	bl	800028c <__adddf3>
 800fa6e:	3701      	adds	r7, #1
 800fa70:	4681      	mov	r9, r0
 800fa72:	468a      	mov	sl, r1
 800fa74:	9b00      	ldr	r3, [sp, #0]
 800fa76:	429f      	cmp	r7, r3
 800fa78:	dc02      	bgt.n	800fa80 <__kernel_rem_pio2+0x4c8>
 800fa7a:	9b06      	ldr	r3, [sp, #24]
 800fa7c:	429f      	cmp	r7, r3
 800fa7e:	ddea      	ble.n	800fa56 <__kernel_rem_pio2+0x49e>
 800fa80:	9a06      	ldr	r2, [sp, #24]
 800fa82:	ab48      	add	r3, sp, #288	; 0x120
 800fa84:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800fa88:	e9c6 9a00 	strd	r9, sl, [r6]
 800fa8c:	3c01      	subs	r4, #1
 800fa8e:	e6fa      	b.n	800f886 <__kernel_rem_pio2+0x2ce>
 800fa90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	dc0b      	bgt.n	800faae <__kernel_rem_pio2+0x4f6>
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	dc39      	bgt.n	800fb0e <__kernel_rem_pio2+0x556>
 800fa9a:	d05d      	beq.n	800fb58 <__kernel_rem_pio2+0x5a0>
 800fa9c:	9b02      	ldr	r3, [sp, #8]
 800fa9e:	f003 0007 	and.w	r0, r3, #7
 800faa2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800faa6:	ecbd 8b02 	vpop	{d8}
 800faaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fab0:	2b03      	cmp	r3, #3
 800fab2:	d1f3      	bne.n	800fa9c <__kernel_rem_pio2+0x4e4>
 800fab4:	9b05      	ldr	r3, [sp, #20]
 800fab6:	9500      	str	r5, [sp, #0]
 800fab8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fabc:	eb0d 0403 	add.w	r4, sp, r3
 800fac0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800fac4:	46a2      	mov	sl, r4
 800fac6:	9b00      	ldr	r3, [sp, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f1aa 0a08 	sub.w	sl, sl, #8
 800face:	dc69      	bgt.n	800fba4 <__kernel_rem_pio2+0x5ec>
 800fad0:	46aa      	mov	sl, r5
 800fad2:	f1ba 0f01 	cmp.w	sl, #1
 800fad6:	f1a4 0408 	sub.w	r4, r4, #8
 800fada:	f300 8083 	bgt.w	800fbe4 <__kernel_rem_pio2+0x62c>
 800fade:	9c05      	ldr	r4, [sp, #20]
 800fae0:	ab48      	add	r3, sp, #288	; 0x120
 800fae2:	441c      	add	r4, r3
 800fae4:	2000      	movs	r0, #0
 800fae6:	2100      	movs	r1, #0
 800fae8:	2d01      	cmp	r5, #1
 800faea:	f300 809a 	bgt.w	800fc22 <__kernel_rem_pio2+0x66a>
 800faee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800faf2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800faf6:	f1bb 0f00 	cmp.w	fp, #0
 800fafa:	f040 8098 	bne.w	800fc2e <__kernel_rem_pio2+0x676>
 800fafe:	9b04      	ldr	r3, [sp, #16]
 800fb00:	e9c3 7800 	strd	r7, r8, [r3]
 800fb04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fb08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fb0c:	e7c6      	b.n	800fa9c <__kernel_rem_pio2+0x4e4>
 800fb0e:	9e05      	ldr	r6, [sp, #20]
 800fb10:	ab48      	add	r3, sp, #288	; 0x120
 800fb12:	441e      	add	r6, r3
 800fb14:	462c      	mov	r4, r5
 800fb16:	2000      	movs	r0, #0
 800fb18:	2100      	movs	r1, #0
 800fb1a:	2c00      	cmp	r4, #0
 800fb1c:	da33      	bge.n	800fb86 <__kernel_rem_pio2+0x5ce>
 800fb1e:	f1bb 0f00 	cmp.w	fp, #0
 800fb22:	d036      	beq.n	800fb92 <__kernel_rem_pio2+0x5da>
 800fb24:	4602      	mov	r2, r0
 800fb26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb2a:	9c04      	ldr	r4, [sp, #16]
 800fb2c:	e9c4 2300 	strd	r2, r3, [r4]
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800fb38:	f7f0 fba6 	bl	8000288 <__aeabi_dsub>
 800fb3c:	ae4a      	add	r6, sp, #296	; 0x128
 800fb3e:	2401      	movs	r4, #1
 800fb40:	42a5      	cmp	r5, r4
 800fb42:	da29      	bge.n	800fb98 <__kernel_rem_pio2+0x5e0>
 800fb44:	f1bb 0f00 	cmp.w	fp, #0
 800fb48:	d002      	beq.n	800fb50 <__kernel_rem_pio2+0x598>
 800fb4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb4e:	4619      	mov	r1, r3
 800fb50:	9b04      	ldr	r3, [sp, #16]
 800fb52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fb56:	e7a1      	b.n	800fa9c <__kernel_rem_pio2+0x4e4>
 800fb58:	9c05      	ldr	r4, [sp, #20]
 800fb5a:	ab48      	add	r3, sp, #288	; 0x120
 800fb5c:	441c      	add	r4, r3
 800fb5e:	2000      	movs	r0, #0
 800fb60:	2100      	movs	r1, #0
 800fb62:	2d00      	cmp	r5, #0
 800fb64:	da09      	bge.n	800fb7a <__kernel_rem_pio2+0x5c2>
 800fb66:	f1bb 0f00 	cmp.w	fp, #0
 800fb6a:	d002      	beq.n	800fb72 <__kernel_rem_pio2+0x5ba>
 800fb6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb70:	4619      	mov	r1, r3
 800fb72:	9b04      	ldr	r3, [sp, #16]
 800fb74:	e9c3 0100 	strd	r0, r1, [r3]
 800fb78:	e790      	b.n	800fa9c <__kernel_rem_pio2+0x4e4>
 800fb7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fb7e:	f7f0 fb85 	bl	800028c <__adddf3>
 800fb82:	3d01      	subs	r5, #1
 800fb84:	e7ed      	b.n	800fb62 <__kernel_rem_pio2+0x5aa>
 800fb86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800fb8a:	f7f0 fb7f 	bl	800028c <__adddf3>
 800fb8e:	3c01      	subs	r4, #1
 800fb90:	e7c3      	b.n	800fb1a <__kernel_rem_pio2+0x562>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	e7c8      	b.n	800fb2a <__kernel_rem_pio2+0x572>
 800fb98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fb9c:	f7f0 fb76 	bl	800028c <__adddf3>
 800fba0:	3401      	adds	r4, #1
 800fba2:	e7cd      	b.n	800fb40 <__kernel_rem_pio2+0x588>
 800fba4:	e9da 8900 	ldrd	r8, r9, [sl]
 800fba8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fbac:	9b00      	ldr	r3, [sp, #0]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	4632      	mov	r2, r6
 800fbb4:	463b      	mov	r3, r7
 800fbb6:	4640      	mov	r0, r8
 800fbb8:	4649      	mov	r1, r9
 800fbba:	f7f0 fb67 	bl	800028c <__adddf3>
 800fbbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	4649      	mov	r1, r9
 800fbca:	f7f0 fb5d 	bl	8000288 <__aeabi_dsub>
 800fbce:	4632      	mov	r2, r6
 800fbd0:	463b      	mov	r3, r7
 800fbd2:	f7f0 fb5b 	bl	800028c <__adddf3>
 800fbd6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fbda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fbde:	ed8a 7b00 	vstr	d7, [sl]
 800fbe2:	e770      	b.n	800fac6 <__kernel_rem_pio2+0x50e>
 800fbe4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fbe8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fbec:	4640      	mov	r0, r8
 800fbee:	4632      	mov	r2, r6
 800fbf0:	463b      	mov	r3, r7
 800fbf2:	4649      	mov	r1, r9
 800fbf4:	f7f0 fb4a 	bl	800028c <__adddf3>
 800fbf8:	e9cd 0100 	strd	r0, r1, [sp]
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	4640      	mov	r0, r8
 800fc02:	4649      	mov	r1, r9
 800fc04:	f7f0 fb40 	bl	8000288 <__aeabi_dsub>
 800fc08:	4632      	mov	r2, r6
 800fc0a:	463b      	mov	r3, r7
 800fc0c:	f7f0 fb3e 	bl	800028c <__adddf3>
 800fc10:	ed9d 7b00 	vldr	d7, [sp]
 800fc14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc18:	ed84 7b00 	vstr	d7, [r4]
 800fc1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc20:	e757      	b.n	800fad2 <__kernel_rem_pio2+0x51a>
 800fc22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fc26:	f7f0 fb31 	bl	800028c <__adddf3>
 800fc2a:	3d01      	subs	r5, #1
 800fc2c:	e75c      	b.n	800fae8 <__kernel_rem_pio2+0x530>
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	9a04      	ldr	r2, [sp, #16]
 800fc32:	601f      	str	r7, [r3, #0]
 800fc34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800fc38:	605c      	str	r4, [r3, #4]
 800fc3a:	609d      	str	r5, [r3, #8]
 800fc3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fc40:	60d3      	str	r3, [r2, #12]
 800fc42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc46:	6110      	str	r0, [r2, #16]
 800fc48:	6153      	str	r3, [r2, #20]
 800fc4a:	e727      	b.n	800fa9c <__kernel_rem_pio2+0x4e4>
 800fc4c:	41700000 	.word	0x41700000
 800fc50:	3e700000 	.word	0x3e700000
 800fc54:	00000000 	.word	0x00000000

0800fc58 <scalbn>:
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	ec55 4b10 	vmov	r4, r5, d0
 800fc5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fc62:	4606      	mov	r6, r0
 800fc64:	462b      	mov	r3, r5
 800fc66:	b999      	cbnz	r1, 800fc90 <scalbn+0x38>
 800fc68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc6c:	4323      	orrs	r3, r4
 800fc6e:	d03f      	beq.n	800fcf0 <scalbn+0x98>
 800fc70:	4b35      	ldr	r3, [pc, #212]	; (800fd48 <scalbn+0xf0>)
 800fc72:	4629      	mov	r1, r5
 800fc74:	ee10 0a10 	vmov	r0, s0
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f7f0 fcbd 	bl	80005f8 <__aeabi_dmul>
 800fc7e:	4b33      	ldr	r3, [pc, #204]	; (800fd4c <scalbn+0xf4>)
 800fc80:	429e      	cmp	r6, r3
 800fc82:	4604      	mov	r4, r0
 800fc84:	460d      	mov	r5, r1
 800fc86:	da10      	bge.n	800fcaa <scalbn+0x52>
 800fc88:	a327      	add	r3, pc, #156	; (adr r3, 800fd28 <scalbn+0xd0>)
 800fc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8e:	e01f      	b.n	800fcd0 <scalbn+0x78>
 800fc90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fc94:	4291      	cmp	r1, r2
 800fc96:	d10c      	bne.n	800fcb2 <scalbn+0x5a>
 800fc98:	ee10 2a10 	vmov	r2, s0
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 faf4 	bl	800028c <__adddf3>
 800fca4:	4604      	mov	r4, r0
 800fca6:	460d      	mov	r5, r1
 800fca8:	e022      	b.n	800fcf0 <scalbn+0x98>
 800fcaa:	460b      	mov	r3, r1
 800fcac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fcb0:	3936      	subs	r1, #54	; 0x36
 800fcb2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fcb6:	4296      	cmp	r6, r2
 800fcb8:	dd0d      	ble.n	800fcd6 <scalbn+0x7e>
 800fcba:	2d00      	cmp	r5, #0
 800fcbc:	a11c      	add	r1, pc, #112	; (adr r1, 800fd30 <scalbn+0xd8>)
 800fcbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc2:	da02      	bge.n	800fcca <scalbn+0x72>
 800fcc4:	a11c      	add	r1, pc, #112	; (adr r1, 800fd38 <scalbn+0xe0>)
 800fcc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcca:	a319      	add	r3, pc, #100	; (adr r3, 800fd30 <scalbn+0xd8>)
 800fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd0:	f7f0 fc92 	bl	80005f8 <__aeabi_dmul>
 800fcd4:	e7e6      	b.n	800fca4 <scalbn+0x4c>
 800fcd6:	1872      	adds	r2, r6, r1
 800fcd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fcdc:	428a      	cmp	r2, r1
 800fcde:	dcec      	bgt.n	800fcba <scalbn+0x62>
 800fce0:	2a00      	cmp	r2, #0
 800fce2:	dd08      	ble.n	800fcf6 <scalbn+0x9e>
 800fce4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fce8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fcec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fcf0:	ec45 4b10 	vmov	d0, r4, r5
 800fcf4:	bd70      	pop	{r4, r5, r6, pc}
 800fcf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fcfa:	da08      	bge.n	800fd0e <scalbn+0xb6>
 800fcfc:	2d00      	cmp	r5, #0
 800fcfe:	a10a      	add	r1, pc, #40	; (adr r1, 800fd28 <scalbn+0xd0>)
 800fd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd04:	dac0      	bge.n	800fc88 <scalbn+0x30>
 800fd06:	a10e      	add	r1, pc, #56	; (adr r1, 800fd40 <scalbn+0xe8>)
 800fd08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd0c:	e7bc      	b.n	800fc88 <scalbn+0x30>
 800fd0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd12:	3236      	adds	r2, #54	; 0x36
 800fd14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	4b0c      	ldr	r3, [pc, #48]	; (800fd50 <scalbn+0xf8>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	e7d5      	b.n	800fcd0 <scalbn+0x78>
 800fd24:	f3af 8000 	nop.w
 800fd28:	c2f8f359 	.word	0xc2f8f359
 800fd2c:	01a56e1f 	.word	0x01a56e1f
 800fd30:	8800759c 	.word	0x8800759c
 800fd34:	7e37e43c 	.word	0x7e37e43c
 800fd38:	8800759c 	.word	0x8800759c
 800fd3c:	fe37e43c 	.word	0xfe37e43c
 800fd40:	c2f8f359 	.word	0xc2f8f359
 800fd44:	81a56e1f 	.word	0x81a56e1f
 800fd48:	43500000 	.word	0x43500000
 800fd4c:	ffff3cb0 	.word	0xffff3cb0
 800fd50:	3c900000 	.word	0x3c900000

0800fd54 <_init>:
 800fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd56:	bf00      	nop
 800fd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd5a:	bc08      	pop	{r3}
 800fd5c:	469e      	mov	lr, r3
 800fd5e:	4770      	bx	lr

0800fd60 <_fini>:
 800fd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd62:	bf00      	nop
 800fd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd66:	bc08      	pop	{r3}
 800fd68:	469e      	mov	lr, r3
 800fd6a:	4770      	bx	lr
